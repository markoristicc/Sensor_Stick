
DPSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080051e8  080051e8  000151e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080052e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080052e8  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8b2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b54  00000000  00000000  0002d952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00030018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f07  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de75  00000000  00000000  000499e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da17  00000000  00000000  0005785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003408  00000000  00000000  000f52c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051cc 	.word	0x080051cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080051cc 	.word	0x080051cc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b974 	b.w	8000e48 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468e      	mov	lr, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14d      	bne.n	8000c22 <__udivmoddi4+0xaa>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4694      	mov	ip, r2
 8000b8a:	d969      	bls.n	8000c60 <__udivmoddi4+0xe8>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b152      	cbz	r2, 8000ba8 <__udivmoddi4+0x30>
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	f1c2 0120 	rsb	r1, r2, #32
 8000b9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba6:	4094      	lsls	r4, r2
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	0c21      	lsrs	r1, r4, #16
 8000bae:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb2:	fa1f f78c 	uxth.w	r7, ip
 8000bb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bbe:	fb06 f107 	mul.w	r1, r6, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x64>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bce:	f080 811f 	bcs.w	8000e10 <__udivmoddi4+0x298>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 811c 	bls.w	8000e10 <__udivmoddi4+0x298>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 f707 	mul.w	r7, r0, r7
 8000bf0:	42a7      	cmp	r7, r4
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x92>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	f080 810a 	bcs.w	8000e14 <__udivmoddi4+0x29c>
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	f240 8107 	bls.w	8000e14 <__udivmoddi4+0x29c>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0e:	1be4      	subs	r4, r4, r7
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa4>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xc2>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80ef 	beq.w	8000e0a <__udivmoddi4+0x292>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x160>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd4>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80f9 	bhi.w	8000e3e <__udivmoddi4+0x2c6>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	469e      	mov	lr, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa4>
 8000c5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xec>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 8092 	bne.w	8000d92 <__udivmoddi4+0x21a>
 8000c6e:	eba1 010c 	sub.w	r1, r1, ip
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0c20      	lsrs	r0, r4, #16
 8000c7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c82:	fb07 1113 	mls	r1, r7, r3, r1
 8000c86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8a:	fb0e f003 	mul.w	r0, lr, r3
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x12c>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x12a>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2c0>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x156>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x154>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x9a>
 8000cd8:	f1c6 0720 	rsb	r7, r6, #32
 8000cdc:	40b3      	lsls	r3, r6
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	40f9      	lsrs	r1, r7
 8000cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfe:	0c20      	lsrs	r0, r4, #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fb09 1118 	mls	r1, r9, r8, r1
 8000d08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d10:	4288      	cmp	r0, r1
 8000d12:	fa02 f206 	lsl.w	r2, r2, r6
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b8>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2bc>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2bc>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d38:	fb09 1110 	mls	r1, r9, r0, r1
 8000d3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d44:	458e      	cmp	lr, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1e2>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2b4>
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2b4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d62:	eba1 010e 	sub.w	r1, r1, lr
 8000d66:	42a1      	cmp	r1, r4
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46a6      	mov	lr, r4
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x2a4>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x2a0>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x212>
 8000d72:	ebb3 0208 	subs.w	r2, r3, r8
 8000d76:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d82:	40f1      	lsrs	r1, r6
 8000d84:	431f      	orrs	r7, r3
 8000d86:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	40d8      	lsrs	r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000da0:	4091      	lsls	r1, r2
 8000da2:	4301      	orrs	r1, r0
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db0:	fb07 3610 	mls	r6, r7, r0, r3
 8000db4:	0c0b      	lsrs	r3, r1, #16
 8000db6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dba:	fb00 f60e 	mul.w	r6, r0, lr
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x260>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	b289      	uxth	r1, r1
 8000ddc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de0:	fb07 3316 	mls	r3, r7, r6, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x28a>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfe:	3e02      	subs	r6, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0x104>
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e705      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e3      	b.n	8000bdc <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6f8      	b.n	8000c0a <__udivmoddi4+0x92>
 8000e18:	454b      	cmp	r3, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f8>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f8>
 8000e28:	4646      	mov	r6, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x28a>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1e2>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b8>
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x12c>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e709      	b.n	8000c56 <__udivmoddi4+0xde>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x156>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <getTwosComplement>:
float initial = 0;
float altitude = 0;
float dif = 0;

void getTwosComplement(int32_t *raw, uint8_t length)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	if (*raw & ((uint32_t)1 << (length - 1)))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	fa22 f303 	lsr.w	r3, r2, r3
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00a      	beq.n	8000e84 <getTwosComplement+0x38>
	{
		*raw -= (uint32_t)1 << length;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2201      	movs	r2, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
	}
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <main>:

int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a2      	sub	sp, #136	; 0x88
 8000e94:	af04      	add	r7, sp, #16
	int k = 253952;
 8000e96:	f44f 3378 	mov.w	r3, #253952	; 0x3e000
 8000e9a:	677b      	str	r3, [r7, #116]	; 0x74

  HAL_Init();
 8000e9c:	f000 fc9a 	bl	80017d4 <HAL_Init>

  SystemClock_Config();
 8000ea0:	f000 fa0c 	bl	80012bc <SystemClock_Config>

  MX_GPIO_Init();
 8000ea4:	f000 faca 	bl	800143c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 fa98 	bl	80013dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eac:	f000 fa56 	bl	800135c <MX_I2C1_Init>

//READ FROM reg 0x10 to 0x21
  uint8_t buffer[18]={0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	819a      	strh	r2, [r3, #12]
  HAL_I2C_Mem_Read(&hi2c1, 0x77 << 1, 0x10, 1, buffer, 18, 1000);
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2312      	movs	r3, #18
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	21ee      	movs	r1, #238	; 0xee
 8000ed8:	48cd      	ldr	r0, [pc, #820]	; (8001210 <main+0x380>)
 8000eda:	f001 f90b 	bl	80020f4 <HAL_I2C_Mem_Read>
  uint32_t c00 = ((uint32_t)buffer[3] << 12) | ((uint32_t)buffer[4] << 4) | (((uint32_t)buffer[5] >> 4) & 0x0F);
 8000ede:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ee2:	031a      	lsls	r2, r3, #12
 8000ee4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	431a      	orrs	r2, r3
 8000eec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  getTwosComplement(&c00, 20);
 8000efc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f00:	2114      	movs	r1, #20
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ffa2 	bl	8000e4c <getTwosComplement>
  int dc00 = (int) c00;
 8000f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0a:	673b      	str	r3, [r7, #112]	; 0x70

  uint32_t c10 = (((uint32_t)buffer[5] & 0x0F) << 16) | ((uint32_t)buffer[6] << 8) | (uint32_t)buffer[7];
 8000f0c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000f16:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000f22:	4313      	orrs	r3, r2
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
  getTwosComplement(&c10, 20);
 8000f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f2a:	2114      	movs	r1, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff8d 	bl	8000e4c <getTwosComplement>
  int dc10 = (int) c10;
 8000f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f34:	66fb      	str	r3, [r7, #108]	; 0x6c

  uint32_t c01 = ((uint32_t)buffer[8] << 8) | (uint32_t)buffer[9];
 8000f36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000f40:	4313      	orrs	r3, r2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  getTwosComplement(&c01, 16);
 8000f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff7e 	bl	8000e4c <getTwosComplement>
  int dc01 = (int) c01;
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	66bb      	str	r3, [r7, #104]	; 0x68

  uint32_t c11 = ((uint32_t)buffer[10] << 8) | (uint32_t)buffer[11];
 8000f54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  getTwosComplement(&c11, 16);
 8000f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f66:	2110      	movs	r1, #16
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff6f 	bl	8000e4c <getTwosComplement>
  int dc11 = (int) c11;
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	667b      	str	r3, [r7, #100]	; 0x64


  uint32_t c20 = ((uint32_t)buffer[12] << 8) | (uint32_t)buffer[13];
 8000f72:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  getTwosComplement(&c20, 16);
 8000f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f84:	2110      	movs	r1, #16
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff60 	bl	8000e4c <getTwosComplement>
  int dc20 = (int) c20;
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	663b      	str	r3, [r7, #96]	; 0x60


  uint32_t c21 = ((uint32_t)buffer[14] << 8) | (uint32_t)buffer[15];
 8000f90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  getTwosComplement(&c21, 16);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff51 	bl	8000e4c <getTwosComplement>
  int dc21 = (int) c21;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	65fb      	str	r3, [r7, #92]	; 0x5c


  uint32_t c30 = ((uint32_t)buffer[16] << 8) | (uint32_t)buffer[17];
 8000fae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	623b      	str	r3, [r7, #32]
  getTwosComplement(&c30, 16);
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff42 	bl	8000e4c <getTwosComplement>
  int dc30 = (int) c30;
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	65bb      	str	r3, [r7, #88]	; 0x58

//WRITE TO REG 0x06
  uint8_t prscfg[1];
  prscfg[0] = 0x04;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	773b      	strb	r3, [r7, #28]
  HAL_I2C_Mem_Write(&hi2c1, 0x77 << 1, 0x06, 1, prscfg, 1, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	21ee      	movs	r1, #238	; 0xee
 8000fe6:	488a      	ldr	r0, [pc, #552]	; (8001210 <main+0x380>)
 8000fe8:	f000 ff70 	bl	8001ecc <HAL_I2C_Mem_Write>


//WRITE TO REG 0x07
  uint8_t tmpcfg[1];
  tmpcfg[0] = 0x04;
 8000fec:	2304      	movs	r3, #4
 8000fee:	763b      	strb	r3, [r7, #24]
  HAL_I2C_Mem_Write(&hi2c1, 0x77 << 1, 0x07, 1, tmpcfg, 1, 1000);
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2207      	movs	r2, #7
 8001004:	21ee      	movs	r1, #238	; 0xee
 8001006:	4882      	ldr	r0, [pc, #520]	; (8001210 <main+0x380>)
 8001008:	f000 ff60 	bl	8001ecc <HAL_I2C_Mem_Write>


//WRITE TO REG 0x09
  uint8_t cfgreg[1];
  cfgreg[0] = 0x0C;
 800100c:	230c      	movs	r3, #12
 800100e:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Mem_Write(&hi2c1, 0x77 << 1, 0x09, 1, cfgreg, 1, 1000);
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2209      	movs	r2, #9
 8001024:	21ee      	movs	r1, #238	; 0xee
 8001026:	487a      	ldr	r0, [pc, #488]	; (8001210 <main+0x380>)
 8001028:	f000 ff50 	bl	8001ecc <HAL_I2C_Mem_Write>

//WRITE 0x07 TO REG 0x08
  uint8_t meascfg[1];
  meascfg[0] = 0x07;
 800102c:	2307      	movs	r3, #7
 800102e:	743b      	strb	r3, [r7, #16]
  HAL_I2C_Mem_Write(&hi2c1, 0x77 << 1, 0x08, 1, meascfg, 1, 1000);
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2208      	movs	r2, #8
 8001044:	21ee      	movs	r1, #238	; 0xee
 8001046:	4872      	ldr	r0, [pc, #456]	; (8001210 <main+0x380>)
 8001048:	f000 ff40 	bl	8001ecc <HAL_I2C_Mem_Write>
	  	  HAL_I2C_Mem_Read(&hi2c1, 0x77 << 1, 0x08, 1, test, 1, 1000);
	  	  val = test[0];
*/

//READ REG 0x03 TO REG 0x05
	  uint8_t tmp[3]={0};
 800104c:	4b71      	ldr	r3, [pc, #452]	; (8001214 <main+0x384>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	81bb      	strh	r3, [r7, #12]
 8001052:	2300      	movs	r3, #0
 8001054:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Read(&hi2c1, 0x77 << 1, 0x03, 1, tmp, 3, 1000);
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2303      	movs	r3, #3
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	21ee      	movs	r1, #238	; 0xee
 800106c:	4868      	ldr	r0, [pc, #416]	; (8001210 <main+0x380>)
 800106e:	f001 f841 	bl	80020f4 <HAL_I2C_Mem_Read>
	  uint32_t tmpraw =((tmp[0] << 16) |(tmp[1] << 8) | (tmp[2]));
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	4313      	orrs	r3, r2
 800107c:	7bba      	ldrb	r2, [r7, #14]
 800107e:	4313      	orrs	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
	  getTwosComplement(&tmpraw, 24);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2118      	movs	r1, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fedf 	bl	8000e4c <getTwosComplement>
	  int traw = (int) tmpraw;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
	  val=traw;
 8001092:	4a61      	ldr	r2, [pc, #388]	; (8001218 <main+0x388>)
 8001094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001096:	6013      	str	r3, [r2, #0]
	  HAL_I2C_Mem_Read(&hi2c1, 0x77 << 1, 0x08, 1, test2, 1, 1000);
	  val2 = test2[0];
*/

//READ REG 0x00 TO REG 0x02
	  uint8_t prs[3]={0};
 8001098:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <main+0x384>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	2300      	movs	r3, #0
 80010a0:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Read(&hi2c1, 0x77 << 1, 0x00, 1, prs, 3, 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2303      	movs	r3, #3
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	21ee      	movs	r1, #238	; 0xee
 80010b6:	4856      	ldr	r0, [pc, #344]	; (8001210 <main+0x380>)
 80010b8:	f001 f81c 	bl	80020f4 <HAL_I2C_Mem_Read>
	  uint32_t prsraw = prs[0] << 16 | prs[1] << 8 | prs[2];
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	4313      	orrs	r3, r2
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	603b      	str	r3, [r7, #0]
	  getTwosComplement(&prsraw, 24);
 80010cc:	463b      	mov	r3, r7
 80010ce:	2118      	movs	r1, #24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff febb 	bl	8000e4c <getTwosComplement>
	  int praw = (int) prsraw;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
	  val2=praw;
 80010da:	4a50      	ldr	r2, [pc, #320]	; (800121c <main+0x38c>)
 80010dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010de:	6013      	str	r3, [r2, #0]

//CALC PRESSURE
	  prawsc = (float) val2/k;
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <main+0x38c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fa:	4b49      	ldr	r3, [pc, #292]	; (8001220 <main+0x390>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
	  trawsc = (float) val/k;
 8001100:	4b45      	ldr	r3, [pc, #276]	; (8001218 <main+0x388>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800110c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <main+0x394>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
	  pcomp = dc00+prawsc*(dc10+prawsc*(dc20+prawsc*dc30))+trawsc*dc01+trawsc*prawsc*(dc11+prawsc*dc21);
 8001120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800113e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <main+0x390>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001152:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <main+0x390>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001160:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <main+0x390>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <main+0x394>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <main+0x394>)
 800118c:	edd3 6a00 	vldr	s13, [r3]
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <main+0x390>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80011a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <main+0x390>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011b8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <main+0x398>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
	  pcomp = pcomp/100;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <main+0x398>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	eddf 6a16 	vldr	s13, [pc, #88]	; 800122c <main+0x39c>
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <main+0x398>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
	  altitude = (float) 44330 * (1-pow(pcomp/1015,1/5.255));
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <main+0x398>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001230 <main+0x3a0>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	ee16 0a90 	vmov	r0, s13
 80011f0:	f7ff f952 	bl	8000498 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001208 <main+0x378>
 80011fc:	ec43 2b10 	vmov	d0, r2, r3
 8001200:	e018      	b.n	8001234 <main+0x3a4>
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	ccd9456c 	.word	0xccd9456c
 800120c:	3fc85b95 	.word	0x3fc85b95
 8001210:	2000008c 	.word	0x2000008c
 8001214:	080051e8 	.word	0x080051e8
 8001218:	20000164 	.word	0x20000164
 800121c:	20000168 	.word	0x20000168
 8001220:	20000170 	.word	0x20000170
 8001224:	2000016c 	.word	0x2000016c
 8001228:	20000174 	.word	0x20000174
 800122c:	42c80000 	.word	0x42c80000
 8001230:	447dc000 	.word	0x447dc000
 8001234:	f003 f8b0 	bl	8004398 <pow>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	f04f 0000 	mov.w	r0, #0
 8001240:	4919      	ldr	r1, [pc, #100]	; (80012a8 <main+0x418>)
 8001242:	f7fe ffc9 	bl	80001d8 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a314      	add	r3, pc, #80	; (adr r3, 80012a0 <main+0x410>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f978 	bl	8000548 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc22 	bl	8000aa8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <main+0x41c>)
 8001268:	6013      	str	r3, [r2, #0]
	  if (iter == 0)
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <main+0x420>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d104      	bne.n	800127c <main+0x3ec>
	  {
		  initial = altitude;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <main+0x41c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <main+0x424>)
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00a      	b.n	8001292 <main+0x402>
		  //HAL_UART_Transmit(&huart2, "Starting altitude\n", strlen("Starting altitude\n"), HAL_MAX_DELAY);
	  }
	  else
	  {
		  dif = altitude - initial;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <main+0x41c>)
 800127e:	ed93 7a00 	vldr	s14, [r3]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <main+0x424>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <main+0x428>)
 800128e:	edc3 7a00 	vstr	s15, [r3]
		  //HAL_UART_Transmit(&huart2, "Diff from starting point\n", strlen("Diff from starting point\n"), HAL_MAX_DELAY);
	  }
	  iter++;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <main+0x420>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <main+0x420>)
 800129a:	6013      	str	r3, [r2, #0]
  {
 800129c:	e6d6      	b.n	800104c <main+0x1bc>
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40e5a540 	.word	0x40e5a540
 80012a8:	3ff00000 	.word	0x3ff00000
 80012ac:	20000180 	.word	0x20000180
 80012b0:	20000178 	.word	0x20000178
 80012b4:	2000017c 	.word	0x2000017c
 80012b8:	20000184 	.word	0x20000184

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b096      	sub	sp, #88	; 0x58
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2244      	movs	r2, #68	; 0x44
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 f85c 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e2:	f001 fb6d 	bl	80029c0 <HAL_PWREx_ControlVoltageScaling>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ec:	f000 f930 	bl	8001550 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80012fa:	2310      	movs	r3, #16
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001302:	2302      	movs	r3, #2
 8001304:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 800130a:	230a      	movs	r3, #10
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800130e:	2302      	movs	r3, #2
 8001310:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001312:	2302      	movs	r3, #2
 8001314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fba6 	bl	8002a6c <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001326:	f000 f913 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2303      	movs	r3, #3
 8001330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	2104      	movs	r1, #4
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fff4 	bl	8003330 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800134e:	f000 f8ff 	bl	8001550 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3758      	adds	r7, #88	; 0x58
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_I2C1_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001398:	f000 fd08 	bl	8001dac <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 f8d5 	bl	8001550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013aa:	f001 fa63 	bl	8002874 <HAL_I2CEx_ConfigAnalogFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 f8cc 	bl	8001550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013bc:	f001 faa5 	bl	800290a <HAL_I2CEx_ConfigDigitalFilter>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f8c3 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000008c 	.word	0x2000008c
 80013d4:	40005400 	.word	0x40005400
 80013d8:	10909cec 	.word	0x10909cec

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART2_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001420:	f002 fb30 	bl	8003a84 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f891 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e0 	.word	0x200000e0
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <MX_GPIO_Init+0x108>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a3b      	ldr	r2, [pc, #236]	; (8001544 <MX_GPIO_Init+0x108>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <MX_GPIO_Init+0x108>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_GPIO_Init+0x108>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a35      	ldr	r2, [pc, #212]	; (8001544 <MX_GPIO_Init+0x108>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <MX_GPIO_Init+0x108>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MX_GPIO_Init+0x108>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <MX_GPIO_Init+0x108>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <MX_GPIO_Init+0x108>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_GPIO_Init+0x108>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <MX_GPIO_Init+0x108>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_GPIO_Init+0x108>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	21b0      	movs	r1, #176	; 0xb0
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f000 fc5f 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c4:	4820      	ldr	r0, [pc, #128]	; (8001548 <MX_GPIO_Init+0x10c>)
 80014c6:	f000 fc59 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <MX_GPIO_Init+0x110>)
 80014e2:	f000 fad9 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80014e6:	23b0      	movs	r3, #176	; 0xb0
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f000 faca 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001504:	2340      	movs	r3, #64	; 0x40
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f000 fabd 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0x10c>)
 8001538:	f000 faae 	bl	8001a98 <HAL_GPIO_Init>

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_MspInit+0x44>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6613      	str	r3, [r2, #96]	; 0x60
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_MspInit+0x44>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6593      	str	r3, [r2, #88]	; 0x58
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2234      	movs	r2, #52	; 0x34
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fedf 	bl	8004388 <memset>
  if(hi2c->Instance==I2C1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_I2C_MspInit+0xa8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d136      	bne.n	8001642 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f8c9 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015ec:	f7ff ffb0 	bl	8001550 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0xac>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_I2C_MspInit+0xac>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_I2C_MspInit+0xac>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001608:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161a:	2304      	movs	r3, #4
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001622:	4619      	mov	r1, r3
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_I2C_MspInit+0xb0>)
 8001626:	f000 fa37 	bl	8001a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_I2C_MspInit+0xac>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0xac>)
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_I2C_MspInit+0xac>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3758      	adds	r7, #88	; 0x58
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b096      	sub	sp, #88	; 0x58
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2234      	movs	r2, #52	; 0x34
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fe85 	bl	8004388 <memset>
  if(huart->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_UART_MspInit+0xa8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d136      	bne.n	80016f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f002 f86f 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff ff56 	bl	8001550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_UART_MspInit+0xac>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d4:	230c      	movs	r3, #12
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f000 f9d1 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3758      	adds	r7, #88	; 0x58
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004400 	.word	0x40004400
 8001704:	40021000 	.word	0x40021000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f89a 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	; (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <LoopForever+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f002 fdc7 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7ff fb6d 	bl	8000e90 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017c4:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 80017c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017cc:	2000018c 	.word	0x2000018c

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_Init+0x3c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_Init+0x3c>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f920 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f80f 	bl	8001814 <HAL_InitTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	e001      	b.n	8001806 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001802:	f7ff feab 	bl	800155c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001806:	79fb      	ldrb	r3, [r7, #7]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_InitTick+0x6c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_InitTick+0x70>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_InitTick+0x6c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f91d 	bl	8001a7e <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d809      	bhi.n	8001864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f8f5 	bl	8001a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_InitTick+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e007      	b.n	8001874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e004      	b.n	8001874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e001      	b.n	8001874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000188 	.word	0x20000188

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000188 	.word	0x20000188

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff47 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff5c 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffb0 	bl	80019ec <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	e14e      	b.n	8001d46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8140 	beq.w	8001d40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d005      	beq.n	8001ad8 <HAL_GPIO_Init+0x40>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d130      	bne.n	8001b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0e:	2201      	movs	r2, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 0201 	and.w	r2, r3, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d017      	beq.n	8001b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d123      	bne.n	8001bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 809a 	beq.w	8001d40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <HAL_GPIO_Init+0x2cc>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c10:	4a54      	ldr	r2, [pc, #336]	; (8001d64 <HAL_GPIO_Init+0x2cc>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6613      	str	r3, [r2, #96]	; 0x60
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <HAL_GPIO_Init+0x2cc>)
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c4e:	d013      	beq.n	8001c78 <HAL_GPIO_Init+0x1e0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <HAL_GPIO_Init+0x2d4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_GPIO_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <HAL_GPIO_Init+0x2d8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_Init+0x1d8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a44      	ldr	r2, [pc, #272]	; (8001d74 <HAL_GPIO_Init+0x2dc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_Init+0x1d4>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x1e2>
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x1e2>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x1e2>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x1e2>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8a:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c98:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_GPIO_Init+0x2e0>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f aea9 	bne.w	8001aa8 <HAL_GPIO_Init+0x10>
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000c00 	.word	0x48000c00
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e081      	b.n	8001ec2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fbe6 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e006      	b.n	8001e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d104      	bne.n	8001e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69d9      	ldr	r1, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	f040 80f9 	bne.w	80020e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x34>
 8001efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0ed      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Write+0x4e>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0e6      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f22:	f7ff fcc7 	bl	80018b4 <HAL_GetTick>
 8001f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2319      	movs	r3, #25
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fac3 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d1      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2221      	movs	r2, #33	; 0x21
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6c:	88f8      	ldrh	r0, [r7, #6]
 8001f6e:	893a      	ldrh	r2, [r7, #8]
 8001f70:	8979      	ldrh	r1, [r7, #10]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f9d3 	bl	8002328 <I2C_RequestMemoryWrite>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0a9      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d90e      	bls.n	8001fbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	8979      	ldrh	r1, [r7, #10]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fc2b 	bl	8002810 <I2C_TransferConfig>
 8001fba:	e00f      	b.n	8001fdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fc1a 	bl	8002810 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 faad 	bl	8002540 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e07b      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d034      	beq.n	8002094 <HAL_I2C_Mem_Write+0x1c8>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d130      	bne.n	8002094 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fa3f 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04d      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fbcf 	bl	8002810 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fbbe 	bl	8002810 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d19e      	bne.n	8001fdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa8c 	bl	80025c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e01a      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_I2C_Mem_Write+0x224>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	fe00e800 	.word	0xfe00e800

080020f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	817b      	strh	r3, [r7, #10]
 8002106:	460b      	mov	r3, r1
 8002108:	813b      	strh	r3, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b20      	cmp	r3, #32
 8002118:	f040 80fd 	bne.w	8002316 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_I2C_Mem_Read+0x34>
 8002122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0f1      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Mem_Read+0x4e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0ea      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800214a:	f7ff fbb3 	bl	80018b4 <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9af 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d5      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2222      	movs	r2, #34	; 0x22
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002194:	88f8      	ldrh	r0, [r7, #6]
 8002196:	893a      	ldrh	r2, [r7, #8]
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4603      	mov	r3, r0
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f913 	bl	80023d0 <I2C_RequestMemoryRead>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0ad      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d90e      	bls.n	80021e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <HAL_I2C_Mem_Read+0x22c>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fb17 	bl	8002810 <I2C_TransferConfig>
 80021e2:	e00f      	b.n	8002204 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	8979      	ldrh	r1, [r7, #10]
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_I2C_Mem_Read+0x22c>)
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fb06 	bl	8002810 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	2200      	movs	r2, #0
 800220c:	2104      	movs	r1, #4
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f956 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07c      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d034      	beq.n	80022c4 <HAL_I2C_Mem_Read+0x1d0>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	d130      	bne.n	80022c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	2200      	movs	r2, #0
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f927 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e04d      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2bff      	cmp	r3, #255	; 0xff
 8002284:	d90e      	bls.n	80022a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	b2da      	uxtb	r2, r3
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	2300      	movs	r3, #0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fab7 	bl	8002810 <I2C_TransferConfig>
 80022a2:	e00f      	b.n	80022c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	8979      	ldrh	r1, [r7, #10]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 faa6 	bl	8002810 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d19a      	bne.n	8002204 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f974 	bl	80025c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e01a      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2220      	movs	r2, #32
 80022e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_I2C_Mem_Read+0x230>)
 80022f6:	400b      	ands	r3, r1
 80022f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	80002400 	.word	0x80002400
 8002324:	fe00e800 	.word	0xfe00e800

08002328 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <I2C_RequestMemoryWrite+0xa4>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fa5d 	bl	8002810 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	69b9      	ldr	r1, [r7, #24]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f8f0 	bl	8002540 <I2C_WaitOnTXISFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e02c      	b.n	80023c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002370:	893b      	ldrh	r3, [r7, #8]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
 800237a:	e015      	b.n	80023a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800237c:	893b      	ldrh	r3, [r7, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	69b9      	ldr	r1, [r7, #24]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8d6 	bl	8002540 <I2C_WaitOnTXISFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e012      	b.n	80023c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800239e:	893b      	ldrh	r3, [r7, #8]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f884 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	80002000 	.word	0x80002000

080023d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	817b      	strh	r3, [r7, #10]
 80023e2:	460b      	mov	r3, r1
 80023e4:	813b      	strh	r3, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <I2C_RequestMemoryRead+0xa4>)
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fa0a 	bl	8002810 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f89d 	bl	8002540 <I2C_WaitOnTXISFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02c      	b.n	800246a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002416:	893b      	ldrh	r3, [r7, #8]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
 8002420:	e015      	b.n	800244e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002422:	893b      	ldrh	r3, [r7, #8]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f883 	bl	8002540 <I2C_WaitOnTXISFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e012      	b.n	800246a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f831 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	80002000 	.word	0x80002000

08002478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d103      	bne.n	8002496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d007      	beq.n	80024b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	619a      	str	r2, [r3, #24]
  }
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d0:	e022      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d01e      	beq.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7ff f9eb 	bl	80018b4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d113      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e00f      	b.n	8002538 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	429a      	cmp	r2, r3
 8002534:	d0cd      	beq.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800254c:	e02c      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f870 	bl	8002638 <I2C_IsErrorOccurred>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02a      	b.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d01e      	beq.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7ff f9a3 	bl	80018b4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d113      	bne.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d1cb      	bne.n	800254e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025cc:	e028      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f830 	bl	8002638 <I2C_IsErrorOccurred>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e026      	b.n	8002630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7ff f967 	bl	80018b4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d302      	bcc.n	80025f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d113      	bne.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d1cf      	bne.n	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d075      	beq.n	8002750 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800266c:	e056      	b.n	800271c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d052      	beq.n	800271c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7ff f91d 	bl	80018b4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_IsErrorOccurred+0x54>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d147      	bne.n	800271c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800269e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ae:	d12e      	bne.n	800270e <I2C_IsErrorOccurred+0xd6>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b6:	d02a      	beq.n	800270e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d027      	beq.n	800270e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026ce:	f7ff f8f1 	bl	80018b4 <HAL_GetTick>
 80026d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d4:	e01b      	b.n	800270e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026d6:	f7ff f8ed 	bl	80018b4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b19      	cmp	r3, #25
 80026e2:	d914      	bls.n	800270e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b20      	cmp	r3, #32
 800271a:	d1dc      	bne.n	80026d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b20      	cmp	r3, #32
 8002728:	d003      	beq.n	8002732 <I2C_IsErrorOccurred+0xfa>
 800272a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272e:	2b00      	cmp	r3, #0
 8002730:	d09d      	beq.n	800266e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2220      	movs	r2, #32
 8002740:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002772:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002794:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01c      	beq.n	8002800 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fe56 	bl	8002478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <I2C_IsErrorOccurred+0x1d4>)
 80027d8:	400b      	ands	r3, r1
 80027da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002804:	4618      	mov	r0, r3
 8002806:	3728      	adds	r7, #40	; 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	4613      	mov	r3, r2
 8002820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002828:	7a7b      	ldrb	r3, [r7, #9]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002830:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	4313      	orrs	r3, r2
 800283a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	0d5b      	lsrs	r3, r3, #21
 800284a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <I2C_TransferConfig+0x60>)
 8002850:	430b      	orrs	r3, r1
 8002852:	43db      	mvns	r3, r3
 8002854:	ea02 0103 	and.w	r1, r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	03ff63ff 	.word	0x03ff63ff

08002874 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	d138      	bne.n	80028fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002894:	2302      	movs	r3, #2
 8002896:	e032      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	d139      	bne.n	8002994 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800292a:	2302      	movs	r3, #2
 800292c:	e033      	b.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2224      	movs	r2, #36	; 0x24
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800295c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_PWREx_GetVoltageRange+0x18>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40007000 	.word	0x40007000

080029c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ce:	d130      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029dc:	d038      	beq.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2232      	movs	r2, #50	; 0x32
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a04:	e002      	b.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d102      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f2      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	d110      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e00f      	b.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	d007      	beq.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a48:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40007000 	.word	0x40007000
 8002a64:	20000000 	.word	0x20000000
 8002a68:	431bde83 	.word	0x431bde83

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f000 bc4f 	b.w	800331e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a80:	4b97      	ldr	r3, [pc, #604]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8a:	4b95      	ldr	r3, [pc, #596]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80e6 	beq.w	8002c6e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4c>
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	f040 808d 	bne.w	8002bca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	f040 8089 	bne.w	8002bca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab8:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x66>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f000 bc26 	b.w	800331e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad6:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_RCC_OscConfig+0x80>
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aea:	e005      	b.n	8002af8 <HAL_RCC_OscConfig+0x8c>
 8002aec:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d224      	bcs.n	8002b46 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fdd9 	bl	80036b8 <RCC_SetFlashLatencyFromMSIRange>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f000 bc06 	b.w	800331e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	496d      	ldr	r1, [pc, #436]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b30:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	4968      	ldr	r1, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e025      	b.n	8002b92 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b46:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a65      	ldr	r2, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b63      	ldr	r3, [pc, #396]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	4960      	ldr	r1, [pc, #384]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b64:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	495b      	ldr	r1, [pc, #364]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd98 	bl	80036b8 <RCC_SetFlashLatencyFromMSIRange>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e3c5      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b92:	f000 fccd 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4950      	ldr	r1, [pc, #320]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fe2c 	bl	8001814 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d052      	beq.n	8002c6c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	e3a9      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d032      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fe69 	bl	80018b4 <HAL_GetTick>
 8002be2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be6:	f7fe fe65 	bl	80018b4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e392      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf8:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a35      	ldr	r2, [pc, #212]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	4930      	ldr	r1, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c22:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	492b      	ldr	r1, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
 8002c36:	e01a      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fe36 	bl	80018b4 <HAL_GetTick>
 8002c48:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fe32 	bl	80018b4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e35f      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1e0>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d073      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x220>
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d10e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d063      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2f4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d15f      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e33c      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x250>
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e025      	b.n	8002d08 <HAL_RCC_OscConfig+0x29c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x284>
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e013      	b.n	8002d08 <HAL_RCC_OscConfig+0x29c>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080051ec 	.word	0x080051ec
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a8e      	ldr	r2, [pc, #568]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a8b      	ldr	r2, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fdd0 	bl	80018b4 <HAL_GetTick>
 8002d14:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe fdcc 	bl	80018b4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e2f9      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2ac>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fdbc 	bl	80018b4 <HAL_GetTick>
 8002d3c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fdb8 	bl	80018b4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e2e5      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	4b77      	ldr	r3, [pc, #476]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d4>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d060      	beq.n	8002e30 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x314>
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d116      	bne.n	8002dae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x32c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e2c2      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	4962      	ldr	r1, [pc, #392]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	e040      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db6:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fd77 	bl	80018b4 <HAL_GetTick>
 8002dc6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fe fd73 	bl	80018b4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e2a0      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	494e      	ldr	r1, [pc, #312]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e018      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4b      	ldr	r2, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fd53 	bl	80018b4 <HAL_GetTick>
 8002e0e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fe fd4f 	bl	80018b4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e27c      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e24:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8082 	beq.w	8002f42 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d05f      	beq.n	8002f06 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002e46:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d037      	beq.n	8002ecc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e254      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e8e:	f7fe fd11 	bl	80018b4 <HAL_GetTick>
 8002e92:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7fe fd0d 	bl	80018b4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b11      	cmp	r3, #17
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e23a      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	f023 0210 	bic.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fcea 	bl	80018b4 <HAL_GetTick>
 8002ee0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fce6 	bl	80018b4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b11      	cmp	r3, #17
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e213      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x478>
 8002f04:	e01d      	b.n	8002f42 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0c:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe fccd 	bl	80018b4 <HAL_GetTick>
 8002f1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fcc9 	bl	80018b4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b11      	cmp	r3, #17
 8002f2a:	d903      	bls.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1f6      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
 8002f30:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f34:	4ba9      	ldr	r3, [pc, #676]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ed      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80bd 	beq.w	80030ca <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f56:	4ba1      	ldr	r3, [pc, #644]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b9e      	ldr	r3, [pc, #632]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	4a9d      	ldr	r2, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6e:	4b9b      	ldr	r3, [pc, #620]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f80:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <HAL_RCC_OscConfig+0x774>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d118      	bne.n	8002fbe <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8c:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x774>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a93      	ldr	r2, [pc, #588]	; (80031e0 <HAL_RCC_OscConfig+0x774>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f98:	f7fe fc8c 	bl	80018b4 <HAL_GetTick>
 8002f9c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fe fc88 	bl	80018b4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1b5      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <HAL_RCC_OscConfig+0x774>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02c      	beq.n	8003024 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002fca:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	497f      	ldr	r1, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a79      	ldr	r2, [pc, #484]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003000:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003010:	e018      	b.n	8003044 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a70      	ldr	r2, [pc, #448]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003022:	e00f      	b.n	8003044 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	4a6c      	ldr	r2, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003034:	4b69      	ldr	r3, [pc, #420]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a68      	ldr	r2, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fc32 	bl	80018b4 <HAL_GetTick>
 8003050:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fc2e 	bl	80018b4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e159      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ed      	beq.n	8003054 <HAL_RCC_OscConfig+0x5e8>
 8003078:	e01d      	b.n	80030b6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe fc1b 	bl	80018b4 <HAL_GetTick>
 800307e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe fc17 	bl	80018b4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e142      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ed      	bne.n	8003082 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	4a4b      	ldr	r2, [pc, #300]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	4a46      	ldr	r2, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03c      	beq.n	8003150 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01c      	beq.n	8003118 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e4:	4a3d      	ldr	r2, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fbe1 	bl	80018b4 <HAL_GetTick>
 80030f2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fbdd 	bl	80018b4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e10a      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003108:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ef      	beq.n	80030f6 <HAL_RCC_OscConfig+0x68a>
 8003116:	e01b      	b.n	8003150 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800311a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fbc4 	bl	80018b4 <HAL_GetTick>
 800312c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003130:	f7fe fbc0 	bl	80018b4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0ed      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ef      	bne.n	8003130 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80e1 	beq.w	800331c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	2b02      	cmp	r3, #2
 8003160:	f040 80b5 	bne.w	80032ce <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	429a      	cmp	r2, r3
 8003176:	d124      	bne.n	80031c2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	3b01      	subs	r3, #1
 8003184:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d11b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d113      	bne.n	80031c2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	3b01      	subs	r3, #1
 80031bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d05f      	beq.n	8003282 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d05a      	beq.n	800327e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a03      	ldr	r2, [pc, #12]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fe fb6e 	bl	80018b4 <HAL_GetTick>
 80031d8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	e00c      	b.n	80031f6 <HAL_RCC_OscConfig+0x78a>
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fb66 	bl	80018b4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e093      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f6:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCC_OscConfig+0x8c0>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003212:	3a01      	subs	r2, #1
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800321c:	0212      	lsls	r2, r2, #8
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003224:	0852      	lsrs	r2, r2, #1
 8003226:	3a01      	subs	r2, #1
 8003228:	0552      	lsls	r2, r2, #21
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0652      	lsls	r2, r2, #25
 8003236:	430a      	orrs	r2, r1
 8003238:	493b      	ldr	r1, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a39      	ldr	r2, [pc, #228]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003248:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	4a36      	ldr	r2, [pc, #216]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003254:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003256:	f7fe fb2d 	bl	80018b4 <HAL_GetTick>
 800325a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fb29 	bl	80018b4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e056      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003270:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800327c:	e04e      	b.n	800331c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e04d      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d146      	bne.n	800331c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800328e:	4b26      	ldr	r3, [pc, #152]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003298:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80032a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a6:	f7fe fb05 	bl	80018b4 <HAL_GetTick>
 80032aa:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fb01 	bl	80018b4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e02e      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x842>
 80032cc:	e026      	b.n	800331c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d021      	beq.n	8003318 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80032da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fae8 	bl	80018b4 <HAL_GetTick>
 80032e4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fae4 	bl	80018b4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e011      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_RCC_OscConfig+0x8bc>)
 800330c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003310:	f023 0303 	bic.w	r3, r3, #3
 8003314:	60d3      	str	r3, [r2, #12]
 8003316:	e001      	b.n	800331c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	f99f808c 	.word	0xf99f808c

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0e7      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b75      	ldr	r3, [pc, #468]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4970      	ldr	r1, [pc, #448]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cf      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338c:	429a      	cmp	r2, r3
 800338e:	d908      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4960      	ldr	r1, [pc, #384]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04c      	beq.n	8003448 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b6:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d121      	bne.n	8003406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0a6      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	4b54      	ldr	r3, [pc, #336]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e09a      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e08e      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f6:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e086      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4943      	ldr	r1, [pc, #268]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fe fa4c 	bl	80018b4 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe fa48 	bl	80018b4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e06e      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	429a      	cmp	r2, r3
 8003462:	d208      	bcs.n	8003476 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	492b      	ldr	r1, [pc, #172]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d210      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0207 	bic.w	r2, r3, #7
 800348c:	4923      	ldr	r1, [pc, #140]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <HAL_RCC_ClockConfig+0x1ec>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e036      	b.n	8003514 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4918      	ldr	r1, [pc, #96]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4910      	ldr	r1, [pc, #64]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e4:	f000 f824 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <HAL_RCC_ClockConfig+0x1f4>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003500:	4a09      	ldr	r2, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1f8>)
 8003502:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1fc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe f983 	bl	8001814 <HAL_InitTick>
 800350e:	4603      	mov	r3, r0
 8003510:	72fb      	strb	r3, [r7, #11]

  return status;
 8003512:	7afb      	ldrb	r3, [r7, #11]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40022000 	.word	0x40022000
 8003520:	40021000 	.word	0x40021000
 8003524:	080051ec 	.word	0x080051ec
 8003528:	20000000 	.word	0x20000000
 800352c:	20000004 	.word	0x20000004

08003530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x34>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d121      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d11e      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003570:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e005      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800358c:	4a2b      	ldr	r2, [pc, #172]	; (800363c <HAL_RCC_GetSysClockFreq+0x10c>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d102      	bne.n	80035ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_GetSysClockFreq+0x110>)
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e004      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <HAL_RCC_GetSysClockFreq+0x114>)
 80035b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d134      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d003      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0xac>
 80035d4:	e005      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_GetSysClockFreq+0x110>)
 80035d8:	617b      	str	r3, [r7, #20]
      break;
 80035da:	e005      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_GetSysClockFreq+0x114>)
 80035de:	617b      	str	r3, [r7, #20]
      break;
 80035e0:	e002      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	617b      	str	r3, [r7, #20]
      break;
 80035e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	3301      	adds	r3, #1
 80035f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	fb03 f202 	mul.w	r2, r3, r2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0e5b      	lsrs	r3, r3, #25
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	3301      	adds	r3, #1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003628:	69bb      	ldr	r3, [r7, #24]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	08005204 	.word	0x08005204
 8003640:	00f42400 	.word	0x00f42400
 8003644:	007a1200 	.word	0x007a1200

08003648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCC_GetHCLKFreq+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003664:	f7ff fff0 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	080051fc 	.word	0x080051fc

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003690:	f7ff ffda 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	080051fc 	.word	0x080051fc

080036b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c4:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d0:	f7ff f968 	bl	80029a4 <HAL_PWREx_GetVoltageRange>
 80036d4:	6178      	str	r0, [r7, #20]
 80036d6:	e014      	b.n	8003702 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	4a24      	ldr	r2, [pc, #144]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6593      	str	r3, [r2, #88]	; 0x58
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f0:	f7ff f958 	bl	80029a4 <HAL_PWREx_GetVoltageRange>
 80036f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003700:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d10b      	bne.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d919      	bls.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2ba0      	cmp	r3, #160	; 0xa0
 8003714:	d902      	bls.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003716:	2302      	movs	r3, #2
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e013      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800371c:	2301      	movs	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e010      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d902      	bls.n	800372e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003728:	2303      	movs	r3, #3
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e00a      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d102      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003734:	2302      	movs	r3, #2
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e004      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d101      	bne.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003740:	2301      	movs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 0207 	bic.w	r2, r3, #7
 800374c:	4909      	ldr	r1, [pc, #36]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	40022000 	.word	0x40022000

08003778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003780:	2300      	movs	r3, #0
 8003782:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003784:	2300      	movs	r3, #0
 8003786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 809e 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	4a3f      	ldr	r2, [pc, #252]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6593      	str	r3, [r2, #88]	; 0x58
 80037bc:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c8:	2301      	movs	r3, #1
 80037ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a39      	ldr	r2, [pc, #228]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d8:	f7fe f86c 	bl	80018b4 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037de:	e009      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fe f868 	bl	80018b4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	74fb      	strb	r3, [r7, #19]
        break;
 80037f2:	e005      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d15a      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003806:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	429a      	cmp	r2, r3
 8003820:	d019      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d016      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f828 	bl	80018b4 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	e00b      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fe f824 	bl	80018b4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d902      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	74fb      	strb	r3, [r7, #19]
            break;
 800387e:	e006      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ec      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038aa:	e009      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	74bb      	strb	r3, [r7, #18]
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c0:	7c7b      	ldrb	r3, [r7, #17]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	4a6d      	ldr	r2, [pc, #436]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038de:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0203 	bic.w	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4964      	ldr	r1, [pc, #400]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003900:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 020c 	bic.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	495c      	ldr	r1, [pc, #368]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003922:	4b57      	ldr	r3, [pc, #348]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4953      	ldr	r1, [pc, #332]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003944:	4b4e      	ldr	r3, [pc, #312]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	494b      	ldr	r1, [pc, #300]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003966:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4942      	ldr	r1, [pc, #264]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	493a      	ldr	r1, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	4931      	ldr	r1, [pc, #196]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	4929      	ldr	r1, [pc, #164]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4920      	ldr	r1, [pc, #128]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	4918      	ldr	r1, [pc, #96]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d015      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a66:	d105      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e040      	b.n	8003b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd fdd6 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f82c 	bl	8003b20 <UART_SetConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa7a 	bl	8003fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb01 	bl	8004118 <UART_CheckIdleState>
 8003b16:	4603      	mov	r3, r0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b08a      	sub	sp, #40	; 0x28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <UART_SetConfig+0x2a8>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a93      	ldr	r2, [pc, #588]	; (8003dcc <UART_SetConfig+0x2ac>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a8a      	ldr	r2, [pc, #552]	; (8003dd0 <UART_SetConfig+0x2b0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d126      	bne.n	8003bf8 <UART_SetConfig+0xd8>
 8003baa:	4b8a      	ldr	r3, [pc, #552]	; (8003dd4 <UART_SetConfig+0x2b4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d81b      	bhi.n	8003bf0 <UART_SetConfig+0xd0>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0xa0>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003be1 	.word	0x08003be1
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003be9 	.word	0x08003be9
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e0ab      	b.n	8003d30 <UART_SetConfig+0x210>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e0a7      	b.n	8003d30 <UART_SetConfig+0x210>
 8003be0:	2304      	movs	r3, #4
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e0a3      	b.n	8003d30 <UART_SetConfig+0x210>
 8003be8:	2308      	movs	r3, #8
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e09f      	b.n	8003d30 <UART_SetConfig+0x210>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf6:	e09b      	b.n	8003d30 <UART_SetConfig+0x210>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <UART_SetConfig+0x2b8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d138      	bne.n	8003c74 <UART_SetConfig+0x154>
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <UART_SetConfig+0x2b4>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d82d      	bhi.n	8003c6c <UART_SetConfig+0x14c>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0xf8>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c6d 	.word	0x08003c6d
 8003c24:	08003c6d 	.word	0x08003c6d
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c6d 	.word	0x08003c6d
 8003c30:	08003c6d 	.word	0x08003c6d
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c65 	.word	0x08003c65
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e06d      	b.n	8003d30 <UART_SetConfig+0x210>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e069      	b.n	8003d30 <UART_SetConfig+0x210>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e065      	b.n	8003d30 <UART_SetConfig+0x210>
 8003c64:	2308      	movs	r3, #8
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e061      	b.n	8003d30 <UART_SetConfig+0x210>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e05d      	b.n	8003d30 <UART_SetConfig+0x210>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <UART_SetConfig+0x2bc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d125      	bne.n	8003cca <UART_SetConfig+0x1aa>
 8003c7e:	4b55      	ldr	r3, [pc, #340]	; (8003dd4 <UART_SetConfig+0x2b4>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c88:	2b30      	cmp	r3, #48	; 0x30
 8003c8a:	d016      	beq.n	8003cba <UART_SetConfig+0x19a>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d818      	bhi.n	8003cc2 <UART_SetConfig+0x1a2>
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d00a      	beq.n	8003caa <UART_SetConfig+0x18a>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d814      	bhi.n	8003cc2 <UART_SetConfig+0x1a2>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <UART_SetConfig+0x182>
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d008      	beq.n	8003cb2 <UART_SetConfig+0x192>
 8003ca0:	e00f      	b.n	8003cc2 <UART_SetConfig+0x1a2>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca8:	e042      	b.n	8003d30 <UART_SetConfig+0x210>
 8003caa:	2302      	movs	r3, #2
 8003cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb0:	e03e      	b.n	8003d30 <UART_SetConfig+0x210>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb8:	e03a      	b.n	8003d30 <UART_SetConfig+0x210>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc0:	e036      	b.n	8003d30 <UART_SetConfig+0x210>
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc8:	e032      	b.n	8003d30 <UART_SetConfig+0x210>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3f      	ldr	r2, [pc, #252]	; (8003dcc <UART_SetConfig+0x2ac>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d12a      	bne.n	8003d2a <UART_SetConfig+0x20a>
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <UART_SetConfig+0x2b4>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce2:	d01a      	beq.n	8003d1a <UART_SetConfig+0x1fa>
 8003ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce8:	d81b      	bhi.n	8003d22 <UART_SetConfig+0x202>
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d00c      	beq.n	8003d0a <UART_SetConfig+0x1ea>
 8003cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf4:	d815      	bhi.n	8003d22 <UART_SetConfig+0x202>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <UART_SetConfig+0x1e2>
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d008      	beq.n	8003d12 <UART_SetConfig+0x1f2>
 8003d00:	e00f      	b.n	8003d22 <UART_SetConfig+0x202>
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d08:	e012      	b.n	8003d30 <UART_SetConfig+0x210>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d10:	e00e      	b.n	8003d30 <UART_SetConfig+0x210>
 8003d12:	2304      	movs	r3, #4
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d18:	e00a      	b.n	8003d30 <UART_SetConfig+0x210>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d20:	e006      	b.n	8003d30 <UART_SetConfig+0x210>
 8003d22:	2310      	movs	r3, #16
 8003d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d28:	e002      	b.n	8003d30 <UART_SetConfig+0x210>
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <UART_SetConfig+0x2ac>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f040 808a 	bne.w	8003e50 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d824      	bhi.n	8003d8e <UART_SetConfig+0x26e>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <UART_SetConfig+0x22c>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d7f 	.word	0x08003d7f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d8f 	.word	0x08003d8f
 8003d6c:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7ff fc76 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e010      	b.n	8003d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <UART_SetConfig+0x2c0>)
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e00d      	b.n	8003d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7ff fbd7 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 8003d82:	61f8      	str	r0, [r7, #28]
        break;
 8003d84:	e009      	b.n	8003d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e005      	b.n	8003d9a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8109 	beq.w	8003fb4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d305      	bcc.n	8003dbe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d912      	bls.n	8003de4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dc4:	e0f6      	b.n	8003fb4 <UART_SetConfig+0x494>
 8003dc6:	bf00      	nop
 8003dc8:	efff69f3 	.word	0xefff69f3
 8003dcc:	40008000 	.word	0x40008000
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	40004800 	.word	0x40004800
 8003de0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2200      	movs	r2, #0
 8003de8:	461c      	mov	r4, r3
 8003dea:	4615      	mov	r5, r2
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	022b      	lsls	r3, r5, #8
 8003df6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dfa:	0222      	lsls	r2, r4, #8
 8003dfc:	68f9      	ldr	r1, [r7, #12]
 8003dfe:	6849      	ldr	r1, [r1, #4]
 8003e00:	0849      	lsrs	r1, r1, #1
 8003e02:	2000      	movs	r0, #0
 8003e04:	4688      	mov	r8, r1
 8003e06:	4681      	mov	r9, r0
 8003e08:	eb12 0a08 	adds.w	sl, r2, r8
 8003e0c:	eb43 0b09 	adc.w	fp, r3, r9
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e1e:	4650      	mov	r0, sl
 8003e20:	4659      	mov	r1, fp
 8003e22:	f7fc fe91 	bl	8000b48 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e34:	d308      	bcc.n	8003e48 <UART_SetConfig+0x328>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3c:	d204      	bcs.n	8003e48 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e0b5      	b.n	8003fb4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e4e:	e0b1      	b.n	8003fb4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d15d      	bne.n	8003f16 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d827      	bhi.n	8003eb2 <UART_SetConfig+0x392>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x348>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e9d 	.word	0x08003e9d
 8003e74:	08003eb3 	.word	0x08003eb3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003eb3 	.word	0x08003eb3
 8003e80:	08003eb3 	.word	0x08003eb3
 8003e84:	08003eb3 	.word	0x08003eb3
 8003e88:	08003eab 	.word	0x08003eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7ff fbe8 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8003e90:	61f8      	str	r0, [r7, #28]
        break;
 8003e92:	e014      	b.n	8003ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e94:	f7ff fbfa 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003e98:	61f8      	str	r0, [r7, #28]
        break;
 8003e9a:	e010      	b.n	8003ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e9c:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <UART_SetConfig+0x4b0>)
 8003e9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ea0:	e00d      	b.n	8003ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7ff fb45 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 8003ea6:	61f8      	str	r0, [r7, #28]
        break;
 8003ea8:	e009      	b.n	8003ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	61fb      	str	r3, [r7, #28]
        break;
 8003eb0:	e005      	b.n	8003ebe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d077      	beq.n	8003fb4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005a      	lsls	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	441a      	add	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	d916      	bls.n	8003f0e <UART_SetConfig+0x3ee>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d212      	bcs.n	8003f0e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f023 030f 	bic.w	r3, r3, #15
 8003ef0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	8afb      	ldrh	r3, [r7, #22]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	8afa      	ldrh	r2, [r7, #22]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e052      	b.n	8003fb4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f14:	e04e      	b.n	8003fb4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d827      	bhi.n	8003f6e <UART_SetConfig+0x44e>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x404>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7ff fb8a 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
        break;
 8003f4e:	e014      	b.n	8003f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7ff fb9c 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <UART_SetConfig+0x4b0>)
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7ff fae7 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 8003f62:	61f8      	str	r0, [r7, #28]
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f78:	bf00      	nop
    }

    if (pclk != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d019      	beq.n	8003fb4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	085a      	lsrs	r2, r3, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d909      	bls.n	8003fae <UART_SetConfig+0x48e>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d205      	bcs.n	8003fae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e002      	b.n	8003fb4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fce:	bf00      	nop
 8003fd0:	00f42400 	.word	0x00f42400

08003fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01a      	beq.n	80040ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d2:	d10a      	bne.n	80040ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004128:	f7fd fbc4 	bl	80018b4 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d10e      	bne.n	800415a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800413c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f82d 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e023      	b.n	80041a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d10e      	bne.n	8004186 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f817 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00d      	b.n	80041a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b09c      	sub	sp, #112	; 0x70
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ba:	e0a5      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	f000 80a1 	beq.w	8004308 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fd fb75 	bl	80018b4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <UART_WaitOnFlagUntilTimeout+0x32>
 80041d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d13e      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041f0:	667b      	str	r3, [r7, #100]	; 0x64
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e6      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	663b      	str	r3, [r7, #96]	; 0x60
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800422e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e067      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d04f      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d147      	bne.n	8004308 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004280:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
 80042a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042d4:	623a      	str	r2, [r7, #32]
 80042d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69f9      	ldr	r1, [r7, #28]
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e010      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	429a      	cmp	r2, r3
 8004324:	f43f af4a 	beq.w	80041bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3770      	adds	r7, #112	; 0x70
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <__errno>:
 8004334:	4b01      	ldr	r3, [pc, #4]	; (800433c <__errno+0x8>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4d0d      	ldr	r5, [pc, #52]	; (8004378 <__libc_init_array+0x38>)
 8004344:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004346:	1b64      	subs	r4, r4, r5
 8004348:	10a4      	asrs	r4, r4, #2
 800434a:	2600      	movs	r6, #0
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	4d0b      	ldr	r5, [pc, #44]	; (8004380 <__libc_init_array+0x40>)
 8004352:	4c0c      	ldr	r4, [pc, #48]	; (8004384 <__libc_init_array+0x44>)
 8004354:	f000 ff3a 	bl	80051cc <_init>
 8004358:	1b64      	subs	r4, r4, r5
 800435a:	10a4      	asrs	r4, r4, #2
 800435c:	2600      	movs	r6, #0
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f855 3b04 	ldr.w	r3, [r5], #4
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	08005270 	.word	0x08005270
 800437c:	08005270 	.word	0x08005270
 8004380:	08005270 	.word	0x08005270
 8004384:	08005274 	.word	0x08005274

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <pow>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	ed2d 8b02 	vpush	{d8}
 800439e:	eeb0 8a40 	vmov.f32	s16, s0
 80043a2:	eef0 8a60 	vmov.f32	s17, s1
 80043a6:	ec55 4b11 	vmov	r4, r5, d1
 80043aa:	f000 f865 	bl	8004478 <__ieee754_pow>
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	ec57 6b10 	vmov	r6, r7, d0
 80043ba:	f7fc fb5f 	bl	8000a7c <__aeabi_dcmpun>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d13b      	bne.n	800443a <pow+0xa2>
 80043c2:	ec51 0b18 	vmov	r0, r1, d8
 80043c6:	2200      	movs	r2, #0
 80043c8:	2300      	movs	r3, #0
 80043ca:	f7fc fb25 	bl	8000a18 <__aeabi_dcmpeq>
 80043ce:	b1b8      	cbz	r0, 8004400 <pow+0x68>
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc fb1e 	bl	8000a18 <__aeabi_dcmpeq>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d146      	bne.n	800446e <pow+0xd6>
 80043e0:	ec45 4b10 	vmov	d0, r4, r5
 80043e4:	f000 fe61 	bl	80050aa <finite>
 80043e8:	b338      	cbz	r0, 800443a <pow+0xa2>
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fb1b 	bl	8000a2c <__aeabi_dcmplt>
 80043f6:	b300      	cbz	r0, 800443a <pow+0xa2>
 80043f8:	f7ff ff9c 	bl	8004334 <__errno>
 80043fc:	2322      	movs	r3, #34	; 0x22
 80043fe:	e01b      	b.n	8004438 <pow+0xa0>
 8004400:	ec47 6b10 	vmov	d0, r6, r7
 8004404:	f000 fe51 	bl	80050aa <finite>
 8004408:	b9e0      	cbnz	r0, 8004444 <pow+0xac>
 800440a:	eeb0 0a48 	vmov.f32	s0, s16
 800440e:	eef0 0a68 	vmov.f32	s1, s17
 8004412:	f000 fe4a 	bl	80050aa <finite>
 8004416:	b1a8      	cbz	r0, 8004444 <pow+0xac>
 8004418:	ec45 4b10 	vmov	d0, r4, r5
 800441c:	f000 fe45 	bl	80050aa <finite>
 8004420:	b180      	cbz	r0, 8004444 <pow+0xac>
 8004422:	4632      	mov	r2, r6
 8004424:	463b      	mov	r3, r7
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	f7fc fb27 	bl	8000a7c <__aeabi_dcmpun>
 800442e:	2800      	cmp	r0, #0
 8004430:	d0e2      	beq.n	80043f8 <pow+0x60>
 8004432:	f7ff ff7f 	bl	8004334 <__errno>
 8004436:	2321      	movs	r3, #33	; 0x21
 8004438:	6003      	str	r3, [r0, #0]
 800443a:	ecbd 8b02 	vpop	{d8}
 800443e:	ec47 6b10 	vmov	d0, r6, r7
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc fae4 	bl	8000a18 <__aeabi_dcmpeq>
 8004450:	2800      	cmp	r0, #0
 8004452:	d0f2      	beq.n	800443a <pow+0xa2>
 8004454:	eeb0 0a48 	vmov.f32	s0, s16
 8004458:	eef0 0a68 	vmov.f32	s1, s17
 800445c:	f000 fe25 	bl	80050aa <finite>
 8004460:	2800      	cmp	r0, #0
 8004462:	d0ea      	beq.n	800443a <pow+0xa2>
 8004464:	ec45 4b10 	vmov	d0, r4, r5
 8004468:	f000 fe1f 	bl	80050aa <finite>
 800446c:	e7c3      	b.n	80043f6 <pow+0x5e>
 800446e:	4f01      	ldr	r7, [pc, #4]	; (8004474 <pow+0xdc>)
 8004470:	2600      	movs	r6, #0
 8004472:	e7e2      	b.n	800443a <pow+0xa2>
 8004474:	3ff00000 	.word	0x3ff00000

08004478 <__ieee754_pow>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	ed2d 8b06 	vpush	{d8-d10}
 8004480:	b089      	sub	sp, #36	; 0x24
 8004482:	ed8d 1b00 	vstr	d1, [sp]
 8004486:	e9dd 2900 	ldrd	r2, r9, [sp]
 800448a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800448e:	ea58 0102 	orrs.w	r1, r8, r2
 8004492:	ec57 6b10 	vmov	r6, r7, d0
 8004496:	d115      	bne.n	80044c4 <__ieee754_pow+0x4c>
 8004498:	19b3      	adds	r3, r6, r6
 800449a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800449e:	4152      	adcs	r2, r2
 80044a0:	4299      	cmp	r1, r3
 80044a2:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <__ieee754_pow+0x250>)
 80044a4:	4193      	sbcs	r3, r2
 80044a6:	f080 84d2 	bcs.w	8004e4e <__ieee754_pow+0x9d6>
 80044aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fb fe93 	bl	80001dc <__adddf3>
 80044b6:	ec41 0b10 	vmov	d0, r0, r1
 80044ba:	b009      	add	sp, #36	; 0x24
 80044bc:	ecbd 8b06 	vpop	{d8-d10}
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	4b81      	ldr	r3, [pc, #516]	; (80046cc <__ieee754_pow+0x254>)
 80044c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80044ca:	429c      	cmp	r4, r3
 80044cc:	ee10 aa10 	vmov	sl, s0
 80044d0:	463d      	mov	r5, r7
 80044d2:	dc06      	bgt.n	80044e2 <__ieee754_pow+0x6a>
 80044d4:	d101      	bne.n	80044da <__ieee754_pow+0x62>
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	d1e7      	bne.n	80044aa <__ieee754_pow+0x32>
 80044da:	4598      	cmp	r8, r3
 80044dc:	dc01      	bgt.n	80044e2 <__ieee754_pow+0x6a>
 80044de:	d10f      	bne.n	8004500 <__ieee754_pow+0x88>
 80044e0:	b172      	cbz	r2, 8004500 <__ieee754_pow+0x88>
 80044e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80044e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80044ea:	ea55 050a 	orrs.w	r5, r5, sl
 80044ee:	d1dc      	bne.n	80044aa <__ieee754_pow+0x32>
 80044f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80044f4:	18db      	adds	r3, r3, r3
 80044f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80044fa:	4152      	adcs	r2, r2
 80044fc:	429d      	cmp	r5, r3
 80044fe:	e7d0      	b.n	80044a2 <__ieee754_pow+0x2a>
 8004500:	2d00      	cmp	r5, #0
 8004502:	da3b      	bge.n	800457c <__ieee754_pow+0x104>
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <__ieee754_pow+0x258>)
 8004506:	4598      	cmp	r8, r3
 8004508:	dc51      	bgt.n	80045ae <__ieee754_pow+0x136>
 800450a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800450e:	4598      	cmp	r8, r3
 8004510:	f340 84ac 	ble.w	8004e6c <__ieee754_pow+0x9f4>
 8004514:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800451c:	2b14      	cmp	r3, #20
 800451e:	dd0f      	ble.n	8004540 <__ieee754_pow+0xc8>
 8004520:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004524:	fa22 f103 	lsr.w	r1, r2, r3
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	4293      	cmp	r3, r2
 800452e:	f040 849d 	bne.w	8004e6c <__ieee754_pow+0x9f4>
 8004532:	f001 0101 	and.w	r1, r1, #1
 8004536:	f1c1 0302 	rsb	r3, r1, #2
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	b182      	cbz	r2, 8004560 <__ieee754_pow+0xe8>
 800453e:	e05f      	b.n	8004600 <__ieee754_pow+0x188>
 8004540:	2a00      	cmp	r2, #0
 8004542:	d15b      	bne.n	80045fc <__ieee754_pow+0x184>
 8004544:	f1c3 0314 	rsb	r3, r3, #20
 8004548:	fa48 f103 	asr.w	r1, r8, r3
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	4543      	cmp	r3, r8
 8004552:	f040 8488 	bne.w	8004e66 <__ieee754_pow+0x9ee>
 8004556:	f001 0101 	and.w	r1, r1, #1
 800455a:	f1c1 0302 	rsb	r3, r1, #2
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <__ieee754_pow+0x25c>)
 8004562:	4598      	cmp	r8, r3
 8004564:	d132      	bne.n	80045cc <__ieee754_pow+0x154>
 8004566:	f1b9 0f00 	cmp.w	r9, #0
 800456a:	f280 8478 	bge.w	8004e5e <__ieee754_pow+0x9e6>
 800456e:	4959      	ldr	r1, [pc, #356]	; (80046d4 <__ieee754_pow+0x25c>)
 8004570:	4632      	mov	r2, r6
 8004572:	463b      	mov	r3, r7
 8004574:	2000      	movs	r0, #0
 8004576:	f7fc f911 	bl	800079c <__aeabi_ddiv>
 800457a:	e79c      	b.n	80044b6 <__ieee754_pow+0x3e>
 800457c:	2300      	movs	r3, #0
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	2a00      	cmp	r2, #0
 8004582:	d13d      	bne.n	8004600 <__ieee754_pow+0x188>
 8004584:	4b51      	ldr	r3, [pc, #324]	; (80046cc <__ieee754_pow+0x254>)
 8004586:	4598      	cmp	r8, r3
 8004588:	d1ea      	bne.n	8004560 <__ieee754_pow+0xe8>
 800458a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800458e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004592:	ea53 030a 	orrs.w	r3, r3, sl
 8004596:	f000 845a 	beq.w	8004e4e <__ieee754_pow+0x9d6>
 800459a:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <__ieee754_pow+0x260>)
 800459c:	429c      	cmp	r4, r3
 800459e:	dd08      	ble.n	80045b2 <__ieee754_pow+0x13a>
 80045a0:	f1b9 0f00 	cmp.w	r9, #0
 80045a4:	f2c0 8457 	blt.w	8004e56 <__ieee754_pow+0x9de>
 80045a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045ac:	e783      	b.n	80044b6 <__ieee754_pow+0x3e>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e7e5      	b.n	800457e <__ieee754_pow+0x106>
 80045b2:	f1b9 0f00 	cmp.w	r9, #0
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f6bf af7a 	bge.w	80044b6 <__ieee754_pow+0x3e>
 80045c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80045c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045ca:	e774      	b.n	80044b6 <__ieee754_pow+0x3e>
 80045cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80045d0:	d106      	bne.n	80045e0 <__ieee754_pow+0x168>
 80045d2:	4632      	mov	r2, r6
 80045d4:	463b      	mov	r3, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	4639      	mov	r1, r7
 80045da:	f7fb ffb5 	bl	8000548 <__aeabi_dmul>
 80045de:	e76a      	b.n	80044b6 <__ieee754_pow+0x3e>
 80045e0:	4b3e      	ldr	r3, [pc, #248]	; (80046dc <__ieee754_pow+0x264>)
 80045e2:	4599      	cmp	r9, r3
 80045e4:	d10c      	bne.n	8004600 <__ieee754_pow+0x188>
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	db0a      	blt.n	8004600 <__ieee754_pow+0x188>
 80045ea:	ec47 6b10 	vmov	d0, r6, r7
 80045ee:	b009      	add	sp, #36	; 0x24
 80045f0:	ecbd 8b06 	vpop	{d8-d10}
 80045f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	f000 bc6c 	b.w	8004ed4 <__ieee754_sqrt>
 80045fc:	2300      	movs	r3, #0
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	ec47 6b10 	vmov	d0, r6, r7
 8004604:	f000 fd48 	bl	8005098 <fabs>
 8004608:	ec51 0b10 	vmov	r0, r1, d0
 800460c:	f1ba 0f00 	cmp.w	sl, #0
 8004610:	d129      	bne.n	8004666 <__ieee754_pow+0x1ee>
 8004612:	b124      	cbz	r4, 800461e <__ieee754_pow+0x1a6>
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <__ieee754_pow+0x25c>)
 8004616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800461a:	429a      	cmp	r2, r3
 800461c:	d123      	bne.n	8004666 <__ieee754_pow+0x1ee>
 800461e:	f1b9 0f00 	cmp.w	r9, #0
 8004622:	da05      	bge.n	8004630 <__ieee754_pow+0x1b8>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	2000      	movs	r0, #0
 800462a:	492a      	ldr	r1, [pc, #168]	; (80046d4 <__ieee754_pow+0x25c>)
 800462c:	f7fc f8b6 	bl	800079c <__aeabi_ddiv>
 8004630:	2d00      	cmp	r5, #0
 8004632:	f6bf af40 	bge.w	80044b6 <__ieee754_pow+0x3e>
 8004636:	9b04      	ldr	r3, [sp, #16]
 8004638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800463c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004640:	4323      	orrs	r3, r4
 8004642:	d108      	bne.n	8004656 <__ieee754_pow+0x1de>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f7fb fdc4 	bl	80001d8 <__aeabi_dsub>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	e78f      	b.n	8004576 <__ieee754_pow+0xfe>
 8004656:	9b04      	ldr	r3, [sp, #16]
 8004658:	2b01      	cmp	r3, #1
 800465a:	f47f af2c 	bne.w	80044b6 <__ieee754_pow+0x3e>
 800465e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004662:	4619      	mov	r1, r3
 8004664:	e727      	b.n	80044b6 <__ieee754_pow+0x3e>
 8004666:	0feb      	lsrs	r3, r5, #31
 8004668:	3b01      	subs	r3, #1
 800466a:	9306      	str	r3, [sp, #24]
 800466c:	9a06      	ldr	r2, [sp, #24]
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	d102      	bne.n	800467a <__ieee754_pow+0x202>
 8004674:	4632      	mov	r2, r6
 8004676:	463b      	mov	r3, r7
 8004678:	e7e6      	b.n	8004648 <__ieee754_pow+0x1d0>
 800467a:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <__ieee754_pow+0x268>)
 800467c:	4598      	cmp	r8, r3
 800467e:	f340 80fb 	ble.w	8004878 <__ieee754_pow+0x400>
 8004682:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004686:	4598      	cmp	r8, r3
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <__ieee754_pow+0x260>)
 800468a:	dd0c      	ble.n	80046a6 <__ieee754_pow+0x22e>
 800468c:	429c      	cmp	r4, r3
 800468e:	dc0f      	bgt.n	80046b0 <__ieee754_pow+0x238>
 8004690:	f1b9 0f00 	cmp.w	r9, #0
 8004694:	da0f      	bge.n	80046b6 <__ieee754_pow+0x23e>
 8004696:	2000      	movs	r0, #0
 8004698:	b009      	add	sp, #36	; 0x24
 800469a:	ecbd 8b06 	vpop	{d8-d10}
 800469e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a2:	f000 bcf0 	b.w	8005086 <__math_oflow>
 80046a6:	429c      	cmp	r4, r3
 80046a8:	dbf2      	blt.n	8004690 <__ieee754_pow+0x218>
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <__ieee754_pow+0x25c>)
 80046ac:	429c      	cmp	r4, r3
 80046ae:	dd19      	ble.n	80046e4 <__ieee754_pow+0x26c>
 80046b0:	f1b9 0f00 	cmp.w	r9, #0
 80046b4:	dcef      	bgt.n	8004696 <__ieee754_pow+0x21e>
 80046b6:	2000      	movs	r0, #0
 80046b8:	b009      	add	sp, #36	; 0x24
 80046ba:	ecbd 8b06 	vpop	{d8-d10}
 80046be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c2:	f000 bcd7 	b.w	8005074 <__math_uflow>
 80046c6:	bf00      	nop
 80046c8:	fff00000 	.word	0xfff00000
 80046cc:	7ff00000 	.word	0x7ff00000
 80046d0:	433fffff 	.word	0x433fffff
 80046d4:	3ff00000 	.word	0x3ff00000
 80046d8:	3fefffff 	.word	0x3fefffff
 80046dc:	3fe00000 	.word	0x3fe00000
 80046e0:	41e00000 	.word	0x41e00000
 80046e4:	4b60      	ldr	r3, [pc, #384]	; (8004868 <__ieee754_pow+0x3f0>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	f7fb fd76 	bl	80001d8 <__aeabi_dsub>
 80046ec:	a354      	add	r3, pc, #336	; (adr r3, 8004840 <__ieee754_pow+0x3c8>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	4604      	mov	r4, r0
 80046f4:	460d      	mov	r5, r1
 80046f6:	f7fb ff27 	bl	8000548 <__aeabi_dmul>
 80046fa:	a353      	add	r3, pc, #332	; (adr r3, 8004848 <__ieee754_pow+0x3d0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7fb ff1e 	bl	8000548 <__aeabi_dmul>
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <__ieee754_pow+0x3f4>)
 800470e:	4682      	mov	sl, r0
 8004710:	468b      	mov	fp, r1
 8004712:	2200      	movs	r2, #0
 8004714:	4620      	mov	r0, r4
 8004716:	4629      	mov	r1, r5
 8004718:	f7fb ff16 	bl	8000548 <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	a14b      	add	r1, pc, #300	; (adr r1, 8004850 <__ieee754_pow+0x3d8>)
 8004722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004726:	f7fb fd57 	bl	80001d8 <__aeabi_dsub>
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f7fb ff0b 	bl	8000548 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	2000      	movs	r0, #0
 8004738:	494d      	ldr	r1, [pc, #308]	; (8004870 <__ieee754_pow+0x3f8>)
 800473a:	f7fb fd4d 	bl	80001d8 <__aeabi_dsub>
 800473e:	4622      	mov	r2, r4
 8004740:	4680      	mov	r8, r0
 8004742:	4689      	mov	r9, r1
 8004744:	462b      	mov	r3, r5
 8004746:	4620      	mov	r0, r4
 8004748:	4629      	mov	r1, r5
 800474a:	f7fb fefd 	bl	8000548 <__aeabi_dmul>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4640      	mov	r0, r8
 8004754:	4649      	mov	r1, r9
 8004756:	f7fb fef7 	bl	8000548 <__aeabi_dmul>
 800475a:	a33f      	add	r3, pc, #252	; (adr r3, 8004858 <__ieee754_pow+0x3e0>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fef2 	bl	8000548 <__aeabi_dmul>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4650      	mov	r0, sl
 800476a:	4659      	mov	r1, fp
 800476c:	f7fb fd34 	bl	80001d8 <__aeabi_dsub>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fd2e 	bl	80001dc <__adddf3>
 8004780:	2000      	movs	r0, #0
 8004782:	4632      	mov	r2, r6
 8004784:	463b      	mov	r3, r7
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
 800478a:	f7fb fd25 	bl	80001d8 <__aeabi_dsub>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fd1f 	bl	80001d8 <__aeabi_dsub>
 800479a:	9b04      	ldr	r3, [sp, #16]
 800479c:	9a06      	ldr	r2, [sp, #24]
 800479e:	3b01      	subs	r3, #1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	4682      	mov	sl, r0
 80047a4:	468b      	mov	fp, r1
 80047a6:	f040 81e7 	bne.w	8004b78 <__ieee754_pow+0x700>
 80047aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004860 <__ieee754_pow+0x3e8>
 80047ae:	eeb0 8a47 	vmov.f32	s16, s14
 80047b2:	eef0 8a67 	vmov.f32	s17, s15
 80047b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80047ba:	2600      	movs	r6, #0
 80047bc:	4632      	mov	r2, r6
 80047be:	463b      	mov	r3, r7
 80047c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047c4:	f7fb fd08 	bl	80001d8 <__aeabi_dsub>
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	f7fb febc 	bl	8000548 <__aeabi_dmul>
 80047d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047d4:	4680      	mov	r8, r0
 80047d6:	4689      	mov	r9, r1
 80047d8:	4650      	mov	r0, sl
 80047da:	4659      	mov	r1, fp
 80047dc:	f7fb feb4 	bl	8000548 <__aeabi_dmul>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4640      	mov	r0, r8
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fb fcf8 	bl	80001dc <__adddf3>
 80047ec:	4632      	mov	r2, r6
 80047ee:	463b      	mov	r3, r7
 80047f0:	4680      	mov	r8, r0
 80047f2:	4689      	mov	r9, r1
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fb fea6 	bl	8000548 <__aeabi_dmul>
 80047fc:	460b      	mov	r3, r1
 80047fe:	4604      	mov	r4, r0
 8004800:	460d      	mov	r5, r1
 8004802:	4602      	mov	r2, r0
 8004804:	4649      	mov	r1, r9
 8004806:	4640      	mov	r0, r8
 8004808:	f7fb fce8 	bl	80001dc <__adddf3>
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <__ieee754_pow+0x3fc>)
 800480e:	4299      	cmp	r1, r3
 8004810:	ec45 4b19 	vmov	d9, r4, r5
 8004814:	4606      	mov	r6, r0
 8004816:	460f      	mov	r7, r1
 8004818:	468b      	mov	fp, r1
 800481a:	f340 82f1 	ble.w	8004e00 <__ieee754_pow+0x988>
 800481e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004822:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004826:	4303      	orrs	r3, r0
 8004828:	f000 81e4 	beq.w	8004bf4 <__ieee754_pow+0x77c>
 800482c:	ec51 0b18 	vmov	r0, r1, d8
 8004830:	2200      	movs	r2, #0
 8004832:	2300      	movs	r3, #0
 8004834:	f7fc f8fa 	bl	8000a2c <__aeabi_dcmplt>
 8004838:	3800      	subs	r0, #0
 800483a:	bf18      	it	ne
 800483c:	2001      	movne	r0, #1
 800483e:	e72b      	b.n	8004698 <__ieee754_pow+0x220>
 8004840:	60000000 	.word	0x60000000
 8004844:	3ff71547 	.word	0x3ff71547
 8004848:	f85ddf44 	.word	0xf85ddf44
 800484c:	3e54ae0b 	.word	0x3e54ae0b
 8004850:	55555555 	.word	0x55555555
 8004854:	3fd55555 	.word	0x3fd55555
 8004858:	652b82fe 	.word	0x652b82fe
 800485c:	3ff71547 	.word	0x3ff71547
 8004860:	00000000 	.word	0x00000000
 8004864:	bff00000 	.word	0xbff00000
 8004868:	3ff00000 	.word	0x3ff00000
 800486c:	3fd00000 	.word	0x3fd00000
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	408fffff 	.word	0x408fffff
 8004878:	4bd5      	ldr	r3, [pc, #852]	; (8004bd0 <__ieee754_pow+0x758>)
 800487a:	402b      	ands	r3, r5
 800487c:	2200      	movs	r2, #0
 800487e:	b92b      	cbnz	r3, 800488c <__ieee754_pow+0x414>
 8004880:	4bd4      	ldr	r3, [pc, #848]	; (8004bd4 <__ieee754_pow+0x75c>)
 8004882:	f7fb fe61 	bl	8000548 <__aeabi_dmul>
 8004886:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800488a:	460c      	mov	r4, r1
 800488c:	1523      	asrs	r3, r4, #20
 800488e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004892:	4413      	add	r3, r2
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	4bd0      	ldr	r3, [pc, #832]	; (8004bd8 <__ieee754_pow+0x760>)
 8004898:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800489c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80048a0:	429c      	cmp	r4, r3
 80048a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048a6:	dd08      	ble.n	80048ba <__ieee754_pow+0x442>
 80048a8:	4bcc      	ldr	r3, [pc, #816]	; (8004bdc <__ieee754_pow+0x764>)
 80048aa:	429c      	cmp	r4, r3
 80048ac:	f340 8162 	ble.w	8004b74 <__ieee754_pow+0x6fc>
 80048b0:	9b05      	ldr	r3, [sp, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80048ba:	2400      	movs	r4, #0
 80048bc:	00e3      	lsls	r3, r4, #3
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	4bc7      	ldr	r3, [pc, #796]	; (8004be0 <__ieee754_pow+0x768>)
 80048c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048c6:	ed93 7b00 	vldr	d7, [r3]
 80048ca:	4629      	mov	r1, r5
 80048cc:	ec53 2b17 	vmov	r2, r3, d7
 80048d0:	eeb0 9a47 	vmov.f32	s18, s14
 80048d4:	eef0 9a67 	vmov.f32	s19, s15
 80048d8:	4682      	mov	sl, r0
 80048da:	f7fb fc7d 	bl	80001d8 <__aeabi_dsub>
 80048de:	4652      	mov	r2, sl
 80048e0:	4606      	mov	r6, r0
 80048e2:	460f      	mov	r7, r1
 80048e4:	462b      	mov	r3, r5
 80048e6:	ec51 0b19 	vmov	r0, r1, d9
 80048ea:	f7fb fc77 	bl	80001dc <__adddf3>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	2000      	movs	r0, #0
 80048f4:	49bb      	ldr	r1, [pc, #748]	; (8004be4 <__ieee754_pow+0x76c>)
 80048f6:	f7fb ff51 	bl	800079c <__aeabi_ddiv>
 80048fa:	ec41 0b1a 	vmov	d10, r0, r1
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	f7fb fe1f 	bl	8000548 <__aeabi_dmul>
 800490a:	2300      	movs	r3, #0
 800490c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004916:	46ab      	mov	fp, r5
 8004918:	106d      	asrs	r5, r5, #1
 800491a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800491e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004922:	ec41 0b18 	vmov	d8, r0, r1
 8004926:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800492a:	2200      	movs	r2, #0
 800492c:	4640      	mov	r0, r8
 800492e:	4649      	mov	r1, r9
 8004930:	4614      	mov	r4, r2
 8004932:	461d      	mov	r5, r3
 8004934:	f7fb fe08 	bl	8000548 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f7fb fc4a 	bl	80001d8 <__aeabi_dsub>
 8004944:	ec53 2b19 	vmov	r2, r3, d9
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fc42 	bl	80001d8 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4650      	mov	r0, sl
 800495a:	4659      	mov	r1, fp
 800495c:	f7fb fc3c 	bl	80001d8 <__aeabi_dsub>
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	f7fb fdf0 	bl	8000548 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4630      	mov	r0, r6
 800496e:	4639      	mov	r1, r7
 8004970:	f7fb fc32 	bl	80001d8 <__aeabi_dsub>
 8004974:	ec53 2b1a 	vmov	r2, r3, d10
 8004978:	f7fb fde6 	bl	8000548 <__aeabi_dmul>
 800497c:	ec53 2b18 	vmov	r2, r3, d8
 8004980:	ec41 0b19 	vmov	d9, r0, r1
 8004984:	ec51 0b18 	vmov	r0, r1, d8
 8004988:	f7fb fdde 	bl	8000548 <__aeabi_dmul>
 800498c:	a37c      	add	r3, pc, #496	; (adr r3, 8004b80 <__ieee754_pow+0x708>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	f7fb fdd7 	bl	8000548 <__aeabi_dmul>
 800499a:	a37b      	add	r3, pc, #492	; (adr r3, 8004b88 <__ieee754_pow+0x710>)
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f7fb fc1c 	bl	80001dc <__adddf3>
 80049a4:	4622      	mov	r2, r4
 80049a6:	462b      	mov	r3, r5
 80049a8:	f7fb fdce 	bl	8000548 <__aeabi_dmul>
 80049ac:	a378      	add	r3, pc, #480	; (adr r3, 8004b90 <__ieee754_pow+0x718>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb fc13 	bl	80001dc <__adddf3>
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f7fb fdc5 	bl	8000548 <__aeabi_dmul>
 80049be:	a376      	add	r3, pc, #472	; (adr r3, 8004b98 <__ieee754_pow+0x720>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fc0a 	bl	80001dc <__adddf3>
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	f7fb fdbc 	bl	8000548 <__aeabi_dmul>
 80049d0:	a373      	add	r3, pc, #460	; (adr r3, 8004ba0 <__ieee754_pow+0x728>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fc01 	bl	80001dc <__adddf3>
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f7fb fdb3 	bl	8000548 <__aeabi_dmul>
 80049e2:	a371      	add	r3, pc, #452	; (adr r3, 8004ba8 <__ieee754_pow+0x730>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fb fbf8 	bl	80001dc <__adddf3>
 80049ec:	4622      	mov	r2, r4
 80049ee:	4606      	mov	r6, r0
 80049f0:	460f      	mov	r7, r1
 80049f2:	462b      	mov	r3, r5
 80049f4:	4620      	mov	r0, r4
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7fb fda6 	bl	8000548 <__aeabi_dmul>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4630      	mov	r0, r6
 8004a02:	4639      	mov	r1, r7
 8004a04:	f7fb fda0 	bl	8000548 <__aeabi_dmul>
 8004a08:	4642      	mov	r2, r8
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	464b      	mov	r3, r9
 8004a10:	ec51 0b18 	vmov	r0, r1, d8
 8004a14:	f7fb fbe2 	bl	80001dc <__adddf3>
 8004a18:	ec53 2b19 	vmov	r2, r3, d9
 8004a1c:	f7fb fd94 	bl	8000548 <__aeabi_dmul>
 8004a20:	4622      	mov	r2, r4
 8004a22:	462b      	mov	r3, r5
 8004a24:	f7fb fbda 	bl	80001dc <__adddf3>
 8004a28:	4642      	mov	r2, r8
 8004a2a:	4682      	mov	sl, r0
 8004a2c:	468b      	mov	fp, r1
 8004a2e:	464b      	mov	r3, r9
 8004a30:	4640      	mov	r0, r8
 8004a32:	4649      	mov	r1, r9
 8004a34:	f7fb fd88 	bl	8000548 <__aeabi_dmul>
 8004a38:	4b6b      	ldr	r3, [pc, #428]	; (8004be8 <__ieee754_pow+0x770>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	460f      	mov	r7, r1
 8004a40:	f7fb fbcc 	bl	80001dc <__adddf3>
 8004a44:	4652      	mov	r2, sl
 8004a46:	465b      	mov	r3, fp
 8004a48:	f7fb fbc8 	bl	80001dc <__adddf3>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	460d      	mov	r5, r1
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4640      	mov	r0, r8
 8004a58:	4649      	mov	r1, r9
 8004a5a:	f7fb fd75 	bl	8000548 <__aeabi_dmul>
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <__ieee754_pow+0x770>)
 8004a60:	4680      	mov	r8, r0
 8004a62:	4689      	mov	r9, r1
 8004a64:	2200      	movs	r2, #0
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb fbb5 	bl	80001d8 <__aeabi_dsub>
 8004a6e:	4632      	mov	r2, r6
 8004a70:	463b      	mov	r3, r7
 8004a72:	f7fb fbb1 	bl	80001d8 <__aeabi_dsub>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	f7fb fbab 	bl	80001d8 <__aeabi_dsub>
 8004a82:	ec53 2b18 	vmov	r2, r3, d8
 8004a86:	f7fb fd5f 	bl	8000548 <__aeabi_dmul>
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	462b      	mov	r3, r5
 8004a92:	ec51 0b19 	vmov	r0, r1, d9
 8004a96:	f7fb fd57 	bl	8000548 <__aeabi_dmul>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	f7fb fb9b 	bl	80001dc <__adddf3>
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	460f      	mov	r7, r1
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb fb93 	bl	80001dc <__adddf3>
 8004ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8004bb0 <__ieee754_pow+0x738>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	2000      	movs	r0, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	f7fb fd41 	bl	8000548 <__aeabi_dmul>
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	ec41 0b18 	vmov	d8, r0, r1
 8004acc:	464b      	mov	r3, r9
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f7fb fb81 	bl	80001d8 <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fb7b 	bl	80001d8 <__aeabi_dsub>
 8004ae2:	a335      	add	r3, pc, #212	; (adr r3, 8004bb8 <__ieee754_pow+0x740>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd2e 	bl	8000548 <__aeabi_dmul>
 8004aec:	a334      	add	r3, pc, #208	; (adr r3, 8004bc0 <__ieee754_pow+0x748>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	4606      	mov	r6, r0
 8004af4:	460f      	mov	r7, r1
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fb fd25 	bl	8000548 <__aeabi_dmul>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4630      	mov	r0, r6
 8004b04:	4639      	mov	r1, r7
 8004b06:	f7fb fb69 	bl	80001dc <__adddf3>
 8004b0a:	9a07      	ldr	r2, [sp, #28]
 8004b0c:	4b37      	ldr	r3, [pc, #220]	; (8004bec <__ieee754_pow+0x774>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fb62 	bl	80001dc <__adddf3>
 8004b18:	4682      	mov	sl, r0
 8004b1a:	9805      	ldr	r0, [sp, #20]
 8004b1c:	468b      	mov	fp, r1
 8004b1e:	f7fb fca9 	bl	8000474 <__aeabi_i2d>
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	4b32      	ldr	r3, [pc, #200]	; (8004bf0 <__ieee754_pow+0x778>)
 8004b26:	4413      	add	r3, r2
 8004b28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	460f      	mov	r7, r1
 8004b30:	4652      	mov	r2, sl
 8004b32:	465b      	mov	r3, fp
 8004b34:	ec51 0b18 	vmov	r0, r1, d8
 8004b38:	f7fb fb50 	bl	80001dc <__adddf3>
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	f7fb fb4c 	bl	80001dc <__adddf3>
 8004b44:	4632      	mov	r2, r6
 8004b46:	463b      	mov	r3, r7
 8004b48:	f7fb fb48 	bl	80001dc <__adddf3>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	4632      	mov	r2, r6
 8004b50:	463b      	mov	r3, r7
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	f7fb fb3f 	bl	80001d8 <__aeabi_dsub>
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	f7fb fb3b 	bl	80001d8 <__aeabi_dsub>
 8004b62:	ec53 2b18 	vmov	r2, r3, d8
 8004b66:	f7fb fb37 	bl	80001d8 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4650      	mov	r0, sl
 8004b70:	4659      	mov	r1, fp
 8004b72:	e610      	b.n	8004796 <__ieee754_pow+0x31e>
 8004b74:	2401      	movs	r4, #1
 8004b76:	e6a1      	b.n	80048bc <__ieee754_pow+0x444>
 8004b78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004bc8 <__ieee754_pow+0x750>
 8004b7c:	e617      	b.n	80047ae <__ieee754_pow+0x336>
 8004b7e:	bf00      	nop
 8004b80:	4a454eef 	.word	0x4a454eef
 8004b84:	3fca7e28 	.word	0x3fca7e28
 8004b88:	93c9db65 	.word	0x93c9db65
 8004b8c:	3fcd864a 	.word	0x3fcd864a
 8004b90:	a91d4101 	.word	0xa91d4101
 8004b94:	3fd17460 	.word	0x3fd17460
 8004b98:	518f264d 	.word	0x518f264d
 8004b9c:	3fd55555 	.word	0x3fd55555
 8004ba0:	db6fabff 	.word	0xdb6fabff
 8004ba4:	3fdb6db6 	.word	0x3fdb6db6
 8004ba8:	33333303 	.word	0x33333303
 8004bac:	3fe33333 	.word	0x3fe33333
 8004bb0:	e0000000 	.word	0xe0000000
 8004bb4:	3feec709 	.word	0x3feec709
 8004bb8:	dc3a03fd 	.word	0xdc3a03fd
 8004bbc:	3feec709 	.word	0x3feec709
 8004bc0:	145b01f5 	.word	0x145b01f5
 8004bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	3ff00000 	.word	0x3ff00000
 8004bd0:	7ff00000 	.word	0x7ff00000
 8004bd4:	43400000 	.word	0x43400000
 8004bd8:	0003988e 	.word	0x0003988e
 8004bdc:	000bb679 	.word	0x000bb679
 8004be0:	08005238 	.word	0x08005238
 8004be4:	3ff00000 	.word	0x3ff00000
 8004be8:	40080000 	.word	0x40080000
 8004bec:	08005258 	.word	0x08005258
 8004bf0:	08005248 	.word	0x08005248
 8004bf4:	a3b5      	add	r3, pc, #724	; (adr r3, 8004ecc <__ieee754_pow+0xa54>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	f7fb faed 	bl	80001dc <__adddf3>
 8004c02:	4622      	mov	r2, r4
 8004c04:	ec41 0b1a 	vmov	d10, r0, r1
 8004c08:	462b      	mov	r3, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb fae3 	bl	80001d8 <__aeabi_dsub>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	ec51 0b1a 	vmov	r0, r1, d10
 8004c1a:	f7fb ff25 	bl	8000a68 <__aeabi_dcmpgt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f47f ae04 	bne.w	800482c <__ieee754_pow+0x3b4>
 8004c24:	4aa4      	ldr	r2, [pc, #656]	; (8004eb8 <__ieee754_pow+0xa40>)
 8004c26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f340 8108 	ble.w	8004e40 <__ieee754_pow+0x9c8>
 8004c30:	151b      	asrs	r3, r3, #20
 8004c32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c3a:	fa4a f303 	asr.w	r3, sl, r3
 8004c3e:	445b      	add	r3, fp
 8004c40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c44:	4e9d      	ldr	r6, [pc, #628]	; (8004ebc <__ieee754_pow+0xa44>)
 8004c46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c4a:	4116      	asrs	r6, r2
 8004c4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004c50:	2000      	movs	r0, #0
 8004c52:	ea23 0106 	bic.w	r1, r3, r6
 8004c56:	f1c2 0214 	rsb	r2, r2, #20
 8004c5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004c5e:	fa4a fa02 	asr.w	sl, sl, r2
 8004c62:	f1bb 0f00 	cmp.w	fp, #0
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	bfb8      	it	lt
 8004c70:	f1ca 0a00 	rsblt	sl, sl, #0
 8004c74:	f7fb fab0 	bl	80001d8 <__aeabi_dsub>
 8004c78:	ec41 0b19 	vmov	d9, r0, r1
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	ec51 0b19 	vmov	r0, r1, d9
 8004c84:	f7fb faaa 	bl	80001dc <__adddf3>
 8004c88:	a37b      	add	r3, pc, #492	; (adr r3, 8004e78 <__ieee754_pow+0xa00>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	2000      	movs	r0, #0
 8004c90:	4604      	mov	r4, r0
 8004c92:	460d      	mov	r5, r1
 8004c94:	f7fb fc58 	bl	8000548 <__aeabi_dmul>
 8004c98:	ec53 2b19 	vmov	r2, r3, d9
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fa98 	bl	80001d8 <__aeabi_dsub>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4640      	mov	r0, r8
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f7fb fa92 	bl	80001d8 <__aeabi_dsub>
 8004cb4:	a372      	add	r3, pc, #456	; (adr r3, 8004e80 <__ieee754_pow+0xa08>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb fc45 	bl	8000548 <__aeabi_dmul>
 8004cbe:	a372      	add	r3, pc, #456	; (adr r3, 8004e88 <__ieee754_pow+0xa10>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	f7fb fc3c 	bl	8000548 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	f7fb fa80 	bl	80001dc <__adddf3>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fa78 	bl	80001dc <__adddf3>
 8004cec:	4632      	mov	r2, r6
 8004cee:	463b      	mov	r3, r7
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	4689      	mov	r9, r1
 8004cf4:	f7fb fa70 	bl	80001d8 <__aeabi_dsub>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fa6a 	bl	80001d8 <__aeabi_dsub>
 8004d04:	4642      	mov	r2, r8
 8004d06:	4606      	mov	r6, r0
 8004d08:	460f      	mov	r7, r1
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb fc1a 	bl	8000548 <__aeabi_dmul>
 8004d14:	a35e      	add	r3, pc, #376	; (adr r3, 8004e90 <__ieee754_pow+0xa18>)
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	f7fb fc13 	bl	8000548 <__aeabi_dmul>
 8004d22:	a35d      	add	r3, pc, #372	; (adr r3, 8004e98 <__ieee754_pow+0xa20>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fa56 	bl	80001d8 <__aeabi_dsub>
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	f7fb fc0a 	bl	8000548 <__aeabi_dmul>
 8004d34:	a35a      	add	r3, pc, #360	; (adr r3, 8004ea0 <__ieee754_pow+0xa28>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f7fb fa4f 	bl	80001dc <__adddf3>
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	f7fb fc01 	bl	8000548 <__aeabi_dmul>
 8004d46:	a358      	add	r3, pc, #352	; (adr r3, 8004ea8 <__ieee754_pow+0xa30>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fa44 	bl	80001d8 <__aeabi_dsub>
 8004d50:	4622      	mov	r2, r4
 8004d52:	462b      	mov	r3, r5
 8004d54:	f7fb fbf8 	bl	8000548 <__aeabi_dmul>
 8004d58:	a355      	add	r3, pc, #340	; (adr r3, 8004eb0 <__ieee754_pow+0xa38>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fa3d 	bl	80001dc <__adddf3>
 8004d62:	4622      	mov	r2, r4
 8004d64:	462b      	mov	r3, r5
 8004d66:	f7fb fbef 	bl	8000548 <__aeabi_dmul>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fb fa31 	bl	80001d8 <__aeabi_dsub>
 8004d76:	4604      	mov	r4, r0
 8004d78:	460d      	mov	r5, r1
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb fbe1 	bl	8000548 <__aeabi_dmul>
 8004d86:	2200      	movs	r2, #0
 8004d88:	ec41 0b19 	vmov	d9, r0, r1
 8004d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d90:	4620      	mov	r0, r4
 8004d92:	4629      	mov	r1, r5
 8004d94:	f7fb fa20 	bl	80001d8 <__aeabi_dsub>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	ec51 0b19 	vmov	r0, r1, d9
 8004da0:	f7fb fcfc 	bl	800079c <__aeabi_ddiv>
 8004da4:	4632      	mov	r2, r6
 8004da6:	4604      	mov	r4, r0
 8004da8:	460d      	mov	r5, r1
 8004daa:	463b      	mov	r3, r7
 8004dac:	4640      	mov	r0, r8
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb fbca 	bl	8000548 <__aeabi_dmul>
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	f7fb fa10 	bl	80001dc <__adddf3>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7fb fa08 	bl	80001d8 <__aeabi_dsub>
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	f7fb fa04 	bl	80001d8 <__aeabi_dsub>
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	493a      	ldr	r1, [pc, #232]	; (8004ec0 <__ieee754_pow+0xa48>)
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f7fb f9fe 	bl	80001d8 <__aeabi_dsub>
 8004ddc:	ec41 0b10 	vmov	d0, r0, r1
 8004de0:	ee10 3a90 	vmov	r3, s1
 8004de4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dec:	da2b      	bge.n	8004e46 <__ieee754_pow+0x9ce>
 8004dee:	4650      	mov	r0, sl
 8004df0:	f000 f966 	bl	80050c0 <scalbn>
 8004df4:	ec51 0b10 	vmov	r0, r1, d0
 8004df8:	ec53 2b18 	vmov	r2, r3, d8
 8004dfc:	f7ff bbed 	b.w	80045da <__ieee754_pow+0x162>
 8004e00:	4b30      	ldr	r3, [pc, #192]	; (8004ec4 <__ieee754_pow+0xa4c>)
 8004e02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004e06:	429e      	cmp	r6, r3
 8004e08:	f77f af0c 	ble.w	8004c24 <__ieee754_pow+0x7ac>
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <__ieee754_pow+0xa50>)
 8004e0e:	440b      	add	r3, r1
 8004e10:	4303      	orrs	r3, r0
 8004e12:	d009      	beq.n	8004e28 <__ieee754_pow+0x9b0>
 8004e14:	ec51 0b18 	vmov	r0, r1, d8
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f7fb fe06 	bl	8000a2c <__aeabi_dcmplt>
 8004e20:	3800      	subs	r0, #0
 8004e22:	bf18      	it	ne
 8004e24:	2001      	movne	r0, #1
 8004e26:	e447      	b.n	80046b8 <__ieee754_pow+0x240>
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	f7fb f9d4 	bl	80001d8 <__aeabi_dsub>
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	f7fb fe0e 	bl	8000a54 <__aeabi_dcmpge>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	f43f aef3 	beq.w	8004c24 <__ieee754_pow+0x7ac>
 8004e3e:	e7e9      	b.n	8004e14 <__ieee754_pow+0x99c>
 8004e40:	f04f 0a00 	mov.w	sl, #0
 8004e44:	e71a      	b.n	8004c7c <__ieee754_pow+0x804>
 8004e46:	ec51 0b10 	vmov	r0, r1, d0
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	e7d4      	b.n	8004df8 <__ieee754_pow+0x980>
 8004e4e:	491c      	ldr	r1, [pc, #112]	; (8004ec0 <__ieee754_pow+0xa48>)
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7ff bb30 	b.w	80044b6 <__ieee754_pow+0x3e>
 8004e56:	2000      	movs	r0, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f7ff bb2c 	b.w	80044b6 <__ieee754_pow+0x3e>
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	f7ff bb28 	b.w	80044b6 <__ieee754_pow+0x3e>
 8004e66:	9204      	str	r2, [sp, #16]
 8004e68:	f7ff bb7a 	b.w	8004560 <__ieee754_pow+0xe8>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f7ff bb64 	b.w	800453a <__ieee754_pow+0xc2>
 8004e72:	bf00      	nop
 8004e74:	f3af 8000 	nop.w
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	3fe62e43 	.word	0x3fe62e43
 8004e80:	fefa39ef 	.word	0xfefa39ef
 8004e84:	3fe62e42 	.word	0x3fe62e42
 8004e88:	0ca86c39 	.word	0x0ca86c39
 8004e8c:	be205c61 	.word	0xbe205c61
 8004e90:	72bea4d0 	.word	0x72bea4d0
 8004e94:	3e663769 	.word	0x3e663769
 8004e98:	c5d26bf1 	.word	0xc5d26bf1
 8004e9c:	3ebbbd41 	.word	0x3ebbbd41
 8004ea0:	af25de2c 	.word	0xaf25de2c
 8004ea4:	3f11566a 	.word	0x3f11566a
 8004ea8:	16bebd93 	.word	0x16bebd93
 8004eac:	3f66c16c 	.word	0x3f66c16c
 8004eb0:	5555553e 	.word	0x5555553e
 8004eb4:	3fc55555 	.word	0x3fc55555
 8004eb8:	3fe00000 	.word	0x3fe00000
 8004ebc:	000fffff 	.word	0x000fffff
 8004ec0:	3ff00000 	.word	0x3ff00000
 8004ec4:	4090cbff 	.word	0x4090cbff
 8004ec8:	3f6f3400 	.word	0x3f6f3400
 8004ecc:	652b82fe 	.word	0x652b82fe
 8004ed0:	3c971547 	.word	0x3c971547

08004ed4 <__ieee754_sqrt>:
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	ec55 4b10 	vmov	r4, r5, d0
 8004edc:	4e55      	ldr	r6, [pc, #340]	; (8005034 <__ieee754_sqrt+0x160>)
 8004ede:	43ae      	bics	r6, r5
 8004ee0:	ee10 0a10 	vmov	r0, s0
 8004ee4:	ee10 3a10 	vmov	r3, s0
 8004ee8:	462a      	mov	r2, r5
 8004eea:	4629      	mov	r1, r5
 8004eec:	d110      	bne.n	8004f10 <__ieee754_sqrt+0x3c>
 8004eee:	ee10 2a10 	vmov	r2, s0
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	f7fb fb28 	bl	8000548 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb f96c 	bl	80001dc <__adddf3>
 8004f04:	4604      	mov	r4, r0
 8004f06:	460d      	mov	r5, r1
 8004f08:	ec45 4b10 	vmov	d0, r4, r5
 8004f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	dc10      	bgt.n	8004f36 <__ieee754_sqrt+0x62>
 8004f14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f18:	4330      	orrs	r0, r6
 8004f1a:	d0f5      	beq.n	8004f08 <__ieee754_sqrt+0x34>
 8004f1c:	b15d      	cbz	r5, 8004f36 <__ieee754_sqrt+0x62>
 8004f1e:	ee10 2a10 	vmov	r2, s0
 8004f22:	462b      	mov	r3, r5
 8004f24:	ee10 0a10 	vmov	r0, s0
 8004f28:	f7fb f956 	bl	80001d8 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	f7fb fc34 	bl	800079c <__aeabi_ddiv>
 8004f34:	e7e6      	b.n	8004f04 <__ieee754_sqrt+0x30>
 8004f36:	1512      	asrs	r2, r2, #20
 8004f38:	d074      	beq.n	8005024 <__ieee754_sqrt+0x150>
 8004f3a:	07d4      	lsls	r4, r2, #31
 8004f3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004f40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f48:	bf5e      	ittt	pl
 8004f4a:	0fda      	lsrpl	r2, r3, #31
 8004f4c:	005b      	lslpl	r3, r3, #1
 8004f4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004f52:	2400      	movs	r4, #0
 8004f54:	0fda      	lsrs	r2, r3, #31
 8004f56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004f5a:	107f      	asrs	r7, r7, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	2516      	movs	r5, #22
 8004f60:	4620      	mov	r0, r4
 8004f62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f66:	1886      	adds	r6, r0, r2
 8004f68:	428e      	cmp	r6, r1
 8004f6a:	bfde      	ittt	le
 8004f6c:	1b89      	suble	r1, r1, r6
 8004f6e:	18b0      	addle	r0, r6, r2
 8004f70:	18a4      	addle	r4, r4, r2
 8004f72:	0049      	lsls	r1, r1, #1
 8004f74:	3d01      	subs	r5, #1
 8004f76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004f7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f82:	d1f0      	bne.n	8004f66 <__ieee754_sqrt+0x92>
 8004f84:	462a      	mov	r2, r5
 8004f86:	f04f 0e20 	mov.w	lr, #32
 8004f8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004f8e:	4281      	cmp	r1, r0
 8004f90:	eb06 0c05 	add.w	ip, r6, r5
 8004f94:	dc02      	bgt.n	8004f9c <__ieee754_sqrt+0xc8>
 8004f96:	d113      	bne.n	8004fc0 <__ieee754_sqrt+0xec>
 8004f98:	459c      	cmp	ip, r3
 8004f9a:	d811      	bhi.n	8004fc0 <__ieee754_sqrt+0xec>
 8004f9c:	f1bc 0f00 	cmp.w	ip, #0
 8004fa0:	eb0c 0506 	add.w	r5, ip, r6
 8004fa4:	da43      	bge.n	800502e <__ieee754_sqrt+0x15a>
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	db41      	blt.n	800502e <__ieee754_sqrt+0x15a>
 8004faa:	f100 0801 	add.w	r8, r0, #1
 8004fae:	1a09      	subs	r1, r1, r0
 8004fb0:	459c      	cmp	ip, r3
 8004fb2:	bf88      	it	hi
 8004fb4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004fb8:	eba3 030c 	sub.w	r3, r3, ip
 8004fbc:	4432      	add	r2, r6
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004fc4:	f1be 0e01 	subs.w	lr, lr, #1
 8004fc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004fcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fd4:	d1db      	bne.n	8004f8e <__ieee754_sqrt+0xba>
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	d006      	beq.n	8004fe8 <__ieee754_sqrt+0x114>
 8004fda:	1c50      	adds	r0, r2, #1
 8004fdc:	bf13      	iteet	ne
 8004fde:	3201      	addne	r2, #1
 8004fe0:	3401      	addeq	r4, #1
 8004fe2:	4672      	moveq	r2, lr
 8004fe4:	f022 0201 	bicne.w	r2, r2, #1
 8004fe8:	1063      	asrs	r3, r4, #1
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	07e1      	lsls	r1, r4, #31
 8004fee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004ff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004ff6:	bf48      	it	mi
 8004ff8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004ffc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005000:	4614      	mov	r4, r2
 8005002:	e781      	b.n	8004f08 <__ieee754_sqrt+0x34>
 8005004:	0ad9      	lsrs	r1, r3, #11
 8005006:	3815      	subs	r0, #21
 8005008:	055b      	lsls	r3, r3, #21
 800500a:	2900      	cmp	r1, #0
 800500c:	d0fa      	beq.n	8005004 <__ieee754_sqrt+0x130>
 800500e:	02cd      	lsls	r5, r1, #11
 8005010:	d50a      	bpl.n	8005028 <__ieee754_sqrt+0x154>
 8005012:	f1c2 0420 	rsb	r4, r2, #32
 8005016:	fa23 f404 	lsr.w	r4, r3, r4
 800501a:	1e55      	subs	r5, r2, #1
 800501c:	4093      	lsls	r3, r2
 800501e:	4321      	orrs	r1, r4
 8005020:	1b42      	subs	r2, r0, r5
 8005022:	e78a      	b.n	8004f3a <__ieee754_sqrt+0x66>
 8005024:	4610      	mov	r0, r2
 8005026:	e7f0      	b.n	800500a <__ieee754_sqrt+0x136>
 8005028:	0049      	lsls	r1, r1, #1
 800502a:	3201      	adds	r2, #1
 800502c:	e7ef      	b.n	800500e <__ieee754_sqrt+0x13a>
 800502e:	4680      	mov	r8, r0
 8005030:	e7bd      	b.n	8004fae <__ieee754_sqrt+0xda>
 8005032:	bf00      	nop
 8005034:	7ff00000 	.word	0x7ff00000

08005038 <with_errno>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
 800503e:	4616      	mov	r6, r2
 8005040:	f7ff f978 	bl	8004334 <__errno>
 8005044:	4629      	mov	r1, r5
 8005046:	6006      	str	r6, [r0, #0]
 8005048:	4620      	mov	r0, r4
 800504a:	bd70      	pop	{r4, r5, r6, pc}

0800504c <xflow>:
 800504c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800504e:	4614      	mov	r4, r2
 8005050:	461d      	mov	r5, r3
 8005052:	b108      	cbz	r0, 8005058 <xflow+0xc>
 8005054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005058:	e9cd 2300 	strd	r2, r3, [sp]
 800505c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005060:	4620      	mov	r0, r4
 8005062:	4629      	mov	r1, r5
 8005064:	f7fb fa70 	bl	8000548 <__aeabi_dmul>
 8005068:	2222      	movs	r2, #34	; 0x22
 800506a:	b003      	add	sp, #12
 800506c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005070:	f7ff bfe2 	b.w	8005038 <with_errno>

08005074 <__math_uflow>:
 8005074:	b508      	push	{r3, lr}
 8005076:	2200      	movs	r2, #0
 8005078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800507c:	f7ff ffe6 	bl	800504c <xflow>
 8005080:	ec41 0b10 	vmov	d0, r0, r1
 8005084:	bd08      	pop	{r3, pc}

08005086 <__math_oflow>:
 8005086:	b508      	push	{r3, lr}
 8005088:	2200      	movs	r2, #0
 800508a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800508e:	f7ff ffdd 	bl	800504c <xflow>
 8005092:	ec41 0b10 	vmov	d0, r0, r1
 8005096:	bd08      	pop	{r3, pc}

08005098 <fabs>:
 8005098:	ec51 0b10 	vmov	r0, r1, d0
 800509c:	ee10 2a10 	vmov	r2, s0
 80050a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050a4:	ec43 2b10 	vmov	d0, r2, r3
 80050a8:	4770      	bx	lr

080050aa <finite>:
 80050aa:	b082      	sub	sp, #8
 80050ac:	ed8d 0b00 	vstr	d0, [sp]
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80050b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80050ba:	0fc0      	lsrs	r0, r0, #31
 80050bc:	b002      	add	sp, #8
 80050be:	4770      	bx	lr

080050c0 <scalbn>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	ec55 4b10 	vmov	r4, r5, d0
 80050c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80050ca:	4606      	mov	r6, r0
 80050cc:	462b      	mov	r3, r5
 80050ce:	b99a      	cbnz	r2, 80050f8 <scalbn+0x38>
 80050d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80050d4:	4323      	orrs	r3, r4
 80050d6:	d036      	beq.n	8005146 <scalbn+0x86>
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <scalbn+0x100>)
 80050da:	4629      	mov	r1, r5
 80050dc:	ee10 0a10 	vmov	r0, s0
 80050e0:	2200      	movs	r2, #0
 80050e2:	f7fb fa31 	bl	8000548 <__aeabi_dmul>
 80050e6:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <scalbn+0x104>)
 80050e8:	429e      	cmp	r6, r3
 80050ea:	4604      	mov	r4, r0
 80050ec:	460d      	mov	r5, r1
 80050ee:	da10      	bge.n	8005112 <scalbn+0x52>
 80050f0:	a32b      	add	r3, pc, #172	; (adr r3, 80051a0 <scalbn+0xe0>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	e03a      	b.n	800516e <scalbn+0xae>
 80050f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050fc:	428a      	cmp	r2, r1
 80050fe:	d10c      	bne.n	800511a <scalbn+0x5a>
 8005100:	ee10 2a10 	vmov	r2, s0
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb f868 	bl	80001dc <__adddf3>
 800510c:	4604      	mov	r4, r0
 800510e:	460d      	mov	r5, r1
 8005110:	e019      	b.n	8005146 <scalbn+0x86>
 8005112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005116:	460b      	mov	r3, r1
 8005118:	3a36      	subs	r2, #54	; 0x36
 800511a:	4432      	add	r2, r6
 800511c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005120:	428a      	cmp	r2, r1
 8005122:	dd08      	ble.n	8005136 <scalbn+0x76>
 8005124:	2d00      	cmp	r5, #0
 8005126:	a120      	add	r1, pc, #128	; (adr r1, 80051a8 <scalbn+0xe8>)
 8005128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800512c:	da1c      	bge.n	8005168 <scalbn+0xa8>
 800512e:	a120      	add	r1, pc, #128	; (adr r1, 80051b0 <scalbn+0xf0>)
 8005130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005134:	e018      	b.n	8005168 <scalbn+0xa8>
 8005136:	2a00      	cmp	r2, #0
 8005138:	dd08      	ble.n	800514c <scalbn+0x8c>
 800513a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800513e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005146:	ec45 4b10 	vmov	d0, r4, r5
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005150:	da19      	bge.n	8005186 <scalbn+0xc6>
 8005152:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005156:	429e      	cmp	r6, r3
 8005158:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800515c:	dd0a      	ble.n	8005174 <scalbn+0xb4>
 800515e:	a112      	add	r1, pc, #72	; (adr r1, 80051a8 <scalbn+0xe8>)
 8005160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e2      	bne.n	800512e <scalbn+0x6e>
 8005168:	a30f      	add	r3, pc, #60	; (adr r3, 80051a8 <scalbn+0xe8>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb f9eb 	bl	8000548 <__aeabi_dmul>
 8005172:	e7cb      	b.n	800510c <scalbn+0x4c>
 8005174:	a10a      	add	r1, pc, #40	; (adr r1, 80051a0 <scalbn+0xe0>)
 8005176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0b8      	beq.n	80050f0 <scalbn+0x30>
 800517e:	a10e      	add	r1, pc, #56	; (adr r1, 80051b8 <scalbn+0xf8>)
 8005180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005184:	e7b4      	b.n	80050f0 <scalbn+0x30>
 8005186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800518a:	3236      	adds	r2, #54	; 0x36
 800518c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005190:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005194:	4620      	mov	r0, r4
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <scalbn+0x108>)
 8005198:	2200      	movs	r2, #0
 800519a:	e7e8      	b.n	800516e <scalbn+0xae>
 800519c:	f3af 8000 	nop.w
 80051a0:	c2f8f359 	.word	0xc2f8f359
 80051a4:	01a56e1f 	.word	0x01a56e1f
 80051a8:	8800759c 	.word	0x8800759c
 80051ac:	7e37e43c 	.word	0x7e37e43c
 80051b0:	8800759c 	.word	0x8800759c
 80051b4:	fe37e43c 	.word	0xfe37e43c
 80051b8:	c2f8f359 	.word	0xc2f8f359
 80051bc:	81a56e1f 	.word	0x81a56e1f
 80051c0:	43500000 	.word	0x43500000
 80051c4:	ffff3cb0 	.word	0xffff3cb0
 80051c8:	3c900000 	.word	0x3c900000

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
