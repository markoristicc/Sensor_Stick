
IMU_take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  0800a9b8  0800a9b8  0001a9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f0  0800b4f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f8  0800b4f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001e0  0800b6e0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000430  0800b6e0  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bd7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b0  00000000  00000000  00035de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00038698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c955  00000000  00000000  0003ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bfe  00000000  00000000  000577e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3677  00000000  00000000  0006d3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  00120aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a99c 	.word	0x0800a99c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a99c 	.word	0x0800a99c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fa78 	bl	800144e <null_ptr_check>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d141      	bne.n	8000fee <bmi08a_init+0xa2>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7b1b      	ldrb	r3, [r3, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10c      	bne.n	8000f8c <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	739a      	strb	r2, [r3, #14]
//            printf("Dev correct\n\r");
            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f78:	f107 010e 	add.w	r1, r7, #14
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fa88 	bl	8001496 <get_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e002      	b.n	8000f92 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d129      	bne.n	8000fee <bmi08a_init+0xa2>
        {
//        	chip_id = 0;
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f9a:	f107 010e 	add.w	r1, r7, #14
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fa77 	bl	8001496 <get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11c      	bne.n	8000fee <bmi08a_init+0xa2>
            {
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <bmi08a_init+0xb0>)
 8000fba:	f006 fc9b 	bl	80078f4 <iprintf>
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b5b      	ldrb	r3, [r3, #13]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <bmi08a_init+0x88>
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d103      	bne.n	8000fd4 <bmi08a_init+0x88>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fcc:	7bba      	ldrb	r2, [r7, #14]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e00c      	b.n	8000fee <bmi08a_init+0xa2>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b5b      	ldrb	r3, [r3, #13]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d106      	bne.n	8000fea <bmi08a_init+0x9e>
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b1e      	cmp	r3, #30
 8000fe0:	d103      	bne.n	8000fea <bmi08a_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fe2:	7bba      	ldrb	r2, [r7, #14]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e001      	b.n	8000fee <bmi08a_init+0xa2>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000fea:	23fd      	movs	r3, #253	; 0xfd
 8000fec:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800a9b8 	.word	0x0800a9b8

08001000 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f000 fa1c 	bl	800144e <null_ptr_check>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800101a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <bmi08a_get_regs+0x46>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00e      	beq.n	8001046 <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	f000 fa2e 	bl	8001496 <get_regs>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800103e:	e004      	b.n	800104a <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001040:	23f9      	movs	r3, #249	; 0xf9
 8001042:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001044:	e001      	b.n	800104a <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001046:	23ff      	movs	r3, #255	; 0xff
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800104a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f9f1 	bl	800144e <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d12c      	bne.n	80010d2 <bmi08a_set_regs+0x7c>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d029      	beq.n	80010d2 <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d023      	beq.n	80010cc <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001084:	7bf8      	ldrb	r0, [r7, #15]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	f000 fa53 	bl	8001536 <set_regs>
 8001090:	4603      	mov	r3, r0
 8001092:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	7bdb      	ldrb	r3, [r3, #15]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d108      	bne.n	80010ae <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	6852      	ldr	r2, [r2, #4]
 80010a4:	4611      	mov	r1, r2
 80010a6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80010aa:	4798      	blx	r3
        if (len > 0)
 80010ac:	e013      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7bdb      	ldrb	r3, [r3, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6852      	ldr	r2, [r2, #4]
 80010be:	4611      	mov	r1, r2
 80010c0:	2002      	movs	r0, #2
 80010c2:	4798      	blx	r3
        if (len > 0)
 80010c4:	e007      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 80010c6:	23fb      	movs	r3, #251	; 0xfb
 80010c8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010ca:	e004      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80010cc:	23f9      	movs	r3, #249	; 0xf9
 80010ce:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010d0:	e001      	b.n	80010d6 <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80010ea:	2300      	movs	r3, #0
 80010ec:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75bb      	strb	r3, [r7, #22]
 80010f2:	2300      	movs	r3, #0
 80010f4:	757b      	strb	r3, [r7, #21]
 80010f6:	2300      	movs	r3, #0
 80010f8:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f9a7 	bl	800144e <null_ptr_check>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d171      	bne.n	80011f0 <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7c9b      	ldrb	r3, [r3, #18]
 8001110:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7c5b      	ldrb	r3, [r3, #17]
 8001116:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7c1b      	ldrb	r3, [r3, #16]
 800111c:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 800111e:	7cfb      	ldrb	r3, [r7, #19]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d902      	bls.n	800112a <bmi08a_set_meas_conf+0x48>
 8001124:	7cfb      	ldrb	r3, [r7, #19]
 8001126:	2b0c      	cmp	r3, #12
 8001128:	d901      	bls.n	800112e <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 800112a:	2301      	movs	r3, #1
 800112c:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 800112e:	7cbb      	ldrb	r3, [r7, #18]
 8001130:	2b0a      	cmp	r3, #10
 8001132:	d901      	bls.n	8001138 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 8001134:	2301      	movs	r3, #1
 8001136:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7b5b      	ldrb	r3, [r3, #13]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d104      	bne.n	800114a <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 8001140:	7c7b      	ldrb	r3, [r7, #17]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d901      	bls.n	800114a <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8001146:	2301      	movs	r3, #1
 8001148:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b5b      	ldrb	r3, [r3, #13]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d104      	bne.n	800115c <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d901      	bls.n	800115c <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 800115c:	7dbb      	ldrb	r3, [r7, #22]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d144      	bne.n	80011ec <bmi08a_set_meas_conf+0x10a>
 8001162:	7d7b      	ldrb	r3, [r7, #21]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d141      	bne.n	80011ec <bmi08a_set_meas_conf+0x10a>
 8001168:	7d3b      	ldrb	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d13e      	bne.n	80011ec <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 800116e:	f107 010c 	add.w	r1, r7, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2202      	movs	r2, #2
 8001176:	2040      	movs	r0, #64	; 0x40
 8001178:	f7ff ff42 	bl	8001000 <bmi08a_get_regs>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d133      	bne.n	80011f0 <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 80011a4:	7b3b      	ldrb	r3, [r7, #12]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	7cbb      	ldrb	r3, [r7, #18]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	f023 0303 	bic.w	r3, r3, #3
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 80011d8:	f107 010c 	add.w	r1, r7, #12
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	2040      	movs	r0, #64	; 0x40
 80011e2:	f000 f9a8 	bl	8001536 <set_regs>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80011ea:	e001      	b.n	80011f0 <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 80011ec:	23f8      	movs	r3, #248	; 0xf8
 80011ee:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80011f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8001204:	2300      	movs	r3, #0
 8001206:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f920 	bl	800144e <null_ptr_check>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d143      	bne.n	80012a2 <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7bdb      	ldrb	r3, [r3, #15]
 800121e:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 8001226:	2300      	movs	r3, #0
 8001228:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 800122a:	2304      	movs	r3, #4
 800122c:	737b      	strb	r3, [r7, #13]
 800122e:	e009      	b.n	8001244 <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d104      	bne.n	8001240 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 8001236:	2303      	movs	r3, #3
 8001238:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	737b      	strb	r3, [r7, #13]
 800123e:	e001      	b.n	8001244 <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 8001240:	23fb      	movs	r3, #251	; 0xfb
 8001242:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d12a      	bne.n	80012a2 <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	207c      	movs	r0, #124	; 0x7c
 8001256:	f000 f96e 	bl	8001536 <set_regs>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11d      	bne.n	80012a2 <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6852      	ldr	r2, [r2, #4]
 800126e:	4611      	mov	r1, r2
 8001270:	f241 3088 	movw	r0, #5000	; 0x1388
 8001274:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	207d      	movs	r0, #125	; 0x7d
 8001282:	f000 f958 	bl	8001536 <set_regs>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6852      	ldr	r2, [r2, #4]
 800129a:	4611      	mov	r1, r2
 800129c:	f241 3088 	movw	r0, #5000	; 0x1388
 80012a0:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	2300      	movs	r3, #0
 80012be:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f000 f8c4 	bl	800144e <null_ptr_check>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 80012ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d140      	bne.n	8001354 <bmi08a_get_data+0xa6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03d      	beq.n	8001354 <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2206      	movs	r2, #6
 80012e0:	2012      	movs	r0, #18
 80012e2:	f7ff fe8d 	bl	8001000 <bmi08a_get_regs>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 80012ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d132      	bne.n	8001358 <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 800130a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800131a:	7d7b      	ldrb	r3, [r7, #21]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	7dbb      	ldrb	r3, [r7, #22]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 800132a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001332:	7c3b      	ldrb	r3, [r7, #16]
 8001334:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001336:	7c7b      	ldrb	r3, [r7, #17]
 8001338:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7dbb      	ldrb	r3, [r7, #22]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21b      	sxth	r3, r3
 8001348:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 800134a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001352:	e001      	b.n	8001358 <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f000 f86d 	bl	800144e <null_ptr_check>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d13a      	bne.n	80013f6 <bmi08a_set_int_config+0x92>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d037      	beq.n	80013f6 <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d82f      	bhi.n	80013ee <bmi08a_set_int_config+0x8a>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <bmi08a_set_int_config+0x30>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a9 	.word	0x080013a9
 8001398:	080013b7 	.word	0x080013b7
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	080013d3 	.word	0x080013d3
 80013a4:	080013e1 	.word	0x080013e1
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f97e 	bl	80016ac <set_accel_data_ready_int>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
                break;
 80013b4:	e01e      	b.n	80013f4 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f9d5 	bl	8001768 <set_accel_sync_data_ready_int>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]
                break;
 80013c2:	e017      	b.n	80013f4 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fa13 	bl	80017f2 <set_accel_sync_input>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
                break;
 80013d0:	e010      	b.n	80013f4 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fa26 	bl	8001826 <set_fifo_wm_int>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
                break;
 80013de:	e009      	b.n	80013f4 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fa7d 	bl	80018e2 <set_fifo_full_int>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
                break;
 80013ec:	e002      	b.n	80013f4 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 80013ee:	23f8      	movs	r3, #248	; 0xf8
 80013f0:	73fb      	strb	r3, [r7, #15]
                break;
 80013f2:	bf00      	nop
        switch (int_config->int_type)
 80013f4:	e001      	b.n	80013fa <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d010      	beq.n	800143e <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 800141c:	f107 010e 	add.w	r1, r7, #14
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	201d      	movs	r0, #29
 8001426:	f7ff fdeb 	bl	8001000 <bmi08a_get_regs>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001436:	7bba      	ldrb	r2, [r7, #14]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e001      	b.n	8001442 <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00f      	beq.n	800147c <null_ptr_check+0x2e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <null_ptr_check+0x2e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d007      	beq.n	800147c <null_ptr_check+0x2e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 800147c:	23ff      	movs	r3, #255	; 0xff
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e001      	b.n	8001486 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001496:	b590      	push	{r4, r7, lr}
 8001498:	b0a7      	sub	sp, #156	; 0x9c
 800149a:	af00      	add	r7, sp, #0
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d103      	bne.n	80014bc <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ba:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6a1c      	ldr	r4, [r3, #32]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	7b9b      	ldrb	r3, [r3, #14]
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	441a      	add	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f107 0114 	add.w	r1, r7, #20
 80014d2:	7bf8      	ldrb	r0, [r7, #15]
 80014d4:	47a0      	blx	r4
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11c      	bne.n	8001524 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80014f0:	e012      	b.n	8001518 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 80014f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	7b92      	ldrb	r2, [r2, #14]
 80014fa:	441a      	add	r2, r3
 80014fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	440b      	add	r3, r1
 8001504:	3298      	adds	r2, #152	; 0x98
 8001506:	443a      	add	r2, r7
 8001508:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800150c:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 800150e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001512:	3301      	adds	r3, #1
 8001514:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001518:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8e7      	bhi.n	80014f2 <get_regs+0x5c>
 8001522:	e002      	b.n	800152a <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8001524:	23fe      	movs	r3, #254	; 0xfe
 8001526:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 800152a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800152e:	4618      	mov	r0, r3
 8001530:	379c      	adds	r7, #156	; 0x9c
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7b1b      	ldrb	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d103      	bne.n	800155a <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001558:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	7bf8      	ldrb	r0, [r7, #15]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	47a0      	blx	r4
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 800157e:	23fe      	movs	r3, #254	; 0xfe
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
 800159c:	2300      	movs	r3, #0
 800159e:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <set_int_pin_config+0x20>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d003      	beq.n	80015b4 <set_int_pin_config+0x26>
 80015ac:	e005      	b.n	80015ba <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 80015ae:	2353      	movs	r3, #83	; 0x53
 80015b0:	73bb      	strb	r3, [r7, #14]
            break;
 80015b2:	e005      	b.n	80015c0 <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 80015b4:	2354      	movs	r3, #84	; 0x54
 80015b6:	73bb      	strb	r3, [r7, #14]
            break;
 80015b8:	e002      	b.n	80015c0 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	737b      	strb	r3, [r7, #13]
            break;
 80015be:	bf00      	nop
    }

    if (!is_channel_invalid)
 80015c0:	7b7b      	ldrb	r3, [r7, #13]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d16a      	bne.n	800169c <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 80015c6:	f107 010c 	add.w	r1, r7, #12
 80015ca:	7bb8      	ldrb	r0, [r7, #14]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f7ff ff61 	bl	8001496 <get_regs>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d15f      	bne.n	80016a0 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001600:	7b3b      	ldrb	r3, [r7, #12]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	b25a      	sxtb	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	78db      	ldrb	r3, [r3, #3]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	b25b      	sxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b25b      	sxtb	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d11a      	bne.n	800165e <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 8001628:	7b3b      	ldrb	r3, [r7, #12]
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 8001632:	7b3b      	ldrb	r3, [r7, #12]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	f023 0310 	bic.w	r3, r3, #16
 800163a:	b25a      	sxtb	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 8001652:	7b3b      	ldrb	r3, [r7, #12]
 8001654:	f023 0308 	bic.w	r3, r3, #8
 8001658:	b2db      	uxtb	r3, r3
 800165a:	733b      	strb	r3, [r7, #12]
 800165c:	e014      	b.n	8001688 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 800165e:	7b3b      	ldrb	r3, [r7, #12]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	f023 0308 	bic.w	r3, r3, #8
 8001666:	b25a      	sxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	791b      	ldrb	r3, [r3, #4]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	f023 0310 	bic.w	r3, r3, #16
 8001684:	b2db      	uxtb	r3, r3
 8001686:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001688:	f107 010c 	add.w	r1, r7, #12
 800168c:	7bb8      	ldrb	r0, [r7, #14]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	f7ff fce0 	bl	8001056 <bmi08a_set_regs>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e001      	b.n	80016a0 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 800169c:	23fb      	movs	r3, #251	; 0xfb
 800169e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80016b6:	2300      	movs	r3, #0
 80016b8:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80016ba:	f107 010d 	add.w	r1, r7, #13
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	2058      	movs	r0, #88	; 0x58
 80016c4:	f7ff fee7 	bl	8001496 <get_regs>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d143      	bne.n	800175c <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <set_accel_data_ready_int+0x3c>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d010      	beq.n	8001708 <set_accel_data_ready_int+0x5c>
 80016e6:	e01f      	b.n	8001728 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	737b      	strb	r3, [r7, #13]
                break;
 8001706:	e012      	b.n	800172e <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001710:	b25a      	sxtb	r2, r3
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	b25b      	sxtb	r3, r3
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	737b      	strb	r3, [r7, #13]
                break;
 8001726:	e002      	b.n	800172e <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001728:	23fb      	movs	r3, #251	; 0xfb
 800172a:	73fb      	strb	r3, [r7, #15]
                break;
 800172c:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d112      	bne.n	800175c <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff28 	bl	800158e <set_int_pin_config>
 800173e:	4603      	mov	r3, r0
 8001740:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800174a:	f107 010d 	add.w	r1, r7, #13
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	2058      	movs	r0, #88	; 0x58
 8001754:	f7ff fc7f 	bl	8001056 <bmi08a_set_regs>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f7ff fe69 	bl	800144e <null_ptr_check>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12e      	bne.n	80017e6 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <set_accel_sync_data_ready_int+0x32>
 8001794:	2b01      	cmp	r3, #1
 8001796:	d003      	beq.n	80017a0 <set_accel_sync_data_ready_int+0x38>
 8001798:	e005      	b.n	80017a6 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 800179a:	2356      	movs	r3, #86	; 0x56
 800179c:	73bb      	strb	r3, [r7, #14]
                break;
 800179e:	e005      	b.n	80017ac <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 80017a0:	2357      	movs	r3, #87	; 0x57
 80017a2:	73bb      	strb	r3, [r7, #14]
                break;
 80017a4:	e002      	b.n	80017ac <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80017a6:	23fb      	movs	r3, #251	; 0xfb
 80017a8:	73fb      	strb	r3, [r7, #15]
                break;
 80017aa:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d118      	bne.n	80017e6 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 80017bc:	2301      	movs	r3, #1
 80017be:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 80017c0:	f107 010d 	add.w	r1, r7, #13
 80017c4:	7bb8      	ldrb	r0, [r7, #14]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fc44 	bl	8001056 <bmi08a_set_regs>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fed6 	bl	800158e <set_int_pin_config>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f7ff fe26 	bl	800144e <null_ptr_check>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff febc 	bl	800158e <set_int_pin_config>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001830:	2300      	movs	r3, #0
 8001832:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001834:	f107 010d 	add.w	r1, r7, #13
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	2058      	movs	r0, #88	; 0x58
 800183e:	f7ff fe2a 	bl	8001496 <get_regs>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d143      	bne.n	80018d6 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <set_fifo_wm_int+0x3c>
 800185c:	2b01      	cmp	r3, #1
 800185e:	d010      	beq.n	8001882 <set_fifo_wm_int+0x5c>
 8001860:	e01f      	b.n	80018a2 <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	f023 0302 	bic.w	r3, r3, #2
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	737b      	strb	r3, [r7, #13]
                break;
 8001880:	e012      	b.n	80018a8 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	f023 0320 	bic.w	r3, r3, #32
 800188a:	b25a      	sxtb	r2, r3
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	b25b      	sxtb	r3, r3
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	b25b      	sxtb	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b25b      	sxtb	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	737b      	strb	r3, [r7, #13]
                break;
 80018a0:	e002      	b.n	80018a8 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80018a2:	23fb      	movs	r3, #251	; 0xfb
 80018a4:	73fb      	strb	r3, [r7, #15]
                break;
 80018a6:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d112      	bne.n	80018d6 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fe6b 	bl	800158e <set_int_pin_config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80018bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80018c4:	f107 010d 	add.w	r1, r7, #13
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	2058      	movs	r0, #88	; 0x58
 80018ce:	f7ff fbc2 	bl	8001056 <bmi08a_set_regs>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80018ec:	2300      	movs	r3, #0
 80018ee:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80018f0:	f107 010d 	add.w	r1, r7, #13
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	2058      	movs	r0, #88	; 0x58
 80018fa:	f7ff fdcc 	bl	8001496 <get_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d142      	bne.n	8001990 <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <set_fifo_full_int+0x3c>
 8001918:	2b01      	cmp	r3, #1
 800191a:	d00f      	beq.n	800193c <set_fifo_full_int+0x5a>
 800191c:	e01e      	b.n	800195c <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 800191e:	7b7b      	ldrb	r3, [r7, #13]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	b25a      	sxtb	r2, r3
 8001928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b25b      	sxtb	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b25b      	sxtb	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	737b      	strb	r3, [r7, #13]
                break;
 800193a:	e012      	b.n	8001962 <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	b25b      	sxtb	r3, r3
 8001940:	f023 0310 	bic.w	r3, r3, #16
 8001944:	b25a      	sxtb	r2, r3
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	b25b      	sxtb	r3, r3
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b25b      	sxtb	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	737b      	strb	r3, [r7, #13]
                break;
 800195a:	e002      	b.n	8001962 <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800195c:	23fb      	movs	r3, #251	; 0xfb
 800195e:	73fb      	strb	r3, [r7, #15]
                break;
 8001960:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fe0e 	bl	800158e <set_int_pin_config>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800197e:	f107 010d 	add.w	r1, r7, #13
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	2058      	movs	r0, #88	; 0x58
 8001988:	f7ff fb65 	bl	8001056 <bmi08a_set_regs>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fa18 	bl	8001dde <null_ptr_check>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <bmi08g_init+0x4a>
    {
        /* Read gyro chip id */


        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 80019ba:	f107 010e 	add.w	r1, r7, #14
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 fa2f 	bl	8001e26 <get_regs>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
//        printf("%d: Chip id\r\n", chip_id);
        if (rslt == BMI08X_OK)
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d108      	bne.n	80019e6 <bmi08g_init+0x4a>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	d103      	bne.n	80019e2 <bmi08g_init+0x46>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 80019da:	7bba      	ldrb	r2, [r7, #14]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	705a      	strb	r2, [r3, #1]
 80019e0:	e001      	b.n	80019e6 <bmi08g_init+0x4a>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 80019e2:	23fd      	movs	r3, #253	; 0xfd
 80019e4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f000 f9eb 	bl	8001dde <null_ptr_check>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <bmi08g_get_regs+0x46>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00e      	beq.n	8001a38 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001a20:	7bf8      	ldrb	r0, [r7, #15]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	f000 f9fd 	bl	8001e26 <get_regs>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001a30:	e004      	b.n	8001a3c <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001a32:	23f9      	movs	r3, #249	; 0xf9
 8001a34:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001a36:	e001      	b.n	8001a3c <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001a38:	23ff      	movs	r3, #255	; 0xff
 8001a3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a58:	6838      	ldr	r0, [r7, #0]
 8001a5a:	f000 f9c0 	bl	8001dde <null_ptr_check>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d130      	bne.n	8001acc <bmi08g_set_regs+0x84>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02d      	beq.n	8001acc <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d027      	beq.n	8001ac6 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001a76:	7bf8      	ldrb	r0, [r7, #15]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	f000 f9fe 	bl	8001e7e <set_regs>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7cdb      	ldrb	r3, [r3, #19]
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d003      	beq.n	8001a96 <bmi08g_set_regs+0x4e>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7cdb      	ldrb	r3, [r3, #19]
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d108      	bne.n	8001aa8 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6892      	ldr	r2, [r2, #8]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001aa4:	4798      	blx	r3
        if (len > 0)
 8001aa6:	e013      	b.n	8001ad0 <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	7cdb      	ldrb	r3, [r3, #19]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	6892      	ldr	r2, [r2, #8]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	2002      	movs	r0, #2
 8001abc:	4798      	blx	r3
        if (len > 0)
 8001abe:	e007      	b.n	8001ad0 <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8001ac0:	23fb      	movs	r3, #251	; 0xfb
 8001ac2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001ac4:	e004      	b.n	8001ad0 <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001ac6:	23f9      	movs	r3, #249	; 0xf9
 8001ac8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001aca:	e001      	b.n	8001ad0 <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001acc:	23ff      	movs	r3, #255	; 0xff
 8001ace:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73bb      	strb	r3, [r7, #14]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f976 	bl	8001dde <null_ptr_check>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d166      	bne.n	8001bcc <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7d9b      	ldrb	r3, [r3, #22]
 8001b02:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7d1b      	ldrb	r3, [r3, #20]
 8001b08:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 8001b0a:	7b3b      	ldrb	r3, [r7, #12]
 8001b0c:	2b07      	cmp	r3, #7
 8001b0e:	d901      	bls.n	8001b14 <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d901      	bls.n	8001b1e <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001b1e:	7b7b      	ldrb	r3, [r7, #13]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d14f      	bne.n	8001bc4 <bmi08g_set_meas_conf+0xe8>
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d14c      	bne.n	8001bc4 <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001b2a:	f107 010a 	add.w	r1, r7, #10
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	2010      	movs	r0, #16
 8001b34:	f7ff ff5d 	bl	80019f2 <bmi08g_get_regs>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d142      	bne.n	8001bca <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8001b44:	7abb      	ldrb	r3, [r7, #10]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001b60:	f107 010a 	add.w	r1, r7, #10
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	2010      	movs	r0, #16
 8001b6a:	f7ff ff6d 	bl	8001a48 <bmi08g_set_regs>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d127      	bne.n	8001bca <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001b7a:	f107 010a 	add.w	r1, r7, #10
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	200f      	movs	r0, #15
 8001b84:	f7ff ff35 	bl	80019f2 <bmi08g_get_regs>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11a      	bne.n	8001bca <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8001b94:	7abb      	ldrb	r3, [r7, #10]
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	f023 0307 	bic.w	r3, r3, #7
 8001b9c:	b25a      	sxtb	r2, r3
 8001b9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001bb0:	f107 010a 	add.w	r1, r7, #10
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	200f      	movs	r0, #15
 8001bba:	f7ff ff45 	bl	8001a48 <bmi08g_set_regs>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8001bc2:	e002      	b.n	8001bca <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001bc4:	23f8      	movs	r3, #248	; 0xf8
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e000      	b.n	8001bcc <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8001bca:	bf00      	nop
        }
    }

    return rslt;
 8001bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8fa 	bl	8001dde <null_ptr_check>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d13a      	bne.n	8001c6c <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 8001bf6:	f107 010c 	add.w	r1, r7, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2011      	movs	r0, #17
 8001c00:	f7ff fef7 	bl	80019f2 <bmi08g_get_regs>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12d      	bne.n	8001c6c <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7cdb      	ldrb	r3, [r3, #19]
 8001c14:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8001c16:	7b7b      	ldrb	r3, [r7, #13]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d104      	bne.n	8001c26 <bmi08g_set_power_mode+0x4e>
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d101      	bne.n	8001c26 <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d104      	bne.n	8001c36 <bmi08g_set_power_mode+0x5e>
 8001c2c:	7b3b      	ldrb	r3, [r7, #12]
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d101      	bne.n	8001c36 <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001c3c:	f107 010d 	add.w	r1, r7, #13
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	2011      	movs	r0, #17
 8001c46:	f7ff feff 	bl	8001a48 <bmi08g_set_regs>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6892      	ldr	r2, [r2, #8]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	f247 5030 	movw	r0, #30000	; 0x7530
 8001c64:	4798      	blx	r3
 8001c66:	e001      	b.n	8001c6c <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8001c68:	23fb      	movs	r3, #251	; 0xfb
 8001c6a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 8001c82:	23c8      	movs	r3, #200	; 0xc8
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	2300      	movs	r3, #0
 8001c88:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f000 f8a7 	bl	8001dde <null_ptr_check>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8001c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d140      	bne.n	8001d1e <bmi08g_get_data+0xa6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03d      	beq.n	8001d1e <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 8001ca2:	f107 010c 	add.w	r1, r7, #12
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2206      	movs	r2, #6
 8001caa:	2002      	movs	r0, #2
 8001cac:	f7ff fea1 	bl	80019f2 <bmi08g_get_regs>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d132      	bne.n	8001d22 <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001cc0:	7b7b      	ldrb	r3, [r7, #13]
 8001cc2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001cc4:	7d7b      	ldrb	r3, [r7, #21]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	7dbb      	ldrb	r3, [r7, #22]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001cd4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001ce4:	7d7b      	ldrb	r3, [r7, #21]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	7dbb      	ldrb	r3, [r7, #22]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001cf4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001cfc:	7c3b      	ldrb	r3, [r7, #16]
 8001cfe:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001d00:	7c7b      	ldrb	r3, [r7, #17]
 8001d02:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d04:	7d7b      	ldrb	r3, [r7, #21]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	7dbb      	ldrb	r3, [r7, #22]
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001d14:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001d1c:	e001      	b.n	8001d22 <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001d1e:	23ff      	movs	r3, #255	; 0xff
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f000 f850 	bl	8001dde <null_ptr_check>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11e      	bne.n	8001d88 <bmi08g_set_int_config+0x5a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <bmi08g_set_int_config+0x36>
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db11      	blt.n	8001d80 <bmi08g_set_int_config+0x52>
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d80e      	bhi.n	8001d80 <bmi08g_set_int_config+0x52>
 8001d62:	e006      	b.n	8001d72 <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8e1 	bl	8001f2e <set_gyro_data_ready_int>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
                break;
 8001d70:	e009      	b.n	8001d86 <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f94c 	bl	8002012 <set_fifo_int>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
                break;
 8001d7e:	e002      	b.n	8001d86 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001d80:	23f8      	movs	r3, #248	; 0xf8
 8001d82:	73fb      	strb	r3, [r7, #15]
                break;
 8001d84:	bf00      	nop
        switch (int_config->int_type)
 8001d86:	e001      	b.n	8001d8c <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001dac:	f107 010e 	add.w	r1, r7, #14
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	200a      	movs	r0, #10
 8001db6:	f7ff fe1c 	bl	80019f2 <bmi08g_get_regs>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001dc6:	7bba      	ldrb	r2, [r7, #14]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e001      	b.n	8001dd2 <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001dce:	23ff      	movs	r3, #255	; 0xff
 8001dd0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00f      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001e0c:	23ff      	movs	r3, #255	; 0xff
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	7b1b      	ldrb	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d103      	bne.n	8001e4a <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e48:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6a1c      	ldr	r4, [r3, #32]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	7bf8      	ldrb	r0, [r7, #15]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	47a0      	blx	r4
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8001e6e:	23fe      	movs	r3, #254	; 0xfe
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}

08001e7e <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d103      	bne.n	8001ea6 <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea4:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d113      	bne.n	8001ed4 <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	7bf8      	ldrb	r0, [r7, #15]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	47a0      	blx	r4
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001ed0:	23fe      	movs	r3, #254	; 0xfe
 8001ed2:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d923      	bls.n	8001f22 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	75bb      	strb	r3, [r7, #22]
 8001ede:	e01c      	b.n	8001f1a <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ee4:	7dbb      	ldrb	r3, [r7, #22]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	18d1      	adds	r1, r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	7bf8      	ldrb	r0, [r7, #15]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	47a0      	blx	r4
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	3301      	adds	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001f0e:	23fe      	movs	r3, #254	; 0xfe
 8001f10:	75fb      	strb	r3, [r7, #23]
                break;
 8001f12:	e006      	b.n	8001f22 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 8001f14:	7dbb      	ldrb	r3, [r7, #22]
 8001f16:	3301      	adds	r3, #1
 8001f18:	75bb      	strb	r3, [r7, #22]
 8001f1a:	7dbb      	ldrb	r3, [r7, #22]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d8de      	bhi.n	8001ee0 <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}

08001f2e <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001f38:	2300      	movs	r3, #0
 8001f3a:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001f3c:	f107 010c 	add.w	r1, r7, #12
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2018      	movs	r0, #24
 8001f46:	f7ff ff6e 	bl	8001e26 <get_regs>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d157      	bne.n	8002006 <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	791b      	ldrb	r3, [r3, #4]
 8001f5a:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <set_gyro_data_ready_int+0x3c>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d00f      	beq.n	8001f88 <set_gyro_data_ready_int+0x5a>
 8001f68:	e01b      	b.n	8001fa2 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 8001f6a:	7b3b      	ldrb	r3, [r7, #12]
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	733b      	strb	r3, [r7, #12]
                break;
 8001f86:	e00f      	b.n	8001fa8 <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 8001f88:	7b3b      	ldrb	r3, [r7, #12]
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f90:	b25a      	sxtb	r2, r3
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	01db      	lsls	r3, r3, #7
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	733b      	strb	r3, [r7, #12]
                break;
 8001fa0:	e002      	b.n	8001fa8 <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001fa2:	23fb      	movs	r3, #251	; 0xfb
 8001fa4:	73fb      	strb	r3, [r7, #15]
                break;
 8001fa6:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12a      	bne.n	8002006 <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	737b      	strb	r3, [r7, #13]
 8001fbe:	e001      	b.n	8001fc4 <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2018      	movs	r0, #24
 8001fce:	f7ff fd3b 	bl	8001a48 <bmi08g_set_regs>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d113      	bne.n	8002006 <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f88c 	bl	80020fe <set_int_pin_config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2015      	movs	r0, #21
 8001ffe:	f7ff fd23 	bl	8001a48 <bmi08g_set_regs>
 8002002:	4603      	mov	r3, r0
 8002004:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 800201c:	2300      	movs	r3, #0
 800201e:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002020:	f107 010c 	add.w	r1, r7, #12
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	2018      	movs	r0, #24
 800202a:	f7ff fefc 	bl	8001e26 <get_regs>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d15b      	bne.n	80020f2 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	791b      	ldrb	r3, [r3, #4]
 800203e:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <set_fifo_int+0x3c>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d010      	beq.n	800206e <set_fifo_int+0x5c>
 800204c:	e01f      	b.n	800208e <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	b25a      	sxtb	r2, r3
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	b25b      	sxtb	r3, r3
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	b25b      	sxtb	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b25b      	sxtb	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	733b      	strb	r3, [r7, #12]
                break;
 800206c:	e012      	b.n	8002094 <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 800206e:	7b3b      	ldrb	r3, [r7, #12]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f023 0320 	bic.w	r3, r3, #32
 8002076:	b25a      	sxtb	r2, r3
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b25b      	sxtb	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	733b      	strb	r3, [r7, #12]
                break;
 800208c:	e002      	b.n	8002094 <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800208e:	23fb      	movs	r3, #251	; 0xfb
 8002090:	73fb      	strb	r3, [r7, #15]
                break;
 8002092:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12a      	bne.n	80020f2 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 800209c:	7b3b      	ldrb	r3, [r7, #12]
 800209e:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 80020a6:	2340      	movs	r3, #64	; 0x40
 80020a8:	737b      	strb	r3, [r7, #13]
 80020aa:	e001      	b.n	80020b0 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80020b0:	f107 010c 	add.w	r1, r7, #12
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	2018      	movs	r0, #24
 80020ba:	f7ff fcc5 	bl	8001a48 <bmi08g_set_regs>
 80020be:	4603      	mov	r3, r0
 80020c0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d113      	bne.n	80020f2 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f816 	bl	80020fe <set_int_pin_config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	2015      	movs	r0, #21
 80020ea:	f7ff fcad 	bl	8001a48 <bmi08g_set_regs>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002108:	f107 010e 	add.w	r1, r7, #14
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	2016      	movs	r0, #22
 8002112:	f7ff fe88 	bl	8001e26 <get_regs>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d150      	bne.n	80021c4 <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <set_int_pin_config+0x32>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d020      	beq.n	8002170 <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 800212e:	e040      	b.n	80021b2 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	b25a      	sxtb	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	b25b      	sxtb	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	f023 0302 	bic.w	r3, r3, #2
 8002156:	b25a      	sxtb	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	b25b      	sxtb	r3, r3
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b25b      	sxtb	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	73bb      	strb	r3, [r7, #14]
                break;
 800216e:	e020      	b.n	80021b2 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	b25b      	sxtb	r3, r3
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	b25b      	sxtb	r3, r3
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	b25b      	sxtb	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b25b      	sxtb	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	f023 0308 	bic.w	r3, r3, #8
 8002198:	b25a      	sxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	73bb      	strb	r3, [r7, #14]
                break;
 80021b0:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 80021b2:	f107 010e 	add.w	r1, r7, #14
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	2016      	movs	r0, #22
 80021bc:	f7ff fc44 	bl	8001a48 <bmi08g_set_regs>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80021d8:	1d39      	adds	r1, r7, #4
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	2201      	movs	r2, #1
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <__io_putchar+0x20>)
 80021e2:	f004 fa4d 	bl	8006680 <HAL_UART_Transmit>
}
 80021e6:	bf00      	nop
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000033c 	.word	0x2000033c

080021f4 <init_bmi08x_get_data>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x_get_data(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 80021fa:	483e      	ldr	r0, [pc, #248]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80021fc:	f7fe fea6 	bl	8000f4c <bmi08a_init>
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4619      	mov	r1, r3
 800220a:	483b      	ldr	r0, [pc, #236]	; (80022f8 <init_bmi08x_get_data+0x104>)
 800220c:	f000 fea4 	bl	8002f58 <bmi08x_error_codes_print_result>
	printf("Accel init\n\r");
 8002210:	483a      	ldr	r0, [pc, #232]	; (80022fc <init_bmi08x_get_data+0x108>)
 8002212:	f005 fb6f 	bl	80078f4 <iprintf>

	if (rslt == BMI08X_OK) {
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <init_bmi08x_get_data+0x46>

		rslt = bmi08g_init(&bmi08xdev);
 800221e:	4835      	ldr	r0, [pc, #212]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002220:	f7ff fbbc 	bl	800199c <bmi08g_init>
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	4619      	mov	r1, r3
 800222e:	4834      	ldr	r0, [pc, #208]	; (8002300 <init_bmi08x_get_data+0x10c>)
 8002230:	f000 fe92 	bl	8002f58 <bmi08x_error_codes_print_result>
		printf("Gyro init\n\r");
 8002234:	4833      	ldr	r0, [pc, #204]	; (8002304 <init_bmi08x_get_data+0x110>)
 8002236:	f005 fb5d 	bl	80078f4 <iprintf>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d152      	bne.n	80022e8 <init_bmi08x_get_data+0xf4>
		printf("init done\n\r");
 8002242:	4831      	ldr	r0, [pc, #196]	; (8002308 <init_bmi08x_get_data+0x114>)
 8002244:	f005 fb56 	bl	80078f4 <iprintf>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <init_bmi08x_get_data+0x100>)
 800224a:	220c      	movs	r2, #12
 800224c:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002250:	7b5b      	ldrb	r3, [r3, #13]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <init_bmi08x_get_data+0x6a>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002258:	2203      	movs	r2, #3
 800225a:	741a      	strb	r2, [r3, #16]
 800225c:	e006      	b.n	800226c <init_bmi08x_get_data+0x78>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002260:	7b5b      	ldrb	r3, [r3, #13]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <init_bmi08x_get_data+0x78>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002268:	2203      	movs	r2, #3
 800226a:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <init_bmi08x_get_data+0x100>)
 800226e:	2200      	movs	r2, #0
 8002270:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002274:	220a      	movs	r2, #10
 8002276:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 8002278:	481e      	ldr	r0, [pc, #120]	; (80022f4 <init_bmi08x_get_data+0x100>)
 800227a:	f7fe ffbf 	bl	80011fc <bmi08a_set_power_mode>
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	4619      	mov	r1, r3
 8002288:	4820      	ldr	r0, [pc, #128]	; (800230c <init_bmi08x_get_data+0x118>)
 800228a:	f000 fe65 	bl	8002f58 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 800228e:	4819      	ldr	r0, [pc, #100]	; (80022f4 <init_bmi08x_get_data+0x100>)
 8002290:	f7fe ff27 	bl	80010e2 <bmi08a_set_meas_conf>
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4619      	mov	r1, r3
 800229e:	481c      	ldr	r0, [pc, #112]	; (8002310 <init_bmi08x_get_data+0x11c>)
 80022a0:	f000 fe5a 	bl	8002f58 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_250_DPS;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022ac:	2203      	movs	r2, #3
 80022ae:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022be:	f7ff fc8b 	bl	8001bd8 <bmi08g_set_power_mode>
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <init_bmi08x_get_data+0x120>)
 80022ce:	f000 fe43 	bl	8002f58 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 80022d2:	4808      	ldr	r0, [pc, #32]	; (80022f4 <init_bmi08x_get_data+0x100>)
 80022d4:	f7ff fc02 	bl	8001adc <bmi08g_set_meas_conf>
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <init_bmi08x_get_data+0x124>)
 80022e4:	f000 fe38 	bl	8002f58 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200003c4 	.word	0x200003c4
 80022f8:	0800a9cc 	.word	0x0800a9cc
 80022fc:	0800a9d8 	.word	0x0800a9d8
 8002300:	0800a9e8 	.word	0x0800a9e8
 8002304:	0800a9f4 	.word	0x0800a9f4
 8002308:	0800aa00 	.word	0x0800aa00
 800230c:	0800aa0c 	.word	0x0800aa0c
 8002310:	0800aa24 	.word	0x0800aa24
 8002314:	0800aa3c 	.word	0x0800aa3c
 8002318:	0800aa54 	.word	0x0800aa54

0800231c <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 800232e:	2200      	movs	r2, #0
 8002330:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 8002334:	2200      	movs	r2, #0
 8002336:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 800233a:	2201      	movs	r2, #1
 800233c:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 8002340:	2201      	movs	r2, #1
 8002342:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 8002344:	4920      	ldr	r1, [pc, #128]	; (80023c8 <enable_bmi08x_interrupt+0xac>)
 8002346:	481f      	ldr	r0, [pc, #124]	; (80023c4 <enable_bmi08x_interrupt+0xa8>)
 8002348:	f7ff f80c 	bl	8001364 <bmi08a_set_int_config>
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4619      	mov	r1, r3
 8002356:	481d      	ldr	r0, [pc, #116]	; (80023cc <enable_bmi08x_interrupt+0xb0>)
 8002358:	f000 fdfe 	bl	8002f58 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d128      	bne.n	80023b6 <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 8002372:	2200      	movs	r2, #0
 8002374:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 8002378:	2201      	movs	r2, #1
 800237a:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 800237e:	2201      	movs	r2, #1
 8002380:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 8002382:	4911      	ldr	r1, [pc, #68]	; (80023c8 <enable_bmi08x_interrupt+0xac>)
 8002384:	4812      	ldr	r0, [pc, #72]	; (80023d0 <enable_bmi08x_interrupt+0xb4>)
 8002386:	f7ff fcd2 	bl	8001d2e <bmi08g_set_int_config>
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	4619      	mov	r1, r3
 8002394:	480f      	ldr	r0, [pc, #60]	; (80023d4 <enable_bmi08x_interrupt+0xb8>)
 8002396:	f000 fddf 	bl	8002f58 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 800239a:	1db9      	adds	r1, r7, #6
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <enable_bmi08x_interrupt+0xac>)
 800239e:	2201      	movs	r2, #1
 80023a0:	2018      	movs	r0, #24
 80023a2:	f7ff fb26 	bl	80019f2 <bmi08g_get_regs>
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <enable_bmi08x_interrupt+0xbc>)
 80023b2:	f000 fdd1 	bl	8002f58 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200003f4 	.word	0x200003f4
 80023c8:	200003c4 	.word	0x200003c4
 80023cc:	0800abb8 	.word	0x0800abb8
 80023d0:	200003fc 	.word	0x200003fc
 80023d4:	0800abd0 	.word	0x0800abd0
 80023d8:	0800abe8 	.word	0x0800abe8

080023dc <disable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t disable_bmi08x_interrupt() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	int8_t rslt;

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_DISABLE;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	711a      	strb	r2, [r3, #4]

	/* Disable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 8002400:	4919      	ldr	r1, [pc, #100]	; (8002468 <disable_bmi08x_interrupt+0x8c>)
 8002402:	4818      	ldr	r0, [pc, #96]	; (8002464 <disable_bmi08x_interrupt+0x88>)
 8002404:	f7fe ffae 	bl	8001364 <bmi08a_set_int_config>
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4619      	mov	r1, r3
 8002412:	4816      	ldr	r0, [pc, #88]	; (800246c <disable_bmi08x_interrupt+0x90>)
 8002414:	f000 fda0 	bl	8002f58 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11a      	bne.n	8002456 <disable_bmi08x_interrupt+0x7a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 8002428:	2200      	movs	r2, #0
 800242a:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 8002434:	2201      	movs	r2, #1
 8002436:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_DISABLE;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	711a      	strb	r2, [r3, #4]

		/* Disable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <disable_bmi08x_interrupt+0x8c>)
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <disable_bmi08x_interrupt+0x94>)
 8002442:	f7ff fc74 	bl	8001d2e <bmi08g_set_int_config>
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	4619      	mov	r1, r3
 8002450:	4808      	ldr	r0, [pc, #32]	; (8002474 <disable_bmi08x_interrupt+0x98>)
 8002452:	f000 fd81 	bl	8002f58 <bmi08x_error_codes_print_result>
	}

	return rslt;
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003f4 	.word	0x200003f4
 8002468:	200003c4 	.word	0x200003c4
 800246c:	0800abb8 	.word	0x0800abb8
 8002470:	200003fc 	.word	0x200003fc
 8002474:	0800abd0 	.word	0x0800abd0

08002478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	b08f      	sub	sp, #60	; 0x3c
 800247e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f001 f8db 	bl	800363a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002484:	f000 f9d4 	bl	8002830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002488:	f000 fb04 	bl	8002a94 <MX_GPIO_Init>
  MX_DMA_Init();
 800248c:	f000 fadc 	bl	8002a48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002490:	f000 faaa 	bl	80029e8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002494:	f000 fa1c 	bl	80028d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002498:	f000 fa58 	bl	800294c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	int8_t rslt;
	float x = 0.0, y = 0.0, z = 0.0;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
	int times_to_read = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
	uint8_t status = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	70fb      	strb	r3, [r7, #3]

	HAL_TIM_Base_Start(&htim2);
 80024b6:	48c1      	ldr	r0, [pc, #772]	; (80027bc <main+0x344>)
 80024b8:	f003 fe1a 	bl	80060f0 <HAL_TIM_Base_Start>
	//	HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
//	printf("Hello\n\r");
//  	init_handle(&bmi085_handle);

// This is where we would set the CS for accel/gyro, urrently have the .ioc just have the GPIO pins output high
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI085_VARIANT);
 80024bc:	2200      	movs	r2, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	48bf      	ldr	r0, [pc, #764]	; (80027c0 <main+0x348>)
 80024c2:	f000 fcef 	bl	8002ea4 <bmi08x_interface_init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 80024ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024ce:	4619      	mov	r1, r3
 80024d0:	48bc      	ldr	r0, [pc, #752]	; (80027c4 <main+0x34c>)
 80024d2:	f000 fd41 	bl	8002f58 <bmi08x_error_codes_print_result>
	printf("Init attempted\r\n");
 80024d6:	48bc      	ldr	r0, [pc, #752]	; (80027c8 <main+0x350>)
 80024d8:	f005 fa92 	bl	8007a00 <puts>
//	HAL_Delay(1000);
//	bmi08x_delay_us(10000,0);

	if(rslt == BMI08X_OK){
 80024dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10c      	bne.n	80024fe <main+0x86>
		rslt = init_bmi08x_get_data(); // An API function that has very few edits from me, should just work if wired properly and spi read/write works
 80024e4:	f7ff fe86 	bl	80021f4 <init_bmi08x_get_data>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]
		bmi08x_error_codes_print_result("init_bmi08x_get_data", rslt);
 80024ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024f0:	4619      	mov	r1, r3
 80024f2:	48b6      	ldr	r0, [pc, #728]	; (80027cc <main+0x354>)
 80024f4:	f000 fd30 	bl	8002f58 <bmi08x_error_codes_print_result>
		printf("Init attempted read/write\r\n");
 80024f8:	48b5      	ldr	r0, [pc, #724]	; (80027d0 <main+0x358>)
 80024fa:	f005 fa81 	bl	8007a00 <puts>
	}
//	bmi08x_delay_us(10000,0);

	if(rslt == BMI08X_OK){
 80024fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <main+0xa8>
		rslt = enable_bmi08x_interrupt();
 8002506:	f7ff ff09 	bl	800231c <enable_bmi08x_interrupt>
 800250a:	4603      	mov	r3, r0
 800250c:	75fb      	strb	r3, [r7, #23]
		bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 800250e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002512:	4619      	mov	r1, r3
 8002514:	48af      	ldr	r0, [pc, #700]	; (80027d4 <main+0x35c>)
 8002516:	f000 fd1f 	bl	8002f58 <bmi08x_error_codes_print_result>
		printf("Int init attempted\r\n");
 800251a:	48af      	ldr	r0, [pc, #700]	; (80027d8 <main+0x360>)
 800251c:	f005 fa70 	bl	8007a00 <puts>
	}

	printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\r");
 8002520:	48ae      	ldr	r0, [pc, #696]	; (80027dc <main+0x364>)
 8002522:	f005 f9e7 	bl	80078f4 <iprintf>
	printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 8002526:	48ae      	ldr	r0, [pc, #696]	; (80027e0 <main+0x368>)
 8002528:	f005 f9e4 	bl	80078f4 <iprintf>


	if (rslt == BMI08X_OK) {
 800252c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 8126 	bne.w	8002782 <main+0x30a>
		if (bmi08xdev.accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE) {
 8002536:	4ba2      	ldr	r3, [pc, #648]	; (80027c0 <main+0x348>)
 8002538:	7bdb      	ldrb	r3, [r3, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 809e 	bne.w	800267c <main+0x204>
			printf("\nACCEL DATA\n\r");
 8002540:	48a8      	ldr	r0, [pc, #672]	; (80027e4 <main+0x36c>)
 8002542:	f005 f9d7 	bl	80078f4 <iprintf>
			printf("Accel data in LSB units and Gravity data in m/s^2\n\r");
 8002546:	48a8      	ldr	r0, [pc, #672]	; (80027e8 <main+0x370>)
 8002548:	f005 f9d4 	bl	80078f4 <iprintf>
			printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n\r");
 800254c:	48a7      	ldr	r0, [pc, #668]	; (80027ec <main+0x374>)
 800254e:	f005 f9d1 	bl	80078f4 <iprintf>

			printf(
 8002552:	48a7      	ldr	r0, [pc, #668]	; (80027f0 <main+0x378>)
 8002554:	f005 f9ce 	bl	80078f4 <iprintf>
					"Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n\r");

			while (times_to_read < 10) {
 8002558:	e08c      	b.n	8002674 <main+0x1fc>

				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 800255a:	1cfb      	adds	r3, r7, #3
 800255c:	4998      	ldr	r1, [pc, #608]	; (80027c0 <main+0x348>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe ff52 	bl	8001408 <bmi08a_get_data_int_status>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
				bmi08x_error_codes_print_result("bmi08a_get_data_int_status",
 8002568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800256c:	4619      	mov	r1, r3
 800256e:	48a1      	ldr	r0, [pc, #644]	; (80027f4 <main+0x37c>)
 8002570:	f000 fcf2 	bl	8002f58 <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_ACCEL_DATA_READY_INT) {
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	da7b      	bge.n	8002674 <main+0x1fc>
					rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 800257c:	4990      	ldr	r1, [pc, #576]	; (80027c0 <main+0x348>)
 800257e:	489e      	ldr	r0, [pc, #632]	; (80027f8 <main+0x380>)
 8002580:	f7fe fe95 	bl	80012ae <bmi08a_get_data>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]
					bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 8002588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800258c:	4619      	mov	r1, r3
 800258e:	489b      	ldr	r0, [pc, #620]	; (80027fc <main+0x384>)
 8002590:	f000 fce2 	bl	8002f58 <bmi08x_error_codes_print_result>

					if (bmi08xdev.variant == BMI085_VARIANT) {
 8002594:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <main+0x348>)
 8002596:	7b5b      	ldrb	r3, [r3, #13]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11e      	bne.n	80025da <main+0x162>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 16, 16);
 800259c:	4b96      	ldr	r3, [pc, #600]	; (80027f8 <main+0x380>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	2210      	movs	r2, #16
 80025a4:	2110      	movs	r1, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb1c 	bl	8002be4 <lsb_to_mps2>
 80025ac:	ed87 0a04 	vstr	s0, [r7, #16]
						y = lsb_to_mps2(bmi08x_accel.y, 16, 16);
 80025b0:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <main+0x380>)
 80025b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025b6:	2210      	movs	r2, #16
 80025b8:	2110      	movs	r1, #16
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fb12 	bl	8002be4 <lsb_to_mps2>
 80025c0:	ed87 0a03 	vstr	s0, [r7, #12]
						z = lsb_to_mps2(bmi08x_accel.z, 16, 16);
 80025c4:	4b8c      	ldr	r3, [pc, #560]	; (80027f8 <main+0x380>)
 80025c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025ca:	2210      	movs	r2, #16
 80025cc:	2110      	movs	r1, #16
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fb08 	bl	8002be4 <lsb_to_mps2>
 80025d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025d8:	e021      	b.n	800261e <main+0x1a6>
					} else if (bmi08xdev.variant == BMI088_VARIANT) {
 80025da:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <main+0x348>)
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d11d      	bne.n	800261e <main+0x1a6>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 80025e2:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <main+0x380>)
 80025e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e8:	2210      	movs	r2, #16
 80025ea:	2118      	movs	r1, #24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 faf9 	bl	8002be4 <lsb_to_mps2>
 80025f2:	ed87 0a04 	vstr	s0, [r7, #16]
						y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 80025f6:	4b80      	ldr	r3, [pc, #512]	; (80027f8 <main+0x380>)
 80025f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fc:	2210      	movs	r2, #16
 80025fe:	2118      	movs	r1, #24
 8002600:	4618      	mov	r0, r3
 8002602:	f000 faef 	bl	8002be4 <lsb_to_mps2>
 8002606:	ed87 0a03 	vstr	s0, [r7, #12]
						z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 800260a:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <main+0x380>)
 800260c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002610:	2210      	movs	r2, #16
 8002612:	2118      	movs	r1, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fae5 	bl	8002be4 <lsb_to_mps2>
 800261a:	ed87 0a02 	vstr	s0, [r7, #8]
					}

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <main+0x380>)
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002624:	469a      	mov	sl, r3
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 8002626:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <main+0x380>)
 8002628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 800262c:	469b      	mov	fp, r3
							bmi08x_accel.z, x, y, z);
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <main+0x380>)
 8002630:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002634:	461e      	mov	r6, r3
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f7fd ff86 	bl	8000548 <__aeabi_f2d>
 800263c:	4604      	mov	r4, r0
 800263e:	460d      	mov	r5, r1
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7fd ff81 	bl	8000548 <__aeabi_f2d>
 8002646:	4680      	mov	r8, r0
 8002648:	4689      	mov	r9, r1
 800264a:	68b8      	ldr	r0, [r7, #8]
 800264c:	f7fd ff7c 	bl	8000548 <__aeabi_f2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002658:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800265c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002660:	9600      	str	r6, [sp, #0]
 8002662:	465b      	mov	r3, fp
 8002664:	4652      	mov	r2, sl
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4865      	ldr	r0, [pc, #404]	; (8002800 <main+0x388>)
 800266a:	f005 f943 	bl	80078f4 <iprintf>

					times_to_read = times_to_read + 1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3301      	adds	r3, #1
 8002672:	607b      	str	r3, [r7, #4]
			while (times_to_read < 10) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b09      	cmp	r3, #9
 8002678:	f77f af6f 	ble.w	800255a <main+0xe2>
				}
//				bmi08x_delay_us(1000,0);
			}
		}

		if (bmi08xdev.gyro_cfg.power == BMI08X_GYRO_PM_NORMAL) {
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <main+0x348>)
 800267e:	7cdb      	ldrb	r3, [r3, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d17e      	bne.n	8002782 <main+0x30a>
			times_to_read = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	607b      	str	r3, [r7, #4]

			printf("\n\nGYRO DATA\n");
 8002688:	485e      	ldr	r0, [pc, #376]	; (8002804 <main+0x38c>)
 800268a:	f005 f9b9 	bl	8007a00 <puts>
			printf("Gyro data in LSB units and degrees per second\n\r");
 800268e:	485e      	ldr	r0, [pc, #376]	; (8002808 <main+0x390>)
 8002690:	f005 f930 	bl	80078f4 <iprintf>
			printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 8002694:	4852      	ldr	r0, [pc, #328]	; (80027e0 <main+0x368>)
 8002696:	f005 f92d 	bl	80078f4 <iprintf>

			printf(
 800269a:	485c      	ldr	r0, [pc, #368]	; (800280c <main+0x394>)
 800269c:	f005 f92a 	bl	80078f4 <iprintf>
					"Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n\r");

			while (times_to_read < 10) {
 80026a0:	e06c      	b.n	800277c <main+0x304>
				rslt = bmi08g_get_data_int_status(&status, &bmi08xdev);
 80026a2:	1cfb      	adds	r3, r7, #3
 80026a4:	4946      	ldr	r1, [pc, #280]	; (80027c0 <main+0x348>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fb76 	bl	8001d98 <bmi08g_get_data_int_status>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]
				bmi08x_error_codes_print_result("bmi08g_get_data_int_status",
 80026b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4856      	ldr	r0, [pc, #344]	; (8002810 <main+0x398>)
 80026b8:	f000 fc4e 	bl	8002f58 <bmi08x_error_codes_print_result>
						rslt);
				if(rslt == BMI08X_OK)
 80026bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d15b      	bne.n	800277c <main+0x304>
					if (status & BMI08X_GYRO_DATA_READY_INT) {
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da57      	bge.n	800277c <main+0x304>
						rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 80026cc:	493c      	ldr	r1, [pc, #240]	; (80027c0 <main+0x348>)
 80026ce:	4851      	ldr	r0, [pc, #324]	; (8002814 <main+0x39c>)
 80026d0:	f7ff fad2 	bl	8001c78 <bmi08g_get_data>
 80026d4:	4603      	mov	r3, r0
 80026d6:	75fb      	strb	r3, [r7, #23]
						bmi08x_error_codes_print_result("bmi08g_get_data", rslt);
 80026d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026dc:	4619      	mov	r1, r3
 80026de:	484e      	ldr	r0, [pc, #312]	; (8002818 <main+0x3a0>)
 80026e0:	f000 fc3a 	bl	8002f58 <bmi08x_error_codes_print_result>

						/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
						x = lsb_to_dps(bmi08x_gyro.x, (float) 250, 16);
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <main+0x39c>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	2110      	movs	r1, #16
 80026ec:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800281c <main+0x3a4>
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fac1 	bl	8002c78 <lsb_to_dps>
 80026f6:	ed87 0a04 	vstr	s0, [r7, #16]
						y = lsb_to_dps(bmi08x_gyro.y, (float) 250, 16);
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <main+0x39c>)
 80026fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002700:	2110      	movs	r1, #16
 8002702:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800281c <main+0x3a4>
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fab6 	bl	8002c78 <lsb_to_dps>
 800270c:	ed87 0a03 	vstr	s0, [r7, #12]
						z = lsb_to_dps(bmi08x_gyro.z, (float) 250, 16);
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <main+0x39c>)
 8002712:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002716:	2110      	movs	r1, #16
 8002718:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800281c <main+0x3a4>
 800271c:	4618      	mov	r0, r3
 800271e:	f000 faab 	bl	8002c78 <lsb_to_dps>
 8002722:	ed87 0a02 	vstr	s0, [r7, #8]

						printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
								times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <main+0x39c>)
 8002728:	f9b3 3000 	ldrsh.w	r3, [r3]
						printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 800272c:	469a      	mov	sl, r3
								times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <main+0x39c>)
 8002730:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
						printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002734:	469b      	mov	fp, r3
								bmi08x_gyro.z, x, y, z);
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <main+0x39c>)
 8002738:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
						printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 800273c:	461e      	mov	r6, r3
 800273e:	6938      	ldr	r0, [r7, #16]
 8002740:	f7fd ff02 	bl	8000548 <__aeabi_f2d>
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7fd fefd 	bl	8000548 <__aeabi_f2d>
 800274e:	4680      	mov	r8, r0
 8002750:	4689      	mov	r9, r1
 8002752:	68b8      	ldr	r0, [r7, #8]
 8002754:	f7fd fef8 	bl	8000548 <__aeabi_f2d>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002760:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002764:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002768:	9600      	str	r6, [sp, #0]
 800276a:	465b      	mov	r3, fp
 800276c:	4652      	mov	r2, sl
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4823      	ldr	r0, [pc, #140]	; (8002800 <main+0x388>)
 8002772:	f005 f8bf 	bl	80078f4 <iprintf>

						times_to_read = times_to_read + 1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3301      	adds	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
			while (times_to_read < 10) {
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b09      	cmp	r3, #9
 8002780:	dd8f      	ble.n	80026a2 <main+0x22a>
					}
//				bmi08x_delay_us(1000,0);
			}
		}
	}
	printf("%d\r\n", error_status);
 8002782:	4b27      	ldr	r3, [pc, #156]	; (8002820 <main+0x3a8>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4826      	ldr	r0, [pc, #152]	; (8002824 <main+0x3ac>)
 800278a:	f005 f8b3 	bl	80078f4 <iprintf>
	printf("End of file\r\n");
 800278e:	4826      	ldr	r0, [pc, #152]	; (8002828 <main+0x3b0>)
 8002790:	f005 f936 	bl	8007a00 <puts>
	if(rslt == BMI08X_OK){
 8002794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <main+0x338>
		rslt = disable_bmi08x_interrupt();
 800279c:	f7ff fe1e 	bl	80023dc <disable_bmi08x_interrupt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]
		bmi08x_error_codes_print_result("disable_bmi08_interrupt", rslt);
 80027a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4820      	ldr	r0, [pc, #128]	; (800282c <main+0x3b4>)
 80027ac:	f000 fbd4 	bl	8002f58 <bmi08x_error_codes_print_result>
	}
	return 0;
 80027b0:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
////	 printf("Hello\n");
//  }
  /* USER CODE END 3 */
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027bc:	200002f0 	.word	0x200002f0
 80027c0:	200003c4 	.word	0x200003c4
 80027c4:	0800ac18 	.word	0x0800ac18
 80027c8:	0800ac30 	.word	0x0800ac30
 80027cc:	0800ac40 	.word	0x0800ac40
 80027d0:	0800ac58 	.word	0x0800ac58
 80027d4:	0800ac74 	.word	0x0800ac74
 80027d8:	0800ac8c 	.word	0x0800ac8c
 80027dc:	0800aca0 	.word	0x0800aca0
 80027e0:	0800acd8 	.word	0x0800acd8
 80027e4:	0800ad0c 	.word	0x0800ad0c
 80027e8:	0800ad1c 	.word	0x0800ad1c
 80027ec:	0800ad50 	.word	0x0800ad50
 80027f0:	0800ad88 	.word	0x0800ad88
 80027f4:	0800addc 	.word	0x0800addc
 80027f8:	20000404 	.word	0x20000404
 80027fc:	0800adf8 	.word	0x0800adf8
 8002800:	0800ae08 	.word	0x0800ae08
 8002804:	0800ae34 	.word	0x0800ae34
 8002808:	0800ae40 	.word	0x0800ae40
 800280c:	0800ae70 	.word	0x0800ae70
 8002810:	0800aec4 	.word	0x0800aec4
 8002814:	2000040c 	.word	0x2000040c
 8002818:	0800aee0 	.word	0x0800aee0
 800281c:	437a0000 	.word	0x437a0000
 8002820:	200003c2 	.word	0x200003c2
 8002824:	0800aef0 	.word	0x0800aef0
 8002828:	0800aef8 	.word	0x0800aef8
 800282c:	0800af08 	.word	0x0800af08

08002830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b096      	sub	sp, #88	; 0x58
 8002834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	2244      	movs	r2, #68	; 0x44
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fbe6 	bl	8007010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002844:	463b      	mov	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002856:	f001 fc2b 	bl	80040b0 <HAL_PWREx_ControlVoltageScaling>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002860:	f000 fc62 	bl	8003128 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002864:	2302      	movs	r3, #2
 8002866:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800286e:	2340      	movs	r3, #64	; 0x40
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	2302      	movs	r3, #2
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002876:	2302      	movs	r3, #2
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 800287e:	230a      	movs	r3, #10
 8002880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002882:	2302      	movs	r3, #2
 8002884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002886:	2302      	movs	r3, #2
 8002888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fc64 	bl	800415c <HAL_RCC_OscConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800289a:	f000 fc45 	bl	8003128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289e:	230f      	movs	r3, #15
 80028a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a2:	2303      	movs	r3, #3
 80028a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028b2:	463b      	mov	r3, r7
 80028b4:	2104      	movs	r1, #4
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 f8b2 	bl	8004a20 <HAL_RCC_ClockConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028c2:	f000 fc31 	bl	8003128 <Error_Handler>
  }
}
 80028c6:	bf00      	nop
 80028c8:	3758      	adds	r7, #88	; 0x58
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_SPI1_Init+0x74>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <MX_SPI1_Init+0x78>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_SPI1_Init+0x74>)
 80028dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_SPI1_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MX_SPI1_Init+0x74>)
 80028ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_SPI1_Init+0x74>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <MX_SPI1_Init+0x74>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_SPI1_Init+0x74>)
 80028fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_SPI1_Init+0x74>)
 8002906:	2218      	movs	r2, #24
 8002908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_SPI1_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_SPI1_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <MX_SPI1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_SPI1_Init+0x74>)
 800291e:	2207      	movs	r2, #7
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <MX_SPI1_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_SPI1_Init+0x74>)
 800292a:	2208      	movs	r2, #8
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_SPI1_Init+0x74>)
 8002930:	f002 fc20 	bl	8005174 <HAL_SPI_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800293a:	f000 fbf5 	bl	8003128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200001fc 	.word	0x200001fc
 8002948:	40013000 	.word	0x40013000

0800294c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <MX_TIM2_Init+0x98>)
 800296c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <MX_TIM2_Init+0x98>)
 8002974:	224f      	movs	r2, #79	; 0x4f
 8002976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <MX_TIM2_Init+0x98>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff-1;
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <MX_TIM2_Init+0x98>)
 8002980:	f06f 0201 	mvn.w	r2, #1
 8002984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <MX_TIM2_Init+0x98>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <MX_TIM2_Init+0x98>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002992:	4814      	ldr	r0, [pc, #80]	; (80029e4 <MX_TIM2_Init+0x98>)
 8002994:	f003 fb54 	bl	8006040 <HAL_TIM_Base_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800299e:	f000 fbc3 	bl	8003128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4619      	mov	r1, r3
 80029ae:	480d      	ldr	r0, [pc, #52]	; (80029e4 <MX_TIM2_Init+0x98>)
 80029b0:	f003 fbea 	bl	8006188 <HAL_TIM_ConfigClockSource>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029ba:	f000 fbb5 	bl	8003128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <MX_TIM2_Init+0x98>)
 80029cc:	f003 fda4 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80029d6:	f000 fba7 	bl	8003128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200002f0 	.word	0x200002f0

080029e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 80029ee:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <MX_USART2_UART_Init+0x5c>)
 80029f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 80029f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <MX_USART2_UART_Init+0x58>)
 8002a2c:	f003 fdda 	bl	80065e4 <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a36:	f000 fb77 	bl	8003128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000033c 	.word	0x2000033c
 8002a44:	40004400 	.word	0x40004400

08002a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MX_DMA_Init+0x48>)
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <MX_DMA_Init+0x48>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6493      	str	r3, [r2, #72]	; 0x48
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_DMA_Init+0x48>)
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	200c      	movs	r0, #12
 8002a6c:	f000 ff35 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a70:	200c      	movs	r0, #12
 8002a72:	f000 ff4e 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	200d      	movs	r0, #13
 8002a7c:	f000 ff2d 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a80:	200d      	movs	r0, #13
 8002a82:	f000 ff46 	bl	8003912 <HAL_NVIC_EnableIRQ>

}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000

08002a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac2:	4b45      	ldr	r3, [pc, #276]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a44      	ldr	r2, [pc, #272]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <MX_GPIO_Init+0x144>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b10:	4832      	ldr	r0, [pc, #200]	; (8002bdc <MX_GPIO_Init+0x148>)
 8002b12:	f001 fa83 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BMI085_NSSg_Pin|BMI085_NSSa_Pin, GPIO_PIN_SET);
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b1c:	4830      	ldr	r0, [pc, #192]	; (8002be0 <MX_GPIO_Init+0x14c>)
 8002b1e:	f001 fa7d 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4829      	ldr	r0, [pc, #164]	; (8002be0 <MX_GPIO_Init+0x14c>)
 8002b3a:	f001 f8fd 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_DRDY_Pin */
  GPIO_InitStruct.Pin = ACCEL_DRDY_Pin;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_DRDY_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f001 f8ef 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_DRDY_Pin */
  GPIO_InitStruct.Pin = GYRO_DRDY_Pin;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_DRDY_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481b      	ldr	r0, [pc, #108]	; (8002bdc <MX_GPIO_Init+0x148>)
 8002b70:	f001 f8e2 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4813      	ldr	r0, [pc, #76]	; (8002bdc <MX_GPIO_Init+0x148>)
 8002b8e:	f001 f8d3 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI085_NSSg_Pin BMI085_NSSa_Pin */
  GPIO_InitStruct.Pin = BMI085_NSSg_Pin|BMI085_NSSa_Pin;
 8002b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_GPIO_Init+0x14c>)
 8002bac:	f001 f8c4 	bl	8003d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2006      	movs	r0, #6
 8002bb6:	f000 fe90 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bba:	2006      	movs	r0, #6
 8002bbc:	f000 fea9 	bl	8003912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2008      	movs	r0, #8
 8002bc6:	f000 fe88 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002bca:	2008      	movs	r0, #8
 8002bcc:	f000 fea1 	bl	8003912 <HAL_NVIC_EnableIRQ>

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	48000800 	.word	0x48000800

08002be4 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	717b      	strb	r3, [r7, #5]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	713b      	strb	r3, [r7, #4]
    double power = 2;
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002c02:	793b      	ldrb	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc7d 	bl	8000504 <__aeabi_ui2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	ec43 2b11 	vmov	d1, r2, r3
 8002c12:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c16:	f006 ffa5 	bl	8009b64 <pow>
 8002c1a:	ec51 0b10 	vmov	r0, r1, d0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c26:	f7fd fe11 	bl	800084c <__aeabi_ddiv>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd ffb9 	bl	8000ba8 <__aeabi_d2f>
 8002c36:	4603      	mov	r3, r0
 8002c38:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002c74 <lsb_to_mps2+0x90>
 8002c4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c66:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	411ce80a 	.word	0x411ce80a

08002c78 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	ed87 0a00 	vstr	s0, [r7]
 8002c84:	460a      	mov	r2, r1
 8002c86:	80fb      	strh	r3, [r7, #6]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c94:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002c98:	797b      	ldrb	r3, [r7, #5]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc32 	bl	8000504 <__aeabi_ui2d>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	ec43 2b11 	vmov	d1, r2, r3
 8002ca8:	ed97 0b04 	vldr	d0, [r7, #16]
 8002cac:	f006 ff5a 	bl	8009b64 <pow>
 8002cb0:	ec51 0b10 	vmov	r0, r1, d0
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cbc:	f7fd fdc6 	bl	800084c <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd ff6e 	bl	8000ba8 <__aeabi_d2f>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002cd0:	edd7 6a00 	vldr	s13, [r7]
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <bmi08x_spi_read>:

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]

	dev_addr = *(uint16_t*) intf_ptr;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <bmi08x_spi_read+0xa8>)
 8002d0e:	801a      	strh	r2, [r3, #0]
//	uint16_t tx = (reg_addr) << 8;

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <bmi08x_spi_read+0xa8>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4822      	ldr	r0, [pc, #136]	; (8002da4 <bmi08x_spi_read+0xac>)
 8002d1a:	f001 f97f 	bl	800401c <HAL_GPIO_WritePin>
	while(!(tx_rdy && rx_rdy));
 8002d1e:	bf00      	nop
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <bmi08x_spi_read+0xb0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0fa      	beq.n	8002d20 <bmi08x_spi_read+0x28>
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <bmi08x_spi_read+0xb4>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f5      	beq.n	8002d20 <bmi08x_spi_read+0x28>
	tx_rdy = 0;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <bmi08x_spi_read+0xb0>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
//	rx_rdy = 0;

	if (HAL_SPI_Transmit_DMA(&hspi1, &reg_addr, sizeof(reg_addr)) != HAL_OK) {
 8002d3a:	f107 030f 	add.w	r3, r7, #15
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4619      	mov	r1, r3
 8002d42:	481b      	ldr	r0, [pc, #108]	; (8002db0 <bmi08x_spi_read+0xb8>)
 8002d44:	f002 faba 	bl	80052bc <HAL_SPI_Transmit_DMA>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <bmi08x_spi_read+0x5a>
		return 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e022      	b.n	8002d98 <bmi08x_spi_read+0xa0>
	}


//	tx_rdy = 0;
	while(!(tx_rdy));
 8002d52:	bf00      	nop
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <bmi08x_spi_read+0xb0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0fa      	beq.n	8002d54 <bmi08x_spi_read+0x5c>
	rx_rdy = 0;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <bmi08x_spi_read+0xb4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
	if (HAL_SPI_Receive_DMA(&hspi1, reg_data, len) != HAL_OK) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	4810      	ldr	r0, [pc, #64]	; (8002db0 <bmi08x_spi_read+0xb8>)
 8002d6e:	f002 fb99 	bl	80054a4 <HAL_SPI_Receive_DMA>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <bmi08x_spi_read+0x84>
			return 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00d      	b.n	8002d98 <bmi08x_spi_read+0xa0>
	}
//
//	tx_rdy = 0;
	while(!(rx_rdy));
 8002d7c:	bf00      	nop
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <bmi08x_spi_read+0xb4>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0fa      	beq.n	8002d7e <bmi08x_spi_read+0x86>
	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <bmi08x_spi_read+0xa8>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <bmi08x_spi_read+0xac>)
 8002d92:	f001 f943 	bl	800401c <HAL_GPIO_WritePin>
//	bmi08x_delay_us(200, 0);
	return 0;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200003c0 	.word	0x200003c0
 8002da4:	48000800 	.word	0x48000800
 8002da8:	20000001 	.word	0x20000001
 8002dac:	20000000 	.word	0x20000000
 8002db0:	200001fc 	.word	0x200001fc

08002db4 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	73fb      	strb	r3, [r7, #15]

	dev_addr = *(uint16_t*) intf_ptr;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <bmi08x_spi_write+0xa8>)
 8002dca:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <bmi08x_spi_write+0xa8>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4822      	ldr	r0, [pc, #136]	; (8002e60 <bmi08x_spi_write+0xac>)
 8002dd6:	f001 f921 	bl	800401c <HAL_GPIO_WritePin>

	while(!(tx_rdy && rx_rdy) );
 8002dda:	bf00      	nop
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <bmi08x_spi_write+0xb0>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0fa      	beq.n	8002ddc <bmi08x_spi_write+0x28>
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <bmi08x_spi_write+0xb4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f5      	beq.n	8002ddc <bmi08x_spi_write+0x28>
	tx_rdy = 0;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <bmi08x_spi_write+0xb0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
//	rx_rdy = 0;

	if (HAL_SPI_Transmit_DMA(&hspi1, &reg_addr, sizeof(reg_addr)) != HAL_OK) {
 8002df6:	f107 030f 	add.w	r3, r7, #15
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481b      	ldr	r0, [pc, #108]	; (8002e6c <bmi08x_spi_write+0xb8>)
 8002e00:	f002 fa5c 	bl	80052bc <HAL_SPI_Transmit_DMA>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <bmi08x_spi_write+0x5a>
		return 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <bmi08x_spi_write+0xa0>
	}

//	rx_rdy = 0;
//	tx_rdy = 0;
	while(!tx_rdy);
 8002e0e:	bf00      	nop
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <bmi08x_spi_write+0xb0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0fa      	beq.n	8002e10 <bmi08x_spi_write+0x5c>
	tx_rdy = 0;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <bmi08x_spi_write+0xb0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
	if (HAL_SPI_Transmit_DMA(&hspi1,  reg_data, len) != HAL_OK) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	4810      	ldr	r0, [pc, #64]	; (8002e6c <bmi08x_spi_write+0xb8>)
 8002e2a:	f002 fa47 	bl	80052bc <HAL_SPI_Transmit_DMA>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <bmi08x_spi_write+0x84>
			return 1;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e00d      	b.n	8002e54 <bmi08x_spi_write+0xa0>
	}
//
//	tx_rdy = 0;
	while(!tx_rdy);
 8002e38:	bf00      	nop
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <bmi08x_spi_write+0xb0>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0fa      	beq.n	8002e3a <bmi08x_spi_write+0x86>
	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <bmi08x_spi_write+0xa8>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <bmi08x_spi_write+0xac>)
 8002e4e:	f001 f8e5 	bl	800401c <HAL_GPIO_WritePin>
	return 0;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	200003c0 	.word	0x200003c0
 8002e60:	48000800 	.word	0x48000800
 8002e64:	20000001 	.word	0x20000001
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	200001fc 	.word	0x200001fc

08002e70 <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <bmi08x_delay_us+0x30>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period)
 8002e82:	bf00      	nop
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <bmi08x_delay_us+0x30>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f9      	bhi.n	8002e84 <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200002f0 	.word	0x200002f0

08002ea4 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03a      	beq.n	8002f34 <bmi08x_interface_init+0x90>

#if defined(PC)
        setbuf(stdout, NULL);
#endif

		bmi08x_delay_us(1000, 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec4:	f7ff ffd4 	bl	8002e70 <bmi08x_delay_us>

		/* Bus configuration : I2C */
		if (intf == BMI08X_I2C_INTF) {
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <bmi08x_interface_init+0x5c>
		}
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		else if (intf == BMI08X_SPI_INTF) {
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d115      	bne.n	8002f00 <bmi08x_interface_init+0x5c>

			bmi08x->intf = BMI08X_SPI_INTF;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <bmi08x_interface_init+0xa0>)
 8002ede:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <bmi08x_interface_init+0xa4>)
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085_NSSa_Pin;
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <bmi08x_interface_init+0xa8>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085_NSSg_Pin;
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <bmi08x_interface_init+0xac>)
 8002ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef4:	801a      	strh	r2, [r3, #0]

			/* CSB1 pin is made high for selecting SPI protocol (accelerometer)*/
			// Done through STM32CubeIDE
//			HAL_GPIO_WritePin(GPIOC, BMI085_NSSa_Pin, GPIO_PIN_SET);
			bmi08x_delay_us(1000, 00);
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002efc:	f7ff ffb8 	bl	8002e70 <bmi08x_delay_us>
//			HAL_Delay(10);
//            coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	78ba      	ldrb	r2, [r7, #2]
 8002f04:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <bmi08x_interface_init+0xa8>)
 8002f0a:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <bmi08x_interface_init+0xac>)
 8002f10:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <bmi08x_interface_init+0xb0>)
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = 1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	771a      	strb	r2, [r3, #28]

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f24:	f7ff ffa4 	bl	8002e70 <bmi08x_delay_us>

//        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f2e:	f7ff ff9f 	bl	8002e70 <bmi08x_delay_us>
 8002f32:	e001      	b.n	8002f38 <bmi08x_interface_init+0x94>
	} else {
		rslt = BMI08X_E_NULL_PTR;
 8002f34:	23ff      	movs	r3, #255	; 0xff
 8002f36:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002f38:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	08002cf9 	.word	0x08002cf9
 8002f48:	08002db5 	.word	0x08002db5
 8002f4c:	20000412 	.word	0x20000412
 8002f50:	20000414 	.word	0x20000414
 8002f54:	08002e71 	.word	0x08002e71

08002f58 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8002f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8084 	beq.w	8003076 <bmi08x_error_codes_print_result+0x11e>
		printf("%s\t", api_name);
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4843      	ldr	r0, [pc, #268]	; (8003080 <bmi08x_error_codes_print_result+0x128>)
 8002f72:	f004 fcbf 	bl	80078f4 <iprintf>
		error_status = rslt;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4b42      	ldr	r3, [pc, #264]	; (8003084 <bmi08x_error_codes_print_result+0x12c>)
 8002f7a:	701a      	strb	r2, [r3, #0]
		if (rslt == BMI08X_E_NULL_PTR) {
 8002f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d106      	bne.n	8002f94 <bmi08x_error_codes_print_result+0x3c>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8002f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	483e      	ldr	r0, [pc, #248]	; (8003088 <bmi08x_error_codes_print_result+0x130>)
 8002f8e:	f004 fcb1 	bl	80078f4 <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8002f92:	e070      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8002f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f98:	f113 0f02 	cmn.w	r3, #2
 8002f9c:	d106      	bne.n	8002fac <bmi08x_error_codes_print_result+0x54>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8002f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4839      	ldr	r0, [pc, #228]	; (800308c <bmi08x_error_codes_print_result+0x134>)
 8002fa6:	f004 fca5 	bl	80078f4 <iprintf>
}
 8002faa:	e064      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8002fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb0:	f113 0f03 	cmn.w	r3, #3
 8002fb4:	d106      	bne.n	8002fc4 <bmi08x_error_codes_print_result+0x6c>
			printf("Error [%d] : Device not found\r\n", rslt);
 8002fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4834      	ldr	r0, [pc, #208]	; (8003090 <bmi08x_error_codes_print_result+0x138>)
 8002fbe:	f004 fc99 	bl	80078f4 <iprintf>
}
 8002fc2:	e058      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8002fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc8:	f113 0f04 	cmn.w	r3, #4
 8002fcc:	d106      	bne.n	8002fdc <bmi08x_error_codes_print_result+0x84>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8002fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	482f      	ldr	r0, [pc, #188]	; (8003094 <bmi08x_error_codes_print_result+0x13c>)
 8002fd6:	f004 fc8d 	bl	80078f4 <iprintf>
}
 8002fda:	e04c      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8002fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe0:	f113 0f05 	cmn.w	r3, #5
 8002fe4:	d106      	bne.n	8002ff4 <bmi08x_error_codes_print_result+0x9c>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8002fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fea:	4619      	mov	r1, r3
 8002fec:	482a      	ldr	r0, [pc, #168]	; (8003098 <bmi08x_error_codes_print_result+0x140>)
 8002fee:	f004 fc81 	bl	80078f4 <iprintf>
}
 8002ff2:	e040      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8002ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff8:	f113 0f06 	cmn.w	r3, #6
 8002ffc:	d106      	bne.n	800300c <bmi08x_error_codes_print_result+0xb4>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8002ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003002:	4619      	mov	r1, r3
 8003004:	4825      	ldr	r0, [pc, #148]	; (800309c <bmi08x_error_codes_print_result+0x144>)
 8003006:	f004 fc75 	bl	80078f4 <iprintf>
}
 800300a:	e034      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	f113 0f07 	cmn.w	r3, #7
 8003014:	d106      	bne.n	8003024 <bmi08x_error_codes_print_result+0xcc>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8003016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301a:	4619      	mov	r1, r3
 800301c:	4820      	ldr	r0, [pc, #128]	; (80030a0 <bmi08x_error_codes_print_result+0x148>)
 800301e:	f004 fc69 	bl	80078f4 <iprintf>
}
 8003022:	e028      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	f113 0f08 	cmn.w	r3, #8
 800302c:	d106      	bne.n	800303c <bmi08x_error_codes_print_result+0xe4>
			printf("Error [%d] : Invalid config\r\n", rslt);
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	4619      	mov	r1, r3
 8003034:	481b      	ldr	r0, [pc, #108]	; (80030a4 <bmi08x_error_codes_print_result+0x14c>)
 8003036:	f004 fc5d 	bl	80078f4 <iprintf>
}
 800303a:	e01c      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 800303c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003040:	f113 0f09 	cmn.w	r3, #9
 8003044:	d106      	bne.n	8003054 <bmi08x_error_codes_print_result+0xfc>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8003046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304a:	4619      	mov	r1, r3
 800304c:	4816      	ldr	r0, [pc, #88]	; (80030a8 <bmi08x_error_codes_print_result+0x150>)
 800304e:	f004 fc51 	bl	80078f4 <iprintf>
}
 8003052:	e010      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8003054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <bmi08x_error_codes_print_result+0x112>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 800305c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003060:	4619      	mov	r1, r3
 8003062:	4812      	ldr	r0, [pc, #72]	; (80030ac <bmi08x_error_codes_print_result+0x154>)
 8003064:	f004 fc46 	bl	80078f4 <iprintf>
}
 8003068:	e005      	b.n	8003076 <bmi08x_error_codes_print_result+0x11e>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 800306a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306e:	4619      	mov	r1, r3
 8003070:	480f      	ldr	r0, [pc, #60]	; (80030b0 <bmi08x_error_codes_print_result+0x158>)
 8003072:	f004 fc3f 	bl	80078f4 <iprintf>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	0800af20 	.word	0x0800af20
 8003084:	200003c2 	.word	0x200003c2
 8003088:	0800af24 	.word	0x0800af24
 800308c:	0800af40 	.word	0x0800af40
 8003090:	0800af68 	.word	0x0800af68
 8003094:	0800af88 	.word	0x0800af88
 8003098:	0800afa4 	.word	0x0800afa4
 800309c:	0800afc4 	.word	0x0800afc4
 80030a0:	0800afe8 	.word	0x0800afe8
 80030a4:	0800b014 	.word	0x0800b014
 80030a8:	0800b034 	.word	0x0800b034
 80030ac:	0800b05c 	.word	0x0800b05c
 80030b0:	0800b078 	.word	0x0800b078

080030b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	rx_rdy = 1;
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <HAL_SPI_RxCpltCallback+0x1c>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	tx_rdy = 1;
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
//	if(rx_rdy == 0){ // We are to receive data
//		rx_rdy = 1;
//	}
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000001 	.word	0x20000001

080030f4 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	if(hspi->State == HAL_SPI_STATE_READY){
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_SPI_TxRxCpltCallback+0x20>

		tx_rdy = 1;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
		rx_rdy = 1;
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_SPI_TxRxCpltCallback+0x30>)
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
	}
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	20000001 	.word	0x20000001
 8003124:	20000000 	.word	0x20000000

08003128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800312c:	b672      	cpsid	i
}
 800312e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003130:	e7fe      	b.n	8003130 <Error_Handler+0x8>
	...

08003134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_MspInit+0x44>)
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <HAL_MspInit+0x44>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6613      	str	r3, [r2, #96]	; 0x60
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_MspInit+0x44>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_MspInit+0x44>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_MspInit+0x44>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	6593      	str	r3, [r2, #88]	; 0x58
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_MspInit+0x44>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_SPI_MspInit+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d17a      	bne.n	8003294 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319e:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a8:	6613      	str	r3, [r2, #96]	; 0x60
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	4a39      	ldr	r2, [pc, #228]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_SPI_MspInit+0x124>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031ce:	23e0      	movs	r3, #224	; 0xe0
 80031d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031de:	2305      	movs	r3, #5
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4619      	mov	r1, r3
 80031e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ec:	f000 fda4 	bl	8003d38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80031f0:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 80031f2:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <HAL_SPI_MspInit+0x12c>)
 80031f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 800321c:	2200      	movs	r2, #0
 800321e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003220:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003226:	481f      	ldr	r0, [pc, #124]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 8003228:	f000 fb8e 	bl	8003948 <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003232:	f7ff ff79 	bl	8003128 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 800323a:	659a      	str	r2, [r3, #88]	; 0x58
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_SPI_MspInit+0x128>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_SPI_MspInit+0x134>)
 8003246:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_SPI_MspInit+0x130>)
 800324a:	2201      	movs	r2, #1
 800324c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003250:	2210      	movs	r2, #16
 8003252:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_SPI_MspInit+0x130>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003262:	2200      	movs	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_SPI_MspInit+0x130>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003278:	480c      	ldr	r0, [pc, #48]	; (80032ac <HAL_SPI_MspInit+0x130>)
 800327a:	f000 fb65 	bl	8003948 <HAL_DMA_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003284:	f7ff ff50 	bl	8003128 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_SPI_MspInit+0x130>)
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_SPI_MspInit+0x130>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40013000 	.word	0x40013000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	20000260 	.word	0x20000260
 80032a8:	4002001c 	.word	0x4002001c
 80032ac:	200002a8 	.word	0x200002a8
 80032b0:	40020030 	.word	0x40020030

080032b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d10b      	bne.n	80032de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_TIM_Base_MspInit+0x38>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_TIM_Base_MspInit+0x38>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6593      	str	r3, [r2, #88]	; 0x58
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_TIM_Base_MspInit+0x38>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b096      	sub	sp, #88	; 0x58
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	2234      	movs	r2, #52	; 0x34
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fe7d 	bl	8007010 <memset>
  if(huart->Instance==USART2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_UART_MspInit+0xa8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d136      	bne.n	800338e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003320:	2302      	movs	r3, #2
 8003322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	4618      	mov	r0, r3
 800332e:	f001 fd9b 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003338:	f7ff fef6 	bl	8003128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_UART_MspInit+0xac>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_UART_MspInit+0xac>)
 8003342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_UART_MspInit+0xac>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_UART_MspInit+0xac>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_UART_MspInit+0xac>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_UART_MspInit+0xac>)
 8003362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800336c:	230c      	movs	r3, #12
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003378:	2303      	movs	r3, #3
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800337c:	2307      	movs	r3, #7
 800337e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800338a:	f000 fcd5 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3758      	adds	r7, #88	; 0x58
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40004400 	.word	0x40004400
 800339c:	40021000 	.word	0x40021000

080033a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <NMI_Handler+0x4>

080033a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <HardFault_Handler+0x4>

080033ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <MemManage_Handler+0x4>

080033b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b6:	e7fe      	b.n	80033b6 <BusFault_Handler+0x4>

080033b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <UsageFault_Handler+0x4>

080033be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ec:	f000 f97a 	bl	80036e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_DRDY_Pin);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f000 fe27 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}

08003402 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_DRDY_Pin);
 8003406:	2004      	movs	r0, #4
 8003408:	f000 fe20 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}

08003410 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Channel2_IRQHandler+0x10>)
 8003416:	f000 fbaf 	bl	8003b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000260 	.word	0x20000260

08003424 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <DMA1_Channel3_IRQHandler+0x10>)
 800342a:	f000 fba5 	bl	8003b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200002a8 	.word	0x200002a8

08003438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return 1;
 800343c:	2301      	movs	r3, #1
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_kill>:

int _kill(int pid, int sig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003452:	f003 fdb3 	bl	8006fbc <__errno>
 8003456:	4603      	mov	r3, r0
 8003458:	2216      	movs	r2, #22
 800345a:	601a      	str	r2, [r3, #0]
  return -1;
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_exit>:

void _exit (int status)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ffe7 	bl	8003448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800347a:	e7fe      	b.n	800347a <_exit+0x12>

0800347c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e00a      	b.n	80034a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800348e:	f3af 8000 	nop.w
 8003492:	4601      	mov	r1, r0
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60ba      	str	r2, [r7, #8]
 800349a:	b2ca      	uxtb	r2, r1
 800349c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbf0      	blt.n	800348e <_read+0x12>
  }

  return len;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e009      	b.n	80034dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fe7d 	bl	80021d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dbf1      	blt.n	80034c8 <_write+0x12>
  }
  return len;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_close>:

int _close(int file)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003516:	605a      	str	r2, [r3, #4]
  return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_isatty>:

int _isatty(int file)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f003 fd18 	bl	8006fbc <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	2000a000 	.word	0x2000a000
 80035b8:	00004000 	.word	0x00004000
 80035bc:	20000418 	.word	0x20000418
 80035c0:	20000430 	.word	0x20000430

080035c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <SystemInit+0x20>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <SystemInit+0x20>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035ec:	f7ff ffea 	bl	80035c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <LoopForever+0x6>)
  ldr r1, =_edata
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <LoopForever+0xe>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003608:	4c0a      	ldr	r4, [pc, #40]	; (8003634 <LoopForever+0x16>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003616:	f003 fcd7 	bl	8006fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800361a:	f7fe ff2d 	bl	8002478 <main>

0800361e <LoopForever>:

LoopForever:
    b LoopForever
 800361e:	e7fe      	b.n	800361e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003620:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003628:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800362c:	0800b500 	.word	0x0800b500
  ldr r2, =_sbss
 8003630:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003634:	20000430 	.word	0x20000430

08003638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003638:	e7fe      	b.n	8003638 <ADC1_2_IRQHandler>

0800363a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003644:	2003      	movs	r0, #3
 8003646:	f000 f93d 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800364a:	2000      	movs	r0, #0
 800364c:	f000 f80e 	bl	800366c <HAL_InitTick>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	71fb      	strb	r3, [r7, #7]
 800365a:	e001      	b.n	8003660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800365c:	f7ff fd6a 	bl	8003134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003660:	79fb      	ldrb	r3, [r7, #7]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_InitTick+0x6c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <HAL_InitTick+0x70>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_InitTick+0x6c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f949 	bl	800392e <HAL_SYSTICK_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d809      	bhi.n	80036bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a8:	2200      	movs	r2, #0
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f000 f913 	bl	80038da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_InitTick+0x74>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e007      	b.n	80036cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e004      	b.n	80036cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e001      	b.n	80036cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	20000004 	.word	0x20000004
 80036e0:	20000008 	.word	0x20000008

080036e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x20>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_IncTick+0x24>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_IncTick+0x24>)
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c
 8003708:	2000041c 	.word	0x2000041c

0800370c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return uwTick;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_GetTick+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000041c 	.word	0x2000041c

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4907      	ldr	r1, [pc, #28]	; (80037c0 <__NVIC_EnableIRQ+0x38>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	; (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	; (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003890:	d301      	bcc.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <SysTick_Config+0x40>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	210f      	movs	r1, #15
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f7ff ff8e 	bl	80037c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <SysTick_Config+0x40>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <SysTick_Config+0x40>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff29 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038ec:	f7ff ff3e 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff8e 	bl	8003818 <NVIC_EncodePriority>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff5d 	bl	80037c4 <__NVIC_SetPriority>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff31 	bl	8003788 <__NVIC_EnableIRQ>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ffa2 	bl	8003880 <SysTick_Config>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e098      	b.n	8003a8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_DMA_Init+0x150>)
 8003962:	429a      	cmp	r2, r3
 8003964:	d80f      	bhi.n	8003986 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_DMA_Init+0x154>)
 800396e:	4413      	add	r3, r2
 8003970:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <HAL_DMA_Init+0x158>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a48      	ldr	r2, [pc, #288]	; (8003aa4 <HAL_DMA_Init+0x15c>)
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
 8003984:	e00e      	b.n	80039a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_DMA_Init+0x160>)
 800398e:	4413      	add	r3, r2
 8003990:	4a43      	ldr	r2, [pc, #268]	; (8003aa0 <HAL_DMA_Init+0x158>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_DMA_Init+0x164>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039fe:	d039      	beq.n	8003a74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_DMA_Init+0x15c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d11a      	bne.n	8003a40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <HAL_DMA_Init+0x168>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 031c 	and.w	r3, r3, #28
 8003a16:	210f      	movs	r1, #15
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	4924      	ldr	r1, [pc, #144]	; (8003ab0 <HAL_DMA_Init+0x168>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_DMA_Init+0x168>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f003 031c 	and.w	r3, r3, #28
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	491d      	ldr	r1, [pc, #116]	; (8003ab0 <HAL_DMA_Init+0x168>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
 8003a3e:	e019      	b.n	8003a74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_DMA_Init+0x16c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	f003 031c 	and.w	r3, r3, #28
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4917      	ldr	r1, [pc, #92]	; (8003ab4 <HAL_DMA_Init+0x16c>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_DMA_Init+0x16c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 031c 	and.w	r3, r3, #28
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	4911      	ldr	r1, [pc, #68]	; (8003ab4 <HAL_DMA_Init+0x16c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40020407 	.word	0x40020407
 8003a9c:	bffdfff8 	.word	0xbffdfff8
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	bffdfbf8 	.word	0xbffdfbf8
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	400200a8 	.word	0x400200a8
 8003ab4:	400204a8 	.word	0x400204a8

08003ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e04b      	b.n	8003b70 <HAL_DMA_Start_IT+0xb8>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d13a      	bne.n	8003b62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8e0 	bl	8003cd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 020e 	orr.w	r2, r2, #14
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 020a 	orr.w	r2, r2, #10
 8003b4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e005      	b.n	8003b6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f003 031c 	and.w	r3, r3, #28
 8003b98:	2204      	movs	r2, #4
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d026      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x7a>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d021      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 021c 	and.w	r2, r3, #28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2104      	movs	r1, #4
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d071      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	e06c      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f003 031c 	and.w	r3, r3, #28
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d02e      	beq.n	8003c64 <HAL_DMA_IRQHandler+0xec>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d029      	beq.n	8003c64 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020a 	bic.w	r2, r2, #10
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f003 021c 	and.w	r2, r3, #28
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2102      	movs	r1, #2
 8003c44:	fa01 f202 	lsl.w	r2, r1, r2
 8003c48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d038      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c62:	e033      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f003 031c 	and.w	r3, r3, #28
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02a      	beq.n	8003cce <HAL_DMA_IRQHandler+0x156>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d025      	beq.n	8003cce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 020e 	bic.w	r2, r2, #14
 8003c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f003 021c 	and.w	r2, r3, #28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
}
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 021c 	and.w	r2, r3, #28
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d108      	bne.n	8003d1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d18:	e007      	b.n	8003d2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d46:	e14e      	b.n	8003fe6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8140 	beq.w	8003fe0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d005      	beq.n	8003d78 <HAL_GPIO_Init+0x40>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d130      	bne.n	8003dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dae:	2201      	movs	r2, #1
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0201 	and.w	r2, r3, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d017      	beq.n	8003e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2203      	movs	r2, #3
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d123      	bne.n	8003e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	220f      	movs	r2, #15
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	08da      	lsrs	r2, r3, #3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3208      	adds	r2, #8
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 809a 	beq.w	8003fe0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_GPIO_Init+0x2cc>)
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_GPIO_Init+0x2cc>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003eb8:	4b52      	ldr	r3, [pc, #328]	; (8004004 <HAL_GPIO_Init+0x2cc>)
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ec4:	4a50      	ldr	r2, [pc, #320]	; (8004008 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eee:	d013      	beq.n	8003f18 <HAL_GPIO_Init+0x1e0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a46      	ldr	r2, [pc, #280]	; (800400c <HAL_GPIO_Init+0x2d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00d      	beq.n	8003f14 <HAL_GPIO_Init+0x1dc>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a45      	ldr	r2, [pc, #276]	; (8004010 <HAL_GPIO_Init+0x2d8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <HAL_GPIO_Init+0x1d8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a44      	ldr	r2, [pc, #272]	; (8004014 <HAL_GPIO_Init+0x2dc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_GPIO_Init+0x1d4>
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e006      	b.n	8003f1a <HAL_GPIO_Init+0x1e2>
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	e004      	b.n	8003f1a <HAL_GPIO_Init+0x1e2>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e002      	b.n	8003f1a <HAL_GPIO_Init+0x1e2>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_GPIO_Init+0x1e2>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	f002 0203 	and.w	r2, r2, #3
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	4093      	lsls	r3, r2
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f2a:	4937      	ldr	r1, [pc, #220]	; (8004008 <HAL_GPIO_Init+0x2d0>)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	3302      	adds	r3, #2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f38:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f86:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fda:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f aea9 	bne.w	8003d48 <HAL_GPIO_Init+0x10>
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40021000 	.word	0x40021000
 8004008:	40010000 	.word	0x40010000
 800400c:	48000400 	.word	0x48000400
 8004010:	48000800 	.word	0x48000800
 8004014:	48000c00 	.word	0x48000c00
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004038:	e002      	b.n	8004040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 f806 	bl	800407c <HAL_GPIO_EXTI_Callback>
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_PWREx_GetVoltageRange+0x18>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40007000 	.word	0x40007000

080040b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040be:	d130      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c0:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040cc:	d038      	beq.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2232      	movs	r2, #50	; 0x32
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	0c9b      	lsrs	r3, r3, #18
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f4:	e002      	b.n	80040fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d102      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x60>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f2      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d110      	bne.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00f      	b.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d007      	beq.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004138:	4a05      	ldr	r2, [pc, #20]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800413e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40007000 	.word	0x40007000
 8004154:	20000004 	.word	0x20000004
 8004158:	431bde83 	.word	0x431bde83

0800415c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f000 bc4f 	b.w	8004a0e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004170:	4b97      	ldr	r3, [pc, #604]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417a:	4b95      	ldr	r3, [pc, #596]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80e6 	beq.w	800435e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4c>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	f040 808d 	bne.w	80042ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	f040 8089 	bne.w	80042ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041a8:	4b89      	ldr	r3, [pc, #548]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_RCC_OscConfig+0x66>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f000 bc26 	b.w	8004a0e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c6:	4b82      	ldr	r3, [pc, #520]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_RCC_OscConfig+0x80>
 80041d2:	4b7f      	ldr	r3, [pc, #508]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041da:	e005      	b.n	80041e8 <HAL_RCC_OscConfig+0x8c>
 80041dc:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d224      	bcs.n	8004236 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fdd9 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f000 bc06 	b.w	8004a0e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004208:	f043 0308 	orr.w	r3, r3, #8
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b70      	ldr	r3, [pc, #448]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	496d      	ldr	r1, [pc, #436]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004220:	4b6b      	ldr	r3, [pc, #428]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	4968      	ldr	r1, [pc, #416]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	e025      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004236:	4b66      	ldr	r3, [pc, #408]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a65      	ldr	r2, [pc, #404]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800423c:	f043 0308 	orr.w	r3, r3, #8
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	4960      	ldr	r1, [pc, #384]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	495b      	ldr	r1, [pc, #364]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fd98 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e3c5      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004282:	f000 fccd 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	4950      	ldr	r1, [pc, #320]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a4e      	ldr	r2, [pc, #312]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042a2:	4b4e      	ldr	r3, [pc, #312]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff f9e0 	bl	800366c <HAL_InitTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d052      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	e3a9      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d032      	beq.n	8004328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042c2:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a42      	ldr	r2, [pc, #264]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ce:	f7ff fa1d 	bl	800370c <HAL_GetTick>
 80042d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d6:	f7ff fa19 	bl	800370c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e392      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e8:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4930      	ldr	r1, [pc, #192]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	492b      	ldr	r1, [pc, #172]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e01a      	b.n	800435e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a28      	ldr	r2, [pc, #160]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004334:	f7ff f9ea 	bl	800370c <HAL_GetTick>
 8004338:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800433c:	f7ff f9e6 	bl	800370c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e35f      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x1e0>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d073      	beq.n	8004452 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x220>
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d10e      	bne.n	8004394 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d10b      	bne.n	8004394 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d063      	beq.n	8004450 <HAL_RCC_OscConfig+0x2f4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d15f      	bne.n	8004450 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e33c      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x250>
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e025      	b.n	80043f8 <HAL_RCC_OscConfig+0x29c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b4:	d114      	bne.n	80043e0 <HAL_RCC_OscConfig+0x284>
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a02      	ldr	r2, [pc, #8]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e013      	b.n	80043f8 <HAL_RCC_OscConfig+0x29c>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	0800b09c 	.word	0x0800b09c
 80043d8:	20000004 	.word	0x20000004
 80043dc:	20000008 	.word	0x20000008
 80043e0:	4b8f      	ldr	r3, [pc, #572]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a8e      	ldr	r2, [pc, #568]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a8b      	ldr	r2, [pc, #556]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7ff f984 	bl	800370c <HAL_GetTick>
 8004404:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7ff f980 	bl	800370c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e2f9      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441a:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x2ac>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7ff f970 	bl	800370c <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7ff f96c 	bl	800370c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e2e5      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004442:	4b77      	ldr	r3, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x2d4>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d060      	beq.n	8004520 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d005      	beq.n	8004470 <HAL_RCC_OscConfig+0x314>
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d119      	bne.n	800449e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d116      	bne.n	800449e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004470:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_OscConfig+0x32c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e2c2      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004488:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	4962      	ldr	r1, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449c:	e040      	b.n	8004520 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d023      	beq.n	80044ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a6:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5d      	ldr	r2, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7ff f92b 	bl	800370c <HAL_GetTick>
 80044b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ba:	f7ff f927 	bl	800370c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e2a0      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044cc:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b51      	ldr	r3, [pc, #324]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	494e      	ldr	r1, [pc, #312]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	e018      	b.n	8004520 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7ff f907 	bl	800370c <HAL_GetTick>
 80044fe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004502:	f7ff f903 	bl	800370c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e27c      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8082 	beq.w	8004632 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d05f      	beq.n	80045f6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004536:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	429a      	cmp	r2, r3
 800454a:	d037      	beq.n	80045bc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e254      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800457e:	f7ff f8c5 	bl	800370c <HAL_GetTick>
 8004582:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004586:	f7ff f8c1 	bl	800370c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b11      	cmp	r3, #17
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e23a      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ef      	bne.n	8004586 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ac:	f023 0210 	bic.w	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	491a      	ldr	r1, [pc, #104]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7ff f89e 	bl	800370c <HAL_GetTick>
 80045d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d4:	f7ff f89a 	bl	800370c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b11      	cmp	r3, #17
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e213      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ef      	beq.n	80045d4 <HAL_RCC_OscConfig+0x478>
 80045f4:	e01d      	b.n	8004632 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fc:	4a08      	ldr	r2, [pc, #32]	; (8004620 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7ff f881 	bl	800370c <HAL_GetTick>
 800460a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460e:	f7ff f87d 	bl	800370c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b11      	cmp	r3, #17
 800461a:	d903      	bls.n	8004624 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1f6      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
 8004620:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004624:	4ba9      	ldr	r3, [pc, #676]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ed      	bne.n	800460e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80bd 	beq.w	80047ba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004646:	4ba1      	ldr	r3, [pc, #644]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10e      	bne.n	8004670 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	4b9e      	ldr	r3, [pc, #632]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	4a9d      	ldr	r2, [pc, #628]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6593      	str	r3, [r2, #88]	; 0x58
 800465e:	4b9b      	ldr	r3, [pc, #620]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	4b97      	ldr	r3, [pc, #604]	; (80048d0 <HAL_RCC_OscConfig+0x774>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d118      	bne.n	80046ae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800467c:	4b94      	ldr	r3, [pc, #592]	; (80048d0 <HAL_RCC_OscConfig+0x774>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a93      	ldr	r2, [pc, #588]	; (80048d0 <HAL_RCC_OscConfig+0x774>)
 8004682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004688:	f7ff f840 	bl	800370c <HAL_GetTick>
 800468c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7ff f83c 	bl	800370c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1b5      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a2:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x774>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02c      	beq.n	8004714 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80046ba:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	497f      	ldr	r1, [pc, #508]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046e0:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	4a79      	ldr	r2, [pc, #484]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046f0:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004700:	e018      	b.n	8004734 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004702:	4b72      	ldr	r3, [pc, #456]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	4a70      	ldr	r2, [pc, #448]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004712:	e00f      	b.n	8004734 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004714:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4a6c      	ldr	r2, [pc, #432]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004724:	4b69      	ldr	r3, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	4a68      	ldr	r2, [pc, #416]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d016      	beq.n	800476a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe ffe6 	bl	800370c <HAL_GetTick>
 8004740:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe ffe2 	bl	800370c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e159      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ed      	beq.n	8004744 <HAL_RCC_OscConfig+0x5e8>
 8004768:	e01d      	b.n	80047a6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fe ffcf 	bl	800370c <HAL_GetTick>
 800476e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fe ffcb 	bl	800370c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e142      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ed      	bne.n	8004772 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004796:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	4a4b      	ldr	r2, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a46      	ldr	r2, [pc, #280]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03c      	beq.n	8004840 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01c      	beq.n	8004808 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80047d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d4:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fe ff95 	bl	800370c <HAL_GetTick>
 80047e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047e6:	f7fe ff91 	bl	800370c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e10a      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047f8:	4b34      	ldr	r3, [pc, #208]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80047fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <HAL_RCC_OscConfig+0x68a>
 8004806:	e01b      	b.n	8004840 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 800480a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800480e:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fe ff78 	bl	800370c <HAL_GetTick>
 800481c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004820:	f7fe ff74 	bl	800370c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0ed      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80e1 	beq.w	8004a0c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 80b5 	bne.w	80049be <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0203 	and.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	429a      	cmp	r2, r3
 8004866:	d124      	bne.n	80048b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	3b01      	subs	r3, #1
 8004874:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d11b      	bne.n	80048b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d113      	bne.n	80048b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d05f      	beq.n	8004972 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	d05a      	beq.n	800496e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a03      	ldr	r2, [pc, #12]	; (80048cc <HAL_RCC_OscConfig+0x770>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c4:	f7fe ff22 	bl	800370c <HAL_GetTick>
 80048c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ca:	e00c      	b.n	80048e6 <HAL_RCC_OscConfig+0x78a>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fe ff1a 	bl	800370c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e093      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e6:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_RCC_OscConfig+0x8c0>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004902:	3a01      	subs	r2, #1
 8004904:	0112      	lsls	r2, r2, #4
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800490c:	0212      	lsls	r2, r2, #8
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0552      	lsls	r2, r2, #21
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	0652      	lsls	r2, r2, #25
 8004926:	430a      	orrs	r2, r1
 8004928:	493b      	ldr	r1, [pc, #236]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800492e:	4b3a      	ldr	r3, [pc, #232]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004938:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004944:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004946:	f7fe fee1 	bl	800370c <HAL_GetTick>
 800494a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494e:	f7fe fedd 	bl	800370c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e056      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800496c:	e04e      	b.n	8004a0c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e04d      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d146      	bne.n	8004a0c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004984:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004988:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800498a:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 8004990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004994:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004996:	f7fe feb9 	bl	800370c <HAL_GetTick>
 800499a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fe feb5 	bl	800370c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e02e      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x842>
 80049bc:	e026      	b.n	8004a0c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d021      	beq.n	8004a08 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fe fe9c 	bl	800370c <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fe fe98 	bl	800370c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e011      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_RCC_OscConfig+0x8bc>)
 80049fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	60d3      	str	r3, [r2, #12]
 8004a06:	e001      	b.n	8004a0c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	f99f808c 	.word	0xf99f808c

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0e7      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b75      	ldr	r3, [pc, #468]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4970      	ldr	r1, [pc, #448]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cf      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b66      	ldr	r3, [pc, #408]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d908      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b63      	ldr	r3, [pc, #396]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4960      	ldr	r1, [pc, #384]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04c      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0a6      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004abe:	4b54      	ldr	r3, [pc, #336]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e09a      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e086      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4943      	ldr	r1, [pc, #268]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fe fe00 	bl	800370c <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fe fdfc 	bl	800370c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e06e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d208      	bcs.n	8004b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	492b      	ldr	r1, [pc, #172]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d210      	bcs.n	8004b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 0207 	bic.w	r2, r3, #7
 8004b7c:	4923      	ldr	r1, [pc, #140]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e036      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4918      	ldr	r1, [pc, #96]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4910      	ldr	r1, [pc, #64]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd4:	f000 f824 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	490b      	ldr	r1, [pc, #44]	; (8004c14 <HAL_RCC_ClockConfig+0x1f4>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x1fc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fd37 	bl	800366c <HAL_InitTick>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c02:	7afb      	ldrb	r3, [r7, #11]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800b09c 	.word	0x0800b09c
 8004c18:	20000004 	.word	0x20000004
 8004c1c:	20000008 	.word	0x20000008

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c38:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d11e      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10d      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e004      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca4:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d134      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0xac>
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc8:	617b      	str	r3, [r7, #20]
      break;
 8004cca:	e005      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cce:	617b      	str	r3, [r7, #20]
      break;
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	617b      	str	r3, [r7, #20]
      break;
 8004cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	fb03 f202 	mul.w	r2, r3, r2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0e5b      	lsrs	r3, r3, #25
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d18:	69bb      	ldr	r3, [r7, #24]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800b0b4 	.word	0x0800b0b4
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4904      	ldr	r1, [pc, #16]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800b0ac 	.word	0x0800b0ac

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d80:	f7ff ffda 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0adb      	lsrs	r3, r3, #11
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4904      	ldr	r1, [pc, #16]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800b0ac 	.word	0x0800b0ac

08004da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dc0:	f7ff f968 	bl	8004094 <HAL_PWREx_GetVoltageRange>
 8004dc4:	6178      	str	r0, [r7, #20]
 8004dc6:	e014      	b.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd4:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004de0:	f7ff f958 	bl	8004094 <HAL_PWREx_GetVoltageRange>
 8004de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df8:	d10b      	bne.n	8004e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	; 0x80
 8004dfe:	d919      	bls.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2ba0      	cmp	r3, #160	; 0xa0
 8004e04:	d902      	bls.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e06:	2302      	movs	r3, #2
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e013      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e010      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b80      	cmp	r3, #128	; 0x80
 8004e16:	d902      	bls.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e18:	2303      	movs	r3, #3
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	e00a      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d102      	bne.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e24:	2302      	movs	r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e004      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d101      	bne.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e30:	2301      	movs	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 0207 	bic.w	r2, r3, #7
 8004e3c:	4909      	ldr	r1, [pc, #36]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e70:	2300      	movs	r3, #0
 8004e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e74:	2300      	movs	r3, #0
 8004e76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 809e 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e8a:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004eac:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a39      	ldr	r2, [pc, #228]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec8:	f7fe fc20 	bl	800370c <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ece:	e009      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fe fc1c 	bl	800370c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d15a      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef6:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d019      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f1e:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d016      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fbdc 	bl	800370c <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f56:	e00b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fe fbd8 	bl	800370c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d902      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	74fb      	strb	r3, [r7, #19]
            break;
 8004f6e:	e006      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ec      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004f7e:	7cfb      	ldrb	r3, [r7, #19]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f9a:	e009      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	74bb      	strb	r3, [r7, #18]
 8004fa0:	e006      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb0:	7c7b      	ldrb	r3, [r7, #17]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	4a6d      	ldr	r2, [pc, #436]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fce:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 0203 	bic.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4964      	ldr	r1, [pc, #400]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff0:	4b5f      	ldr	r3, [pc, #380]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	495c      	ldr	r1, [pc, #368]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005012:	4b57      	ldr	r3, [pc, #348]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4953      	ldr	r1, [pc, #332]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005034:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	494b      	ldr	r1, [pc, #300]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005056:	4b46      	ldr	r3, [pc, #280]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	4942      	ldr	r1, [pc, #264]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005078:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	493a      	ldr	r1, [pc, #232]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509a:	4b35      	ldr	r3, [pc, #212]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	4931      	ldr	r1, [pc, #196]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	4929      	ldr	r1, [pc, #164]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	4920      	ldr	r1, [pc, #128]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	4918      	ldr	r1, [pc, #96]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a12      	ldr	r2, [pc, #72]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	490a      	ldr	r1, [pc, #40]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005164:	7cbb      	ldrb	r3, [r7, #18]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e095      	b.n	80052b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005196:	d009      	beq.n	80051ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	61da      	str	r2, [r3, #28]
 800519e:	e005      	b.n	80051ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fd ffd8 	bl	800317c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051ec:	d902      	bls.n	80051f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e002      	b.n	80051fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005202:	d007      	beq.n	8005214 <HAL_SPI_Init+0xa0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800520c:	d002      	beq.n	8005214 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	ea42 0103 	orr.w	r1, r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	0c1b      	lsrs	r3, r3, #16
 8005270:	f003 0204 	and.w	r2, r3, #4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005290:	ea42 0103 	orr.w	r1, r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_SPI_Transmit_DMA+0x20>
 80052d8:	2302      	movs	r3, #2
 80052da:	e0d8      	b.n	800548e <HAL_SPI_Transmit_DMA+0x1d2>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052f4:	e0c6      	b.n	8005484 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Transmit_DMA+0x46>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005306:	e0bd      	b.n	8005484 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2203      	movs	r2, #3
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	88fa      	ldrh	r2, [r7, #6]
 8005326:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005352:	d10f      	bne.n	8005374 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	4a47      	ldr	r2, [pc, #284]	; (8005498 <HAL_SPI_Transmit_DMA+0x1dc>)
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	4a46      	ldr	r2, [pc, #280]	; (800549c <HAL_SPI_Transmit_DMA+0x1e0>)
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <HAL_SPI_Transmit_DMA+0x1e4>)
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	2200      	movs	r2, #0
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ac:	d82d      	bhi.n	800540a <HAL_SPI_Transmit_DMA+0x14e>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b8:	d127      	bne.n	800540a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053d6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e6:	e010      	b.n	800540a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	3301      	adds	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4619      	mov	r1, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005422:	f7fe fb49 	bl	8003ab8 <HAL_DMA_Start_IT>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f043 0210 	orr.w	r2, r3, #16
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005444:	e01e      	b.n	8005484 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d007      	beq.n	8005464 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0220 	orr.w	r2, r2, #32
 8005472:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0202 	orr.w	r2, r2, #2
 8005482:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	08005c33 	.word	0x08005c33
 800549c:	08005a55 	.word	0x08005a55
 80054a0:	08005c87 	.word	0x08005c87

080054a4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d110      	bne.n	80054e0 <HAL_SPI_Receive_DMA+0x3c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c6:	d10b      	bne.n	80054e0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f908 	bl	80056ec <HAL_SPI_TransmitReceive_DMA>
 80054dc:	4603      	mov	r3, r0
 80054de:	e0fb      	b.n	80056d8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Receive_DMA+0x4a>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e0f4      	b.n	80056d8 <HAL_SPI_Receive_DMA+0x234>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005506:	e0e2      	b.n	80056ce <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Receive_DMA+0x70>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005518:	e0d9      	b.n	80056ce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2204      	movs	r2, #4
 800551e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d10f      	bne.n	8005580 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800557e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005598:	d908      	bls.n	80055ac <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	e042      	b.n	8005632 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ba:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c6:	d134      	bne.n	8005632 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055d6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d111      	bne.n	800560c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055fe:	b29b      	uxth	r3, r3
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800560a:	e012      	b.n	8005632 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800561a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005622:	b29b      	uxth	r3, r3
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <HAL_SPI_Receive_DMA+0x23c>)
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <HAL_SPI_Receive_DMA+0x240>)
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <HAL_SPI_Receive_DMA+0x244>)
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	2200      	movs	r2, #0
 8005650:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	4619      	mov	r1, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800566a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800566c:	f7fe fa24 	bl	8003ab8 <HAL_DMA_Start_IT>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	f043 0210 	orr.w	r2, r3, #16
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800568e:	e01e      	b.n	80056ce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d007      	beq.n	80056ae <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	08005c4f 	.word	0x08005c4f
 80056e4:	08005afb 	.word	0x08005afb
 80056e8:	08005c87 	.word	0x08005c87

080056ec <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005708:	2302      	movs	r3, #2
 800570a:	e16c      	b.n	80059e6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800571a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005722:	7dbb      	ldrb	r3, [r7, #22]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d00d      	beq.n	8005744 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800572e:	d106      	bne.n	800573e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <HAL_SPI_TransmitReceive_DMA+0x52>
 8005738:	7dbb      	ldrb	r3, [r7, #22]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d002      	beq.n	8005744 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005742:	e14b      	b.n	80059dc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
    goto error;
 800575a:	e13f      	b.n	80059dc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b04      	cmp	r3, #4
 8005766:	d003      	beq.n	8005770 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2205      	movs	r2, #5
 800576c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	887a      	ldrh	r2, [r7, #2]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	887a      	ldrh	r2, [r7, #2]
 8005792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80057b8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057c2:	d908      	bls.n	80057d6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	e06f      	b.n	80058b6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057e4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f0:	d126      	bne.n	8005840 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10f      	bne.n	800581e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800580c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581c:	e010      	b.n	8005840 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	b29b      	uxth	r3, r3
 8005838:	3301      	adds	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d134      	bne.n	80058b6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800585a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005862:	b29b      	uxth	r3, r3
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d111      	bne.n	8005890 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005882:	b29b      	uxth	r3, r3
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800588e:	e012      	b.n	80058b6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800589e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d108      	bne.n	80058d4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	4a49      	ldr	r2, [pc, #292]	; (80059f4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80058d2:	e007      	b.n	80058e4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	4a47      	ldr	r2, [pc, #284]	; (80059f8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	4a46      	ldr	r2, [pc, #280]	; (80059fc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80058e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	4a45      	ldr	r2, [pc, #276]	; (8005a00 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80058ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	2200      	movs	r2, #0
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	4619      	mov	r1, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800590c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800590e:	f7fe f8d3 	bl	8003ab8 <HAL_DMA_Start_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	f043 0210 	orr.w	r2, r3, #16
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005930:	e054      	b.n	80059dc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0201 	orr.w	r2, r2, #1
 8005940:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	2200      	movs	r2, #0
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	2200      	movs	r2, #0
 8005958:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	2200      	movs	r2, #0
 8005960:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	4619      	mov	r1, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800597a:	f7fe f89d 	bl	8003ab8 <HAL_DMA_Start_IT>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00c      	beq.n	800599e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	f043 0210 	orr.w	r2, r3, #16
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800599c:	e01e      	b.n	80059dc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d007      	beq.n	80059bc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ba:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0220 	orr.w	r2, r2, #32
 80059ca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0202 	orr.w	r2, r2, #2
 80059da:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	08005c4f 	.word	0x08005c4f
 80059f4:	08005afb 	.word	0x08005afb
 80059f8:	08005c6b 	.word	0x08005c6b
 80059fc:	08005ba3 	.word	0x08005ba3
 8005a00:	08005c87 	.word	0x08005c87

08005a04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a62:	f7fd fe53 	bl	800370c <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d03b      	beq.n	8005aee <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0220 	bic.w	r2, r2, #32
 8005a84:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0202 	bic.w	r2, r2, #2
 8005a94:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	2164      	movs	r1, #100	; 0x64
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f000 fa8a 	bl	8005fb4 <SPI_EndRxTxTransaction>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f7ff ffaa 	bl	8005a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005aec:	e002      	b.n	8005af4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7fd faf0 	bl	80030d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b08:	f7fd fe00 	bl	800370c <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d03c      	beq.n	8005b96 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0220 	bic.w	r2, r2, #32
 8005b2a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <SPI_DMAReceiveCplt+0x56>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3c:	d108      	bne.n	8005b50 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0203 	bic.w	r2, r2, #3
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	e007      	b.n	8005b60 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	2164      	movs	r1, #100	; 0x64
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f9cd 	bl	8005f04 <SPI_EndRxTransaction>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff ff56 	bl	8005a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b94:	e002      	b.n	8005b9c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7fd fa8c 	bl	80030b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb0:	f7fd fdac 	bl	800370c <HAL_GetTick>
 8005bb4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d030      	beq.n	8005c26 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0220 	bic.w	r2, r2, #32
 8005bd2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	2164      	movs	r1, #100	; 0x64
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f9eb 	bl	8005fb4 <SPI_EndRxTxTransaction>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0203 	bic.w	r2, r2, #3
 8005bfe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ff0e 	bl	8005a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c24:	e002      	b.n	8005c2c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7fd fa64 	bl	80030f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff fedf 	bl	8005a04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fedb 	bl	8005a18 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff fed7 	bl	8005a2c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0203 	bic.w	r2, r2, #3
 8005ca2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	f043 0210 	orr.w	r2, r3, #16
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fec1 	bl	8005a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cd8:	f7fd fd18 	bl	800370c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ce8:	f7fd fd10 	bl	800370c <HAL_GetTick>
 8005cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	015b      	lsls	r3, r3, #5
 8005cf4:	0d1b      	lsrs	r3, r3, #20
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cfe:	e054      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d050      	beq.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d08:	f7fd fd00 	bl	800370c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d902      	bls.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d13d      	bne.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d36:	d111      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d40:	d004      	beq.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4a:	d107      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d10f      	bne.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e017      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d19b      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000004 	.word	0x20000004

08005dd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dea:	f7fd fc8f 	bl	800370c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	4413      	add	r3, r2
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dfa:	f7fd fc87 	bl	800370c <HAL_GetTick>
 8005dfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e08:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	0d1b      	lsrs	r3, r3, #20
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e20:	e060      	b.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e28:	d107      	bne.n	8005e3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d050      	beq.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e42:	f7fd fc63 	bl	800370c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d902      	bls.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d13d      	bne.n	8005ed4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e70:	d111      	bne.n	8005e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7a:	d004      	beq.n	8005e86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	d107      	bne.n	8005e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9e:	d10f      	bne.n	8005ec0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e010      	b.n	8005ef6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d196      	bne.n	8005e22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	; 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000004 	.word	0x20000004

08005f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f18:	d111      	bne.n	8005f3e <SPI_EndRxTransaction+0x3a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f22:	d004      	beq.n	8005f2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2c:	d107      	bne.n	8005f3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff febd 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e023      	b.n	8005fac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6c:	d11d      	bne.n	8005faa <SPI_EndRxTransaction+0xa6>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d004      	beq.n	8005f82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	d113      	bne.n	8005faa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ff22 	bl	8005dd8 <SPI_WaitFifoStateUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e000      	b.n	8005fac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff ff03 	bl	8005dd8 <SPI_WaitFifoStateUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e027      	b.n	8006038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2180      	movs	r1, #128	; 0x80
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fe68 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e014      	b.n	8006038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fedc 	bl	8005dd8 <SPI_WaitFifoStateUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e000      	b.n	8006038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e049      	b.n	80060e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fd f924 	bl	80032b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f000 f94c 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e033      	b.n	8006170 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_TIM_Base_Start+0x8c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_TIM_Base_Start+0x3e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d004      	beq.n	800612e <HAL_TIM_Base_Start+0x3e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIM_Base_Start+0x90>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d115      	bne.n	800615a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_TIM_Base_Start+0x94>)
 8006136:	4013      	ands	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b06      	cmp	r3, #6
 800613e:	d015      	beq.n	800616c <HAL_TIM_Base_Start+0x7c>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006146:	d011      	beq.n	800616c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	e008      	b.n	800616c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e000      	b.n	800616e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40014000 	.word	0x40014000
 8006184:	00010007 	.word	0x00010007

08006188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_ConfigClockSource+0x1c>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e0b6      	b.n	8006312 <HAL_TIM_ConfigClockSource+0x18a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e0:	d03e      	beq.n	8006260 <HAL_TIM_ConfigClockSource+0xd8>
 80061e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e6:	f200 8087 	bhi.w	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 80061ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ee:	f000 8086 	beq.w	80062fe <HAL_TIM_ConfigClockSource+0x176>
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f6:	d87f      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 80061f8:	2b70      	cmp	r3, #112	; 0x70
 80061fa:	d01a      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0xaa>
 80061fc:	2b70      	cmp	r3, #112	; 0x70
 80061fe:	d87b      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006200:	2b60      	cmp	r3, #96	; 0x60
 8006202:	d050      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x11e>
 8006204:	2b60      	cmp	r3, #96	; 0x60
 8006206:	d877      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006208:	2b50      	cmp	r3, #80	; 0x50
 800620a:	d03c      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0xfe>
 800620c:	2b50      	cmp	r3, #80	; 0x50
 800620e:	d873      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d058      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x13e>
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d86f      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d064      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x15e>
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d86b      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d060      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d867      	bhi.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05c      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x15e>
 800622c:	2b10      	cmp	r3, #16
 800622e:	d05a      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006230:	e062      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6899      	ldr	r1, [r3, #8]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f000 f949 	bl	80064d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	609a      	str	r2, [r3, #8]
      break;
 800625e:	e04f      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6899      	ldr	r1, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f000 f932 	bl	80064d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006282:	609a      	str	r2, [r3, #8]
      break;
 8006284:	e03c      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	461a      	mov	r2, r3
 8006294:	f000 f8a6 	bl	80063e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2150      	movs	r1, #80	; 0x50
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f8ff 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 80062a4:	e02c      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 f8c5 	bl	8006442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2160      	movs	r1, #96	; 0x60
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f8ef 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 80062c4:	e01c      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 f886 	bl	80063e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2140      	movs	r1, #64	; 0x40
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f8df 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 80062e4:	e00c      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 f8d6 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 80062f6:	e003      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
      break;
 80062fc:	e000      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2a      	ldr	r2, [pc, #168]	; (80063d8 <TIM_Base_SetConfig+0xbc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0x20>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633a:	d108      	bne.n	800634e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <TIM_Base_SetConfig+0xbc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x52>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x52>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <TIM_Base_SetConfig+0xc0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x52>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <TIM_Base_SetConfig+0xc4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <TIM_Base_SetConfig+0xbc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0xa0>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <TIM_Base_SetConfig+0xc0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0xa0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <TIM_Base_SetConfig+0xc4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d103      	bne.n	80063c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	615a      	str	r2, [r3, #20]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40014400 	.word	0x40014400

080063e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0201 	bic.w	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800640e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f023 030a 	bic.w	r3, r3, #10
 8006420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0210 	bic.w	r2, r3, #16
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	031b      	lsls	r3, r3, #12
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800647e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 0307 	orr.w	r3, r3, #7
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e04f      	b.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a21      	ldr	r2, [pc, #132]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d108      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006560:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d009      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d004      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d10c      	bne.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40014000 	.word	0x40014000

080065e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e040      	b.n	8006678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc fe72 	bl	80032f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8c0 	bl	80067a8 <UART_SetConfig>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e022      	b.n	8006678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb0e 	bl	8006c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800664e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800665e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb95 	bl	8006da0 <UART_CheckIdleState>
 8006676:	4603      	mov	r3, r0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006694:	2b20      	cmp	r3, #32
 8006696:	f040 8082 	bne.w	800679e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_UART_Transmit+0x26>
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e07a      	b.n	80067a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_UART_Transmit+0x38>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e073      	b.n	80067a0 <HAL_UART_Transmit+0x120>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2221      	movs	r2, #33	; 0x21
 80066cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ce:	f7fd f81d 	bl	800370c <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ec:	d108      	bne.n	8006700 <HAL_UART_Transmit+0x80>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	e003      	b.n	8006708 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006710:	e02d      	b.n	800676e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fb88 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e039      	b.n	80067a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800673e:	b292      	uxth	r2, r2
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3302      	adds	r3, #2
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e008      	b.n	800675c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	b292      	uxth	r2, r2
 8006754:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3301      	adds	r3, #1
 800675a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1cb      	bne.n	8006712 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	2140      	movs	r1, #64	; 0x40
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fb54 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e005      	b.n	80067a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ac:	b08a      	sub	sp, #40	; 0x28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b9e      	ldr	r3, [pc, #632]	; (8006a50 <UART_SetConfig+0x2a8>)
 80067d8:	4013      	ands	r3, r2
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a93      	ldr	r2, [pc, #588]	; (8006a54 <UART_SetConfig+0x2ac>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006810:	4313      	orrs	r3, r2
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a8a      	ldr	r2, [pc, #552]	; (8006a58 <UART_SetConfig+0x2b0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d126      	bne.n	8006880 <UART_SetConfig+0xd8>
 8006832:	4b8a      	ldr	r3, [pc, #552]	; (8006a5c <UART_SetConfig+0x2b4>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	2b03      	cmp	r3, #3
 800683e:	d81b      	bhi.n	8006878 <UART_SetConfig+0xd0>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0xa0>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	08006859 	.word	0x08006859
 800684c:	08006869 	.word	0x08006869
 8006850:	08006861 	.word	0x08006861
 8006854:	08006871 	.word	0x08006871
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e0ab      	b.n	80069b8 <UART_SetConfig+0x210>
 8006860:	2302      	movs	r3, #2
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e0a7      	b.n	80069b8 <UART_SetConfig+0x210>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e0a3      	b.n	80069b8 <UART_SetConfig+0x210>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e09f      	b.n	80069b8 <UART_SetConfig+0x210>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e09b      	b.n	80069b8 <UART_SetConfig+0x210>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a76      	ldr	r2, [pc, #472]	; (8006a60 <UART_SetConfig+0x2b8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d138      	bne.n	80068fc <UART_SetConfig+0x154>
 800688a:	4b74      	ldr	r3, [pc, #464]	; (8006a5c <UART_SetConfig+0x2b4>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d82d      	bhi.n	80068f4 <UART_SetConfig+0x14c>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0xf8>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068d5 	.word	0x080068d5
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	080068f5 	.word	0x080068f5
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	080068f5 	.word	0x080068f5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e06d      	b.n	80069b8 <UART_SetConfig+0x210>
 80068dc:	2302      	movs	r3, #2
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e2:	e069      	b.n	80069b8 <UART_SetConfig+0x210>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ea:	e065      	b.n	80069b8 <UART_SetConfig+0x210>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e061      	b.n	80069b8 <UART_SetConfig+0x210>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e05d      	b.n	80069b8 <UART_SetConfig+0x210>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a58      	ldr	r2, [pc, #352]	; (8006a64 <UART_SetConfig+0x2bc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d125      	bne.n	8006952 <UART_SetConfig+0x1aa>
 8006906:	4b55      	ldr	r3, [pc, #340]	; (8006a5c <UART_SetConfig+0x2b4>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d016      	beq.n	8006942 <UART_SetConfig+0x19a>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d818      	bhi.n	800694a <UART_SetConfig+0x1a2>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d00a      	beq.n	8006932 <UART_SetConfig+0x18a>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d814      	bhi.n	800694a <UART_SetConfig+0x1a2>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <UART_SetConfig+0x182>
 8006924:	2b10      	cmp	r3, #16
 8006926:	d008      	beq.n	800693a <UART_SetConfig+0x192>
 8006928:	e00f      	b.n	800694a <UART_SetConfig+0x1a2>
 800692a:	2300      	movs	r3, #0
 800692c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006930:	e042      	b.n	80069b8 <UART_SetConfig+0x210>
 8006932:	2302      	movs	r3, #2
 8006934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006938:	e03e      	b.n	80069b8 <UART_SetConfig+0x210>
 800693a:	2304      	movs	r3, #4
 800693c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006940:	e03a      	b.n	80069b8 <UART_SetConfig+0x210>
 8006942:	2308      	movs	r3, #8
 8006944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006948:	e036      	b.n	80069b8 <UART_SetConfig+0x210>
 800694a:	2310      	movs	r3, #16
 800694c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006950:	e032      	b.n	80069b8 <UART_SetConfig+0x210>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <UART_SetConfig+0x2ac>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d12a      	bne.n	80069b2 <UART_SetConfig+0x20a>
 800695c:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <UART_SetConfig+0x2b4>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800696a:	d01a      	beq.n	80069a2 <UART_SetConfig+0x1fa>
 800696c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006970:	d81b      	bhi.n	80069aa <UART_SetConfig+0x202>
 8006972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006976:	d00c      	beq.n	8006992 <UART_SetConfig+0x1ea>
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697c:	d815      	bhi.n	80069aa <UART_SetConfig+0x202>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <UART_SetConfig+0x1e2>
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d008      	beq.n	800699a <UART_SetConfig+0x1f2>
 8006988:	e00f      	b.n	80069aa <UART_SetConfig+0x202>
 800698a:	2300      	movs	r3, #0
 800698c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006990:	e012      	b.n	80069b8 <UART_SetConfig+0x210>
 8006992:	2302      	movs	r3, #2
 8006994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006998:	e00e      	b.n	80069b8 <UART_SetConfig+0x210>
 800699a:	2304      	movs	r3, #4
 800699c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a0:	e00a      	b.n	80069b8 <UART_SetConfig+0x210>
 80069a2:	2308      	movs	r3, #8
 80069a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a8:	e006      	b.n	80069b8 <UART_SetConfig+0x210>
 80069aa:	2310      	movs	r3, #16
 80069ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b0:	e002      	b.n	80069b8 <UART_SetConfig+0x210>
 80069b2:	2310      	movs	r3, #16
 80069b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <UART_SetConfig+0x2ac>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	f040 808a 	bne.w	8006ad8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d824      	bhi.n	8006a16 <UART_SetConfig+0x26e>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x22c>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a07 	.word	0x08006a07
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a17 	.word	0x08006a17
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe f9aa 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
        break;
 80069fe:	e010      	b.n	8006a22 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <UART_SetConfig+0x2c0>)
 8006a02:	61fb      	str	r3, [r7, #28]
        break;
 8006a04:	e00d      	b.n	8006a22 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fe f90b 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006a0a:	61f8      	str	r0, [r7, #28]
        break;
 8006a0c:	e009      	b.n	8006a22 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a12:	61fb      	str	r3, [r7, #28]
        break;
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8109 	beq.w	8006c3c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d305      	bcc.n	8006a46 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d912      	bls.n	8006a6c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a4c:	e0f6      	b.n	8006c3c <UART_SetConfig+0x494>
 8006a4e:	bf00      	nop
 8006a50:	efff69f3 	.word	0xefff69f3
 8006a54:	40008000 	.word	0x40008000
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40004400 	.word	0x40004400
 8006a64:	40004800 	.word	0x40004800
 8006a68:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	461c      	mov	r4, r3
 8006a72:	4615      	mov	r5, r2
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	022b      	lsls	r3, r5, #8
 8006a7e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a82:	0222      	lsls	r2, r4, #8
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	6849      	ldr	r1, [r1, #4]
 8006a88:	0849      	lsrs	r1, r1, #1
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	4688      	mov	r8, r1
 8006a8e:	4681      	mov	r9, r0
 8006a90:	eb12 0a08 	adds.w	sl, r2, r8
 8006a94:	eb43 0b09 	adc.w	fp, r3, r9
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	f7fa f8cd 	bl	8000c48 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006abc:	d308      	bcc.n	8006ad0 <UART_SetConfig+0x328>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac4:	d204      	bcs.n	8006ad0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e0b5      	b.n	8006c3c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ad6:	e0b1      	b.n	8006c3c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae0:	d15d      	bne.n	8006b9e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d827      	bhi.n	8006b3a <UART_SetConfig+0x392>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x348>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	08006b3b 	.word	0x08006b3b
 8006b00:	08006b2b 	.word	0x08006b2b
 8006b04:	08006b3b 	.word	0x08006b3b
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b3b 	.word	0x08006b3b
 8006b10:	08006b33 	.word	0x08006b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b14:	f7fe f91c 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8006b18:	61f8      	str	r0, [r7, #28]
        break;
 8006b1a:	e014      	b.n	8006b46 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7fe f92e 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8006b20:	61f8      	str	r0, [r7, #28]
        break;
 8006b22:	e010      	b.n	8006b46 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b24:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <UART_SetConfig+0x4b0>)
 8006b26:	61fb      	str	r3, [r7, #28]
        break;
 8006b28:	e00d      	b.n	8006b46 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fe f879 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006b2e:	61f8      	str	r0, [r7, #28]
        break;
 8006b30:	e009      	b.n	8006b46 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e005      	b.n	8006b46 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d077      	beq.n	8006c3c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	005a      	lsls	r2, r3, #1
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	441a      	add	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b0f      	cmp	r3, #15
 8006b66:	d916      	bls.n	8006b96 <UART_SetConfig+0x3ee>
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	d212      	bcs.n	8006b96 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f023 030f 	bic.w	r3, r3, #15
 8006b78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	8afb      	ldrh	r3, [r7, #22]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	8afa      	ldrh	r2, [r7, #22]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e052      	b.n	8006c3c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b9c:	e04e      	b.n	8006c3c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d827      	bhi.n	8006bf6 <UART_SetConfig+0x44e>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x404>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bd9 	.word	0x08006bd9
 8006bb4:	08006be1 	.word	0x08006be1
 8006bb8:	08006bf7 	.word	0x08006bf7
 8006bbc:	08006be7 	.word	0x08006be7
 8006bc0:	08006bf7 	.word	0x08006bf7
 8006bc4:	08006bf7 	.word	0x08006bf7
 8006bc8:	08006bf7 	.word	0x08006bf7
 8006bcc:	08006bef 	.word	0x08006bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fe f8be 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
        break;
 8006bd6:	e014      	b.n	8006c02 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bd8:	f7fe f8d0 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8006bdc:	61f8      	str	r0, [r7, #28]
        break;
 8006bde:	e010      	b.n	8006c02 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be0:	4b1d      	ldr	r3, [pc, #116]	; (8006c58 <UART_SetConfig+0x4b0>)
 8006be2:	61fb      	str	r3, [r7, #28]
        break;
 8006be4:	e00d      	b.n	8006c02 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006be6:	f7fe f81b 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006bea:	61f8      	str	r0, [r7, #28]
        break;
 8006bec:	e009      	b.n	8006c02 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf2:	61fb      	str	r3, [r7, #28]
        break;
 8006bf4:	e005      	b.n	8006c02 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c00:	bf00      	nop
    }

    if (pclk != 0U)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d019      	beq.n	8006c3c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	085a      	lsrs	r2, r3, #1
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d909      	bls.n	8006c36 <UART_SetConfig+0x48e>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d205      	bcs.n	8006c36 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60da      	str	r2, [r3, #12]
 8006c34:	e002      	b.n	8006c3c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3728      	adds	r7, #40	; 0x28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c56:	bf00      	nop
 8006c58:	00f42400 	.word	0x00f42400

08006c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01a      	beq.n	8006d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5a:	d10a      	bne.n	8006d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006db0:	f7fc fcac 	bl	800370c <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d10e      	bne.n	8006de2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f82d 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e023      	b.n	8006e2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d10e      	bne.n	8006e0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f817 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e00d      	b.n	8006e2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b09c      	sub	sp, #112	; 0x70
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	e0a5      	b.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	f000 80a1 	beq.w	8006f90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4e:	f7fc fc5d 	bl	800370c <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d13e      	bne.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e78:	667b      	str	r3, [r7, #100]	; 0x64
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e6      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	663b      	str	r3, [r7, #96]	; 0x60
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e067      	b.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d04f      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d147      	bne.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f5c:	623a      	str	r2, [r7, #32]
 8006f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	69f9      	ldr	r1, [r7, #28]
 8006f62:	6a3a      	ldr	r2, [r7, #32]
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e010      	b.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69da      	ldr	r2, [r3, #28]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	f43f af4a 	beq.w	8006e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3770      	adds	r7, #112	; 0x70
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <__errno>:
 8006fbc:	4b01      	ldr	r3, [pc, #4]	; (8006fc4 <__errno+0x8>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000010 	.word	0x20000010

08006fc8 <__libc_init_array>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	4d0d      	ldr	r5, [pc, #52]	; (8007000 <__libc_init_array+0x38>)
 8006fcc:	4c0d      	ldr	r4, [pc, #52]	; (8007004 <__libc_init_array+0x3c>)
 8006fce:	1b64      	subs	r4, r4, r5
 8006fd0:	10a4      	asrs	r4, r4, #2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	d109      	bne.n	8006fec <__libc_init_array+0x24>
 8006fd8:	4d0b      	ldr	r5, [pc, #44]	; (8007008 <__libc_init_array+0x40>)
 8006fda:	4c0c      	ldr	r4, [pc, #48]	; (800700c <__libc_init_array+0x44>)
 8006fdc:	f003 fcde 	bl	800a99c <_init>
 8006fe0:	1b64      	subs	r4, r4, r5
 8006fe2:	10a4      	asrs	r4, r4, #2
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	42a6      	cmp	r6, r4
 8006fe8:	d105      	bne.n	8006ff6 <__libc_init_array+0x2e>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff0:	4798      	blx	r3
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__libc_init_array+0xc>
 8006ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffa:	4798      	blx	r3
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	e7f2      	b.n	8006fe6 <__libc_init_array+0x1e>
 8007000:	0800b4f8 	.word	0x0800b4f8
 8007004:	0800b4f8 	.word	0x0800b4f8
 8007008:	0800b4f8 	.word	0x0800b4f8
 800700c:	0800b4fc 	.word	0x0800b4fc

08007010 <memset>:
 8007010:	4402      	add	r2, r0
 8007012:	4603      	mov	r3, r0
 8007014:	4293      	cmp	r3, r2
 8007016:	d100      	bne.n	800701a <memset+0xa>
 8007018:	4770      	bx	lr
 800701a:	f803 1b01 	strb.w	r1, [r3], #1
 800701e:	e7f9      	b.n	8007014 <memset+0x4>

08007020 <__cvt>:
 8007020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	ec55 4b10 	vmov	r4, r5, d0
 8007028:	2d00      	cmp	r5, #0
 800702a:	460e      	mov	r6, r1
 800702c:	4619      	mov	r1, r3
 800702e:	462b      	mov	r3, r5
 8007030:	bfbb      	ittet	lt
 8007032:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007036:	461d      	movlt	r5, r3
 8007038:	2300      	movge	r3, #0
 800703a:	232d      	movlt	r3, #45	; 0x2d
 800703c:	700b      	strb	r3, [r1, #0]
 800703e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007040:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007044:	4691      	mov	r9, r2
 8007046:	f023 0820 	bic.w	r8, r3, #32
 800704a:	bfbc      	itt	lt
 800704c:	4622      	movlt	r2, r4
 800704e:	4614      	movlt	r4, r2
 8007050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007054:	d005      	beq.n	8007062 <__cvt+0x42>
 8007056:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800705a:	d100      	bne.n	800705e <__cvt+0x3e>
 800705c:	3601      	adds	r6, #1
 800705e:	2102      	movs	r1, #2
 8007060:	e000      	b.n	8007064 <__cvt+0x44>
 8007062:	2103      	movs	r1, #3
 8007064:	ab03      	add	r3, sp, #12
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	ab02      	add	r3, sp, #8
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	ec45 4b10 	vmov	d0, r4, r5
 8007070:	4653      	mov	r3, sl
 8007072:	4632      	mov	r2, r6
 8007074:	f000 fe18 	bl	8007ca8 <_dtoa_r>
 8007078:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800707c:	4607      	mov	r7, r0
 800707e:	d102      	bne.n	8007086 <__cvt+0x66>
 8007080:	f019 0f01 	tst.w	r9, #1
 8007084:	d022      	beq.n	80070cc <__cvt+0xac>
 8007086:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800708a:	eb07 0906 	add.w	r9, r7, r6
 800708e:	d110      	bne.n	80070b2 <__cvt+0x92>
 8007090:	783b      	ldrb	r3, [r7, #0]
 8007092:	2b30      	cmp	r3, #48	; 0x30
 8007094:	d10a      	bne.n	80070ac <__cvt+0x8c>
 8007096:	2200      	movs	r2, #0
 8007098:	2300      	movs	r3, #0
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a2:	b918      	cbnz	r0, 80070ac <__cvt+0x8c>
 80070a4:	f1c6 0601 	rsb	r6, r6, #1
 80070a8:	f8ca 6000 	str.w	r6, [sl]
 80070ac:	f8da 3000 	ldr.w	r3, [sl]
 80070b0:	4499      	add	r9, r3
 80070b2:	2200      	movs	r2, #0
 80070b4:	2300      	movs	r3, #0
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80070be:	b108      	cbz	r0, 80070c4 <__cvt+0xa4>
 80070c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80070c4:	2230      	movs	r2, #48	; 0x30
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	454b      	cmp	r3, r9
 80070ca:	d307      	bcc.n	80070dc <__cvt+0xbc>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d0:	1bdb      	subs	r3, r3, r7
 80070d2:	4638      	mov	r0, r7
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	b004      	add	sp, #16
 80070d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070dc:	1c59      	adds	r1, r3, #1
 80070de:	9103      	str	r1, [sp, #12]
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e7f0      	b.n	80070c6 <__cvt+0xa6>

080070e4 <__exponent>:
 80070e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070e6:	4603      	mov	r3, r0
 80070e8:	2900      	cmp	r1, #0
 80070ea:	bfb8      	it	lt
 80070ec:	4249      	neglt	r1, r1
 80070ee:	f803 2b02 	strb.w	r2, [r3], #2
 80070f2:	bfb4      	ite	lt
 80070f4:	222d      	movlt	r2, #45	; 0x2d
 80070f6:	222b      	movge	r2, #43	; 0x2b
 80070f8:	2909      	cmp	r1, #9
 80070fa:	7042      	strb	r2, [r0, #1]
 80070fc:	dd2a      	ble.n	8007154 <__exponent+0x70>
 80070fe:	f10d 0407 	add.w	r4, sp, #7
 8007102:	46a4      	mov	ip, r4
 8007104:	270a      	movs	r7, #10
 8007106:	46a6      	mov	lr, r4
 8007108:	460a      	mov	r2, r1
 800710a:	fb91 f6f7 	sdiv	r6, r1, r7
 800710e:	fb07 1516 	mls	r5, r7, r6, r1
 8007112:	3530      	adds	r5, #48	; 0x30
 8007114:	2a63      	cmp	r2, #99	; 0x63
 8007116:	f104 34ff 	add.w	r4, r4, #4294967295
 800711a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800711e:	4631      	mov	r1, r6
 8007120:	dcf1      	bgt.n	8007106 <__exponent+0x22>
 8007122:	3130      	adds	r1, #48	; 0x30
 8007124:	f1ae 0502 	sub.w	r5, lr, #2
 8007128:	f804 1c01 	strb.w	r1, [r4, #-1]
 800712c:	1c44      	adds	r4, r0, #1
 800712e:	4629      	mov	r1, r5
 8007130:	4561      	cmp	r1, ip
 8007132:	d30a      	bcc.n	800714a <__exponent+0x66>
 8007134:	f10d 0209 	add.w	r2, sp, #9
 8007138:	eba2 020e 	sub.w	r2, r2, lr
 800713c:	4565      	cmp	r5, ip
 800713e:	bf88      	it	hi
 8007140:	2200      	movhi	r2, #0
 8007142:	4413      	add	r3, r2
 8007144:	1a18      	subs	r0, r3, r0
 8007146:	b003      	add	sp, #12
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007152:	e7ed      	b.n	8007130 <__exponent+0x4c>
 8007154:	2330      	movs	r3, #48	; 0x30
 8007156:	3130      	adds	r1, #48	; 0x30
 8007158:	7083      	strb	r3, [r0, #2]
 800715a:	70c1      	strb	r1, [r0, #3]
 800715c:	1d03      	adds	r3, r0, #4
 800715e:	e7f1      	b.n	8007144 <__exponent+0x60>

08007160 <_printf_float>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	ed2d 8b02 	vpush	{d8}
 8007168:	b08d      	sub	sp, #52	; 0x34
 800716a:	460c      	mov	r4, r1
 800716c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007170:	4616      	mov	r6, r2
 8007172:	461f      	mov	r7, r3
 8007174:	4605      	mov	r5, r0
 8007176:	f001 fd3d 	bl	8008bf4 <_localeconv_r>
 800717a:	f8d0 a000 	ldr.w	sl, [r0]
 800717e:	4650      	mov	r0, sl
 8007180:	f7f9 f826 	bl	80001d0 <strlen>
 8007184:	2300      	movs	r3, #0
 8007186:	930a      	str	r3, [sp, #40]	; 0x28
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	f8d8 3000 	ldr.w	r3, [r8]
 8007190:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007194:	3307      	adds	r3, #7
 8007196:	f023 0307 	bic.w	r3, r3, #7
 800719a:	f103 0208 	add.w	r2, r3, #8
 800719e:	f8c8 2000 	str.w	r2, [r8]
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071b2:	9307      	str	r3, [sp, #28]
 80071b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80071b8:	ee08 0a10 	vmov	s16, r0
 80071bc:	4b9f      	ldr	r3, [pc, #636]	; (800743c <_printf_float+0x2dc>)
 80071be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	f7f9 fcb1 	bl	8000b2c <__aeabi_dcmpun>
 80071ca:	bb88      	cbnz	r0, 8007230 <_printf_float+0xd0>
 80071cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071d0:	4b9a      	ldr	r3, [pc, #616]	; (800743c <_printf_float+0x2dc>)
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	f7f9 fc8b 	bl	8000af0 <__aeabi_dcmple>
 80071da:	bb48      	cbnz	r0, 8007230 <_printf_float+0xd0>
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fc7a 	bl	8000adc <__aeabi_dcmplt>
 80071e8:	b110      	cbz	r0, 80071f0 <_printf_float+0x90>
 80071ea:	232d      	movs	r3, #45	; 0x2d
 80071ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f0:	4b93      	ldr	r3, [pc, #588]	; (8007440 <_printf_float+0x2e0>)
 80071f2:	4894      	ldr	r0, [pc, #592]	; (8007444 <_printf_float+0x2e4>)
 80071f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071f8:	bf94      	ite	ls
 80071fa:	4698      	movls	r8, r3
 80071fc:	4680      	movhi	r8, r0
 80071fe:	2303      	movs	r3, #3
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	9b05      	ldr	r3, [sp, #20]
 8007204:	f023 0204 	bic.w	r2, r3, #4
 8007208:	6022      	str	r2, [r4, #0]
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	9700      	str	r7, [sp, #0]
 8007210:	4633      	mov	r3, r6
 8007212:	aa0b      	add	r2, sp, #44	; 0x2c
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f9d8 	bl	80075cc <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	f040 8090 	bne.w	8007342 <_printf_float+0x1e2>
 8007222:	f04f 30ff 	mov.w	r0, #4294967295
 8007226:	b00d      	add	sp, #52	; 0x34
 8007228:	ecbd 8b02 	vpop	{d8}
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	4642      	mov	r2, r8
 8007232:	464b      	mov	r3, r9
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 fc78 	bl	8000b2c <__aeabi_dcmpun>
 800723c:	b140      	cbz	r0, 8007250 <_printf_float+0xf0>
 800723e:	464b      	mov	r3, r9
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfbc      	itt	lt
 8007244:	232d      	movlt	r3, #45	; 0x2d
 8007246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800724a:	487f      	ldr	r0, [pc, #508]	; (8007448 <_printf_float+0x2e8>)
 800724c:	4b7f      	ldr	r3, [pc, #508]	; (800744c <_printf_float+0x2ec>)
 800724e:	e7d1      	b.n	80071f4 <_printf_float+0x94>
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007256:	9206      	str	r2, [sp, #24]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	d13f      	bne.n	80072dc <_printf_float+0x17c>
 800725c:	2306      	movs	r3, #6
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	9b05      	ldr	r3, [sp, #20]
 8007262:	6861      	ldr	r1, [r4, #4]
 8007264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007268:	2300      	movs	r3, #0
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	ab0a      	add	r3, sp, #40	; 0x28
 800726e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007272:	ab09      	add	r3, sp, #36	; 0x24
 8007274:	ec49 8b10 	vmov	d0, r8, r9
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	6022      	str	r2, [r4, #0]
 800727c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007280:	4628      	mov	r0, r5
 8007282:	f7ff fecd 	bl	8007020 <__cvt>
 8007286:	9b06      	ldr	r3, [sp, #24]
 8007288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800728a:	2b47      	cmp	r3, #71	; 0x47
 800728c:	4680      	mov	r8, r0
 800728e:	d108      	bne.n	80072a2 <_printf_float+0x142>
 8007290:	1cc8      	adds	r0, r1, #3
 8007292:	db02      	blt.n	800729a <_printf_float+0x13a>
 8007294:	6863      	ldr	r3, [r4, #4]
 8007296:	4299      	cmp	r1, r3
 8007298:	dd41      	ble.n	800731e <_printf_float+0x1be>
 800729a:	f1ab 0b02 	sub.w	fp, fp, #2
 800729e:	fa5f fb8b 	uxtb.w	fp, fp
 80072a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072a6:	d820      	bhi.n	80072ea <_printf_float+0x18a>
 80072a8:	3901      	subs	r1, #1
 80072aa:	465a      	mov	r2, fp
 80072ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072b0:	9109      	str	r1, [sp, #36]	; 0x24
 80072b2:	f7ff ff17 	bl	80070e4 <__exponent>
 80072b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b8:	1813      	adds	r3, r2, r0
 80072ba:	2a01      	cmp	r2, #1
 80072bc:	4681      	mov	r9, r0
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	dc02      	bgt.n	80072c8 <_printf_float+0x168>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d2      	lsls	r2, r2, #31
 80072c6:	d501      	bpl.n	80072cc <_printf_float+0x16c>
 80072c8:	3301      	adds	r3, #1
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d09c      	beq.n	800720e <_printf_float+0xae>
 80072d4:	232d      	movs	r3, #45	; 0x2d
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072da:	e798      	b.n	800720e <_printf_float+0xae>
 80072dc:	9a06      	ldr	r2, [sp, #24]
 80072de:	2a47      	cmp	r2, #71	; 0x47
 80072e0:	d1be      	bne.n	8007260 <_printf_float+0x100>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1bc      	bne.n	8007260 <_printf_float+0x100>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7b9      	b.n	800725e <_printf_float+0xfe>
 80072ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072ee:	d118      	bne.n	8007322 <_printf_float+0x1c2>
 80072f0:	2900      	cmp	r1, #0
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	dd0b      	ble.n	800730e <_printf_float+0x1ae>
 80072f6:	6121      	str	r1, [r4, #16]
 80072f8:	b913      	cbnz	r3, 8007300 <_printf_float+0x1a0>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d502      	bpl.n	8007306 <_printf_float+0x1a6>
 8007300:	3301      	adds	r3, #1
 8007302:	440b      	add	r3, r1
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	65a1      	str	r1, [r4, #88]	; 0x58
 8007308:	f04f 0900 	mov.w	r9, #0
 800730c:	e7de      	b.n	80072cc <_printf_float+0x16c>
 800730e:	b913      	cbnz	r3, 8007316 <_printf_float+0x1b6>
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	07d2      	lsls	r2, r2, #31
 8007314:	d501      	bpl.n	800731a <_printf_float+0x1ba>
 8007316:	3302      	adds	r3, #2
 8007318:	e7f4      	b.n	8007304 <_printf_float+0x1a4>
 800731a:	2301      	movs	r3, #1
 800731c:	e7f2      	b.n	8007304 <_printf_float+0x1a4>
 800731e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007324:	4299      	cmp	r1, r3
 8007326:	db05      	blt.n	8007334 <_printf_float+0x1d4>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	6121      	str	r1, [r4, #16]
 800732c:	07d8      	lsls	r0, r3, #31
 800732e:	d5ea      	bpl.n	8007306 <_printf_float+0x1a6>
 8007330:	1c4b      	adds	r3, r1, #1
 8007332:	e7e7      	b.n	8007304 <_printf_float+0x1a4>
 8007334:	2900      	cmp	r1, #0
 8007336:	bfd4      	ite	le
 8007338:	f1c1 0202 	rsble	r2, r1, #2
 800733c:	2201      	movgt	r2, #1
 800733e:	4413      	add	r3, r2
 8007340:	e7e0      	b.n	8007304 <_printf_float+0x1a4>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	055a      	lsls	r2, r3, #21
 8007346:	d407      	bmi.n	8007358 <_printf_float+0x1f8>
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	4642      	mov	r2, r8
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	d12c      	bne.n	80073b0 <_printf_float+0x250>
 8007356:	e764      	b.n	8007222 <_printf_float+0xc2>
 8007358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800735c:	f240 80e0 	bls.w	8007520 <_printf_float+0x3c0>
 8007360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	f7f9 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	d034      	beq.n	80073da <_printf_float+0x27a>
 8007370:	4a37      	ldr	r2, [pc, #220]	; (8007450 <_printf_float+0x2f0>)
 8007372:	2301      	movs	r3, #1
 8007374:	4631      	mov	r1, r6
 8007376:	4628      	mov	r0, r5
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	f43f af51 	beq.w	8007222 <_printf_float+0xc2>
 8007380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007384:	429a      	cmp	r2, r3
 8007386:	db02      	blt.n	800738e <_printf_float+0x22e>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	07d8      	lsls	r0, r3, #31
 800738c:	d510      	bpl.n	80073b0 <_printf_float+0x250>
 800738e:	ee18 3a10 	vmov	r3, s16
 8007392:	4652      	mov	r2, sl
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f af41 	beq.w	8007222 <_printf_float+0xc2>
 80073a0:	f04f 0800 	mov.w	r8, #0
 80073a4:	f104 091a 	add.w	r9, r4, #26
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	3b01      	subs	r3, #1
 80073ac:	4543      	cmp	r3, r8
 80073ae:	dc09      	bgt.n	80073c4 <_printf_float+0x264>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	079b      	lsls	r3, r3, #30
 80073b4:	f100 8105 	bmi.w	80075c2 <_printf_float+0x462>
 80073b8:	68e0      	ldr	r0, [r4, #12]
 80073ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073bc:	4298      	cmp	r0, r3
 80073be:	bfb8      	it	lt
 80073c0:	4618      	movlt	r0, r3
 80073c2:	e730      	b.n	8007226 <_printf_float+0xc6>
 80073c4:	2301      	movs	r3, #1
 80073c6:	464a      	mov	r2, r9
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f af27 	beq.w	8007222 <_printf_float+0xc2>
 80073d4:	f108 0801 	add.w	r8, r8, #1
 80073d8:	e7e6      	b.n	80073a8 <_printf_float+0x248>
 80073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	dc39      	bgt.n	8007454 <_printf_float+0x2f4>
 80073e0:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <_printf_float+0x2f0>)
 80073e2:	2301      	movs	r3, #1
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f af19 	beq.w	8007222 <_printf_float+0xc2>
 80073f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073f4:	4313      	orrs	r3, r2
 80073f6:	d102      	bne.n	80073fe <_printf_float+0x29e>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07d9      	lsls	r1, r3, #31
 80073fc:	d5d8      	bpl.n	80073b0 <_printf_float+0x250>
 80073fe:	ee18 3a10 	vmov	r3, s16
 8007402:	4652      	mov	r2, sl
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	f43f af09 	beq.w	8007222 <_printf_float+0xc2>
 8007410:	f04f 0900 	mov.w	r9, #0
 8007414:	f104 0a1a 	add.w	sl, r4, #26
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	425b      	negs	r3, r3
 800741c:	454b      	cmp	r3, r9
 800741e:	dc01      	bgt.n	8007424 <_printf_float+0x2c4>
 8007420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007422:	e792      	b.n	800734a <_printf_float+0x1ea>
 8007424:	2301      	movs	r3, #1
 8007426:	4652      	mov	r2, sl
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	f43f aef7 	beq.w	8007222 <_printf_float+0xc2>
 8007434:	f109 0901 	add.w	r9, r9, #1
 8007438:	e7ee      	b.n	8007418 <_printf_float+0x2b8>
 800743a:	bf00      	nop
 800743c:	7fefffff 	.word	0x7fefffff
 8007440:	0800b0e8 	.word	0x0800b0e8
 8007444:	0800b0ec 	.word	0x0800b0ec
 8007448:	0800b0f4 	.word	0x0800b0f4
 800744c:	0800b0f0 	.word	0x0800b0f0
 8007450:	0800b0f8 	.word	0x0800b0f8
 8007454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007458:	429a      	cmp	r2, r3
 800745a:	bfa8      	it	ge
 800745c:	461a      	movge	r2, r3
 800745e:	2a00      	cmp	r2, #0
 8007460:	4691      	mov	r9, r2
 8007462:	dc37      	bgt.n	80074d4 <_printf_float+0x374>
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746c:	f104 021a 	add.w	r2, r4, #26
 8007470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	eba3 0309 	sub.w	r3, r3, r9
 8007478:	455b      	cmp	r3, fp
 800747a:	dc33      	bgt.n	80074e4 <_printf_float+0x384>
 800747c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007480:	429a      	cmp	r2, r3
 8007482:	db3b      	blt.n	80074fc <_printf_float+0x39c>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07da      	lsls	r2, r3, #31
 8007488:	d438      	bmi.n	80074fc <_printf_float+0x39c>
 800748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748c:	9a05      	ldr	r2, [sp, #20]
 800748e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007490:	1a9a      	subs	r2, r3, r2
 8007492:	eba3 0901 	sub.w	r9, r3, r1
 8007496:	4591      	cmp	r9, r2
 8007498:	bfa8      	it	ge
 800749a:	4691      	movge	r9, r2
 800749c:	f1b9 0f00 	cmp.w	r9, #0
 80074a0:	dc35      	bgt.n	800750e <_printf_float+0x3ae>
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074aa:	f104 0a1a 	add.w	sl, r4, #26
 80074ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	eba3 0309 	sub.w	r3, r3, r9
 80074b8:	4543      	cmp	r3, r8
 80074ba:	f77f af79 	ble.w	80073b0 <_printf_float+0x250>
 80074be:	2301      	movs	r3, #1
 80074c0:	4652      	mov	r2, sl
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f aeaa 	beq.w	8007222 <_printf_float+0xc2>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	e7ec      	b.n	80074ae <_printf_float+0x34e>
 80074d4:	4613      	mov	r3, r2
 80074d6:	4631      	mov	r1, r6
 80074d8:	4642      	mov	r2, r8
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	d1c0      	bne.n	8007464 <_printf_float+0x304>
 80074e2:	e69e      	b.n	8007222 <_printf_float+0xc2>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	9205      	str	r2, [sp, #20]
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f ae97 	beq.w	8007222 <_printf_float+0xc2>
 80074f4:	9a05      	ldr	r2, [sp, #20]
 80074f6:	f10b 0b01 	add.w	fp, fp, #1
 80074fa:	e7b9      	b.n	8007470 <_printf_float+0x310>
 80074fc:	ee18 3a10 	vmov	r3, s16
 8007500:	4652      	mov	r2, sl
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	d1be      	bne.n	800748a <_printf_float+0x32a>
 800750c:	e689      	b.n	8007222 <_printf_float+0xc2>
 800750e:	9a05      	ldr	r2, [sp, #20]
 8007510:	464b      	mov	r3, r9
 8007512:	4442      	add	r2, r8
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	d1c1      	bne.n	80074a2 <_printf_float+0x342>
 800751e:	e680      	b.n	8007222 <_printf_float+0xc2>
 8007520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007522:	2a01      	cmp	r2, #1
 8007524:	dc01      	bgt.n	800752a <_printf_float+0x3ca>
 8007526:	07db      	lsls	r3, r3, #31
 8007528:	d538      	bpl.n	800759c <_printf_float+0x43c>
 800752a:	2301      	movs	r3, #1
 800752c:	4642      	mov	r2, r8
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f ae74 	beq.w	8007222 <_printf_float+0xc2>
 800753a:	ee18 3a10 	vmov	r3, s16
 800753e:	4652      	mov	r2, sl
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f ae6b 	beq.w	8007222 <_printf_float+0xc2>
 800754c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007550:	2200      	movs	r2, #0
 8007552:	2300      	movs	r3, #0
 8007554:	f7f9 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007558:	b9d8      	cbnz	r0, 8007592 <_printf_float+0x432>
 800755a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755c:	f108 0201 	add.w	r2, r8, #1
 8007560:	3b01      	subs	r3, #1
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	d10e      	bne.n	800758a <_printf_float+0x42a>
 800756c:	e659      	b.n	8007222 <_printf_float+0xc2>
 800756e:	2301      	movs	r3, #1
 8007570:	4652      	mov	r2, sl
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f ae52 	beq.w	8007222 <_printf_float+0xc2>
 800757e:	f108 0801 	add.w	r8, r8, #1
 8007582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007584:	3b01      	subs	r3, #1
 8007586:	4543      	cmp	r3, r8
 8007588:	dcf1      	bgt.n	800756e <_printf_float+0x40e>
 800758a:	464b      	mov	r3, r9
 800758c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007590:	e6dc      	b.n	800734c <_printf_float+0x1ec>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f104 0a1a 	add.w	sl, r4, #26
 800759a:	e7f2      	b.n	8007582 <_printf_float+0x422>
 800759c:	2301      	movs	r3, #1
 800759e:	4642      	mov	r2, r8
 80075a0:	e7df      	b.n	8007562 <_printf_float+0x402>
 80075a2:	2301      	movs	r3, #1
 80075a4:	464a      	mov	r2, r9
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae38 	beq.w	8007222 <_printf_float+0xc2>
 80075b2:	f108 0801 	add.w	r8, r8, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ba:	1a5b      	subs	r3, r3, r1
 80075bc:	4543      	cmp	r3, r8
 80075be:	dcf0      	bgt.n	80075a2 <_printf_float+0x442>
 80075c0:	e6fa      	b.n	80073b8 <_printf_float+0x258>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	f104 0919 	add.w	r9, r4, #25
 80075ca:	e7f4      	b.n	80075b6 <_printf_float+0x456>

080075cc <_printf_common>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	4616      	mov	r6, r2
 80075d2:	4699      	mov	r9, r3
 80075d4:	688a      	ldr	r2, [r1, #8]
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075dc:	4293      	cmp	r3, r2
 80075de:	bfb8      	it	lt
 80075e0:	4613      	movlt	r3, r2
 80075e2:	6033      	str	r3, [r6, #0]
 80075e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075e8:	4607      	mov	r7, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b10a      	cbz	r2, 80075f2 <_printf_common+0x26>
 80075ee:	3301      	adds	r3, #1
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	0699      	lsls	r1, r3, #26
 80075f6:	bf42      	ittt	mi
 80075f8:	6833      	ldrmi	r3, [r6, #0]
 80075fa:	3302      	addmi	r3, #2
 80075fc:	6033      	strmi	r3, [r6, #0]
 80075fe:	6825      	ldr	r5, [r4, #0]
 8007600:	f015 0506 	ands.w	r5, r5, #6
 8007604:	d106      	bne.n	8007614 <_printf_common+0x48>
 8007606:	f104 0a19 	add.w	sl, r4, #25
 800760a:	68e3      	ldr	r3, [r4, #12]
 800760c:	6832      	ldr	r2, [r6, #0]
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	42ab      	cmp	r3, r5
 8007612:	dc26      	bgt.n	8007662 <_printf_common+0x96>
 8007614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007618:	1e13      	subs	r3, r2, #0
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	bf18      	it	ne
 800761e:	2301      	movne	r3, #1
 8007620:	0692      	lsls	r2, r2, #26
 8007622:	d42b      	bmi.n	800767c <_printf_common+0xb0>
 8007624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007628:	4649      	mov	r1, r9
 800762a:	4638      	mov	r0, r7
 800762c:	47c0      	blx	r8
 800762e:	3001      	adds	r0, #1
 8007630:	d01e      	beq.n	8007670 <_printf_common+0xa4>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	68e5      	ldr	r5, [r4, #12]
 8007636:	6832      	ldr	r2, [r6, #0]
 8007638:	f003 0306 	and.w	r3, r3, #6
 800763c:	2b04      	cmp	r3, #4
 800763e:	bf08      	it	eq
 8007640:	1aad      	subeq	r5, r5, r2
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	6922      	ldr	r2, [r4, #16]
 8007646:	bf0c      	ite	eq
 8007648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800764c:	2500      	movne	r5, #0
 800764e:	4293      	cmp	r3, r2
 8007650:	bfc4      	itt	gt
 8007652:	1a9b      	subgt	r3, r3, r2
 8007654:	18ed      	addgt	r5, r5, r3
 8007656:	2600      	movs	r6, #0
 8007658:	341a      	adds	r4, #26
 800765a:	42b5      	cmp	r5, r6
 800765c:	d11a      	bne.n	8007694 <_printf_common+0xc8>
 800765e:	2000      	movs	r0, #0
 8007660:	e008      	b.n	8007674 <_printf_common+0xa8>
 8007662:	2301      	movs	r3, #1
 8007664:	4652      	mov	r2, sl
 8007666:	4649      	mov	r1, r9
 8007668:	4638      	mov	r0, r7
 800766a:	47c0      	blx	r8
 800766c:	3001      	adds	r0, #1
 800766e:	d103      	bne.n	8007678 <_printf_common+0xac>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	3501      	adds	r5, #1
 800767a:	e7c6      	b.n	800760a <_printf_common+0x3e>
 800767c:	18e1      	adds	r1, r4, r3
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	2030      	movs	r0, #48	; 0x30
 8007682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007686:	4422      	add	r2, r4
 8007688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800768c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007690:	3302      	adds	r3, #2
 8007692:	e7c7      	b.n	8007624 <_printf_common+0x58>
 8007694:	2301      	movs	r3, #1
 8007696:	4622      	mov	r2, r4
 8007698:	4649      	mov	r1, r9
 800769a:	4638      	mov	r0, r7
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d0e6      	beq.n	8007670 <_printf_common+0xa4>
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7d9      	b.n	800765a <_printf_common+0x8e>
	...

080076a8 <_printf_i>:
 80076a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	7e0f      	ldrb	r7, [r1, #24]
 80076ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076b0:	2f78      	cmp	r7, #120	; 0x78
 80076b2:	4691      	mov	r9, r2
 80076b4:	4680      	mov	r8, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	469a      	mov	sl, r3
 80076ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076be:	d807      	bhi.n	80076d0 <_printf_i+0x28>
 80076c0:	2f62      	cmp	r7, #98	; 0x62
 80076c2:	d80a      	bhi.n	80076da <_printf_i+0x32>
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	f000 80d8 	beq.w	800787a <_printf_i+0x1d2>
 80076ca:	2f58      	cmp	r7, #88	; 0x58
 80076cc:	f000 80a3 	beq.w	8007816 <_printf_i+0x16e>
 80076d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076d8:	e03a      	b.n	8007750 <_printf_i+0xa8>
 80076da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076de:	2b15      	cmp	r3, #21
 80076e0:	d8f6      	bhi.n	80076d0 <_printf_i+0x28>
 80076e2:	a101      	add	r1, pc, #4	; (adr r1, 80076e8 <_printf_i+0x40>)
 80076e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007755 	.word	0x08007755
 80076f0:	080076d1 	.word	0x080076d1
 80076f4:	080076d1 	.word	0x080076d1
 80076f8:	080076d1 	.word	0x080076d1
 80076fc:	080076d1 	.word	0x080076d1
 8007700:	08007755 	.word	0x08007755
 8007704:	080076d1 	.word	0x080076d1
 8007708:	080076d1 	.word	0x080076d1
 800770c:	080076d1 	.word	0x080076d1
 8007710:	080076d1 	.word	0x080076d1
 8007714:	08007861 	.word	0x08007861
 8007718:	08007785 	.word	0x08007785
 800771c:	08007843 	.word	0x08007843
 8007720:	080076d1 	.word	0x080076d1
 8007724:	080076d1 	.word	0x080076d1
 8007728:	08007883 	.word	0x08007883
 800772c:	080076d1 	.word	0x080076d1
 8007730:	08007785 	.word	0x08007785
 8007734:	080076d1 	.word	0x080076d1
 8007738:	080076d1 	.word	0x080076d1
 800773c:	0800784b 	.word	0x0800784b
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007750:	2301      	movs	r3, #1
 8007752:	e0a3      	b.n	800789c <_printf_i+0x1f4>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	6829      	ldr	r1, [r5, #0]
 8007758:	0606      	lsls	r6, r0, #24
 800775a:	f101 0304 	add.w	r3, r1, #4
 800775e:	d50a      	bpl.n	8007776 <_printf_i+0xce>
 8007760:	680e      	ldr	r6, [r1, #0]
 8007762:	602b      	str	r3, [r5, #0]
 8007764:	2e00      	cmp	r6, #0
 8007766:	da03      	bge.n	8007770 <_printf_i+0xc8>
 8007768:	232d      	movs	r3, #45	; 0x2d
 800776a:	4276      	negs	r6, r6
 800776c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007770:	485e      	ldr	r0, [pc, #376]	; (80078ec <_printf_i+0x244>)
 8007772:	230a      	movs	r3, #10
 8007774:	e019      	b.n	80077aa <_printf_i+0x102>
 8007776:	680e      	ldr	r6, [r1, #0]
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800777e:	bf18      	it	ne
 8007780:	b236      	sxthne	r6, r6
 8007782:	e7ef      	b.n	8007764 <_printf_i+0xbc>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	6029      	str	r1, [r5, #0]
 800778c:	0601      	lsls	r1, r0, #24
 800778e:	d501      	bpl.n	8007794 <_printf_i+0xec>
 8007790:	681e      	ldr	r6, [r3, #0]
 8007792:	e002      	b.n	800779a <_printf_i+0xf2>
 8007794:	0646      	lsls	r6, r0, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0xe8>
 8007798:	881e      	ldrh	r6, [r3, #0]
 800779a:	4854      	ldr	r0, [pc, #336]	; (80078ec <_printf_i+0x244>)
 800779c:	2f6f      	cmp	r7, #111	; 0x6f
 800779e:	bf0c      	ite	eq
 80077a0:	2308      	moveq	r3, #8
 80077a2:	230a      	movne	r3, #10
 80077a4:	2100      	movs	r1, #0
 80077a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077aa:	6865      	ldr	r5, [r4, #4]
 80077ac:	60a5      	str	r5, [r4, #8]
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	bfa2      	ittt	ge
 80077b2:	6821      	ldrge	r1, [r4, #0]
 80077b4:	f021 0104 	bicge.w	r1, r1, #4
 80077b8:	6021      	strge	r1, [r4, #0]
 80077ba:	b90e      	cbnz	r6, 80077c0 <_printf_i+0x118>
 80077bc:	2d00      	cmp	r5, #0
 80077be:	d04d      	beq.n	800785c <_printf_i+0x1b4>
 80077c0:	4615      	mov	r5, r2
 80077c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80077c6:	fb03 6711 	mls	r7, r3, r1, r6
 80077ca:	5dc7      	ldrb	r7, [r0, r7]
 80077cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077d0:	4637      	mov	r7, r6
 80077d2:	42bb      	cmp	r3, r7
 80077d4:	460e      	mov	r6, r1
 80077d6:	d9f4      	bls.n	80077c2 <_printf_i+0x11a>
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d10b      	bne.n	80077f4 <_printf_i+0x14c>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	07de      	lsls	r6, r3, #31
 80077e0:	d508      	bpl.n	80077f4 <_printf_i+0x14c>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	4299      	cmp	r1, r3
 80077e8:	bfde      	ittt	le
 80077ea:	2330      	movle	r3, #48	; 0x30
 80077ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077f4:	1b52      	subs	r2, r2, r5
 80077f6:	6122      	str	r2, [r4, #16]
 80077f8:	f8cd a000 	str.w	sl, [sp]
 80077fc:	464b      	mov	r3, r9
 80077fe:	aa03      	add	r2, sp, #12
 8007800:	4621      	mov	r1, r4
 8007802:	4640      	mov	r0, r8
 8007804:	f7ff fee2 	bl	80075cc <_printf_common>
 8007808:	3001      	adds	r0, #1
 800780a:	d14c      	bne.n	80078a6 <_printf_i+0x1fe>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	b004      	add	sp, #16
 8007812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007816:	4835      	ldr	r0, [pc, #212]	; (80078ec <_printf_i+0x244>)
 8007818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800781c:	6829      	ldr	r1, [r5, #0]
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f851 6b04 	ldr.w	r6, [r1], #4
 8007824:	6029      	str	r1, [r5, #0]
 8007826:	061d      	lsls	r5, r3, #24
 8007828:	d514      	bpl.n	8007854 <_printf_i+0x1ac>
 800782a:	07df      	lsls	r7, r3, #31
 800782c:	bf44      	itt	mi
 800782e:	f043 0320 	orrmi.w	r3, r3, #32
 8007832:	6023      	strmi	r3, [r4, #0]
 8007834:	b91e      	cbnz	r6, 800783e <_printf_i+0x196>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	f023 0320 	bic.w	r3, r3, #32
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	2310      	movs	r3, #16
 8007840:	e7b0      	b.n	80077a4 <_printf_i+0xfc>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	f043 0320 	orr.w	r3, r3, #32
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	2378      	movs	r3, #120	; 0x78
 800784c:	4828      	ldr	r0, [pc, #160]	; (80078f0 <_printf_i+0x248>)
 800784e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007852:	e7e3      	b.n	800781c <_printf_i+0x174>
 8007854:	0659      	lsls	r1, r3, #25
 8007856:	bf48      	it	mi
 8007858:	b2b6      	uxthmi	r6, r6
 800785a:	e7e6      	b.n	800782a <_printf_i+0x182>
 800785c:	4615      	mov	r5, r2
 800785e:	e7bb      	b.n	80077d8 <_printf_i+0x130>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	6826      	ldr	r6, [r4, #0]
 8007864:	6961      	ldr	r1, [r4, #20]
 8007866:	1d18      	adds	r0, r3, #4
 8007868:	6028      	str	r0, [r5, #0]
 800786a:	0635      	lsls	r5, r6, #24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	d501      	bpl.n	8007874 <_printf_i+0x1cc>
 8007870:	6019      	str	r1, [r3, #0]
 8007872:	e002      	b.n	800787a <_printf_i+0x1d2>
 8007874:	0670      	lsls	r0, r6, #25
 8007876:	d5fb      	bpl.n	8007870 <_printf_i+0x1c8>
 8007878:	8019      	strh	r1, [r3, #0]
 800787a:	2300      	movs	r3, #0
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	4615      	mov	r5, r2
 8007880:	e7ba      	b.n	80077f8 <_printf_i+0x150>
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	1d1a      	adds	r2, r3, #4
 8007886:	602a      	str	r2, [r5, #0]
 8007888:	681d      	ldr	r5, [r3, #0]
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	2100      	movs	r1, #0
 800788e:	4628      	mov	r0, r5
 8007890:	f7f8 fca6 	bl	80001e0 <memchr>
 8007894:	b108      	cbz	r0, 800789a <_printf_i+0x1f2>
 8007896:	1b40      	subs	r0, r0, r5
 8007898:	6060      	str	r0, [r4, #4]
 800789a:	6863      	ldr	r3, [r4, #4]
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	2300      	movs	r3, #0
 80078a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078a4:	e7a8      	b.n	80077f8 <_printf_i+0x150>
 80078a6:	6923      	ldr	r3, [r4, #16]
 80078a8:	462a      	mov	r2, r5
 80078aa:	4649      	mov	r1, r9
 80078ac:	4640      	mov	r0, r8
 80078ae:	47d0      	blx	sl
 80078b0:	3001      	adds	r0, #1
 80078b2:	d0ab      	beq.n	800780c <_printf_i+0x164>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	079b      	lsls	r3, r3, #30
 80078b8:	d413      	bmi.n	80078e2 <_printf_i+0x23a>
 80078ba:	68e0      	ldr	r0, [r4, #12]
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	4298      	cmp	r0, r3
 80078c0:	bfb8      	it	lt
 80078c2:	4618      	movlt	r0, r3
 80078c4:	e7a4      	b.n	8007810 <_printf_i+0x168>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4632      	mov	r2, r6
 80078ca:	4649      	mov	r1, r9
 80078cc:	4640      	mov	r0, r8
 80078ce:	47d0      	blx	sl
 80078d0:	3001      	adds	r0, #1
 80078d2:	d09b      	beq.n	800780c <_printf_i+0x164>
 80078d4:	3501      	adds	r5, #1
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	9903      	ldr	r1, [sp, #12]
 80078da:	1a5b      	subs	r3, r3, r1
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dcf2      	bgt.n	80078c6 <_printf_i+0x21e>
 80078e0:	e7eb      	b.n	80078ba <_printf_i+0x212>
 80078e2:	2500      	movs	r5, #0
 80078e4:	f104 0619 	add.w	r6, r4, #25
 80078e8:	e7f5      	b.n	80078d6 <_printf_i+0x22e>
 80078ea:	bf00      	nop
 80078ec:	0800b0fa 	.word	0x0800b0fa
 80078f0:	0800b10b 	.word	0x0800b10b

080078f4 <iprintf>:
 80078f4:	b40f      	push	{r0, r1, r2, r3}
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <iprintf+0x2c>)
 80078f8:	b513      	push	{r0, r1, r4, lr}
 80078fa:	681c      	ldr	r4, [r3, #0]
 80078fc:	b124      	cbz	r4, 8007908 <iprintf+0x14>
 80078fe:	69a3      	ldr	r3, [r4, #24]
 8007900:	b913      	cbnz	r3, 8007908 <iprintf+0x14>
 8007902:	4620      	mov	r0, r4
 8007904:	f001 f8d8 	bl	8008ab8 <__sinit>
 8007908:	ab05      	add	r3, sp, #20
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	68a1      	ldr	r1, [r4, #8]
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	4620      	mov	r0, r4
 8007912:	f001 fe95 	bl	8009640 <_vfiprintf_r>
 8007916:	b002      	add	sp, #8
 8007918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791c:	b004      	add	sp, #16
 800791e:	4770      	bx	lr
 8007920:	20000010 	.word	0x20000010

08007924 <_puts_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	460e      	mov	r6, r1
 8007928:	4605      	mov	r5, r0
 800792a:	b118      	cbz	r0, 8007934 <_puts_r+0x10>
 800792c:	6983      	ldr	r3, [r0, #24]
 800792e:	b90b      	cbnz	r3, 8007934 <_puts_r+0x10>
 8007930:	f001 f8c2 	bl	8008ab8 <__sinit>
 8007934:	69ab      	ldr	r3, [r5, #24]
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	b913      	cbnz	r3, 8007940 <_puts_r+0x1c>
 800793a:	4628      	mov	r0, r5
 800793c:	f001 f8bc 	bl	8008ab8 <__sinit>
 8007940:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <_puts_r+0xd0>)
 8007942:	429c      	cmp	r4, r3
 8007944:	d120      	bne.n	8007988 <_puts_r+0x64>
 8007946:	686c      	ldr	r4, [r5, #4]
 8007948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800794a:	07db      	lsls	r3, r3, #31
 800794c:	d405      	bmi.n	800795a <_puts_r+0x36>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	0598      	lsls	r0, r3, #22
 8007952:	d402      	bmi.n	800795a <_puts_r+0x36>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f001 f952 	bl	8008bfe <__retarget_lock_acquire_recursive>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	0719      	lsls	r1, r3, #28
 800795e:	d51d      	bpl.n	800799c <_puts_r+0x78>
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	b1db      	cbz	r3, 800799c <_puts_r+0x78>
 8007964:	3e01      	subs	r6, #1
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800796c:	3b01      	subs	r3, #1
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	bb39      	cbnz	r1, 80079c2 <_puts_r+0x9e>
 8007972:	2b00      	cmp	r3, #0
 8007974:	da38      	bge.n	80079e8 <_puts_r+0xc4>
 8007976:	4622      	mov	r2, r4
 8007978:	210a      	movs	r1, #10
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f848 	bl	8007a10 <__swbuf_r>
 8007980:	3001      	adds	r0, #1
 8007982:	d011      	beq.n	80079a8 <_puts_r+0x84>
 8007984:	250a      	movs	r5, #10
 8007986:	e011      	b.n	80079ac <_puts_r+0x88>
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <_puts_r+0xd4>)
 800798a:	429c      	cmp	r4, r3
 800798c:	d101      	bne.n	8007992 <_puts_r+0x6e>
 800798e:	68ac      	ldr	r4, [r5, #8]
 8007990:	e7da      	b.n	8007948 <_puts_r+0x24>
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <_puts_r+0xd8>)
 8007994:	429c      	cmp	r4, r3
 8007996:	bf08      	it	eq
 8007998:	68ec      	ldreq	r4, [r5, #12]
 800799a:	e7d5      	b.n	8007948 <_puts_r+0x24>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f888 	bl	8007ab4 <__swsetup_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d0dd      	beq.n	8007964 <_puts_r+0x40>
 80079a8:	f04f 35ff 	mov.w	r5, #4294967295
 80079ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ae:	07da      	lsls	r2, r3, #31
 80079b0:	d405      	bmi.n	80079be <_puts_r+0x9a>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	059b      	lsls	r3, r3, #22
 80079b6:	d402      	bmi.n	80079be <_puts_r+0x9a>
 80079b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ba:	f001 f921 	bl	8008c00 <__retarget_lock_release_recursive>
 80079be:	4628      	mov	r0, r5
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da04      	bge.n	80079d0 <_puts_r+0xac>
 80079c6:	69a2      	ldr	r2, [r4, #24]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	dc06      	bgt.n	80079da <_puts_r+0xb6>
 80079cc:	290a      	cmp	r1, #10
 80079ce:	d004      	beq.n	80079da <_puts_r+0xb6>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	7019      	strb	r1, [r3, #0]
 80079d8:	e7c5      	b.n	8007966 <_puts_r+0x42>
 80079da:	4622      	mov	r2, r4
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f817 	bl	8007a10 <__swbuf_r>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1bf      	bne.n	8007966 <_puts_r+0x42>
 80079e6:	e7df      	b.n	80079a8 <_puts_r+0x84>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	250a      	movs	r5, #10
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	701d      	strb	r5, [r3, #0]
 80079f2:	e7db      	b.n	80079ac <_puts_r+0x88>
 80079f4:	0800b1cc 	.word	0x0800b1cc
 80079f8:	0800b1ec 	.word	0x0800b1ec
 80079fc:	0800b1ac 	.word	0x0800b1ac

08007a00 <puts>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <puts+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f7ff bf8d 	b.w	8007924 <_puts_r>
 8007a0a:	bf00      	nop
 8007a0c:	20000010 	.word	0x20000010

08007a10 <__swbuf_r>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	460e      	mov	r6, r1
 8007a14:	4614      	mov	r4, r2
 8007a16:	4605      	mov	r5, r0
 8007a18:	b118      	cbz	r0, 8007a22 <__swbuf_r+0x12>
 8007a1a:	6983      	ldr	r3, [r0, #24]
 8007a1c:	b90b      	cbnz	r3, 8007a22 <__swbuf_r+0x12>
 8007a1e:	f001 f84b 	bl	8008ab8 <__sinit>
 8007a22:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <__swbuf_r+0x98>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d12b      	bne.n	8007a80 <__swbuf_r+0x70>
 8007a28:	686c      	ldr	r4, [r5, #4]
 8007a2a:	69a3      	ldr	r3, [r4, #24]
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	071a      	lsls	r2, r3, #28
 8007a32:	d52f      	bpl.n	8007a94 <__swbuf_r+0x84>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	b36b      	cbz	r3, 8007a94 <__swbuf_r+0x84>
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	6820      	ldr	r0, [r4, #0]
 8007a3c:	1ac0      	subs	r0, r0, r3
 8007a3e:	6963      	ldr	r3, [r4, #20]
 8007a40:	b2f6      	uxtb	r6, r6
 8007a42:	4283      	cmp	r3, r0
 8007a44:	4637      	mov	r7, r6
 8007a46:	dc04      	bgt.n	8007a52 <__swbuf_r+0x42>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 ffa0 	bl	8008990 <_fflush_r>
 8007a50:	bb30      	cbnz	r0, 8007aa0 <__swbuf_r+0x90>
 8007a52:	68a3      	ldr	r3, [r4, #8]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	60a3      	str	r3, [r4, #8]
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	701e      	strb	r6, [r3, #0]
 8007a60:	6963      	ldr	r3, [r4, #20]
 8007a62:	3001      	adds	r0, #1
 8007a64:	4283      	cmp	r3, r0
 8007a66:	d004      	beq.n	8007a72 <__swbuf_r+0x62>
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	07db      	lsls	r3, r3, #31
 8007a6c:	d506      	bpl.n	8007a7c <__swbuf_r+0x6c>
 8007a6e:	2e0a      	cmp	r6, #10
 8007a70:	d104      	bne.n	8007a7c <__swbuf_r+0x6c>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 ff8b 	bl	8008990 <_fflush_r>
 8007a7a:	b988      	cbnz	r0, 8007aa0 <__swbuf_r+0x90>
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <__swbuf_r+0x9c>)
 8007a82:	429c      	cmp	r4, r3
 8007a84:	d101      	bne.n	8007a8a <__swbuf_r+0x7a>
 8007a86:	68ac      	ldr	r4, [r5, #8]
 8007a88:	e7cf      	b.n	8007a2a <__swbuf_r+0x1a>
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <__swbuf_r+0xa0>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	bf08      	it	eq
 8007a90:	68ec      	ldreq	r4, [r5, #12]
 8007a92:	e7ca      	b.n	8007a2a <__swbuf_r+0x1a>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f80c 	bl	8007ab4 <__swsetup_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0cb      	beq.n	8007a38 <__swbuf_r+0x28>
 8007aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa4:	e7ea      	b.n	8007a7c <__swbuf_r+0x6c>
 8007aa6:	bf00      	nop
 8007aa8:	0800b1cc 	.word	0x0800b1cc
 8007aac:	0800b1ec 	.word	0x0800b1ec
 8007ab0:	0800b1ac 	.word	0x0800b1ac

08007ab4 <__swsetup_r>:
 8007ab4:	4b32      	ldr	r3, [pc, #200]	; (8007b80 <__swsetup_r+0xcc>)
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	681d      	ldr	r5, [r3, #0]
 8007aba:	4606      	mov	r6, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	b125      	cbz	r5, 8007aca <__swsetup_r+0x16>
 8007ac0:	69ab      	ldr	r3, [r5, #24]
 8007ac2:	b913      	cbnz	r3, 8007aca <__swsetup_r+0x16>
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 fff7 	bl	8008ab8 <__sinit>
 8007aca:	4b2e      	ldr	r3, [pc, #184]	; (8007b84 <__swsetup_r+0xd0>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d10f      	bne.n	8007af0 <__swsetup_r+0x3c>
 8007ad0:	686c      	ldr	r4, [r5, #4]
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad8:	0719      	lsls	r1, r3, #28
 8007ada:	d42c      	bmi.n	8007b36 <__swsetup_r+0x82>
 8007adc:	06dd      	lsls	r5, r3, #27
 8007ade:	d411      	bmi.n	8007b04 <__swsetup_r+0x50>
 8007ae0:	2309      	movs	r3, #9
 8007ae2:	6033      	str	r3, [r6, #0]
 8007ae4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295
 8007aee:	e03e      	b.n	8007b6e <__swsetup_r+0xba>
 8007af0:	4b25      	ldr	r3, [pc, #148]	; (8007b88 <__swsetup_r+0xd4>)
 8007af2:	429c      	cmp	r4, r3
 8007af4:	d101      	bne.n	8007afa <__swsetup_r+0x46>
 8007af6:	68ac      	ldr	r4, [r5, #8]
 8007af8:	e7eb      	b.n	8007ad2 <__swsetup_r+0x1e>
 8007afa:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <__swsetup_r+0xd8>)
 8007afc:	429c      	cmp	r4, r3
 8007afe:	bf08      	it	eq
 8007b00:	68ec      	ldreq	r4, [r5, #12]
 8007b02:	e7e6      	b.n	8007ad2 <__swsetup_r+0x1e>
 8007b04:	0758      	lsls	r0, r3, #29
 8007b06:	d512      	bpl.n	8007b2e <__swsetup_r+0x7a>
 8007b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b0a:	b141      	cbz	r1, 8007b1e <__swsetup_r+0x6a>
 8007b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d002      	beq.n	8007b1a <__swsetup_r+0x66>
 8007b14:	4630      	mov	r0, r6
 8007b16:	f001 fc89 	bl	800942c <_free_r>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f043 0308 	orr.w	r3, r3, #8
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	b94b      	cbnz	r3, 8007b4e <__swsetup_r+0x9a>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b44:	d003      	beq.n	8007b4e <__swsetup_r+0x9a>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f001 f87f 	bl	8008c4c <__smakebuf_r>
 8007b4e:	89a0      	ldrh	r0, [r4, #12]
 8007b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b54:	f010 0301 	ands.w	r3, r0, #1
 8007b58:	d00a      	beq.n	8007b70 <__swsetup_r+0xbc>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60a3      	str	r3, [r4, #8]
 8007b5e:	6963      	ldr	r3, [r4, #20]
 8007b60:	425b      	negs	r3, r3
 8007b62:	61a3      	str	r3, [r4, #24]
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	b943      	cbnz	r3, 8007b7a <__swsetup_r+0xc6>
 8007b68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b6c:	d1ba      	bne.n	8007ae4 <__swsetup_r+0x30>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	0781      	lsls	r1, r0, #30
 8007b72:	bf58      	it	pl
 8007b74:	6963      	ldrpl	r3, [r4, #20]
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	e7f4      	b.n	8007b64 <__swsetup_r+0xb0>
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	e7f7      	b.n	8007b6e <__swsetup_r+0xba>
 8007b7e:	bf00      	nop
 8007b80:	20000010 	.word	0x20000010
 8007b84:	0800b1cc 	.word	0x0800b1cc
 8007b88:	0800b1ec 	.word	0x0800b1ec
 8007b8c:	0800b1ac 	.word	0x0800b1ac

08007b90 <quorem>:
 8007b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	6903      	ldr	r3, [r0, #16]
 8007b96:	690c      	ldr	r4, [r1, #16]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	f2c0 8081 	blt.w	8007ca2 <quorem+0x112>
 8007ba0:	3c01      	subs	r4, #1
 8007ba2:	f101 0814 	add.w	r8, r1, #20
 8007ba6:	f100 0514 	add.w	r5, r0, #20
 8007baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bc8:	d331      	bcc.n	8007c2e <quorem+0x9e>
 8007bca:	f04f 0e00 	mov.w	lr, #0
 8007bce:	4640      	mov	r0, r8
 8007bd0:	46ac      	mov	ip, r5
 8007bd2:	46f2      	mov	sl, lr
 8007bd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bd8:	b293      	uxth	r3, r2
 8007bda:	fb06 e303 	mla	r3, r6, r3, lr
 8007bde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ebaa 0303 	sub.w	r3, sl, r3
 8007be8:	f8dc a000 	ldr.w	sl, [ip]
 8007bec:	0c12      	lsrs	r2, r2, #16
 8007bee:	fa13 f38a 	uxtah	r3, r3, sl
 8007bf2:	fb06 e202 	mla	r2, r6, r2, lr
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c08:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c0c:	4581      	cmp	r9, r0
 8007c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c12:	f84c 3b04 	str.w	r3, [ip], #4
 8007c16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c1a:	d2db      	bcs.n	8007bd4 <quorem+0x44>
 8007c1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c20:	b92b      	cbnz	r3, 8007c2e <quorem+0x9e>
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	3b04      	subs	r3, #4
 8007c26:	429d      	cmp	r5, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	d32e      	bcc.n	8007c8a <quorem+0xfa>
 8007c2c:	613c      	str	r4, [r7, #16]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f001 fae4 	bl	80091fc <__mcmp>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	db24      	blt.n	8007c82 <quorem+0xf2>
 8007c38:	3601      	adds	r6, #1
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f04f 0c00 	mov.w	ip, #0
 8007c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c44:	f8d0 e000 	ldr.w	lr, [r0]
 8007c48:	b293      	uxth	r3, r2
 8007c4a:	ebac 0303 	sub.w	r3, ip, r3
 8007c4e:	0c12      	lsrs	r2, r2, #16
 8007c50:	fa13 f38e 	uxtah	r3, r3, lr
 8007c54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c62:	45c1      	cmp	r9, r8
 8007c64:	f840 3b04 	str.w	r3, [r0], #4
 8007c68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c6c:	d2e8      	bcs.n	8007c40 <quorem+0xb0>
 8007c6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c76:	b922      	cbnz	r2, 8007c82 <quorem+0xf2>
 8007c78:	3b04      	subs	r3, #4
 8007c7a:	429d      	cmp	r5, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	d30a      	bcc.n	8007c96 <quorem+0x106>
 8007c80:	613c      	str	r4, [r7, #16]
 8007c82:	4630      	mov	r0, r6
 8007c84:	b003      	add	sp, #12
 8007c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	3b04      	subs	r3, #4
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d1cc      	bne.n	8007c2c <quorem+0x9c>
 8007c92:	3c01      	subs	r4, #1
 8007c94:	e7c7      	b.n	8007c26 <quorem+0x96>
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	d1f0      	bne.n	8007c80 <quorem+0xf0>
 8007c9e:	3c01      	subs	r4, #1
 8007ca0:	e7eb      	b.n	8007c7a <quorem+0xea>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e7ee      	b.n	8007c84 <quorem+0xf4>
	...

08007ca8 <_dtoa_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	ed2d 8b04 	vpush	{d8-d9}
 8007cb0:	ec57 6b10 	vmov	r6, r7, d0
 8007cb4:	b093      	sub	sp, #76	; 0x4c
 8007cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cbc:	9106      	str	r1, [sp, #24]
 8007cbe:	ee10 aa10 	vmov	sl, s0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc8:	46bb      	mov	fp, r7
 8007cca:	b975      	cbnz	r5, 8007cea <_dtoa_r+0x42>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f000 fffd 	bl	8008ccc <malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cd6:	b920      	cbnz	r0, 8007ce2 <_dtoa_r+0x3a>
 8007cd8:	4ba7      	ldr	r3, [pc, #668]	; (8007f78 <_dtoa_r+0x2d0>)
 8007cda:	21ea      	movs	r1, #234	; 0xea
 8007cdc:	48a7      	ldr	r0, [pc, #668]	; (8007f7c <_dtoa_r+0x2d4>)
 8007cde:	f001 fe45 	bl	800996c <__assert_func>
 8007ce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ce6:	6005      	str	r5, [r0, #0]
 8007ce8:	60c5      	str	r5, [r0, #12]
 8007cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	b151      	cbz	r1, 8007d06 <_dtoa_r+0x5e>
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	604a      	str	r2, [r1, #4]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4093      	lsls	r3, r2
 8007cf8:	608b      	str	r3, [r1, #8]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f001 f83c 	bl	8008d78 <_Bfree>
 8007d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	1e3b      	subs	r3, r7, #0
 8007d08:	bfaa      	itet	ge
 8007d0a:	2300      	movge	r3, #0
 8007d0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d10:	f8c8 3000 	strge.w	r3, [r8]
 8007d14:	4b9a      	ldr	r3, [pc, #616]	; (8007f80 <_dtoa_r+0x2d8>)
 8007d16:	bfbc      	itt	lt
 8007d18:	2201      	movlt	r2, #1
 8007d1a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d1e:	ea33 030b 	bics.w	r3, r3, fp
 8007d22:	d11b      	bne.n	8007d5c <_dtoa_r+0xb4>
 8007d24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d30:	4333      	orrs	r3, r6
 8007d32:	f000 8592 	beq.w	800885a <_dtoa_r+0xbb2>
 8007d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d38:	b963      	cbnz	r3, 8007d54 <_dtoa_r+0xac>
 8007d3a:	4b92      	ldr	r3, [pc, #584]	; (8007f84 <_dtoa_r+0x2dc>)
 8007d3c:	e022      	b.n	8007d84 <_dtoa_r+0xdc>
 8007d3e:	4b92      	ldr	r3, [pc, #584]	; (8007f88 <_dtoa_r+0x2e0>)
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	3308      	adds	r3, #8
 8007d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	9801      	ldr	r0, [sp, #4]
 8007d4a:	b013      	add	sp, #76	; 0x4c
 8007d4c:	ecbd 8b04 	vpop	{d8-d9}
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	4b8b      	ldr	r3, [pc, #556]	; (8007f84 <_dtoa_r+0x2dc>)
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	3303      	adds	r3, #3
 8007d5a:	e7f3      	b.n	8007d44 <_dtoa_r+0x9c>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	4650      	mov	r0, sl
 8007d62:	4659      	mov	r1, fp
 8007d64:	f7f8 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d68:	ec4b ab19 	vmov	d9, sl, fp
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	b158      	cbz	r0, 8007d88 <_dtoa_r+0xe0>
 8007d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d72:	2301      	movs	r3, #1
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 856b 	beq.w	8008854 <_dtoa_r+0xbac>
 8007d7e:	4883      	ldr	r0, [pc, #524]	; (8007f8c <_dtoa_r+0x2e4>)
 8007d80:	6018      	str	r0, [r3, #0]
 8007d82:	1e43      	subs	r3, r0, #1
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	e7df      	b.n	8007d48 <_dtoa_r+0xa0>
 8007d88:	ec4b ab10 	vmov	d0, sl, fp
 8007d8c:	aa10      	add	r2, sp, #64	; 0x40
 8007d8e:	a911      	add	r1, sp, #68	; 0x44
 8007d90:	4620      	mov	r0, r4
 8007d92:	f001 fad9 	bl	8009348 <__d2b>
 8007d96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d9a:	ee08 0a10 	vmov	s16, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	f000 8084 	beq.w	8007eac <_dtoa_r+0x204>
 8007da4:	ee19 3a90 	vmov	r3, s19
 8007da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007db0:	4656      	mov	r6, sl
 8007db2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dbe:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <_dtoa_r+0x2e8>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fa5f 	bl	8000288 <__aeabi_dsub>
 8007dca:	a365      	add	r3, pc, #404	; (adr r3, 8007f60 <_dtoa_r+0x2b8>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fc12 	bl	80005f8 <__aeabi_dmul>
 8007dd4:	a364      	add	r3, pc, #400	; (adr r3, 8007f68 <_dtoa_r+0x2c0>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fa57 	bl	800028c <__adddf3>
 8007dde:	4606      	mov	r6, r0
 8007de0:	4628      	mov	r0, r5
 8007de2:	460f      	mov	r7, r1
 8007de4:	f7f8 fb9e 	bl	8000524 <__aeabi_i2d>
 8007de8:	a361      	add	r3, pc, #388	; (adr r3, 8007f70 <_dtoa_r+0x2c8>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	f7f8 fea9 	bl	8000b58 <__aeabi_d2iz>
 8007e06:	2200      	movs	r2, #0
 8007e08:	9000      	str	r0, [sp, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 fe64 	bl	8000adc <__aeabi_dcmplt>
 8007e14:	b150      	cbz	r0, 8007e2c <_dtoa_r+0x184>
 8007e16:	9800      	ldr	r0, [sp, #0]
 8007e18:	f7f8 fb84 	bl	8000524 <__aeabi_i2d>
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	463b      	mov	r3, r7
 8007e20:	f7f8 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e24:	b910      	cbnz	r0, 8007e2c <_dtoa_r+0x184>
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	2b16      	cmp	r3, #22
 8007e30:	d85a      	bhi.n	8007ee8 <_dtoa_r+0x240>
 8007e32:	9a00      	ldr	r2, [sp, #0]
 8007e34:	4b57      	ldr	r3, [pc, #348]	; (8007f94 <_dtoa_r+0x2ec>)
 8007e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	ec51 0b19 	vmov	r0, r1, d9
 8007e42:	f7f8 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d050      	beq.n	8007eec <_dtoa_r+0x244>
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e56:	1b5d      	subs	r5, r3, r5
 8007e58:	1e6b      	subs	r3, r5, #1
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	bf45      	ittet	mi
 8007e5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e62:	9304      	strmi	r3, [sp, #16]
 8007e64:	2300      	movpl	r3, #0
 8007e66:	2300      	movmi	r3, #0
 8007e68:	bf4c      	ite	mi
 8007e6a:	9305      	strmi	r3, [sp, #20]
 8007e6c:	9304      	strpl	r3, [sp, #16]
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db3d      	blt.n	8007ef0 <_dtoa_r+0x248>
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	9a00      	ldr	r2, [sp, #0]
 8007e78:	920a      	str	r2, [sp, #40]	; 0x28
 8007e7a:	4413      	add	r3, r2
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9307      	str	r3, [sp, #28]
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	f200 8089 	bhi.w	8007f9c <_dtoa_r+0x2f4>
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	bfc4      	itt	gt
 8007e8e:	3b04      	subgt	r3, #4
 8007e90:	9306      	strgt	r3, [sp, #24]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	f1a3 0302 	sub.w	r3, r3, #2
 8007e98:	bfcc      	ite	gt
 8007e9a:	2500      	movgt	r5, #0
 8007e9c:	2501      	movle	r5, #1
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	f200 8087 	bhi.w	8007fb2 <_dtoa_r+0x30a>
 8007ea4:	e8df f003 	tbb	[pc, r3]
 8007ea8:	59383a2d 	.word	0x59383a2d
 8007eac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eb0:	441d      	add	r5, r3
 8007eb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	bfc1      	itttt	gt
 8007eba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ebe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ec2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ec6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eca:	bfda      	itte	le
 8007ecc:	f1c3 0320 	rsble	r3, r3, #32
 8007ed0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ed4:	4318      	orrgt	r0, r3
 8007ed6:	f7f8 fb15 	bl	8000504 <__aeabi_ui2d>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4606      	mov	r6, r0
 8007ede:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ee2:	3d01      	subs	r5, #1
 8007ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee6:	e76a      	b.n	8007dbe <_dtoa_r+0x116>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7b2      	b.n	8007e52 <_dtoa_r+0x1aa>
 8007eec:	900b      	str	r0, [sp, #44]	; 0x2c
 8007eee:	e7b1      	b.n	8007e54 <_dtoa_r+0x1ac>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	9a00      	ldr	r2, [sp, #0]
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	4253      	negs	r3, r2
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	2300      	movs	r3, #0
 8007efe:	930a      	str	r3, [sp, #40]	; 0x28
 8007f00:	e7bf      	b.n	8007e82 <_dtoa_r+0x1da>
 8007f02:	2300      	movs	r3, #0
 8007f04:	9308      	str	r3, [sp, #32]
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc55      	bgt.n	8007fb8 <_dtoa_r+0x310>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f12:	461a      	mov	r2, r3
 8007f14:	9209      	str	r2, [sp, #36]	; 0x24
 8007f16:	e00c      	b.n	8007f32 <_dtoa_r+0x28a>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e7f3      	b.n	8007f04 <_dtoa_r+0x25c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b00      	ldr	r3, [sp, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	9302      	str	r3, [sp, #8]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	bfb8      	it	lt
 8007f30:	2301      	movlt	r3, #1
 8007f32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f34:	2200      	movs	r2, #0
 8007f36:	6042      	str	r2, [r0, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	f102 0614 	add.w	r6, r2, #20
 8007f3e:	429e      	cmp	r6, r3
 8007f40:	6841      	ldr	r1, [r0, #4]
 8007f42:	d93d      	bls.n	8007fc0 <_dtoa_r+0x318>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fed7 	bl	8008cf8 <_Balloc>
 8007f4a:	9001      	str	r0, [sp, #4]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d13b      	bne.n	8007fc8 <_dtoa_r+0x320>
 8007f50:	4b11      	ldr	r3, [pc, #68]	; (8007f98 <_dtoa_r+0x2f0>)
 8007f52:	4602      	mov	r2, r0
 8007f54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f58:	e6c0      	b.n	8007cdc <_dtoa_r+0x34>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e7df      	b.n	8007f1e <_dtoa_r+0x276>
 8007f5e:	bf00      	nop
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800b129 	.word	0x0800b129
 8007f7c:	0800b140 	.word	0x0800b140
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800b125 	.word	0x0800b125
 8007f88:	0800b11c 	.word	0x0800b11c
 8007f8c:	0800b0f9 	.word	0x0800b0f9
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	0800b290 	.word	0x0800b290
 8007f98:	0800b19b 	.word	0x0800b19b
 8007f9c:	2501      	movs	r5, #1
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9306      	str	r3, [sp, #24]
 8007fa2:	9508      	str	r5, [sp, #32]
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2312      	movs	r3, #18
 8007fb0:	e7b0      	b.n	8007f14 <_dtoa_r+0x26c>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	e7f5      	b.n	8007fa4 <_dtoa_r+0x2fc>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fbe:	e7b8      	b.n	8007f32 <_dtoa_r+0x28a>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	6041      	str	r1, [r0, #4]
 8007fc4:	0052      	lsls	r2, r2, #1
 8007fc6:	e7b8      	b.n	8007f3a <_dtoa_r+0x292>
 8007fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	2b0e      	cmp	r3, #14
 8007fd2:	f200 809d 	bhi.w	8008110 <_dtoa_r+0x468>
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	f000 809a 	beq.w	8008110 <_dtoa_r+0x468>
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd32      	ble.n	8008048 <_dtoa_r+0x3a0>
 8007fe2:	4ab7      	ldr	r2, [pc, #732]	; (80082c0 <_dtoa_r+0x618>)
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	05d8      	lsls	r0, r3, #23
 8007ff4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ff8:	d516      	bpl.n	8008028 <_dtoa_r+0x380>
 8007ffa:	4bb2      	ldr	r3, [pc, #712]	; (80082c4 <_dtoa_r+0x61c>)
 8007ffc:	ec51 0b19 	vmov	r0, r1, d9
 8008000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008004:	f7f8 fc22 	bl	800084c <__aeabi_ddiv>
 8008008:	f007 070f 	and.w	r7, r7, #15
 800800c:	4682      	mov	sl, r0
 800800e:	468b      	mov	fp, r1
 8008010:	2503      	movs	r5, #3
 8008012:	4eac      	ldr	r6, [pc, #688]	; (80082c4 <_dtoa_r+0x61c>)
 8008014:	b957      	cbnz	r7, 800802c <_dtoa_r+0x384>
 8008016:	4642      	mov	r2, r8
 8008018:	464b      	mov	r3, r9
 800801a:	4650      	mov	r0, sl
 800801c:	4659      	mov	r1, fp
 800801e:	f7f8 fc15 	bl	800084c <__aeabi_ddiv>
 8008022:	4682      	mov	sl, r0
 8008024:	468b      	mov	fp, r1
 8008026:	e028      	b.n	800807a <_dtoa_r+0x3d2>
 8008028:	2502      	movs	r5, #2
 800802a:	e7f2      	b.n	8008012 <_dtoa_r+0x36a>
 800802c:	07f9      	lsls	r1, r7, #31
 800802e:	d508      	bpl.n	8008042 <_dtoa_r+0x39a>
 8008030:	4640      	mov	r0, r8
 8008032:	4649      	mov	r1, r9
 8008034:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008038:	f7f8 fade 	bl	80005f8 <__aeabi_dmul>
 800803c:	3501      	adds	r5, #1
 800803e:	4680      	mov	r8, r0
 8008040:	4689      	mov	r9, r1
 8008042:	107f      	asrs	r7, r7, #1
 8008044:	3608      	adds	r6, #8
 8008046:	e7e5      	b.n	8008014 <_dtoa_r+0x36c>
 8008048:	f000 809b 	beq.w	8008182 <_dtoa_r+0x4da>
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	4f9d      	ldr	r7, [pc, #628]	; (80082c4 <_dtoa_r+0x61c>)
 8008050:	425e      	negs	r6, r3
 8008052:	4b9b      	ldr	r3, [pc, #620]	; (80082c0 <_dtoa_r+0x618>)
 8008054:	f006 020f 	and.w	r2, r6, #15
 8008058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	ec51 0b19 	vmov	r0, r1, d9
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	1136      	asrs	r6, r6, #4
 800806a:	4682      	mov	sl, r0
 800806c:	468b      	mov	fp, r1
 800806e:	2300      	movs	r3, #0
 8008070:	2502      	movs	r5, #2
 8008072:	2e00      	cmp	r6, #0
 8008074:	d17a      	bne.n	800816c <_dtoa_r+0x4c4>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1d3      	bne.n	8008022 <_dtoa_r+0x37a>
 800807a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8082 	beq.w	8008186 <_dtoa_r+0x4de>
 8008082:	4b91      	ldr	r3, [pc, #580]	; (80082c8 <_dtoa_r+0x620>)
 8008084:	2200      	movs	r2, #0
 8008086:	4650      	mov	r0, sl
 8008088:	4659      	mov	r1, fp
 800808a:	f7f8 fd27 	bl	8000adc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d079      	beq.n	8008186 <_dtoa_r+0x4de>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d076      	beq.n	8008186 <_dtoa_r+0x4de>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd36      	ble.n	800810c <_dtoa_r+0x464>
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	1e5f      	subs	r7, r3, #1
 80080a6:	2200      	movs	r2, #0
 80080a8:	4b88      	ldr	r3, [pc, #544]	; (80082cc <_dtoa_r+0x624>)
 80080aa:	f7f8 faa5 	bl	80005f8 <__aeabi_dmul>
 80080ae:	9e02      	ldr	r6, [sp, #8]
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	3501      	adds	r5, #1
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7f8 fa34 	bl	8000524 <__aeabi_i2d>
 80080bc:	4652      	mov	r2, sl
 80080be:	465b      	mov	r3, fp
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	4b82      	ldr	r3, [pc, #520]	; (80082d0 <_dtoa_r+0x628>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	46d0      	mov	r8, sl
 80080ce:	46d9      	mov	r9, fp
 80080d0:	4682      	mov	sl, r0
 80080d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d158      	bne.n	800818c <_dtoa_r+0x4e4>
 80080da:	4b7e      	ldr	r3, [pc, #504]	; (80082d4 <_dtoa_r+0x62c>)
 80080dc:	2200      	movs	r2, #0
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	4652      	mov	r2, sl
 80080e8:	465b      	mov	r3, fp
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	f7f8 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f040 8295 	bne.w	8008622 <_dtoa_r+0x97a>
 80080f8:	4652      	mov	r2, sl
 80080fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 fceb 	bl	8000adc <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	f040 8289 	bne.w	800861e <_dtoa_r+0x976>
 800810c:	ec5b ab19 	vmov	sl, fp, d9
 8008110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008112:	2b00      	cmp	r3, #0
 8008114:	f2c0 8148 	blt.w	80083a8 <_dtoa_r+0x700>
 8008118:	9a00      	ldr	r2, [sp, #0]
 800811a:	2a0e      	cmp	r2, #14
 800811c:	f300 8144 	bgt.w	80083a8 <_dtoa_r+0x700>
 8008120:	4b67      	ldr	r3, [pc, #412]	; (80082c0 <_dtoa_r+0x618>)
 8008122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800812a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	f280 80d5 	bge.w	80082dc <_dtoa_r+0x634>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f300 80d1 	bgt.w	80082dc <_dtoa_r+0x634>
 800813a:	f040 826f 	bne.w	800861c <_dtoa_r+0x974>
 800813e:	4b65      	ldr	r3, [pc, #404]	; (80082d4 <_dtoa_r+0x62c>)
 8008140:	2200      	movs	r2, #0
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	f7f8 fcd9 	bl	8000b04 <__aeabi_dcmpge>
 8008152:	9e03      	ldr	r6, [sp, #12]
 8008154:	4637      	mov	r7, r6
 8008156:	2800      	cmp	r0, #0
 8008158:	f040 8245 	bne.w	80085e6 <_dtoa_r+0x93e>
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	f805 3b01 	strb.w	r3, [r5], #1
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	e240      	b.n	80085ee <_dtoa_r+0x946>
 800816c:	07f2      	lsls	r2, r6, #31
 800816e:	d505      	bpl.n	800817c <_dtoa_r+0x4d4>
 8008170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008174:	f7f8 fa40 	bl	80005f8 <__aeabi_dmul>
 8008178:	3501      	adds	r5, #1
 800817a:	2301      	movs	r3, #1
 800817c:	1076      	asrs	r6, r6, #1
 800817e:	3708      	adds	r7, #8
 8008180:	e777      	b.n	8008072 <_dtoa_r+0x3ca>
 8008182:	2502      	movs	r5, #2
 8008184:	e779      	b.n	800807a <_dtoa_r+0x3d2>
 8008186:	9f00      	ldr	r7, [sp, #0]
 8008188:	9e03      	ldr	r6, [sp, #12]
 800818a:	e794      	b.n	80080b6 <_dtoa_r+0x40e>
 800818c:	9901      	ldr	r1, [sp, #4]
 800818e:	4b4c      	ldr	r3, [pc, #304]	; (80082c0 <_dtoa_r+0x618>)
 8008190:	4431      	add	r1, r6
 8008192:	910d      	str	r1, [sp, #52]	; 0x34
 8008194:	9908      	ldr	r1, [sp, #32]
 8008196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800819a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800819e:	2900      	cmp	r1, #0
 80081a0:	d043      	beq.n	800822a <_dtoa_r+0x582>
 80081a2:	494d      	ldr	r1, [pc, #308]	; (80082d8 <_dtoa_r+0x630>)
 80081a4:	2000      	movs	r0, #0
 80081a6:	f7f8 fb51 	bl	800084c <__aeabi_ddiv>
 80081aa:	4652      	mov	r2, sl
 80081ac:	465b      	mov	r3, fp
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	9d01      	ldr	r5, [sp, #4]
 80081b4:	4682      	mov	sl, r0
 80081b6:	468b      	mov	fp, r1
 80081b8:	4649      	mov	r1, r9
 80081ba:	4640      	mov	r0, r8
 80081bc:	f7f8 fccc 	bl	8000b58 <__aeabi_d2iz>
 80081c0:	4606      	mov	r6, r0
 80081c2:	f7f8 f9af 	bl	8000524 <__aeabi_i2d>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 f85b 	bl	8000288 <__aeabi_dsub>
 80081d2:	3630      	adds	r6, #48	; 0x30
 80081d4:	f805 6b01 	strb.w	r6, [r5], #1
 80081d8:	4652      	mov	r2, sl
 80081da:	465b      	mov	r3, fp
 80081dc:	4680      	mov	r8, r0
 80081de:	4689      	mov	r9, r1
 80081e0:	f7f8 fc7c 	bl	8000adc <__aeabi_dcmplt>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d163      	bne.n	80082b0 <_dtoa_r+0x608>
 80081e8:	4642      	mov	r2, r8
 80081ea:	464b      	mov	r3, r9
 80081ec:	4936      	ldr	r1, [pc, #216]	; (80082c8 <_dtoa_r+0x620>)
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7f8 f84a 	bl	8000288 <__aeabi_dsub>
 80081f4:	4652      	mov	r2, sl
 80081f6:	465b      	mov	r3, fp
 80081f8:	f7f8 fc70 	bl	8000adc <__aeabi_dcmplt>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f040 80b5 	bne.w	800836c <_dtoa_r+0x6c4>
 8008202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008204:	429d      	cmp	r5, r3
 8008206:	d081      	beq.n	800810c <_dtoa_r+0x464>
 8008208:	4b30      	ldr	r3, [pc, #192]	; (80082cc <_dtoa_r+0x624>)
 800820a:	2200      	movs	r2, #0
 800820c:	4650      	mov	r0, sl
 800820e:	4659      	mov	r1, fp
 8008210:	f7f8 f9f2 	bl	80005f8 <__aeabi_dmul>
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <_dtoa_r+0x624>)
 8008216:	4682      	mov	sl, r0
 8008218:	468b      	mov	fp, r1
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	2200      	movs	r2, #0
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	e7c6      	b.n	80081b8 <_dtoa_r+0x510>
 800822a:	4650      	mov	r0, sl
 800822c:	4659      	mov	r1, fp
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008234:	9d01      	ldr	r5, [sp, #4]
 8008236:	930f      	str	r3, [sp, #60]	; 0x3c
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	4649      	mov	r1, r9
 800823e:	4640      	mov	r0, r8
 8008240:	f7f8 fc8a 	bl	8000b58 <__aeabi_d2iz>
 8008244:	4606      	mov	r6, r0
 8008246:	f7f8 f96d 	bl	8000524 <__aeabi_i2d>
 800824a:	3630      	adds	r6, #48	; 0x30
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	f805 6b01 	strb.w	r6, [r5], #1
 800825c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800825e:	429d      	cmp	r5, r3
 8008260:	4680      	mov	r8, r0
 8008262:	4689      	mov	r9, r1
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	d124      	bne.n	80082b4 <_dtoa_r+0x60c>
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <_dtoa_r+0x630>)
 800826c:	4650      	mov	r0, sl
 800826e:	4659      	mov	r1, fp
 8008270:	f7f8 f80c 	bl	800028c <__adddf3>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	f7f8 fc4c 	bl	8000b18 <__aeabi_dcmpgt>
 8008280:	2800      	cmp	r0, #0
 8008282:	d173      	bne.n	800836c <_dtoa_r+0x6c4>
 8008284:	4652      	mov	r2, sl
 8008286:	465b      	mov	r3, fp
 8008288:	4913      	ldr	r1, [pc, #76]	; (80082d8 <_dtoa_r+0x630>)
 800828a:	2000      	movs	r0, #0
 800828c:	f7f7 fffc 	bl	8000288 <__aeabi_dsub>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f8 fc20 	bl	8000adc <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	f43f af35 	beq.w	800810c <_dtoa_r+0x464>
 80082a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082a4:	1e6b      	subs	r3, r5, #1
 80082a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d0f8      	beq.n	80082a2 <_dtoa_r+0x5fa>
 80082b0:	9700      	str	r7, [sp, #0]
 80082b2:	e049      	b.n	8008348 <_dtoa_r+0x6a0>
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <_dtoa_r+0x624>)
 80082b6:	f7f8 f99f 	bl	80005f8 <__aeabi_dmul>
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	e7bd      	b.n	800823c <_dtoa_r+0x594>
 80082c0:	0800b290 	.word	0x0800b290
 80082c4:	0800b268 	.word	0x0800b268
 80082c8:	3ff00000 	.word	0x3ff00000
 80082cc:	40240000 	.word	0x40240000
 80082d0:	401c0000 	.word	0x401c0000
 80082d4:	40140000 	.word	0x40140000
 80082d8:	3fe00000 	.word	0x3fe00000
 80082dc:	9d01      	ldr	r5, [sp, #4]
 80082de:	4656      	mov	r6, sl
 80082e0:	465f      	mov	r7, fp
 80082e2:	4642      	mov	r2, r8
 80082e4:	464b      	mov	r3, r9
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 faaf 	bl	800084c <__aeabi_ddiv>
 80082ee:	f7f8 fc33 	bl	8000b58 <__aeabi_d2iz>
 80082f2:	4682      	mov	sl, r0
 80082f4:	f7f8 f916 	bl	8000524 <__aeabi_i2d>
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	f805 6b01 	strb.w	r6, [r5], #1
 8008314:	9e01      	ldr	r6, [sp, #4]
 8008316:	9f03      	ldr	r7, [sp, #12]
 8008318:	1bae      	subs	r6, r5, r6
 800831a:	42b7      	cmp	r7, r6
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	d135      	bne.n	800838e <_dtoa_r+0x6e6>
 8008322:	f7f7 ffb3 	bl	800028c <__adddf3>
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	f7f8 fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 8008332:	b9d0      	cbnz	r0, 800836a <_dtoa_r+0x6c2>
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008340:	b110      	cbz	r0, 8008348 <_dtoa_r+0x6a0>
 8008342:	f01a 0f01 	tst.w	sl, #1
 8008346:	d110      	bne.n	800836a <_dtoa_r+0x6c2>
 8008348:	4620      	mov	r0, r4
 800834a:	ee18 1a10 	vmov	r1, s16
 800834e:	f000 fd13 	bl	8008d78 <_Bfree>
 8008352:	2300      	movs	r3, #0
 8008354:	9800      	ldr	r0, [sp, #0]
 8008356:	702b      	strb	r3, [r5, #0]
 8008358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835a:	3001      	adds	r0, #1
 800835c:	6018      	str	r0, [r3, #0]
 800835e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008360:	2b00      	cmp	r3, #0
 8008362:	f43f acf1 	beq.w	8007d48 <_dtoa_r+0xa0>
 8008366:	601d      	str	r5, [r3, #0]
 8008368:	e4ee      	b.n	8007d48 <_dtoa_r+0xa0>
 800836a:	9f00      	ldr	r7, [sp, #0]
 800836c:	462b      	mov	r3, r5
 800836e:	461d      	mov	r5, r3
 8008370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008374:	2a39      	cmp	r2, #57	; 0x39
 8008376:	d106      	bne.n	8008386 <_dtoa_r+0x6de>
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d1f7      	bne.n	800836e <_dtoa_r+0x6c6>
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	2230      	movs	r2, #48	; 0x30
 8008382:	3701      	adds	r7, #1
 8008384:	700a      	strb	r2, [r1, #0]
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	3201      	adds	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e790      	b.n	80082b0 <_dtoa_r+0x608>
 800838e:	4ba6      	ldr	r3, [pc, #664]	; (8008628 <_dtoa_r+0x980>)
 8008390:	2200      	movs	r2, #0
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	f7f8 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d09d      	beq.n	80082e2 <_dtoa_r+0x63a>
 80083a6:	e7cf      	b.n	8008348 <_dtoa_r+0x6a0>
 80083a8:	9a08      	ldr	r2, [sp, #32]
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 80d7 	beq.w	800855e <_dtoa_r+0x8b6>
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	2a01      	cmp	r2, #1
 80083b4:	f300 80ba 	bgt.w	800852c <_dtoa_r+0x884>
 80083b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80b2 	beq.w	8008524 <_dtoa_r+0x87c>
 80083c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083c4:	9e07      	ldr	r6, [sp, #28]
 80083c6:	9d04      	ldr	r5, [sp, #16]
 80083c8:	9a04      	ldr	r2, [sp, #16]
 80083ca:	441a      	add	r2, r3
 80083cc:	9204      	str	r2, [sp, #16]
 80083ce:	9a05      	ldr	r2, [sp, #20]
 80083d0:	2101      	movs	r1, #1
 80083d2:	441a      	add	r2, r3
 80083d4:	4620      	mov	r0, r4
 80083d6:	9205      	str	r2, [sp, #20]
 80083d8:	f000 fd86 	bl	8008ee8 <__i2b>
 80083dc:	4607      	mov	r7, r0
 80083de:	2d00      	cmp	r5, #0
 80083e0:	dd0c      	ble.n	80083fc <_dtoa_r+0x754>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd09      	ble.n	80083fc <_dtoa_r+0x754>
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	9a04      	ldr	r2, [sp, #16]
 80083ec:	bfa8      	it	ge
 80083ee:	462b      	movge	r3, r5
 80083f0:	1ad2      	subs	r2, r2, r3
 80083f2:	9204      	str	r2, [sp, #16]
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	1aed      	subs	r5, r5, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	b31b      	cbz	r3, 8008448 <_dtoa_r+0x7a0>
 8008400:	9b08      	ldr	r3, [sp, #32]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80af 	beq.w	8008566 <_dtoa_r+0x8be>
 8008408:	2e00      	cmp	r6, #0
 800840a:	dd13      	ble.n	8008434 <_dtoa_r+0x78c>
 800840c:	4639      	mov	r1, r7
 800840e:	4632      	mov	r2, r6
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fe29 	bl	8009068 <__pow5mult>
 8008416:	ee18 2a10 	vmov	r2, s16
 800841a:	4601      	mov	r1, r0
 800841c:	4607      	mov	r7, r0
 800841e:	4620      	mov	r0, r4
 8008420:	f000 fd78 	bl	8008f14 <__multiply>
 8008424:	ee18 1a10 	vmov	r1, s16
 8008428:	4680      	mov	r8, r0
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fca4 	bl	8008d78 <_Bfree>
 8008430:	ee08 8a10 	vmov	s16, r8
 8008434:	9b07      	ldr	r3, [sp, #28]
 8008436:	1b9a      	subs	r2, r3, r6
 8008438:	d006      	beq.n	8008448 <_dtoa_r+0x7a0>
 800843a:	ee18 1a10 	vmov	r1, s16
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fe12 	bl	8009068 <__pow5mult>
 8008444:	ee08 0a10 	vmov	s16, r0
 8008448:	2101      	movs	r1, #1
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fd4c 	bl	8008ee8 <__i2b>
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	4606      	mov	r6, r0
 8008456:	f340 8088 	ble.w	800856a <_dtoa_r+0x8c2>
 800845a:	461a      	mov	r2, r3
 800845c:	4601      	mov	r1, r0
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fe02 	bl	8009068 <__pow5mult>
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	2b01      	cmp	r3, #1
 8008468:	4606      	mov	r6, r0
 800846a:	f340 8081 	ble.w	8008570 <_dtoa_r+0x8c8>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	6933      	ldr	r3, [r6, #16]
 8008474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008478:	6918      	ldr	r0, [r3, #16]
 800847a:	f000 fce5 	bl	8008e48 <__hi0bits>
 800847e:	f1c0 0020 	rsb	r0, r0, #32
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	4418      	add	r0, r3
 8008486:	f010 001f 	ands.w	r0, r0, #31
 800848a:	f000 8092 	beq.w	80085b2 <_dtoa_r+0x90a>
 800848e:	f1c0 0320 	rsb	r3, r0, #32
 8008492:	2b04      	cmp	r3, #4
 8008494:	f340 808a 	ble.w	80085ac <_dtoa_r+0x904>
 8008498:	f1c0 001c 	rsb	r0, r0, #28
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	4403      	add	r3, r0
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4403      	add	r3, r0
 80084a6:	4405      	add	r5, r0
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd07      	ble.n	80084c0 <_dtoa_r+0x818>
 80084b0:	ee18 1a10 	vmov	r1, s16
 80084b4:	461a      	mov	r2, r3
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 fe30 	bl	800911c <__lshift>
 80084bc:	ee08 0a10 	vmov	s16, r0
 80084c0:	9b05      	ldr	r3, [sp, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x82a>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fe26 	bl	800911c <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d06e      	beq.n	80085b6 <_dtoa_r+0x90e>
 80084d8:	ee18 0a10 	vmov	r0, s16
 80084dc:	4631      	mov	r1, r6
 80084de:	f000 fe8d 	bl	80091fc <__mcmp>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	da67      	bge.n	80085b6 <_dtoa_r+0x90e>
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	ee18 1a10 	vmov	r1, s16
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	220a      	movs	r2, #10
 80084f2:	2300      	movs	r3, #0
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fc61 	bl	8008dbc <__multadd>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	ee08 0a10 	vmov	s16, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 81b1 	beq.w	8008868 <_dtoa_r+0xbc0>
 8008506:	2300      	movs	r3, #0
 8008508:	4639      	mov	r1, r7
 800850a:	220a      	movs	r2, #10
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fc55 	bl	8008dbc <__multadd>
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	4607      	mov	r7, r0
 8008518:	f300 808e 	bgt.w	8008638 <_dtoa_r+0x990>
 800851c:	9b06      	ldr	r3, [sp, #24]
 800851e:	2b02      	cmp	r3, #2
 8008520:	dc51      	bgt.n	80085c6 <_dtoa_r+0x91e>
 8008522:	e089      	b.n	8008638 <_dtoa_r+0x990>
 8008524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800852a:	e74b      	b.n	80083c4 <_dtoa_r+0x71c>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1e5e      	subs	r6, r3, #1
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	42b3      	cmp	r3, r6
 8008534:	bfbf      	itttt	lt
 8008536:	9b07      	ldrlt	r3, [sp, #28]
 8008538:	9607      	strlt	r6, [sp, #28]
 800853a:	1af2      	sublt	r2, r6, r3
 800853c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800853e:	bfb6      	itet	lt
 8008540:	189b      	addlt	r3, r3, r2
 8008542:	1b9e      	subge	r6, r3, r6
 8008544:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	bfb8      	it	lt
 800854a:	2600      	movlt	r6, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfb7      	itett	lt
 8008550:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008554:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008558:	1a9d      	sublt	r5, r3, r2
 800855a:	2300      	movlt	r3, #0
 800855c:	e734      	b.n	80083c8 <_dtoa_r+0x720>
 800855e:	9e07      	ldr	r6, [sp, #28]
 8008560:	9d04      	ldr	r5, [sp, #16]
 8008562:	9f08      	ldr	r7, [sp, #32]
 8008564:	e73b      	b.n	80083de <_dtoa_r+0x736>
 8008566:	9a07      	ldr	r2, [sp, #28]
 8008568:	e767      	b.n	800843a <_dtoa_r+0x792>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b01      	cmp	r3, #1
 800856e:	dc18      	bgt.n	80085a2 <_dtoa_r+0x8fa>
 8008570:	f1ba 0f00 	cmp.w	sl, #0
 8008574:	d115      	bne.n	80085a2 <_dtoa_r+0x8fa>
 8008576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800857a:	b993      	cbnz	r3, 80085a2 <_dtoa_r+0x8fa>
 800857c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008580:	0d1b      	lsrs	r3, r3, #20
 8008582:	051b      	lsls	r3, r3, #20
 8008584:	b183      	cbz	r3, 80085a8 <_dtoa_r+0x900>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	3301      	adds	r3, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	3301      	adds	r3, #1
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	f04f 0801 	mov.w	r8, #1
 8008596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008598:	2b00      	cmp	r3, #0
 800859a:	f47f af6a 	bne.w	8008472 <_dtoa_r+0x7ca>
 800859e:	2001      	movs	r0, #1
 80085a0:	e76f      	b.n	8008482 <_dtoa_r+0x7da>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	e7f6      	b.n	8008596 <_dtoa_r+0x8ee>
 80085a8:	4698      	mov	r8, r3
 80085aa:	e7f4      	b.n	8008596 <_dtoa_r+0x8ee>
 80085ac:	f43f af7d 	beq.w	80084aa <_dtoa_r+0x802>
 80085b0:	4618      	mov	r0, r3
 80085b2:	301c      	adds	r0, #28
 80085b4:	e772      	b.n	800849c <_dtoa_r+0x7f4>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc37      	bgt.n	800862c <_dtoa_r+0x984>
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	dd34      	ble.n	800862c <_dtoa_r+0x984>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	b96b      	cbnz	r3, 80085e6 <_dtoa_r+0x93e>
 80085ca:	4631      	mov	r1, r6
 80085cc:	2205      	movs	r2, #5
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fbf4 	bl	8008dbc <__multadd>
 80085d4:	4601      	mov	r1, r0
 80085d6:	4606      	mov	r6, r0
 80085d8:	ee18 0a10 	vmov	r0, s16
 80085dc:	f000 fe0e 	bl	80091fc <__mcmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f73f adbb 	bgt.w	800815c <_dtoa_r+0x4b4>
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	9d01      	ldr	r5, [sp, #4]
 80085ea:	43db      	mvns	r3, r3
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	4631      	mov	r1, r6
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fbbf 	bl	8008d78 <_Bfree>
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	f43f aea4 	beq.w	8008348 <_dtoa_r+0x6a0>
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	d005      	beq.n	8008612 <_dtoa_r+0x96a>
 8008606:	45b8      	cmp	r8, r7
 8008608:	d003      	beq.n	8008612 <_dtoa_r+0x96a>
 800860a:	4641      	mov	r1, r8
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fbb3 	bl	8008d78 <_Bfree>
 8008612:	4639      	mov	r1, r7
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fbaf 	bl	8008d78 <_Bfree>
 800861a:	e695      	b.n	8008348 <_dtoa_r+0x6a0>
 800861c:	2600      	movs	r6, #0
 800861e:	4637      	mov	r7, r6
 8008620:	e7e1      	b.n	80085e6 <_dtoa_r+0x93e>
 8008622:	9700      	str	r7, [sp, #0]
 8008624:	4637      	mov	r7, r6
 8008626:	e599      	b.n	800815c <_dtoa_r+0x4b4>
 8008628:	40240000 	.word	0x40240000
 800862c:	9b08      	ldr	r3, [sp, #32]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80ca 	beq.w	80087c8 <_dtoa_r+0xb20>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	2d00      	cmp	r5, #0
 800863a:	dd05      	ble.n	8008648 <_dtoa_r+0x9a0>
 800863c:	4639      	mov	r1, r7
 800863e:	462a      	mov	r2, r5
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fd6b 	bl	800911c <__lshift>
 8008646:	4607      	mov	r7, r0
 8008648:	f1b8 0f00 	cmp.w	r8, #0
 800864c:	d05b      	beq.n	8008706 <_dtoa_r+0xa5e>
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fb51 	bl	8008cf8 <_Balloc>
 8008656:	4605      	mov	r5, r0
 8008658:	b928      	cbnz	r0, 8008666 <_dtoa_r+0x9be>
 800865a:	4b87      	ldr	r3, [pc, #540]	; (8008878 <_dtoa_r+0xbd0>)
 800865c:	4602      	mov	r2, r0
 800865e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008662:	f7ff bb3b 	b.w	8007cdc <_dtoa_r+0x34>
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	3202      	adds	r2, #2
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	f107 010c 	add.w	r1, r7, #12
 8008670:	300c      	adds	r0, #12
 8008672:	f000 fb33 	bl	8008cdc <memcpy>
 8008676:	2201      	movs	r2, #1
 8008678:	4629      	mov	r1, r5
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fd4e 	bl	800911c <__lshift>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	f103 0901 	add.w	r9, r3, #1
 8008686:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800868a:	4413      	add	r3, r2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	f00a 0301 	and.w	r3, sl, #1
 8008692:	46b8      	mov	r8, r7
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	4607      	mov	r7, r0
 8008698:	4631      	mov	r1, r6
 800869a:	ee18 0a10 	vmov	r0, s16
 800869e:	f7ff fa77 	bl	8007b90 <quorem>
 80086a2:	4641      	mov	r1, r8
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086aa:	ee18 0a10 	vmov	r0, s16
 80086ae:	f000 fda5 	bl	80091fc <__mcmp>
 80086b2:	463a      	mov	r2, r7
 80086b4:	9003      	str	r0, [sp, #12]
 80086b6:	4631      	mov	r1, r6
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fdbb 	bl	8009234 <__mdiff>
 80086be:	68c2      	ldr	r2, [r0, #12]
 80086c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80086c4:	4605      	mov	r5, r0
 80086c6:	bb02      	cbnz	r2, 800870a <_dtoa_r+0xa62>
 80086c8:	4601      	mov	r1, r0
 80086ca:	ee18 0a10 	vmov	r0, s16
 80086ce:	f000 fd95 	bl	80091fc <__mcmp>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4629      	mov	r1, r5
 80086d6:	4620      	mov	r0, r4
 80086d8:	9207      	str	r2, [sp, #28]
 80086da:	f000 fb4d 	bl	8008d78 <_Bfree>
 80086de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086e2:	ea43 0102 	orr.w	r1, r3, r2
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	430b      	orrs	r3, r1
 80086ea:	464d      	mov	r5, r9
 80086ec:	d10f      	bne.n	800870e <_dtoa_r+0xa66>
 80086ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086f2:	d02a      	beq.n	800874a <_dtoa_r+0xaa2>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd02      	ble.n	8008700 <_dtoa_r+0xa58>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008700:	f88b a000 	strb.w	sl, [fp]
 8008704:	e775      	b.n	80085f2 <_dtoa_r+0x94a>
 8008706:	4638      	mov	r0, r7
 8008708:	e7ba      	b.n	8008680 <_dtoa_r+0x9d8>
 800870a:	2201      	movs	r2, #1
 800870c:	e7e2      	b.n	80086d4 <_dtoa_r+0xa2c>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	db04      	blt.n	800871e <_dtoa_r+0xa76>
 8008714:	9906      	ldr	r1, [sp, #24]
 8008716:	430b      	orrs	r3, r1
 8008718:	9904      	ldr	r1, [sp, #16]
 800871a:	430b      	orrs	r3, r1
 800871c:	d122      	bne.n	8008764 <_dtoa_r+0xabc>
 800871e:	2a00      	cmp	r2, #0
 8008720:	ddee      	ble.n	8008700 <_dtoa_r+0xa58>
 8008722:	ee18 1a10 	vmov	r1, s16
 8008726:	2201      	movs	r2, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fcf7 	bl	800911c <__lshift>
 800872e:	4631      	mov	r1, r6
 8008730:	ee08 0a10 	vmov	s16, r0
 8008734:	f000 fd62 	bl	80091fc <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dc03      	bgt.n	8008744 <_dtoa_r+0xa9c>
 800873c:	d1e0      	bne.n	8008700 <_dtoa_r+0xa58>
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	d0dd      	beq.n	8008700 <_dtoa_r+0xa58>
 8008744:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008748:	d1d7      	bne.n	80086fa <_dtoa_r+0xa52>
 800874a:	2339      	movs	r3, #57	; 0x39
 800874c:	f88b 3000 	strb.w	r3, [fp]
 8008750:	462b      	mov	r3, r5
 8008752:	461d      	mov	r5, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875a:	2a39      	cmp	r2, #57	; 0x39
 800875c:	d071      	beq.n	8008842 <_dtoa_r+0xb9a>
 800875e:	3201      	adds	r2, #1
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	e746      	b.n	80085f2 <_dtoa_r+0x94a>
 8008764:	2a00      	cmp	r2, #0
 8008766:	dd07      	ble.n	8008778 <_dtoa_r+0xad0>
 8008768:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800876c:	d0ed      	beq.n	800874a <_dtoa_r+0xaa2>
 800876e:	f10a 0301 	add.w	r3, sl, #1
 8008772:	f88b 3000 	strb.w	r3, [fp]
 8008776:	e73c      	b.n	80085f2 <_dtoa_r+0x94a>
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800877e:	4599      	cmp	r9, r3
 8008780:	d047      	beq.n	8008812 <_dtoa_r+0xb6a>
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	2300      	movs	r3, #0
 8008788:	220a      	movs	r2, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fb16 	bl	8008dbc <__multadd>
 8008790:	45b8      	cmp	r8, r7
 8008792:	ee08 0a10 	vmov	s16, r0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f04f 020a 	mov.w	r2, #10
 800879e:	4641      	mov	r1, r8
 80087a0:	4620      	mov	r0, r4
 80087a2:	d106      	bne.n	80087b2 <_dtoa_r+0xb0a>
 80087a4:	f000 fb0a 	bl	8008dbc <__multadd>
 80087a8:	4680      	mov	r8, r0
 80087aa:	4607      	mov	r7, r0
 80087ac:	f109 0901 	add.w	r9, r9, #1
 80087b0:	e772      	b.n	8008698 <_dtoa_r+0x9f0>
 80087b2:	f000 fb03 	bl	8008dbc <__multadd>
 80087b6:	4639      	mov	r1, r7
 80087b8:	4680      	mov	r8, r0
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 fafc 	bl	8008dbc <__multadd>
 80087c4:	4607      	mov	r7, r0
 80087c6:	e7f1      	b.n	80087ac <_dtoa_r+0xb04>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	ee18 0a10 	vmov	r0, s16
 80087d2:	4631      	mov	r1, r6
 80087d4:	f7ff f9dc 	bl	8007b90 <quorem>
 80087d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	f805 ab01 	strb.w	sl, [r5], #1
 80087e2:	1aea      	subs	r2, r5, r3
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	dd09      	ble.n	80087fe <_dtoa_r+0xb56>
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fae2 	bl	8008dbc <__multadd>
 80087f8:	ee08 0a10 	vmov	s16, r0
 80087fc:	e7e7      	b.n	80087ce <_dtoa_r+0xb26>
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfc8      	it	gt
 8008804:	461d      	movgt	r5, r3
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	bfd8      	it	le
 800880a:	2501      	movle	r5, #1
 800880c:	441d      	add	r5, r3
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	ee18 1a10 	vmov	r1, s16
 8008816:	2201      	movs	r2, #1
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fc7f 	bl	800911c <__lshift>
 800881e:	4631      	mov	r1, r6
 8008820:	ee08 0a10 	vmov	s16, r0
 8008824:	f000 fcea 	bl	80091fc <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	dc91      	bgt.n	8008750 <_dtoa_r+0xaa8>
 800882c:	d102      	bne.n	8008834 <_dtoa_r+0xb8c>
 800882e:	f01a 0f01 	tst.w	sl, #1
 8008832:	d18d      	bne.n	8008750 <_dtoa_r+0xaa8>
 8008834:	462b      	mov	r3, r5
 8008836:	461d      	mov	r5, r3
 8008838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883c:	2a30      	cmp	r2, #48	; 0x30
 800883e:	d0fa      	beq.n	8008836 <_dtoa_r+0xb8e>
 8008840:	e6d7      	b.n	80085f2 <_dtoa_r+0x94a>
 8008842:	9a01      	ldr	r2, [sp, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d184      	bne.n	8008752 <_dtoa_r+0xaaa>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2331      	movs	r3, #49	; 0x31
 8008850:	7013      	strb	r3, [r2, #0]
 8008852:	e6ce      	b.n	80085f2 <_dtoa_r+0x94a>
 8008854:	4b09      	ldr	r3, [pc, #36]	; (800887c <_dtoa_r+0xbd4>)
 8008856:	f7ff ba95 	b.w	8007d84 <_dtoa_r+0xdc>
 800885a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f aa6e 	bne.w	8007d3e <_dtoa_r+0x96>
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <_dtoa_r+0xbd8>)
 8008864:	f7ff ba8e 	b.w	8007d84 <_dtoa_r+0xdc>
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	dcae      	bgt.n	80087cc <_dtoa_r+0xb24>
 800886e:	9b06      	ldr	r3, [sp, #24]
 8008870:	2b02      	cmp	r3, #2
 8008872:	f73f aea8 	bgt.w	80085c6 <_dtoa_r+0x91e>
 8008876:	e7a9      	b.n	80087cc <_dtoa_r+0xb24>
 8008878:	0800b19b 	.word	0x0800b19b
 800887c:	0800b0f8 	.word	0x0800b0f8
 8008880:	0800b11c 	.word	0x0800b11c

08008884 <__sflush_r>:
 8008884:	898a      	ldrh	r2, [r1, #12]
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	4605      	mov	r5, r0
 800888c:	0710      	lsls	r0, r2, #28
 800888e:	460c      	mov	r4, r1
 8008890:	d458      	bmi.n	8008944 <__sflush_r+0xc0>
 8008892:	684b      	ldr	r3, [r1, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc05      	bgt.n	80088a4 <__sflush_r+0x20>
 8008898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	dc02      	bgt.n	80088a4 <__sflush_r+0x20>
 800889e:	2000      	movs	r0, #0
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d0f9      	beq.n	800889e <__sflush_r+0x1a>
 80088aa:	2300      	movs	r3, #0
 80088ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b0:	682f      	ldr	r7, [r5, #0]
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	d032      	beq.n	800891c <__sflush_r+0x98>
 80088b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	075a      	lsls	r2, r3, #29
 80088bc:	d505      	bpl.n	80088ca <__sflush_r+0x46>
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	1ac0      	subs	r0, r0, r3
 80088c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c4:	b10b      	cbz	r3, 80088ca <__sflush_r+0x46>
 80088c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088c8:	1ac0      	subs	r0, r0, r3
 80088ca:	2300      	movs	r3, #0
 80088cc:	4602      	mov	r2, r0
 80088ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b0      	blx	r6
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	d106      	bne.n	80088ea <__sflush_r+0x66>
 80088dc:	6829      	ldr	r1, [r5, #0]
 80088de:	291d      	cmp	r1, #29
 80088e0:	d82c      	bhi.n	800893c <__sflush_r+0xb8>
 80088e2:	4a2a      	ldr	r2, [pc, #168]	; (800898c <__sflush_r+0x108>)
 80088e4:	40ca      	lsrs	r2, r1
 80088e6:	07d6      	lsls	r6, r2, #31
 80088e8:	d528      	bpl.n	800893c <__sflush_r+0xb8>
 80088ea:	2200      	movs	r2, #0
 80088ec:	6062      	str	r2, [r4, #4]
 80088ee:	04d9      	lsls	r1, r3, #19
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	d504      	bpl.n	8008900 <__sflush_r+0x7c>
 80088f6:	1c42      	adds	r2, r0, #1
 80088f8:	d101      	bne.n	80088fe <__sflush_r+0x7a>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b903      	cbnz	r3, 8008900 <__sflush_r+0x7c>
 80088fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008902:	602f      	str	r7, [r5, #0]
 8008904:	2900      	cmp	r1, #0
 8008906:	d0ca      	beq.n	800889e <__sflush_r+0x1a>
 8008908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800890c:	4299      	cmp	r1, r3
 800890e:	d002      	beq.n	8008916 <__sflush_r+0x92>
 8008910:	4628      	mov	r0, r5
 8008912:	f000 fd8b 	bl	800942c <_free_r>
 8008916:	2000      	movs	r0, #0
 8008918:	6360      	str	r0, [r4, #52]	; 0x34
 800891a:	e7c1      	b.n	80088a0 <__sflush_r+0x1c>
 800891c:	6a21      	ldr	r1, [r4, #32]
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	1c41      	adds	r1, r0, #1
 8008926:	d1c7      	bne.n	80088b8 <__sflush_r+0x34>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0c4      	beq.n	80088b8 <__sflush_r+0x34>
 800892e:	2b1d      	cmp	r3, #29
 8008930:	d001      	beq.n	8008936 <__sflush_r+0xb2>
 8008932:	2b16      	cmp	r3, #22
 8008934:	d101      	bne.n	800893a <__sflush_r+0xb6>
 8008936:	602f      	str	r7, [r5, #0]
 8008938:	e7b1      	b.n	800889e <__sflush_r+0x1a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	e7ad      	b.n	80088a0 <__sflush_r+0x1c>
 8008944:	690f      	ldr	r7, [r1, #16]
 8008946:	2f00      	cmp	r7, #0
 8008948:	d0a9      	beq.n	800889e <__sflush_r+0x1a>
 800894a:	0793      	lsls	r3, r2, #30
 800894c:	680e      	ldr	r6, [r1, #0]
 800894e:	bf08      	it	eq
 8008950:	694b      	ldreq	r3, [r1, #20]
 8008952:	600f      	str	r7, [r1, #0]
 8008954:	bf18      	it	ne
 8008956:	2300      	movne	r3, #0
 8008958:	eba6 0807 	sub.w	r8, r6, r7
 800895c:	608b      	str	r3, [r1, #8]
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	dd9c      	ble.n	800889e <__sflush_r+0x1a>
 8008964:	6a21      	ldr	r1, [r4, #32]
 8008966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008968:	4643      	mov	r3, r8
 800896a:	463a      	mov	r2, r7
 800896c:	4628      	mov	r0, r5
 800896e:	47b0      	blx	r6
 8008970:	2800      	cmp	r0, #0
 8008972:	dc06      	bgt.n	8008982 <__sflush_r+0xfe>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e78e      	b.n	80088a0 <__sflush_r+0x1c>
 8008982:	4407      	add	r7, r0
 8008984:	eba8 0800 	sub.w	r8, r8, r0
 8008988:	e7e9      	b.n	800895e <__sflush_r+0xda>
 800898a:	bf00      	nop
 800898c:	20400001 	.word	0x20400001

08008990 <_fflush_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	690b      	ldr	r3, [r1, #16]
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	b913      	cbnz	r3, 80089a0 <_fflush_r+0x10>
 800899a:	2500      	movs	r5, #0
 800899c:	4628      	mov	r0, r5
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	b118      	cbz	r0, 80089aa <_fflush_r+0x1a>
 80089a2:	6983      	ldr	r3, [r0, #24]
 80089a4:	b90b      	cbnz	r3, 80089aa <_fflush_r+0x1a>
 80089a6:	f000 f887 	bl	8008ab8 <__sinit>
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <_fflush_r+0x6c>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	d11b      	bne.n	80089e8 <_fflush_r+0x58>
 80089b0:	686c      	ldr	r4, [r5, #4]
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0ef      	beq.n	800899a <_fflush_r+0xa>
 80089ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089bc:	07d0      	lsls	r0, r2, #31
 80089be:	d404      	bmi.n	80089ca <_fflush_r+0x3a>
 80089c0:	0599      	lsls	r1, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_fflush_r+0x3a>
 80089c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c6:	f000 f91a 	bl	8008bfe <__retarget_lock_acquire_recursive>
 80089ca:	4628      	mov	r0, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7ff ff59 	bl	8008884 <__sflush_r>
 80089d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d4:	07da      	lsls	r2, r3, #31
 80089d6:	4605      	mov	r5, r0
 80089d8:	d4e0      	bmi.n	800899c <_fflush_r+0xc>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	059b      	lsls	r3, r3, #22
 80089de:	d4dd      	bmi.n	800899c <_fflush_r+0xc>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f000 f90d 	bl	8008c00 <__retarget_lock_release_recursive>
 80089e6:	e7d9      	b.n	800899c <_fflush_r+0xc>
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <_fflush_r+0x70>)
 80089ea:	429c      	cmp	r4, r3
 80089ec:	d101      	bne.n	80089f2 <_fflush_r+0x62>
 80089ee:	68ac      	ldr	r4, [r5, #8]
 80089f0:	e7df      	b.n	80089b2 <_fflush_r+0x22>
 80089f2:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <_fflush_r+0x74>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	bf08      	it	eq
 80089f8:	68ec      	ldreq	r4, [r5, #12]
 80089fa:	e7da      	b.n	80089b2 <_fflush_r+0x22>
 80089fc:	0800b1cc 	.word	0x0800b1cc
 8008a00:	0800b1ec 	.word	0x0800b1ec
 8008a04:	0800b1ac 	.word	0x0800b1ac

08008a08 <std>:
 8008a08:	2300      	movs	r3, #0
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a16:	6083      	str	r3, [r0, #8]
 8008a18:	8181      	strh	r1, [r0, #12]
 8008a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a1c:	81c2      	strh	r2, [r0, #14]
 8008a1e:	6183      	str	r3, [r0, #24]
 8008a20:	4619      	mov	r1, r3
 8008a22:	2208      	movs	r2, #8
 8008a24:	305c      	adds	r0, #92	; 0x5c
 8008a26:	f7fe faf3 	bl	8007010 <memset>
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <std+0x38>)
 8008a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <std+0x3c>)
 8008a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <std+0x40>)
 8008a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <std+0x44>)
 8008a38:	6224      	str	r4, [r4, #32]
 8008a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a3c:	bd10      	pop	{r4, pc}
 8008a3e:	bf00      	nop
 8008a40:	080098c1 	.word	0x080098c1
 8008a44:	080098e3 	.word	0x080098e3
 8008a48:	0800991b 	.word	0x0800991b
 8008a4c:	0800993f 	.word	0x0800993f

08008a50 <_cleanup_r>:
 8008a50:	4901      	ldr	r1, [pc, #4]	; (8008a58 <_cleanup_r+0x8>)
 8008a52:	f000 b8af 	b.w	8008bb4 <_fwalk_reent>
 8008a56:	bf00      	nop
 8008a58:	08008991 	.word	0x08008991

08008a5c <__sfmoreglue>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	2268      	movs	r2, #104	; 0x68
 8008a60:	1e4d      	subs	r5, r1, #1
 8008a62:	4355      	muls	r5, r2
 8008a64:	460e      	mov	r6, r1
 8008a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a6a:	f000 fd4b 	bl	8009504 <_malloc_r>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	b140      	cbz	r0, 8008a84 <__sfmoreglue+0x28>
 8008a72:	2100      	movs	r1, #0
 8008a74:	e9c0 1600 	strd	r1, r6, [r0]
 8008a78:	300c      	adds	r0, #12
 8008a7a:	60a0      	str	r0, [r4, #8]
 8008a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a80:	f7fe fac6 	bl	8007010 <memset>
 8008a84:	4620      	mov	r0, r4
 8008a86:	bd70      	pop	{r4, r5, r6, pc}

08008a88 <__sfp_lock_acquire>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__sfp_lock_acquire+0x8>)
 8008a8a:	f000 b8b8 	b.w	8008bfe <__retarget_lock_acquire_recursive>
 8008a8e:	bf00      	nop
 8008a90:	20000421 	.word	0x20000421

08008a94 <__sfp_lock_release>:
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <__sfp_lock_release+0x8>)
 8008a96:	f000 b8b3 	b.w	8008c00 <__retarget_lock_release_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20000421 	.word	0x20000421

08008aa0 <__sinit_lock_acquire>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__sinit_lock_acquire+0x8>)
 8008aa2:	f000 b8ac 	b.w	8008bfe <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20000422 	.word	0x20000422

08008aac <__sinit_lock_release>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__sinit_lock_release+0x8>)
 8008aae:	f000 b8a7 	b.w	8008c00 <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	20000422 	.word	0x20000422

08008ab8 <__sinit>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	f7ff fff0 	bl	8008aa0 <__sinit_lock_acquire>
 8008ac0:	69a3      	ldr	r3, [r4, #24]
 8008ac2:	b11b      	cbz	r3, 8008acc <__sinit+0x14>
 8008ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac8:	f7ff bff0 	b.w	8008aac <__sinit_lock_release>
 8008acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <__sinit+0x68>)
 8008ad4:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <__sinit+0x6c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	bf04      	itt	eq
 8008ade:	2301      	moveq	r3, #1
 8008ae0:	61a3      	streq	r3, [r4, #24]
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 f820 	bl	8008b28 <__sfp>
 8008ae8:	6060      	str	r0, [r4, #4]
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f81c 	bl	8008b28 <__sfp>
 8008af0:	60a0      	str	r0, [r4, #8]
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f818 	bl	8008b28 <__sfp>
 8008af8:	2200      	movs	r2, #0
 8008afa:	60e0      	str	r0, [r4, #12]
 8008afc:	2104      	movs	r1, #4
 8008afe:	6860      	ldr	r0, [r4, #4]
 8008b00:	f7ff ff82 	bl	8008a08 <std>
 8008b04:	68a0      	ldr	r0, [r4, #8]
 8008b06:	2201      	movs	r2, #1
 8008b08:	2109      	movs	r1, #9
 8008b0a:	f7ff ff7d 	bl	8008a08 <std>
 8008b0e:	68e0      	ldr	r0, [r4, #12]
 8008b10:	2202      	movs	r2, #2
 8008b12:	2112      	movs	r1, #18
 8008b14:	f7ff ff78 	bl	8008a08 <std>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	61a3      	str	r3, [r4, #24]
 8008b1c:	e7d2      	b.n	8008ac4 <__sinit+0xc>
 8008b1e:	bf00      	nop
 8008b20:	0800b0e4 	.word	0x0800b0e4
 8008b24:	08008a51 	.word	0x08008a51

08008b28 <__sfp>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	f7ff ffac 	bl	8008a88 <__sfp_lock_acquire>
 8008b30:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <__sfp+0x84>)
 8008b32:	681e      	ldr	r6, [r3, #0]
 8008b34:	69b3      	ldr	r3, [r6, #24]
 8008b36:	b913      	cbnz	r3, 8008b3e <__sfp+0x16>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff ffbd 	bl	8008ab8 <__sinit>
 8008b3e:	3648      	adds	r6, #72	; 0x48
 8008b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	d503      	bpl.n	8008b50 <__sfp+0x28>
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	b30b      	cbz	r3, 8008b90 <__sfp+0x68>
 8008b4c:	6836      	ldr	r6, [r6, #0]
 8008b4e:	e7f7      	b.n	8008b40 <__sfp+0x18>
 8008b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b54:	b9d5      	cbnz	r5, 8008b8c <__sfp+0x64>
 8008b56:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <__sfp+0x88>)
 8008b58:	60e3      	str	r3, [r4, #12]
 8008b5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b60:	f000 f84c 	bl	8008bfc <__retarget_lock_init_recursive>
 8008b64:	f7ff ff96 	bl	8008a94 <__sfp_lock_release>
 8008b68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b70:	6025      	str	r5, [r4, #0]
 8008b72:	61a5      	str	r5, [r4, #24]
 8008b74:	2208      	movs	r2, #8
 8008b76:	4629      	mov	r1, r5
 8008b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b7c:	f7fe fa48 	bl	8007010 <memset>
 8008b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b8c:	3468      	adds	r4, #104	; 0x68
 8008b8e:	e7d9      	b.n	8008b44 <__sfp+0x1c>
 8008b90:	2104      	movs	r1, #4
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7ff ff62 	bl	8008a5c <__sfmoreglue>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	6030      	str	r0, [r6, #0]
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d1d5      	bne.n	8008b4c <__sfp+0x24>
 8008ba0:	f7ff ff78 	bl	8008a94 <__sfp_lock_release>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	e7ee      	b.n	8008b88 <__sfp+0x60>
 8008baa:	bf00      	nop
 8008bac:	0800b0e4 	.word	0x0800b0e4
 8008bb0:	ffff0001 	.word	0xffff0001

08008bb4 <_fwalk_reent>:
 8008bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	4606      	mov	r6, r0
 8008bba:	4688      	mov	r8, r1
 8008bbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bc0:	2700      	movs	r7, #0
 8008bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bca:	d505      	bpl.n	8008bd8 <_fwalk_reent+0x24>
 8008bcc:	6824      	ldr	r4, [r4, #0]
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d1f7      	bne.n	8008bc2 <_fwalk_reent+0xe>
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd8:	89ab      	ldrh	r3, [r5, #12]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d907      	bls.n	8008bee <_fwalk_reent+0x3a>
 8008bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be2:	3301      	adds	r3, #1
 8008be4:	d003      	beq.n	8008bee <_fwalk_reent+0x3a>
 8008be6:	4629      	mov	r1, r5
 8008be8:	4630      	mov	r0, r6
 8008bea:	47c0      	blx	r8
 8008bec:	4307      	orrs	r7, r0
 8008bee:	3568      	adds	r5, #104	; 0x68
 8008bf0:	e7e9      	b.n	8008bc6 <_fwalk_reent+0x12>
	...

08008bf4 <_localeconv_r>:
 8008bf4:	4800      	ldr	r0, [pc, #0]	; (8008bf8 <_localeconv_r+0x4>)
 8008bf6:	4770      	bx	lr
 8008bf8:	20000164 	.word	0x20000164

08008bfc <__retarget_lock_init_recursive>:
 8008bfc:	4770      	bx	lr

08008bfe <__retarget_lock_acquire_recursive>:
 8008bfe:	4770      	bx	lr

08008c00 <__retarget_lock_release_recursive>:
 8008c00:	4770      	bx	lr

08008c02 <__swhatbuf_r>:
 8008c02:	b570      	push	{r4, r5, r6, lr}
 8008c04:	460e      	mov	r6, r1
 8008c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	b096      	sub	sp, #88	; 0x58
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461d      	mov	r5, r3
 8008c12:	da08      	bge.n	8008c26 <__swhatbuf_r+0x24>
 8008c14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	061a      	lsls	r2, r3, #24
 8008c1e:	d410      	bmi.n	8008c42 <__swhatbuf_r+0x40>
 8008c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c24:	e00e      	b.n	8008c44 <__swhatbuf_r+0x42>
 8008c26:	466a      	mov	r2, sp
 8008c28:	f000 fee0 	bl	80099ec <_fstat_r>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	dbf1      	blt.n	8008c14 <__swhatbuf_r+0x12>
 8008c30:	9a01      	ldr	r2, [sp, #4]
 8008c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c3a:	425a      	negs	r2, r3
 8008c3c:	415a      	adcs	r2, r3
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	e7ee      	b.n	8008c20 <__swhatbuf_r+0x1e>
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	2000      	movs	r0, #0
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	b016      	add	sp, #88	; 0x58
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}

08008c4c <__smakebuf_r>:
 8008c4c:	898b      	ldrh	r3, [r1, #12]
 8008c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c50:	079d      	lsls	r5, r3, #30
 8008c52:	4606      	mov	r6, r0
 8008c54:	460c      	mov	r4, r1
 8008c56:	d507      	bpl.n	8008c68 <__smakebuf_r+0x1c>
 8008c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	6123      	str	r3, [r4, #16]
 8008c60:	2301      	movs	r3, #1
 8008c62:	6163      	str	r3, [r4, #20]
 8008c64:	b002      	add	sp, #8
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	ab01      	add	r3, sp, #4
 8008c6a:	466a      	mov	r2, sp
 8008c6c:	f7ff ffc9 	bl	8008c02 <__swhatbuf_r>
 8008c70:	9900      	ldr	r1, [sp, #0]
 8008c72:	4605      	mov	r5, r0
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 fc45 	bl	8009504 <_malloc_r>
 8008c7a:	b948      	cbnz	r0, 8008c90 <__smakebuf_r+0x44>
 8008c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d4ef      	bmi.n	8008c64 <__smakebuf_r+0x18>
 8008c84:	f023 0303 	bic.w	r3, r3, #3
 8008c88:	f043 0302 	orr.w	r3, r3, #2
 8008c8c:	81a3      	strh	r3, [r4, #12]
 8008c8e:	e7e3      	b.n	8008c58 <__smakebuf_r+0xc>
 8008c90:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <__smakebuf_r+0x7c>)
 8008c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	6163      	str	r3, [r4, #20]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	6120      	str	r0, [r4, #16]
 8008ca6:	b15b      	cbz	r3, 8008cc0 <__smakebuf_r+0x74>
 8008ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 feaf 	bl	8009a10 <_isatty_r>
 8008cb2:	b128      	cbz	r0, 8008cc0 <__smakebuf_r+0x74>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	f043 0301 	orr.w	r3, r3, #1
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	89a0      	ldrh	r0, [r4, #12]
 8008cc2:	4305      	orrs	r5, r0
 8008cc4:	81a5      	strh	r5, [r4, #12]
 8008cc6:	e7cd      	b.n	8008c64 <__smakebuf_r+0x18>
 8008cc8:	08008a51 	.word	0x08008a51

08008ccc <malloc>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <malloc+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f000 bc17 	b.w	8009504 <_malloc_r>
 8008cd6:	bf00      	nop
 8008cd8:	20000010 	.word	0x20000010

08008cdc <memcpy>:
 8008cdc:	440a      	add	r2, r1
 8008cde:	4291      	cmp	r1, r2
 8008ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ce4:	d100      	bne.n	8008ce8 <memcpy+0xc>
 8008ce6:	4770      	bx	lr
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	d1f9      	bne.n	8008cea <memcpy+0xe>
 8008cf6:	bd10      	pop	{r4, pc}

08008cf8 <_Balloc>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	b976      	cbnz	r6, 8008d20 <_Balloc+0x28>
 8008d02:	2010      	movs	r0, #16
 8008d04:	f7ff ffe2 	bl	8008ccc <malloc>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d0c:	b920      	cbnz	r0, 8008d18 <_Balloc+0x20>
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <_Balloc+0x78>)
 8008d10:	4818      	ldr	r0, [pc, #96]	; (8008d74 <_Balloc+0x7c>)
 8008d12:	2166      	movs	r1, #102	; 0x66
 8008d14:	f000 fe2a 	bl	800996c <__assert_func>
 8008d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d1c:	6006      	str	r6, [r0, #0]
 8008d1e:	60c6      	str	r6, [r0, #12]
 8008d20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d22:	68f3      	ldr	r3, [r6, #12]
 8008d24:	b183      	cbz	r3, 8008d48 <_Balloc+0x50>
 8008d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d2e:	b9b8      	cbnz	r0, 8008d60 <_Balloc+0x68>
 8008d30:	2101      	movs	r1, #1
 8008d32:	fa01 f605 	lsl.w	r6, r1, r5
 8008d36:	1d72      	adds	r2, r6, #5
 8008d38:	0092      	lsls	r2, r2, #2
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 fb60 	bl	8009400 <_calloc_r>
 8008d40:	b160      	cbz	r0, 8008d5c <_Balloc+0x64>
 8008d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d46:	e00e      	b.n	8008d66 <_Balloc+0x6e>
 8008d48:	2221      	movs	r2, #33	; 0x21
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 fb57 	bl	8009400 <_calloc_r>
 8008d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d54:	60f0      	str	r0, [r6, #12]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e4      	bne.n	8008d26 <_Balloc+0x2e>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	6802      	ldr	r2, [r0, #0]
 8008d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d66:	2300      	movs	r3, #0
 8008d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d6c:	e7f7      	b.n	8008d5e <_Balloc+0x66>
 8008d6e:	bf00      	nop
 8008d70:	0800b129 	.word	0x0800b129
 8008d74:	0800b20c 	.word	0x0800b20c

08008d78 <_Bfree>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b976      	cbnz	r6, 8008da0 <_Bfree+0x28>
 8008d82:	2010      	movs	r0, #16
 8008d84:	f7ff ffa2 	bl	8008ccc <malloc>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008d8c:	b920      	cbnz	r0, 8008d98 <_Bfree+0x20>
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <_Bfree+0x3c>)
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <_Bfree+0x40>)
 8008d92:	218a      	movs	r1, #138	; 0x8a
 8008d94:	f000 fdea 	bl	800996c <__assert_func>
 8008d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d9c:	6006      	str	r6, [r0, #0]
 8008d9e:	60c6      	str	r6, [r0, #12]
 8008da0:	b13c      	cbz	r4, 8008db2 <_Bfree+0x3a>
 8008da2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008da4:	6862      	ldr	r2, [r4, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dac:	6021      	str	r1, [r4, #0]
 8008dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	0800b129 	.word	0x0800b129
 8008db8:	0800b20c 	.word	0x0800b20c

08008dbc <__multadd>:
 8008dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc0:	690d      	ldr	r5, [r1, #16]
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	461e      	mov	r6, r3
 8008dc8:	f101 0c14 	add.w	ip, r1, #20
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f8dc 3000 	ldr.w	r3, [ip]
 8008dd2:	b299      	uxth	r1, r3
 8008dd4:	fb02 6101 	mla	r1, r2, r1, r6
 8008dd8:	0c1e      	lsrs	r6, r3, #16
 8008dda:	0c0b      	lsrs	r3, r1, #16
 8008ddc:	fb02 3306 	mla	r3, r2, r6, r3
 8008de0:	b289      	uxth	r1, r1
 8008de2:	3001      	adds	r0, #1
 8008de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008de8:	4285      	cmp	r5, r0
 8008dea:	f84c 1b04 	str.w	r1, [ip], #4
 8008dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008df2:	dcec      	bgt.n	8008dce <__multadd+0x12>
 8008df4:	b30e      	cbz	r6, 8008e3a <__multadd+0x7e>
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	dc19      	bgt.n	8008e30 <__multadd+0x74>
 8008dfc:	6861      	ldr	r1, [r4, #4]
 8008dfe:	4638      	mov	r0, r7
 8008e00:	3101      	adds	r1, #1
 8008e02:	f7ff ff79 	bl	8008cf8 <_Balloc>
 8008e06:	4680      	mov	r8, r0
 8008e08:	b928      	cbnz	r0, 8008e16 <__multadd+0x5a>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <__multadd+0x84>)
 8008e0e:	480d      	ldr	r0, [pc, #52]	; (8008e44 <__multadd+0x88>)
 8008e10:	21b5      	movs	r1, #181	; 0xb5
 8008e12:	f000 fdab 	bl	800996c <__assert_func>
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	3202      	adds	r2, #2
 8008e1a:	f104 010c 	add.w	r1, r4, #12
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	300c      	adds	r0, #12
 8008e22:	f7ff ff5b 	bl	8008cdc <memcpy>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ffa5 	bl	8008d78 <_Bfree>
 8008e2e:	4644      	mov	r4, r8
 8008e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e34:	3501      	adds	r5, #1
 8008e36:	615e      	str	r6, [r3, #20]
 8008e38:	6125      	str	r5, [r4, #16]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	0800b19b 	.word	0x0800b19b
 8008e44:	0800b20c 	.word	0x0800b20c

08008e48 <__hi0bits>:
 8008e48:	0c03      	lsrs	r3, r0, #16
 8008e4a:	041b      	lsls	r3, r3, #16
 8008e4c:	b9d3      	cbnz	r3, 8008e84 <__hi0bits+0x3c>
 8008e4e:	0400      	lsls	r0, r0, #16
 8008e50:	2310      	movs	r3, #16
 8008e52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e56:	bf04      	itt	eq
 8008e58:	0200      	lsleq	r0, r0, #8
 8008e5a:	3308      	addeq	r3, #8
 8008e5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e60:	bf04      	itt	eq
 8008e62:	0100      	lsleq	r0, r0, #4
 8008e64:	3304      	addeq	r3, #4
 8008e66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	0080      	lsleq	r0, r0, #2
 8008e6e:	3302      	addeq	r3, #2
 8008e70:	2800      	cmp	r0, #0
 8008e72:	db05      	blt.n	8008e80 <__hi0bits+0x38>
 8008e74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e78:	f103 0301 	add.w	r3, r3, #1
 8008e7c:	bf08      	it	eq
 8008e7e:	2320      	moveq	r3, #32
 8008e80:	4618      	mov	r0, r3
 8008e82:	4770      	bx	lr
 8008e84:	2300      	movs	r3, #0
 8008e86:	e7e4      	b.n	8008e52 <__hi0bits+0xa>

08008e88 <__lo0bits>:
 8008e88:	6803      	ldr	r3, [r0, #0]
 8008e8a:	f013 0207 	ands.w	r2, r3, #7
 8008e8e:	4601      	mov	r1, r0
 8008e90:	d00b      	beq.n	8008eaa <__lo0bits+0x22>
 8008e92:	07da      	lsls	r2, r3, #31
 8008e94:	d423      	bmi.n	8008ede <__lo0bits+0x56>
 8008e96:	0798      	lsls	r0, r3, #30
 8008e98:	bf49      	itett	mi
 8008e9a:	085b      	lsrmi	r3, r3, #1
 8008e9c:	089b      	lsrpl	r3, r3, #2
 8008e9e:	2001      	movmi	r0, #1
 8008ea0:	600b      	strmi	r3, [r1, #0]
 8008ea2:	bf5c      	itt	pl
 8008ea4:	600b      	strpl	r3, [r1, #0]
 8008ea6:	2002      	movpl	r0, #2
 8008ea8:	4770      	bx	lr
 8008eaa:	b298      	uxth	r0, r3
 8008eac:	b9a8      	cbnz	r0, 8008eda <__lo0bits+0x52>
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	2010      	movs	r0, #16
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	b90a      	cbnz	r2, 8008eba <__lo0bits+0x32>
 8008eb6:	3008      	adds	r0, #8
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	071a      	lsls	r2, r3, #28
 8008ebc:	bf04      	itt	eq
 8008ebe:	091b      	lsreq	r3, r3, #4
 8008ec0:	3004      	addeq	r0, #4
 8008ec2:	079a      	lsls	r2, r3, #30
 8008ec4:	bf04      	itt	eq
 8008ec6:	089b      	lsreq	r3, r3, #2
 8008ec8:	3002      	addeq	r0, #2
 8008eca:	07da      	lsls	r2, r3, #31
 8008ecc:	d403      	bmi.n	8008ed6 <__lo0bits+0x4e>
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	f100 0001 	add.w	r0, r0, #1
 8008ed4:	d005      	beq.n	8008ee2 <__lo0bits+0x5a>
 8008ed6:	600b      	str	r3, [r1, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	4610      	mov	r0, r2
 8008edc:	e7e9      	b.n	8008eb2 <__lo0bits+0x2a>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	4770      	bx	lr
 8008ee2:	2020      	movs	r0, #32
 8008ee4:	4770      	bx	lr
	...

08008ee8 <__i2b>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	2101      	movs	r1, #1
 8008eee:	f7ff ff03 	bl	8008cf8 <_Balloc>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	b928      	cbnz	r0, 8008f02 <__i2b+0x1a>
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <__i2b+0x24>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <__i2b+0x28>)
 8008efa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008efe:	f000 fd35 	bl	800996c <__assert_func>
 8008f02:	2301      	movs	r3, #1
 8008f04:	6144      	str	r4, [r0, #20]
 8008f06:	6103      	str	r3, [r0, #16]
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	0800b19b 	.word	0x0800b19b
 8008f10:	0800b20c 	.word	0x0800b20c

08008f14 <__multiply>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	4691      	mov	r9, r2
 8008f1a:	690a      	ldr	r2, [r1, #16]
 8008f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	bfb8      	it	lt
 8008f24:	460b      	movlt	r3, r1
 8008f26:	460c      	mov	r4, r1
 8008f28:	bfbc      	itt	lt
 8008f2a:	464c      	movlt	r4, r9
 8008f2c:	4699      	movlt	r9, r3
 8008f2e:	6927      	ldr	r7, [r4, #16]
 8008f30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	eb07 060a 	add.w	r6, r7, sl
 8008f3c:	42b3      	cmp	r3, r6
 8008f3e:	b085      	sub	sp, #20
 8008f40:	bfb8      	it	lt
 8008f42:	3101      	addlt	r1, #1
 8008f44:	f7ff fed8 	bl	8008cf8 <_Balloc>
 8008f48:	b930      	cbnz	r0, 8008f58 <__multiply+0x44>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b44      	ldr	r3, [pc, #272]	; (8009060 <__multiply+0x14c>)
 8008f4e:	4845      	ldr	r0, [pc, #276]	; (8009064 <__multiply+0x150>)
 8008f50:	f240 115d 	movw	r1, #349	; 0x15d
 8008f54:	f000 fd0a 	bl	800996c <__assert_func>
 8008f58:	f100 0514 	add.w	r5, r0, #20
 8008f5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f60:	462b      	mov	r3, r5
 8008f62:	2200      	movs	r2, #0
 8008f64:	4543      	cmp	r3, r8
 8008f66:	d321      	bcc.n	8008fac <__multiply+0x98>
 8008f68:	f104 0314 	add.w	r3, r4, #20
 8008f6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f70:	f109 0314 	add.w	r3, r9, #20
 8008f74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f78:	9202      	str	r2, [sp, #8]
 8008f7a:	1b3a      	subs	r2, r7, r4
 8008f7c:	3a15      	subs	r2, #21
 8008f7e:	f022 0203 	bic.w	r2, r2, #3
 8008f82:	3204      	adds	r2, #4
 8008f84:	f104 0115 	add.w	r1, r4, #21
 8008f88:	428f      	cmp	r7, r1
 8008f8a:	bf38      	it	cc
 8008f8c:	2204      	movcc	r2, #4
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	9a02      	ldr	r2, [sp, #8]
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d80c      	bhi.n	8008fb2 <__multiply+0x9e>
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	dd03      	ble.n	8008fa4 <__multiply+0x90>
 8008f9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05a      	beq.n	800905a <__multiply+0x146>
 8008fa4:	6106      	str	r6, [r0, #16]
 8008fa6:	b005      	add	sp, #20
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	f843 2b04 	str.w	r2, [r3], #4
 8008fb0:	e7d8      	b.n	8008f64 <__multiply+0x50>
 8008fb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fb6:	f1ba 0f00 	cmp.w	sl, #0
 8008fba:	d024      	beq.n	8009006 <__multiply+0xf2>
 8008fbc:	f104 0e14 	add.w	lr, r4, #20
 8008fc0:	46a9      	mov	r9, r5
 8008fc2:	f04f 0c00 	mov.w	ip, #0
 8008fc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fca:	f8d9 1000 	ldr.w	r1, [r9]
 8008fce:	fa1f fb82 	uxth.w	fp, r2
 8008fd2:	b289      	uxth	r1, r1
 8008fd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fe0:	4461      	add	r1, ip
 8008fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fe6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ff4:	4577      	cmp	r7, lr
 8008ff6:	f849 1b04 	str.w	r1, [r9], #4
 8008ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ffe:	d8e2      	bhi.n	8008fc6 <__multiply+0xb2>
 8009000:	9a01      	ldr	r2, [sp, #4]
 8009002:	f845 c002 	str.w	ip, [r5, r2]
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800900c:	3304      	adds	r3, #4
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d020      	beq.n	8009056 <__multiply+0x142>
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	f104 0c14 	add.w	ip, r4, #20
 800901a:	46ae      	mov	lr, r5
 800901c:	f04f 0a00 	mov.w	sl, #0
 8009020:	f8bc b000 	ldrh.w	fp, [ip]
 8009024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009028:	fb09 220b 	mla	r2, r9, fp, r2
 800902c:	4492      	add	sl, r2
 800902e:	b289      	uxth	r1, r1
 8009030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009034:	f84e 1b04 	str.w	r1, [lr], #4
 8009038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800903c:	f8be 1000 	ldrh.w	r1, [lr]
 8009040:	0c12      	lsrs	r2, r2, #16
 8009042:	fb09 1102 	mla	r1, r9, r2, r1
 8009046:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800904a:	4567      	cmp	r7, ip
 800904c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009050:	d8e6      	bhi.n	8009020 <__multiply+0x10c>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	50a9      	str	r1, [r5, r2]
 8009056:	3504      	adds	r5, #4
 8009058:	e79a      	b.n	8008f90 <__multiply+0x7c>
 800905a:	3e01      	subs	r6, #1
 800905c:	e79c      	b.n	8008f98 <__multiply+0x84>
 800905e:	bf00      	nop
 8009060:	0800b19b 	.word	0x0800b19b
 8009064:	0800b20c 	.word	0x0800b20c

08009068 <__pow5mult>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	4615      	mov	r5, r2
 800906e:	f012 0203 	ands.w	r2, r2, #3
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	d007      	beq.n	8009088 <__pow5mult+0x20>
 8009078:	4c25      	ldr	r4, [pc, #148]	; (8009110 <__pow5mult+0xa8>)
 800907a:	3a01      	subs	r2, #1
 800907c:	2300      	movs	r3, #0
 800907e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009082:	f7ff fe9b 	bl	8008dbc <__multadd>
 8009086:	4607      	mov	r7, r0
 8009088:	10ad      	asrs	r5, r5, #2
 800908a:	d03d      	beq.n	8009108 <__pow5mult+0xa0>
 800908c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800908e:	b97c      	cbnz	r4, 80090b0 <__pow5mult+0x48>
 8009090:	2010      	movs	r0, #16
 8009092:	f7ff fe1b 	bl	8008ccc <malloc>
 8009096:	4602      	mov	r2, r0
 8009098:	6270      	str	r0, [r6, #36]	; 0x24
 800909a:	b928      	cbnz	r0, 80090a8 <__pow5mult+0x40>
 800909c:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <__pow5mult+0xac>)
 800909e:	481e      	ldr	r0, [pc, #120]	; (8009118 <__pow5mult+0xb0>)
 80090a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090a4:	f000 fc62 	bl	800996c <__assert_func>
 80090a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	60c4      	str	r4, [r0, #12]
 80090b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b8:	b94c      	cbnz	r4, 80090ce <__pow5mult+0x66>
 80090ba:	f240 2171 	movw	r1, #625	; 0x271
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff12 	bl	8008ee8 <__i2b>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ca:	4604      	mov	r4, r0
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	07eb      	lsls	r3, r5, #31
 80090d4:	d50a      	bpl.n	80090ec <__pow5mult+0x84>
 80090d6:	4639      	mov	r1, r7
 80090d8:	4622      	mov	r2, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ff1a 	bl	8008f14 <__multiply>
 80090e0:	4639      	mov	r1, r7
 80090e2:	4680      	mov	r8, r0
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff fe47 	bl	8008d78 <_Bfree>
 80090ea:	4647      	mov	r7, r8
 80090ec:	106d      	asrs	r5, r5, #1
 80090ee:	d00b      	beq.n	8009108 <__pow5mult+0xa0>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	b938      	cbnz	r0, 8009104 <__pow5mult+0x9c>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff ff0b 	bl	8008f14 <__multiply>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f8c0 9000 	str.w	r9, [r0]
 8009104:	4604      	mov	r4, r0
 8009106:	e7e4      	b.n	80090d2 <__pow5mult+0x6a>
 8009108:	4638      	mov	r0, r7
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	0800b358 	.word	0x0800b358
 8009114:	0800b129 	.word	0x0800b129
 8009118:	0800b20c 	.word	0x0800b20c

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	6849      	ldr	r1, [r1, #4]
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	4607      	mov	r7, r0
 800912e:	4691      	mov	r9, r2
 8009130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009134:	f108 0601 	add.w	r6, r8, #1
 8009138:	42b3      	cmp	r3, r6
 800913a:	db0b      	blt.n	8009154 <__lshift+0x38>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fddb 	bl	8008cf8 <_Balloc>
 8009142:	4605      	mov	r5, r0
 8009144:	b948      	cbnz	r0, 800915a <__lshift+0x3e>
 8009146:	4602      	mov	r2, r0
 8009148:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <__lshift+0xd8>)
 800914a:	482b      	ldr	r0, [pc, #172]	; (80091f8 <__lshift+0xdc>)
 800914c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009150:	f000 fc0c 	bl	800996c <__assert_func>
 8009154:	3101      	adds	r1, #1
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	e7ee      	b.n	8009138 <__lshift+0x1c>
 800915a:	2300      	movs	r3, #0
 800915c:	f100 0114 	add.w	r1, r0, #20
 8009160:	f100 0210 	add.w	r2, r0, #16
 8009164:	4618      	mov	r0, r3
 8009166:	4553      	cmp	r3, sl
 8009168:	db37      	blt.n	80091da <__lshift+0xbe>
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	f019 091f 	ands.w	r9, r9, #31
 8009178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009180:	d02f      	beq.n	80091e2 <__lshift+0xc6>
 8009182:	f1c9 0e20 	rsb	lr, r9, #32
 8009186:	468a      	mov	sl, r1
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	fa02 f209 	lsl.w	r2, r2, r9
 8009192:	ea42 020c 	orr.w	r2, r2, ip
 8009196:	f84a 2b04 	str.w	r2, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	4298      	cmp	r0, r3
 80091a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091a4:	d8f2      	bhi.n	800918c <__lshift+0x70>
 80091a6:	1b03      	subs	r3, r0, r4
 80091a8:	3b15      	subs	r3, #21
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	3304      	adds	r3, #4
 80091b0:	f104 0215 	add.w	r2, r4, #21
 80091b4:	4290      	cmp	r0, r2
 80091b6:	bf38      	it	cc
 80091b8:	2304      	movcc	r3, #4
 80091ba:	f841 c003 	str.w	ip, [r1, r3]
 80091be:	f1bc 0f00 	cmp.w	ip, #0
 80091c2:	d001      	beq.n	80091c8 <__lshift+0xac>
 80091c4:	f108 0602 	add.w	r6, r8, #2
 80091c8:	3e01      	subs	r6, #1
 80091ca:	4638      	mov	r0, r7
 80091cc:	612e      	str	r6, [r5, #16]
 80091ce:	4621      	mov	r1, r4
 80091d0:	f7ff fdd2 	bl	8008d78 <_Bfree>
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f842 0f04 	str.w	r0, [r2, #4]!
 80091de:	3301      	adds	r3, #1
 80091e0:	e7c1      	b.n	8009166 <__lshift+0x4a>
 80091e2:	3904      	subs	r1, #4
 80091e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ec:	4298      	cmp	r0, r3
 80091ee:	d8f9      	bhi.n	80091e4 <__lshift+0xc8>
 80091f0:	e7ea      	b.n	80091c8 <__lshift+0xac>
 80091f2:	bf00      	nop
 80091f4:	0800b19b 	.word	0x0800b19b
 80091f8:	0800b20c 	.word	0x0800b20c

080091fc <__mcmp>:
 80091fc:	b530      	push	{r4, r5, lr}
 80091fe:	6902      	ldr	r2, [r0, #16]
 8009200:	690c      	ldr	r4, [r1, #16]
 8009202:	1b12      	subs	r2, r2, r4
 8009204:	d10e      	bne.n	8009224 <__mcmp+0x28>
 8009206:	f100 0314 	add.w	r3, r0, #20
 800920a:	3114      	adds	r1, #20
 800920c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800921c:	42a5      	cmp	r5, r4
 800921e:	d003      	beq.n	8009228 <__mcmp+0x2c>
 8009220:	d305      	bcc.n	800922e <__mcmp+0x32>
 8009222:	2201      	movs	r2, #1
 8009224:	4610      	mov	r0, r2
 8009226:	bd30      	pop	{r4, r5, pc}
 8009228:	4283      	cmp	r3, r0
 800922a:	d3f3      	bcc.n	8009214 <__mcmp+0x18>
 800922c:	e7fa      	b.n	8009224 <__mcmp+0x28>
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	e7f7      	b.n	8009224 <__mcmp+0x28>

08009234 <__mdiff>:
 8009234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	4606      	mov	r6, r0
 800923c:	4611      	mov	r1, r2
 800923e:	4620      	mov	r0, r4
 8009240:	4690      	mov	r8, r2
 8009242:	f7ff ffdb 	bl	80091fc <__mcmp>
 8009246:	1e05      	subs	r5, r0, #0
 8009248:	d110      	bne.n	800926c <__mdiff+0x38>
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff fd53 	bl	8008cf8 <_Balloc>
 8009252:	b930      	cbnz	r0, 8009262 <__mdiff+0x2e>
 8009254:	4b3a      	ldr	r3, [pc, #232]	; (8009340 <__mdiff+0x10c>)
 8009256:	4602      	mov	r2, r0
 8009258:	f240 2132 	movw	r1, #562	; 0x232
 800925c:	4839      	ldr	r0, [pc, #228]	; (8009344 <__mdiff+0x110>)
 800925e:	f000 fb85 	bl	800996c <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	bfa4      	itt	ge
 800926e:	4643      	movge	r3, r8
 8009270:	46a0      	movge	r8, r4
 8009272:	4630      	mov	r0, r6
 8009274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009278:	bfa6      	itte	ge
 800927a:	461c      	movge	r4, r3
 800927c:	2500      	movge	r5, #0
 800927e:	2501      	movlt	r5, #1
 8009280:	f7ff fd3a 	bl	8008cf8 <_Balloc>
 8009284:	b920      	cbnz	r0, 8009290 <__mdiff+0x5c>
 8009286:	4b2e      	ldr	r3, [pc, #184]	; (8009340 <__mdiff+0x10c>)
 8009288:	4602      	mov	r2, r0
 800928a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800928e:	e7e5      	b.n	800925c <__mdiff+0x28>
 8009290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009294:	6926      	ldr	r6, [r4, #16]
 8009296:	60c5      	str	r5, [r0, #12]
 8009298:	f104 0914 	add.w	r9, r4, #20
 800929c:	f108 0514 	add.w	r5, r8, #20
 80092a0:	f100 0e14 	add.w	lr, r0, #20
 80092a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092ac:	f108 0210 	add.w	r2, r8, #16
 80092b0:	46f2      	mov	sl, lr
 80092b2:	2100      	movs	r1, #0
 80092b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092bc:	fa1f f883 	uxth.w	r8, r3
 80092c0:	fa11 f18b 	uxtah	r1, r1, fp
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	eba1 0808 	sub.w	r8, r1, r8
 80092ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092d2:	fa1f f888 	uxth.w	r8, r8
 80092d6:	1419      	asrs	r1, r3, #16
 80092d8:	454e      	cmp	r6, r9
 80092da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092de:	f84a 3b04 	str.w	r3, [sl], #4
 80092e2:	d8e7      	bhi.n	80092b4 <__mdiff+0x80>
 80092e4:	1b33      	subs	r3, r6, r4
 80092e6:	3b15      	subs	r3, #21
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	3304      	adds	r3, #4
 80092ee:	3415      	adds	r4, #21
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	bf38      	it	cc
 80092f4:	2304      	movcc	r3, #4
 80092f6:	441d      	add	r5, r3
 80092f8:	4473      	add	r3, lr
 80092fa:	469e      	mov	lr, r3
 80092fc:	462e      	mov	r6, r5
 80092fe:	4566      	cmp	r6, ip
 8009300:	d30e      	bcc.n	8009320 <__mdiff+0xec>
 8009302:	f10c 0203 	add.w	r2, ip, #3
 8009306:	1b52      	subs	r2, r2, r5
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	3d03      	subs	r5, #3
 800930e:	45ac      	cmp	ip, r5
 8009310:	bf38      	it	cc
 8009312:	2200      	movcc	r2, #0
 8009314:	441a      	add	r2, r3
 8009316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800931a:	b17b      	cbz	r3, 800933c <__mdiff+0x108>
 800931c:	6107      	str	r7, [r0, #16]
 800931e:	e7a3      	b.n	8009268 <__mdiff+0x34>
 8009320:	f856 8b04 	ldr.w	r8, [r6], #4
 8009324:	fa11 f288 	uxtah	r2, r1, r8
 8009328:	1414      	asrs	r4, r2, #16
 800932a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800932e:	b292      	uxth	r2, r2
 8009330:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009334:	f84e 2b04 	str.w	r2, [lr], #4
 8009338:	1421      	asrs	r1, r4, #16
 800933a:	e7e0      	b.n	80092fe <__mdiff+0xca>
 800933c:	3f01      	subs	r7, #1
 800933e:	e7ea      	b.n	8009316 <__mdiff+0xe2>
 8009340:	0800b19b 	.word	0x0800b19b
 8009344:	0800b20c 	.word	0x0800b20c

08009348 <__d2b>:
 8009348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4689      	mov	r9, r1
 800934e:	2101      	movs	r1, #1
 8009350:	ec57 6b10 	vmov	r6, r7, d0
 8009354:	4690      	mov	r8, r2
 8009356:	f7ff fccf 	bl	8008cf8 <_Balloc>
 800935a:	4604      	mov	r4, r0
 800935c:	b930      	cbnz	r0, 800936c <__d2b+0x24>
 800935e:	4602      	mov	r2, r0
 8009360:	4b25      	ldr	r3, [pc, #148]	; (80093f8 <__d2b+0xb0>)
 8009362:	4826      	ldr	r0, [pc, #152]	; (80093fc <__d2b+0xb4>)
 8009364:	f240 310a 	movw	r1, #778	; 0x30a
 8009368:	f000 fb00 	bl	800996c <__assert_func>
 800936c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009374:	bb35      	cbnz	r5, 80093c4 <__d2b+0x7c>
 8009376:	2e00      	cmp	r6, #0
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	d028      	beq.n	80093ce <__d2b+0x86>
 800937c:	4668      	mov	r0, sp
 800937e:	9600      	str	r6, [sp, #0]
 8009380:	f7ff fd82 	bl	8008e88 <__lo0bits>
 8009384:	9900      	ldr	r1, [sp, #0]
 8009386:	b300      	cbz	r0, 80093ca <__d2b+0x82>
 8009388:	9a01      	ldr	r2, [sp, #4]
 800938a:	f1c0 0320 	rsb	r3, r0, #32
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	430b      	orrs	r3, r1
 8009394:	40c2      	lsrs	r2, r0
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	9201      	str	r2, [sp, #4]
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	61a3      	str	r3, [r4, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bf14      	ite	ne
 80093a2:	2202      	movne	r2, #2
 80093a4:	2201      	moveq	r2, #1
 80093a6:	6122      	str	r2, [r4, #16]
 80093a8:	b1d5      	cbz	r5, 80093e0 <__d2b+0x98>
 80093aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093ae:	4405      	add	r5, r0
 80093b0:	f8c9 5000 	str.w	r5, [r9]
 80093b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093b8:	f8c8 0000 	str.w	r0, [r8]
 80093bc:	4620      	mov	r0, r4
 80093be:	b003      	add	sp, #12
 80093c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093c8:	e7d5      	b.n	8009376 <__d2b+0x2e>
 80093ca:	6161      	str	r1, [r4, #20]
 80093cc:	e7e5      	b.n	800939a <__d2b+0x52>
 80093ce:	a801      	add	r0, sp, #4
 80093d0:	f7ff fd5a 	bl	8008e88 <__lo0bits>
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	2201      	movs	r2, #1
 80093da:	6122      	str	r2, [r4, #16]
 80093dc:	3020      	adds	r0, #32
 80093de:	e7e3      	b.n	80093a8 <__d2b+0x60>
 80093e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093e8:	f8c9 0000 	str.w	r0, [r9]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fd2b 	bl	8008e48 <__hi0bits>
 80093f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093f6:	e7df      	b.n	80093b8 <__d2b+0x70>
 80093f8:	0800b19b 	.word	0x0800b19b
 80093fc:	0800b20c 	.word	0x0800b20c

08009400 <_calloc_r>:
 8009400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009402:	fba1 2402 	umull	r2, r4, r1, r2
 8009406:	b94c      	cbnz	r4, 800941c <_calloc_r+0x1c>
 8009408:	4611      	mov	r1, r2
 800940a:	9201      	str	r2, [sp, #4]
 800940c:	f000 f87a 	bl	8009504 <_malloc_r>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	4605      	mov	r5, r0
 8009414:	b930      	cbnz	r0, 8009424 <_calloc_r+0x24>
 8009416:	4628      	mov	r0, r5
 8009418:	b003      	add	sp, #12
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	220c      	movs	r2, #12
 800941e:	6002      	str	r2, [r0, #0]
 8009420:	2500      	movs	r5, #0
 8009422:	e7f8      	b.n	8009416 <_calloc_r+0x16>
 8009424:	4621      	mov	r1, r4
 8009426:	f7fd fdf3 	bl	8007010 <memset>
 800942a:	e7f4      	b.n	8009416 <_calloc_r+0x16>

0800942c <_free_r>:
 800942c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800942e:	2900      	cmp	r1, #0
 8009430:	d044      	beq.n	80094bc <_free_r+0x90>
 8009432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009436:	9001      	str	r0, [sp, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f1a1 0404 	sub.w	r4, r1, #4
 800943e:	bfb8      	it	lt
 8009440:	18e4      	addlt	r4, r4, r3
 8009442:	f000 fb19 	bl	8009a78 <__malloc_lock>
 8009446:	4a1e      	ldr	r2, [pc, #120]	; (80094c0 <_free_r+0x94>)
 8009448:	9801      	ldr	r0, [sp, #4]
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	b933      	cbnz	r3, 800945c <_free_r+0x30>
 800944e:	6063      	str	r3, [r4, #4]
 8009450:	6014      	str	r4, [r2, #0]
 8009452:	b003      	add	sp, #12
 8009454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009458:	f000 bb14 	b.w	8009a84 <__malloc_unlock>
 800945c:	42a3      	cmp	r3, r4
 800945e:	d908      	bls.n	8009472 <_free_r+0x46>
 8009460:	6825      	ldr	r5, [r4, #0]
 8009462:	1961      	adds	r1, r4, r5
 8009464:	428b      	cmp	r3, r1
 8009466:	bf01      	itttt	eq
 8009468:	6819      	ldreq	r1, [r3, #0]
 800946a:	685b      	ldreq	r3, [r3, #4]
 800946c:	1949      	addeq	r1, r1, r5
 800946e:	6021      	streq	r1, [r4, #0]
 8009470:	e7ed      	b.n	800944e <_free_r+0x22>
 8009472:	461a      	mov	r2, r3
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b10b      	cbz	r3, 800947c <_free_r+0x50>
 8009478:	42a3      	cmp	r3, r4
 800947a:	d9fa      	bls.n	8009472 <_free_r+0x46>
 800947c:	6811      	ldr	r1, [r2, #0]
 800947e:	1855      	adds	r5, r2, r1
 8009480:	42a5      	cmp	r5, r4
 8009482:	d10b      	bne.n	800949c <_free_r+0x70>
 8009484:	6824      	ldr	r4, [r4, #0]
 8009486:	4421      	add	r1, r4
 8009488:	1854      	adds	r4, r2, r1
 800948a:	42a3      	cmp	r3, r4
 800948c:	6011      	str	r1, [r2, #0]
 800948e:	d1e0      	bne.n	8009452 <_free_r+0x26>
 8009490:	681c      	ldr	r4, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	6053      	str	r3, [r2, #4]
 8009496:	4421      	add	r1, r4
 8009498:	6011      	str	r1, [r2, #0]
 800949a:	e7da      	b.n	8009452 <_free_r+0x26>
 800949c:	d902      	bls.n	80094a4 <_free_r+0x78>
 800949e:	230c      	movs	r3, #12
 80094a0:	6003      	str	r3, [r0, #0]
 80094a2:	e7d6      	b.n	8009452 <_free_r+0x26>
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	1961      	adds	r1, r4, r5
 80094a8:	428b      	cmp	r3, r1
 80094aa:	bf04      	itt	eq
 80094ac:	6819      	ldreq	r1, [r3, #0]
 80094ae:	685b      	ldreq	r3, [r3, #4]
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	bf04      	itt	eq
 80094b4:	1949      	addeq	r1, r1, r5
 80094b6:	6021      	streq	r1, [r4, #0]
 80094b8:	6054      	str	r4, [r2, #4]
 80094ba:	e7ca      	b.n	8009452 <_free_r+0x26>
 80094bc:	b003      	add	sp, #12
 80094be:	bd30      	pop	{r4, r5, pc}
 80094c0:	20000424 	.word	0x20000424

080094c4 <sbrk_aligned>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4e0e      	ldr	r6, [pc, #56]	; (8009500 <sbrk_aligned+0x3c>)
 80094c8:	460c      	mov	r4, r1
 80094ca:	6831      	ldr	r1, [r6, #0]
 80094cc:	4605      	mov	r5, r0
 80094ce:	b911      	cbnz	r1, 80094d6 <sbrk_aligned+0x12>
 80094d0:	f000 f9e6 	bl	80098a0 <_sbrk_r>
 80094d4:	6030      	str	r0, [r6, #0]
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f9e1 	bl	80098a0 <_sbrk_r>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d00a      	beq.n	80094f8 <sbrk_aligned+0x34>
 80094e2:	1cc4      	adds	r4, r0, #3
 80094e4:	f024 0403 	bic.w	r4, r4, #3
 80094e8:	42a0      	cmp	r0, r4
 80094ea:	d007      	beq.n	80094fc <sbrk_aligned+0x38>
 80094ec:	1a21      	subs	r1, r4, r0
 80094ee:	4628      	mov	r0, r5
 80094f0:	f000 f9d6 	bl	80098a0 <_sbrk_r>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d101      	bne.n	80094fc <sbrk_aligned+0x38>
 80094f8:	f04f 34ff 	mov.w	r4, #4294967295
 80094fc:	4620      	mov	r0, r4
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	20000428 	.word	0x20000428

08009504 <_malloc_r>:
 8009504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	1ccd      	adds	r5, r1, #3
 800950a:	f025 0503 	bic.w	r5, r5, #3
 800950e:	3508      	adds	r5, #8
 8009510:	2d0c      	cmp	r5, #12
 8009512:	bf38      	it	cc
 8009514:	250c      	movcc	r5, #12
 8009516:	2d00      	cmp	r5, #0
 8009518:	4607      	mov	r7, r0
 800951a:	db01      	blt.n	8009520 <_malloc_r+0x1c>
 800951c:	42a9      	cmp	r1, r5
 800951e:	d905      	bls.n	800952c <_malloc_r+0x28>
 8009520:	230c      	movs	r3, #12
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	2600      	movs	r6, #0
 8009526:	4630      	mov	r0, r6
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	4e2e      	ldr	r6, [pc, #184]	; (80095e8 <_malloc_r+0xe4>)
 800952e:	f000 faa3 	bl	8009a78 <__malloc_lock>
 8009532:	6833      	ldr	r3, [r6, #0]
 8009534:	461c      	mov	r4, r3
 8009536:	bb34      	cbnz	r4, 8009586 <_malloc_r+0x82>
 8009538:	4629      	mov	r1, r5
 800953a:	4638      	mov	r0, r7
 800953c:	f7ff ffc2 	bl	80094c4 <sbrk_aligned>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	4604      	mov	r4, r0
 8009544:	d14d      	bne.n	80095e2 <_malloc_r+0xde>
 8009546:	6834      	ldr	r4, [r6, #0]
 8009548:	4626      	mov	r6, r4
 800954a:	2e00      	cmp	r6, #0
 800954c:	d140      	bne.n	80095d0 <_malloc_r+0xcc>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	4631      	mov	r1, r6
 8009552:	4638      	mov	r0, r7
 8009554:	eb04 0803 	add.w	r8, r4, r3
 8009558:	f000 f9a2 	bl	80098a0 <_sbrk_r>
 800955c:	4580      	cmp	r8, r0
 800955e:	d13a      	bne.n	80095d6 <_malloc_r+0xd2>
 8009560:	6821      	ldr	r1, [r4, #0]
 8009562:	3503      	adds	r5, #3
 8009564:	1a6d      	subs	r5, r5, r1
 8009566:	f025 0503 	bic.w	r5, r5, #3
 800956a:	3508      	adds	r5, #8
 800956c:	2d0c      	cmp	r5, #12
 800956e:	bf38      	it	cc
 8009570:	250c      	movcc	r5, #12
 8009572:	4629      	mov	r1, r5
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff ffa5 	bl	80094c4 <sbrk_aligned>
 800957a:	3001      	adds	r0, #1
 800957c:	d02b      	beq.n	80095d6 <_malloc_r+0xd2>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	442b      	add	r3, r5
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	e00e      	b.n	80095a4 <_malloc_r+0xa0>
 8009586:	6822      	ldr	r2, [r4, #0]
 8009588:	1b52      	subs	r2, r2, r5
 800958a:	d41e      	bmi.n	80095ca <_malloc_r+0xc6>
 800958c:	2a0b      	cmp	r2, #11
 800958e:	d916      	bls.n	80095be <_malloc_r+0xba>
 8009590:	1961      	adds	r1, r4, r5
 8009592:	42a3      	cmp	r3, r4
 8009594:	6025      	str	r5, [r4, #0]
 8009596:	bf18      	it	ne
 8009598:	6059      	strne	r1, [r3, #4]
 800959a:	6863      	ldr	r3, [r4, #4]
 800959c:	bf08      	it	eq
 800959e:	6031      	streq	r1, [r6, #0]
 80095a0:	5162      	str	r2, [r4, r5]
 80095a2:	604b      	str	r3, [r1, #4]
 80095a4:	4638      	mov	r0, r7
 80095a6:	f104 060b 	add.w	r6, r4, #11
 80095aa:	f000 fa6b 	bl	8009a84 <__malloc_unlock>
 80095ae:	f026 0607 	bic.w	r6, r6, #7
 80095b2:	1d23      	adds	r3, r4, #4
 80095b4:	1af2      	subs	r2, r6, r3
 80095b6:	d0b6      	beq.n	8009526 <_malloc_r+0x22>
 80095b8:	1b9b      	subs	r3, r3, r6
 80095ba:	50a3      	str	r3, [r4, r2]
 80095bc:	e7b3      	b.n	8009526 <_malloc_r+0x22>
 80095be:	6862      	ldr	r2, [r4, #4]
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	bf0c      	ite	eq
 80095c4:	6032      	streq	r2, [r6, #0]
 80095c6:	605a      	strne	r2, [r3, #4]
 80095c8:	e7ec      	b.n	80095a4 <_malloc_r+0xa0>
 80095ca:	4623      	mov	r3, r4
 80095cc:	6864      	ldr	r4, [r4, #4]
 80095ce:	e7b2      	b.n	8009536 <_malloc_r+0x32>
 80095d0:	4634      	mov	r4, r6
 80095d2:	6876      	ldr	r6, [r6, #4]
 80095d4:	e7b9      	b.n	800954a <_malloc_r+0x46>
 80095d6:	230c      	movs	r3, #12
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	4638      	mov	r0, r7
 80095dc:	f000 fa52 	bl	8009a84 <__malloc_unlock>
 80095e0:	e7a1      	b.n	8009526 <_malloc_r+0x22>
 80095e2:	6025      	str	r5, [r4, #0]
 80095e4:	e7de      	b.n	80095a4 <_malloc_r+0xa0>
 80095e6:	bf00      	nop
 80095e8:	20000424 	.word	0x20000424

080095ec <__sfputc_r>:
 80095ec:	6893      	ldr	r3, [r2, #8]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	b410      	push	{r4}
 80095f4:	6093      	str	r3, [r2, #8]
 80095f6:	da08      	bge.n	800960a <__sfputc_r+0x1e>
 80095f8:	6994      	ldr	r4, [r2, #24]
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	db01      	blt.n	8009602 <__sfputc_r+0x16>
 80095fe:	290a      	cmp	r1, #10
 8009600:	d103      	bne.n	800960a <__sfputc_r+0x1e>
 8009602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009606:	f7fe ba03 	b.w	8007a10 <__swbuf_r>
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	1c58      	adds	r0, r3, #1
 800960e:	6010      	str	r0, [r2, #0]
 8009610:	7019      	strb	r1, [r3, #0]
 8009612:	4608      	mov	r0, r1
 8009614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009618:	4770      	bx	lr

0800961a <__sfputs_r>:
 800961a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961c:	4606      	mov	r6, r0
 800961e:	460f      	mov	r7, r1
 8009620:	4614      	mov	r4, r2
 8009622:	18d5      	adds	r5, r2, r3
 8009624:	42ac      	cmp	r4, r5
 8009626:	d101      	bne.n	800962c <__sfputs_r+0x12>
 8009628:	2000      	movs	r0, #0
 800962a:	e007      	b.n	800963c <__sfputs_r+0x22>
 800962c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009630:	463a      	mov	r2, r7
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ffda 	bl	80095ec <__sfputc_r>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d1f3      	bne.n	8009624 <__sfputs_r+0xa>
 800963c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009640 <_vfiprintf_r>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	460d      	mov	r5, r1
 8009646:	b09d      	sub	sp, #116	; 0x74
 8009648:	4614      	mov	r4, r2
 800964a:	4698      	mov	r8, r3
 800964c:	4606      	mov	r6, r0
 800964e:	b118      	cbz	r0, 8009658 <_vfiprintf_r+0x18>
 8009650:	6983      	ldr	r3, [r0, #24]
 8009652:	b90b      	cbnz	r3, 8009658 <_vfiprintf_r+0x18>
 8009654:	f7ff fa30 	bl	8008ab8 <__sinit>
 8009658:	4b89      	ldr	r3, [pc, #548]	; (8009880 <_vfiprintf_r+0x240>)
 800965a:	429d      	cmp	r5, r3
 800965c:	d11b      	bne.n	8009696 <_vfiprintf_r+0x56>
 800965e:	6875      	ldr	r5, [r6, #4]
 8009660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d405      	bmi.n	8009672 <_vfiprintf_r+0x32>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d402      	bmi.n	8009672 <_vfiprintf_r+0x32>
 800966c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966e:	f7ff fac6 	bl	8008bfe <__retarget_lock_acquire_recursive>
 8009672:	89ab      	ldrh	r3, [r5, #12]
 8009674:	071b      	lsls	r3, r3, #28
 8009676:	d501      	bpl.n	800967c <_vfiprintf_r+0x3c>
 8009678:	692b      	ldr	r3, [r5, #16]
 800967a:	b9eb      	cbnz	r3, 80096b8 <_vfiprintf_r+0x78>
 800967c:	4629      	mov	r1, r5
 800967e:	4630      	mov	r0, r6
 8009680:	f7fe fa18 	bl	8007ab4 <__swsetup_r>
 8009684:	b1c0      	cbz	r0, 80096b8 <_vfiprintf_r+0x78>
 8009686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009688:	07dc      	lsls	r4, r3, #31
 800968a:	d50e      	bpl.n	80096aa <_vfiprintf_r+0x6a>
 800968c:	f04f 30ff 	mov.w	r0, #4294967295
 8009690:	b01d      	add	sp, #116	; 0x74
 8009692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009696:	4b7b      	ldr	r3, [pc, #492]	; (8009884 <_vfiprintf_r+0x244>)
 8009698:	429d      	cmp	r5, r3
 800969a:	d101      	bne.n	80096a0 <_vfiprintf_r+0x60>
 800969c:	68b5      	ldr	r5, [r6, #8]
 800969e:	e7df      	b.n	8009660 <_vfiprintf_r+0x20>
 80096a0:	4b79      	ldr	r3, [pc, #484]	; (8009888 <_vfiprintf_r+0x248>)
 80096a2:	429d      	cmp	r5, r3
 80096a4:	bf08      	it	eq
 80096a6:	68f5      	ldreq	r5, [r6, #12]
 80096a8:	e7da      	b.n	8009660 <_vfiprintf_r+0x20>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	0598      	lsls	r0, r3, #22
 80096ae:	d4ed      	bmi.n	800968c <_vfiprintf_r+0x4c>
 80096b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096b2:	f7ff faa5 	bl	8008c00 <__retarget_lock_release_recursive>
 80096b6:	e7e9      	b.n	800968c <_vfiprintf_r+0x4c>
 80096b8:	2300      	movs	r3, #0
 80096ba:	9309      	str	r3, [sp, #36]	; 0x24
 80096bc:	2320      	movs	r3, #32
 80096be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c6:	2330      	movs	r3, #48	; 0x30
 80096c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800988c <_vfiprintf_r+0x24c>
 80096cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d0:	f04f 0901 	mov.w	r9, #1
 80096d4:	4623      	mov	r3, r4
 80096d6:	469a      	mov	sl, r3
 80096d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096dc:	b10a      	cbz	r2, 80096e2 <_vfiprintf_r+0xa2>
 80096de:	2a25      	cmp	r2, #37	; 0x25
 80096e0:	d1f9      	bne.n	80096d6 <_vfiprintf_r+0x96>
 80096e2:	ebba 0b04 	subs.w	fp, sl, r4
 80096e6:	d00b      	beq.n	8009700 <_vfiprintf_r+0xc0>
 80096e8:	465b      	mov	r3, fp
 80096ea:	4622      	mov	r2, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ff93 	bl	800961a <__sfputs_r>
 80096f4:	3001      	adds	r0, #1
 80096f6:	f000 80aa 	beq.w	800984e <_vfiprintf_r+0x20e>
 80096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fc:	445a      	add	r2, fp
 80096fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009700:	f89a 3000 	ldrb.w	r3, [sl]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80a2 	beq.w	800984e <_vfiprintf_r+0x20e>
 800970a:	2300      	movs	r3, #0
 800970c:	f04f 32ff 	mov.w	r2, #4294967295
 8009710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009714:	f10a 0a01 	add.w	sl, sl, #1
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009720:	931a      	str	r3, [sp, #104]	; 0x68
 8009722:	4654      	mov	r4, sl
 8009724:	2205      	movs	r2, #5
 8009726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972a:	4858      	ldr	r0, [pc, #352]	; (800988c <_vfiprintf_r+0x24c>)
 800972c:	f7f6 fd58 	bl	80001e0 <memchr>
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	b9d8      	cbnz	r0, 800976c <_vfiprintf_r+0x12c>
 8009734:	06d1      	lsls	r1, r2, #27
 8009736:	bf44      	itt	mi
 8009738:	2320      	movmi	r3, #32
 800973a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973e:	0713      	lsls	r3, r2, #28
 8009740:	bf44      	itt	mi
 8009742:	232b      	movmi	r3, #43	; 0x2b
 8009744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009748:	f89a 3000 	ldrb.w	r3, [sl]
 800974c:	2b2a      	cmp	r3, #42	; 0x2a
 800974e:	d015      	beq.n	800977c <_vfiprintf_r+0x13c>
 8009750:	9a07      	ldr	r2, [sp, #28]
 8009752:	4654      	mov	r4, sl
 8009754:	2000      	movs	r0, #0
 8009756:	f04f 0c0a 	mov.w	ip, #10
 800975a:	4621      	mov	r1, r4
 800975c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009760:	3b30      	subs	r3, #48	; 0x30
 8009762:	2b09      	cmp	r3, #9
 8009764:	d94e      	bls.n	8009804 <_vfiprintf_r+0x1c4>
 8009766:	b1b0      	cbz	r0, 8009796 <_vfiprintf_r+0x156>
 8009768:	9207      	str	r2, [sp, #28]
 800976a:	e014      	b.n	8009796 <_vfiprintf_r+0x156>
 800976c:	eba0 0308 	sub.w	r3, r0, r8
 8009770:	fa09 f303 	lsl.w	r3, r9, r3
 8009774:	4313      	orrs	r3, r2
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	46a2      	mov	sl, r4
 800977a:	e7d2      	b.n	8009722 <_vfiprintf_r+0xe2>
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	1d19      	adds	r1, r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	9103      	str	r1, [sp, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfbb      	ittet	lt
 8009788:	425b      	neglt	r3, r3
 800978a:	f042 0202 	orrlt.w	r2, r2, #2
 800978e:	9307      	strge	r3, [sp, #28]
 8009790:	9307      	strlt	r3, [sp, #28]
 8009792:	bfb8      	it	lt
 8009794:	9204      	strlt	r2, [sp, #16]
 8009796:	7823      	ldrb	r3, [r4, #0]
 8009798:	2b2e      	cmp	r3, #46	; 0x2e
 800979a:	d10c      	bne.n	80097b6 <_vfiprintf_r+0x176>
 800979c:	7863      	ldrb	r3, [r4, #1]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d135      	bne.n	800980e <_vfiprintf_r+0x1ce>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	1d1a      	adds	r2, r3, #4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	9203      	str	r2, [sp, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfb8      	it	lt
 80097ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b2:	3402      	adds	r4, #2
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800989c <_vfiprintf_r+0x25c>
 80097ba:	7821      	ldrb	r1, [r4, #0]
 80097bc:	2203      	movs	r2, #3
 80097be:	4650      	mov	r0, sl
 80097c0:	f7f6 fd0e 	bl	80001e0 <memchr>
 80097c4:	b140      	cbz	r0, 80097d8 <_vfiprintf_r+0x198>
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	eba0 000a 	sub.w	r0, r0, sl
 80097cc:	fa03 f000 	lsl.w	r0, r3, r0
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	4303      	orrs	r3, r0
 80097d4:	3401      	adds	r4, #1
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097dc:	482c      	ldr	r0, [pc, #176]	; (8009890 <_vfiprintf_r+0x250>)
 80097de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e2:	2206      	movs	r2, #6
 80097e4:	f7f6 fcfc 	bl	80001e0 <memchr>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d03f      	beq.n	800986c <_vfiprintf_r+0x22c>
 80097ec:	4b29      	ldr	r3, [pc, #164]	; (8009894 <_vfiprintf_r+0x254>)
 80097ee:	bb1b      	cbnz	r3, 8009838 <_vfiprintf_r+0x1f8>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	3307      	adds	r3, #7
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	3308      	adds	r3, #8
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fe:	443b      	add	r3, r7
 8009800:	9309      	str	r3, [sp, #36]	; 0x24
 8009802:	e767      	b.n	80096d4 <_vfiprintf_r+0x94>
 8009804:	fb0c 3202 	mla	r2, ip, r2, r3
 8009808:	460c      	mov	r4, r1
 800980a:	2001      	movs	r0, #1
 800980c:	e7a5      	b.n	800975a <_vfiprintf_r+0x11a>
 800980e:	2300      	movs	r3, #0
 8009810:	3401      	adds	r4, #1
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	4619      	mov	r1, r3
 8009816:	f04f 0c0a 	mov.w	ip, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009820:	3a30      	subs	r2, #48	; 0x30
 8009822:	2a09      	cmp	r2, #9
 8009824:	d903      	bls.n	800982e <_vfiprintf_r+0x1ee>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0c5      	beq.n	80097b6 <_vfiprintf_r+0x176>
 800982a:	9105      	str	r1, [sp, #20]
 800982c:	e7c3      	b.n	80097b6 <_vfiprintf_r+0x176>
 800982e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009832:	4604      	mov	r4, r0
 8009834:	2301      	movs	r3, #1
 8009836:	e7f0      	b.n	800981a <_vfiprintf_r+0x1da>
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	462a      	mov	r2, r5
 800983e:	4b16      	ldr	r3, [pc, #88]	; (8009898 <_vfiprintf_r+0x258>)
 8009840:	a904      	add	r1, sp, #16
 8009842:	4630      	mov	r0, r6
 8009844:	f7fd fc8c 	bl	8007160 <_printf_float>
 8009848:	4607      	mov	r7, r0
 800984a:	1c78      	adds	r0, r7, #1
 800984c:	d1d6      	bne.n	80097fc <_vfiprintf_r+0x1bc>
 800984e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009850:	07d9      	lsls	r1, r3, #31
 8009852:	d405      	bmi.n	8009860 <_vfiprintf_r+0x220>
 8009854:	89ab      	ldrh	r3, [r5, #12]
 8009856:	059a      	lsls	r2, r3, #22
 8009858:	d402      	bmi.n	8009860 <_vfiprintf_r+0x220>
 800985a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800985c:	f7ff f9d0 	bl	8008c00 <__retarget_lock_release_recursive>
 8009860:	89ab      	ldrh	r3, [r5, #12]
 8009862:	065b      	lsls	r3, r3, #25
 8009864:	f53f af12 	bmi.w	800968c <_vfiprintf_r+0x4c>
 8009868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800986a:	e711      	b.n	8009690 <_vfiprintf_r+0x50>
 800986c:	ab03      	add	r3, sp, #12
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	462a      	mov	r2, r5
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <_vfiprintf_r+0x258>)
 8009874:	a904      	add	r1, sp, #16
 8009876:	4630      	mov	r0, r6
 8009878:	f7fd ff16 	bl	80076a8 <_printf_i>
 800987c:	e7e4      	b.n	8009848 <_vfiprintf_r+0x208>
 800987e:	bf00      	nop
 8009880:	0800b1cc 	.word	0x0800b1cc
 8009884:	0800b1ec 	.word	0x0800b1ec
 8009888:	0800b1ac 	.word	0x0800b1ac
 800988c:	0800b364 	.word	0x0800b364
 8009890:	0800b36e 	.word	0x0800b36e
 8009894:	08007161 	.word	0x08007161
 8009898:	0800961b 	.word	0x0800961b
 800989c:	0800b36a 	.word	0x0800b36a

080098a0 <_sbrk_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d06      	ldr	r5, [pc, #24]	; (80098bc <_sbrk_r+0x1c>)
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	f7f9 fe54 	bl	8003558 <_sbrk>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_sbrk_r+0x1a>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_sbrk_r+0x1a>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	2000042c 	.word	0x2000042c

080098c0 <__sread>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	460c      	mov	r4, r1
 80098c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c8:	f000 f8e2 	bl	8009a90 <_read_r>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	bfab      	itete	ge
 80098d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098d2:	89a3      	ldrhlt	r3, [r4, #12]
 80098d4:	181b      	addge	r3, r3, r0
 80098d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098da:	bfac      	ite	ge
 80098dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098de:	81a3      	strhlt	r3, [r4, #12]
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <__swrite>:
 80098e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	461f      	mov	r7, r3
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	05db      	lsls	r3, r3, #23
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	4616      	mov	r6, r2
 80098f2:	d505      	bpl.n	8009900 <__swrite+0x1e>
 80098f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f8:	2302      	movs	r3, #2
 80098fa:	2200      	movs	r2, #0
 80098fc:	f000 f898 	bl	8009a30 <_lseek_r>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	f000 b817 	b.w	8009948 <_write_r>

0800991a <__sseek>:
 800991a:	b510      	push	{r4, lr}
 800991c:	460c      	mov	r4, r1
 800991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009922:	f000 f885 	bl	8009a30 <_lseek_r>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	bf15      	itete	ne
 800992c:	6560      	strne	r0, [r4, #84]	; 0x54
 800992e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009936:	81a3      	strheq	r3, [r4, #12]
 8009938:	bf18      	it	ne
 800993a:	81a3      	strhne	r3, [r4, #12]
 800993c:	bd10      	pop	{r4, pc}

0800993e <__sclose>:
 800993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009942:	f000 b831 	b.w	80099a8 <_close_r>
	...

08009948 <_write_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_write_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f9 fdad 	bl	80034b6 <_write>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_write_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_write_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	2000042c 	.word	0x2000042c

0800996c <__assert_func>:
 800996c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800996e:	4614      	mov	r4, r2
 8009970:	461a      	mov	r2, r3
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <__assert_func+0x2c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	68d8      	ldr	r0, [r3, #12]
 800997a:	b14c      	cbz	r4, 8009990 <__assert_func+0x24>
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <__assert_func+0x30>)
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009984:	4906      	ldr	r1, [pc, #24]	; (80099a0 <__assert_func+0x34>)
 8009986:	462b      	mov	r3, r5
 8009988:	f000 f81e 	bl	80099c8 <fiprintf>
 800998c:	f000 f89f 	bl	8009ace <abort>
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <__assert_func+0x38>)
 8009992:	461c      	mov	r4, r3
 8009994:	e7f3      	b.n	800997e <__assert_func+0x12>
 8009996:	bf00      	nop
 8009998:	20000010 	.word	0x20000010
 800999c:	0800b375 	.word	0x0800b375
 80099a0:	0800b382 	.word	0x0800b382
 80099a4:	0800b3b0 	.word	0x0800b3b0

080099a8 <_close_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_close_r+0x1c>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f9 fd9b 	bl	80034ee <_close>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_close_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_close_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2000042c 	.word	0x2000042c

080099c8 <fiprintf>:
 80099c8:	b40e      	push	{r1, r2, r3}
 80099ca:	b503      	push	{r0, r1, lr}
 80099cc:	4601      	mov	r1, r0
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	4805      	ldr	r0, [pc, #20]	; (80099e8 <fiprintf+0x20>)
 80099d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	f7ff fe31 	bl	8009640 <_vfiprintf_r>
 80099de:	b002      	add	sp, #8
 80099e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e4:	b003      	add	sp, #12
 80099e6:	4770      	bx	lr
 80099e8:	20000010 	.word	0x20000010

080099ec <_fstat_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	; (8009a0c <_fstat_r+0x20>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	f7f9 fd84 	bl	8003506 <_fstat>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d102      	bne.n	8009a08 <_fstat_r+0x1c>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	b103      	cbz	r3, 8009a08 <_fstat_r+0x1c>
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	bf00      	nop
 8009a0c:	2000042c 	.word	0x2000042c

08009a10 <_isatty_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	; (8009a2c <_isatty_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7f9 fd83 	bl	8003526 <_isatty>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_isatty_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_isatty_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	2000042c 	.word	0x2000042c

08009a30 <_lseek_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d07      	ldr	r5, [pc, #28]	; (8009a50 <_lseek_r+0x20>)
 8009a34:	4604      	mov	r4, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	602a      	str	r2, [r5, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f9 fd7c 	bl	800353c <_lseek>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_lseek_r+0x1e>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_lseek_r+0x1e>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	2000042c 	.word	0x2000042c

08009a54 <__ascii_mbtowc>:
 8009a54:	b082      	sub	sp, #8
 8009a56:	b901      	cbnz	r1, 8009a5a <__ascii_mbtowc+0x6>
 8009a58:	a901      	add	r1, sp, #4
 8009a5a:	b142      	cbz	r2, 8009a6e <__ascii_mbtowc+0x1a>
 8009a5c:	b14b      	cbz	r3, 8009a72 <__ascii_mbtowc+0x1e>
 8009a5e:	7813      	ldrb	r3, [r2, #0]
 8009a60:	600b      	str	r3, [r1, #0]
 8009a62:	7812      	ldrb	r2, [r2, #0]
 8009a64:	1e10      	subs	r0, r2, #0
 8009a66:	bf18      	it	ne
 8009a68:	2001      	movne	r0, #1
 8009a6a:	b002      	add	sp, #8
 8009a6c:	4770      	bx	lr
 8009a6e:	4610      	mov	r0, r2
 8009a70:	e7fb      	b.n	8009a6a <__ascii_mbtowc+0x16>
 8009a72:	f06f 0001 	mvn.w	r0, #1
 8009a76:	e7f8      	b.n	8009a6a <__ascii_mbtowc+0x16>

08009a78 <__malloc_lock>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__malloc_lock+0x8>)
 8009a7a:	f7ff b8c0 	b.w	8008bfe <__retarget_lock_acquire_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20000420 	.word	0x20000420

08009a84 <__malloc_unlock>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__malloc_unlock+0x8>)
 8009a86:	f7ff b8bb 	b.w	8008c00 <__retarget_lock_release_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20000420 	.word	0x20000420

08009a90 <_read_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	; (8009ab0 <_read_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f9 fcec 	bl	800347c <_read>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_read_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_read_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	2000042c 	.word	0x2000042c

08009ab4 <__ascii_wctomb>:
 8009ab4:	b149      	cbz	r1, 8009aca <__ascii_wctomb+0x16>
 8009ab6:	2aff      	cmp	r2, #255	; 0xff
 8009ab8:	bf85      	ittet	hi
 8009aba:	238a      	movhi	r3, #138	; 0x8a
 8009abc:	6003      	strhi	r3, [r0, #0]
 8009abe:	700a      	strbls	r2, [r1, #0]
 8009ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ac4:	bf98      	it	ls
 8009ac6:	2001      	movls	r0, #1
 8009ac8:	4770      	bx	lr
 8009aca:	4608      	mov	r0, r1
 8009acc:	4770      	bx	lr

08009ace <abort>:
 8009ace:	b508      	push	{r3, lr}
 8009ad0:	2006      	movs	r0, #6
 8009ad2:	f000 f82b 	bl	8009b2c <raise>
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	f7f9 fcc6 	bl	8003468 <_exit>

08009adc <_raise_r>:
 8009adc:	291f      	cmp	r1, #31
 8009ade:	b538      	push	{r3, r4, r5, lr}
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	d904      	bls.n	8009af0 <_raise_r+0x14>
 8009ae6:	2316      	movs	r3, #22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	f04f 30ff 	mov.w	r0, #4294967295
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009af2:	b112      	cbz	r2, 8009afa <_raise_r+0x1e>
 8009af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009af8:	b94b      	cbnz	r3, 8009b0e <_raise_r+0x32>
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f830 	bl	8009b60 <_getpid_r>
 8009b00:	462a      	mov	r2, r5
 8009b02:	4601      	mov	r1, r0
 8009b04:	4620      	mov	r0, r4
 8009b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0a:	f000 b817 	b.w	8009b3c <_kill_r>
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d00a      	beq.n	8009b28 <_raise_r+0x4c>
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	d103      	bne.n	8009b1e <_raise_r+0x42>
 8009b16:	2316      	movs	r3, #22
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	e7e7      	b.n	8009aee <_raise_r+0x12>
 8009b1e:	2400      	movs	r4, #0
 8009b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b24:	4628      	mov	r0, r5
 8009b26:	4798      	blx	r3
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7e0      	b.n	8009aee <_raise_r+0x12>

08009b2c <raise>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <raise+0xc>)
 8009b2e:	4601      	mov	r1, r0
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f7ff bfd3 	b.w	8009adc <_raise_r>
 8009b36:	bf00      	nop
 8009b38:	20000010 	.word	0x20000010

08009b3c <_kill_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	; (8009b5c <_kill_r+0x20>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	4611      	mov	r1, r2
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	f7f9 fc7d 	bl	8003448 <_kill>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	d102      	bne.n	8009b58 <_kill_r+0x1c>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	b103      	cbz	r3, 8009b58 <_kill_r+0x1c>
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	bf00      	nop
 8009b5c:	2000042c 	.word	0x2000042c

08009b60 <_getpid_r>:
 8009b60:	f7f9 bc6a 	b.w	8003438 <_getpid>

08009b64 <pow>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	ed2d 8b02 	vpush	{d8}
 8009b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8009b6e:	eef0 8a60 	vmov.f32	s17, s1
 8009b72:	ec55 4b11 	vmov	r4, r5, d1
 8009b76:	f000 f867 	bl	8009c48 <__ieee754_pow>
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	462b      	mov	r3, r5
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	ec57 6b10 	vmov	r6, r7, d0
 8009b86:	f7f6 ffd1 	bl	8000b2c <__aeabi_dcmpun>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d13b      	bne.n	8009c06 <pow+0xa2>
 8009b8e:	ec51 0b18 	vmov	r0, r1, d8
 8009b92:	2200      	movs	r2, #0
 8009b94:	2300      	movs	r3, #0
 8009b96:	f7f6 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b9a:	b1b8      	cbz	r0, 8009bcc <pow+0x68>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f7f6 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d146      	bne.n	8009c3a <pow+0xd6>
 8009bac:	ec45 4b10 	vmov	d0, r4, r5
 8009bb0:	f000 fe63 	bl	800a87a <finite>
 8009bb4:	b338      	cbz	r0, 8009c06 <pow+0xa2>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 ff8d 	bl	8000adc <__aeabi_dcmplt>
 8009bc2:	b300      	cbz	r0, 8009c06 <pow+0xa2>
 8009bc4:	f7fd f9fa 	bl	8006fbc <__errno>
 8009bc8:	2322      	movs	r3, #34	; 0x22
 8009bca:	e01b      	b.n	8009c04 <pow+0xa0>
 8009bcc:	ec47 6b10 	vmov	d0, r6, r7
 8009bd0:	f000 fe53 	bl	800a87a <finite>
 8009bd4:	b9e0      	cbnz	r0, 8009c10 <pow+0xac>
 8009bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8009bda:	eef0 0a68 	vmov.f32	s1, s17
 8009bde:	f000 fe4c 	bl	800a87a <finite>
 8009be2:	b1a8      	cbz	r0, 8009c10 <pow+0xac>
 8009be4:	ec45 4b10 	vmov	d0, r4, r5
 8009be8:	f000 fe47 	bl	800a87a <finite>
 8009bec:	b180      	cbz	r0, 8009c10 <pow+0xac>
 8009bee:	4632      	mov	r2, r6
 8009bf0:	463b      	mov	r3, r7
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	f7f6 ff99 	bl	8000b2c <__aeabi_dcmpun>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0e2      	beq.n	8009bc4 <pow+0x60>
 8009bfe:	f7fd f9dd 	bl	8006fbc <__errno>
 8009c02:	2321      	movs	r3, #33	; 0x21
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	ecbd 8b02 	vpop	{d8}
 8009c0a:	ec47 6b10 	vmov	d0, r6, r7
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f7f6 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d0f2      	beq.n	8009c06 <pow+0xa2>
 8009c20:	eeb0 0a48 	vmov.f32	s0, s16
 8009c24:	eef0 0a68 	vmov.f32	s1, s17
 8009c28:	f000 fe27 	bl	800a87a <finite>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0ea      	beq.n	8009c06 <pow+0xa2>
 8009c30:	ec45 4b10 	vmov	d0, r4, r5
 8009c34:	f000 fe21 	bl	800a87a <finite>
 8009c38:	e7c3      	b.n	8009bc2 <pow+0x5e>
 8009c3a:	4f01      	ldr	r7, [pc, #4]	; (8009c40 <pow+0xdc>)
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	e7e2      	b.n	8009c06 <pow+0xa2>
 8009c40:	3ff00000 	.word	0x3ff00000
 8009c44:	00000000 	.word	0x00000000

08009c48 <__ieee754_pow>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	ed2d 8b06 	vpush	{d8-d10}
 8009c50:	b089      	sub	sp, #36	; 0x24
 8009c52:	ed8d 1b00 	vstr	d1, [sp]
 8009c56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009c5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009c5e:	ea58 0102 	orrs.w	r1, r8, r2
 8009c62:	ec57 6b10 	vmov	r6, r7, d0
 8009c66:	d115      	bne.n	8009c94 <__ieee754_pow+0x4c>
 8009c68:	19b3      	adds	r3, r6, r6
 8009c6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009c6e:	4152      	adcs	r2, r2
 8009c70:	4299      	cmp	r1, r3
 8009c72:	4b89      	ldr	r3, [pc, #548]	; (8009e98 <__ieee754_pow+0x250>)
 8009c74:	4193      	sbcs	r3, r2
 8009c76:	f080 84d2 	bcs.w	800a61e <__ieee754_pow+0x9d6>
 8009c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fb03 	bl	800028c <__adddf3>
 8009c86:	ec41 0b10 	vmov	d0, r0, r1
 8009c8a:	b009      	add	sp, #36	; 0x24
 8009c8c:	ecbd 8b06 	vpop	{d8-d10}
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	4b81      	ldr	r3, [pc, #516]	; (8009e9c <__ieee754_pow+0x254>)
 8009c96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	ee10 aa10 	vmov	sl, s0
 8009ca0:	463d      	mov	r5, r7
 8009ca2:	dc06      	bgt.n	8009cb2 <__ieee754_pow+0x6a>
 8009ca4:	d101      	bne.n	8009caa <__ieee754_pow+0x62>
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	d1e7      	bne.n	8009c7a <__ieee754_pow+0x32>
 8009caa:	4598      	cmp	r8, r3
 8009cac:	dc01      	bgt.n	8009cb2 <__ieee754_pow+0x6a>
 8009cae:	d10f      	bne.n	8009cd0 <__ieee754_pow+0x88>
 8009cb0:	b172      	cbz	r2, 8009cd0 <__ieee754_pow+0x88>
 8009cb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009cb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009cba:	ea55 050a 	orrs.w	r5, r5, sl
 8009cbe:	d1dc      	bne.n	8009c7a <__ieee754_pow+0x32>
 8009cc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cc4:	18db      	adds	r3, r3, r3
 8009cc6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009cca:	4152      	adcs	r2, r2
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	e7d0      	b.n	8009c72 <__ieee754_pow+0x2a>
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	da3b      	bge.n	8009d4c <__ieee754_pow+0x104>
 8009cd4:	4b72      	ldr	r3, [pc, #456]	; (8009ea0 <__ieee754_pow+0x258>)
 8009cd6:	4598      	cmp	r8, r3
 8009cd8:	dc51      	bgt.n	8009d7e <__ieee754_pow+0x136>
 8009cda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009cde:	4598      	cmp	r8, r3
 8009ce0:	f340 84ac 	ble.w	800a63c <__ieee754_pow+0x9f4>
 8009ce4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ce8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009cec:	2b14      	cmp	r3, #20
 8009cee:	dd0f      	ble.n	8009d10 <__ieee754_pow+0xc8>
 8009cf0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009cf4:	fa22 f103 	lsr.w	r1, r2, r3
 8009cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	f040 849d 	bne.w	800a63c <__ieee754_pow+0x9f4>
 8009d02:	f001 0101 	and.w	r1, r1, #1
 8009d06:	f1c1 0302 	rsb	r3, r1, #2
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	b182      	cbz	r2, 8009d30 <__ieee754_pow+0xe8>
 8009d0e:	e05f      	b.n	8009dd0 <__ieee754_pow+0x188>
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	d15b      	bne.n	8009dcc <__ieee754_pow+0x184>
 8009d14:	f1c3 0314 	rsb	r3, r3, #20
 8009d18:	fa48 f103 	asr.w	r1, r8, r3
 8009d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d20:	4543      	cmp	r3, r8
 8009d22:	f040 8488 	bne.w	800a636 <__ieee754_pow+0x9ee>
 8009d26:	f001 0101 	and.w	r1, r1, #1
 8009d2a:	f1c1 0302 	rsb	r3, r1, #2
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	4b5c      	ldr	r3, [pc, #368]	; (8009ea4 <__ieee754_pow+0x25c>)
 8009d32:	4598      	cmp	r8, r3
 8009d34:	d132      	bne.n	8009d9c <__ieee754_pow+0x154>
 8009d36:	f1b9 0f00 	cmp.w	r9, #0
 8009d3a:	f280 8478 	bge.w	800a62e <__ieee754_pow+0x9e6>
 8009d3e:	4959      	ldr	r1, [pc, #356]	; (8009ea4 <__ieee754_pow+0x25c>)
 8009d40:	4632      	mov	r2, r6
 8009d42:	463b      	mov	r3, r7
 8009d44:	2000      	movs	r0, #0
 8009d46:	f7f6 fd81 	bl	800084c <__aeabi_ddiv>
 8009d4a:	e79c      	b.n	8009c86 <__ieee754_pow+0x3e>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	d13d      	bne.n	8009dd0 <__ieee754_pow+0x188>
 8009d54:	4b51      	ldr	r3, [pc, #324]	; (8009e9c <__ieee754_pow+0x254>)
 8009d56:	4598      	cmp	r8, r3
 8009d58:	d1ea      	bne.n	8009d30 <__ieee754_pow+0xe8>
 8009d5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009d5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d62:	ea53 030a 	orrs.w	r3, r3, sl
 8009d66:	f000 845a 	beq.w	800a61e <__ieee754_pow+0x9d6>
 8009d6a:	4b4f      	ldr	r3, [pc, #316]	; (8009ea8 <__ieee754_pow+0x260>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	dd08      	ble.n	8009d82 <__ieee754_pow+0x13a>
 8009d70:	f1b9 0f00 	cmp.w	r9, #0
 8009d74:	f2c0 8457 	blt.w	800a626 <__ieee754_pow+0x9de>
 8009d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d7c:	e783      	b.n	8009c86 <__ieee754_pow+0x3e>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e7e5      	b.n	8009d4e <__ieee754_pow+0x106>
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	f04f 0000 	mov.w	r0, #0
 8009d8a:	f04f 0100 	mov.w	r1, #0
 8009d8e:	f6bf af7a 	bge.w	8009c86 <__ieee754_pow+0x3e>
 8009d92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009d96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d9a:	e774      	b.n	8009c86 <__ieee754_pow+0x3e>
 8009d9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009da0:	d106      	bne.n	8009db0 <__ieee754_pow+0x168>
 8009da2:	4632      	mov	r2, r6
 8009da4:	463b      	mov	r3, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	e76a      	b.n	8009c86 <__ieee754_pow+0x3e>
 8009db0:	4b3e      	ldr	r3, [pc, #248]	; (8009eac <__ieee754_pow+0x264>)
 8009db2:	4599      	cmp	r9, r3
 8009db4:	d10c      	bne.n	8009dd0 <__ieee754_pow+0x188>
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	db0a      	blt.n	8009dd0 <__ieee754_pow+0x188>
 8009dba:	ec47 6b10 	vmov	d0, r6, r7
 8009dbe:	b009      	add	sp, #36	; 0x24
 8009dc0:	ecbd 8b06 	vpop	{d8-d10}
 8009dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	f000 bc6c 	b.w	800a6a4 <__ieee754_sqrt>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	ec47 6b10 	vmov	d0, r6, r7
 8009dd4:	f000 fd48 	bl	800a868 <fabs>
 8009dd8:	ec51 0b10 	vmov	r0, r1, d0
 8009ddc:	f1ba 0f00 	cmp.w	sl, #0
 8009de0:	d129      	bne.n	8009e36 <__ieee754_pow+0x1ee>
 8009de2:	b124      	cbz	r4, 8009dee <__ieee754_pow+0x1a6>
 8009de4:	4b2f      	ldr	r3, [pc, #188]	; (8009ea4 <__ieee754_pow+0x25c>)
 8009de6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d123      	bne.n	8009e36 <__ieee754_pow+0x1ee>
 8009dee:	f1b9 0f00 	cmp.w	r9, #0
 8009df2:	da05      	bge.n	8009e00 <__ieee754_pow+0x1b8>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	2000      	movs	r0, #0
 8009dfa:	492a      	ldr	r1, [pc, #168]	; (8009ea4 <__ieee754_pow+0x25c>)
 8009dfc:	f7f6 fd26 	bl	800084c <__aeabi_ddiv>
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	f6bf af40 	bge.w	8009c86 <__ieee754_pow+0x3e>
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e10:	4323      	orrs	r3, r4
 8009e12:	d108      	bne.n	8009e26 <__ieee754_pow+0x1de>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f7f6 fa34 	bl	8000288 <__aeabi_dsub>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	e78f      	b.n	8009d46 <__ieee754_pow+0xfe>
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	f47f af2c 	bne.w	8009c86 <__ieee754_pow+0x3e>
 8009e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e32:	4619      	mov	r1, r3
 8009e34:	e727      	b.n	8009c86 <__ieee754_pow+0x3e>
 8009e36:	0feb      	lsrs	r3, r5, #31
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	9306      	str	r3, [sp, #24]
 8009e3c:	9a06      	ldr	r2, [sp, #24]
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	d102      	bne.n	8009e4a <__ieee754_pow+0x202>
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	e7e6      	b.n	8009e18 <__ieee754_pow+0x1d0>
 8009e4a:	4b19      	ldr	r3, [pc, #100]	; (8009eb0 <__ieee754_pow+0x268>)
 8009e4c:	4598      	cmp	r8, r3
 8009e4e:	f340 80fb 	ble.w	800a048 <__ieee754_pow+0x400>
 8009e52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e56:	4598      	cmp	r8, r3
 8009e58:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <__ieee754_pow+0x260>)
 8009e5a:	dd0c      	ble.n	8009e76 <__ieee754_pow+0x22e>
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	dc0f      	bgt.n	8009e80 <__ieee754_pow+0x238>
 8009e60:	f1b9 0f00 	cmp.w	r9, #0
 8009e64:	da0f      	bge.n	8009e86 <__ieee754_pow+0x23e>
 8009e66:	2000      	movs	r0, #0
 8009e68:	b009      	add	sp, #36	; 0x24
 8009e6a:	ecbd 8b06 	vpop	{d8-d10}
 8009e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e72:	f000 bcf0 	b.w	800a856 <__math_oflow>
 8009e76:	429c      	cmp	r4, r3
 8009e78:	dbf2      	blt.n	8009e60 <__ieee754_pow+0x218>
 8009e7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <__ieee754_pow+0x25c>)
 8009e7c:	429c      	cmp	r4, r3
 8009e7e:	dd19      	ble.n	8009eb4 <__ieee754_pow+0x26c>
 8009e80:	f1b9 0f00 	cmp.w	r9, #0
 8009e84:	dcef      	bgt.n	8009e66 <__ieee754_pow+0x21e>
 8009e86:	2000      	movs	r0, #0
 8009e88:	b009      	add	sp, #36	; 0x24
 8009e8a:	ecbd 8b06 	vpop	{d8-d10}
 8009e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e92:	f000 bcd7 	b.w	800a844 <__math_uflow>
 8009e96:	bf00      	nop
 8009e98:	fff00000 	.word	0xfff00000
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	433fffff 	.word	0x433fffff
 8009ea4:	3ff00000 	.word	0x3ff00000
 8009ea8:	3fefffff 	.word	0x3fefffff
 8009eac:	3fe00000 	.word	0x3fe00000
 8009eb0:	41e00000 	.word	0x41e00000
 8009eb4:	4b60      	ldr	r3, [pc, #384]	; (800a038 <__ieee754_pow+0x3f0>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f7f6 f9e6 	bl	8000288 <__aeabi_dsub>
 8009ebc:	a354      	add	r3, pc, #336	; (adr r3, 800a010 <__ieee754_pow+0x3c8>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	f7f6 fb97 	bl	80005f8 <__aeabi_dmul>
 8009eca:	a353      	add	r3, pc, #332	; (adr r3, 800a018 <__ieee754_pow+0x3d0>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 fb8e 	bl	80005f8 <__aeabi_dmul>
 8009edc:	4b57      	ldr	r3, [pc, #348]	; (800a03c <__ieee754_pow+0x3f4>)
 8009ede:	4682      	mov	sl, r0
 8009ee0:	468b      	mov	fp, r1
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fb86 	bl	80005f8 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	a14b      	add	r1, pc, #300	; (adr r1, 800a020 <__ieee754_pow+0x3d8>)
 8009ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	4622      	mov	r2, r4
 8009efc:	462b      	mov	r3, r5
 8009efe:	f7f6 fb7b 	bl	80005f8 <__aeabi_dmul>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	2000      	movs	r0, #0
 8009f08:	494d      	ldr	r1, [pc, #308]	; (800a040 <__ieee754_pow+0x3f8>)
 8009f0a:	f7f6 f9bd 	bl	8000288 <__aeabi_dsub>
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4680      	mov	r8, r0
 8009f12:	4689      	mov	r9, r1
 8009f14:	462b      	mov	r3, r5
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f7f6 fb67 	bl	80005f8 <__aeabi_dmul>
 8009f2a:	a33f      	add	r3, pc, #252	; (adr r3, 800a028 <__ieee754_pow+0x3e0>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fb62 	bl	80005f8 <__aeabi_dmul>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4650      	mov	r0, sl
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	f7f6 f9a4 	bl	8000288 <__aeabi_dsub>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f7f6 f99e 	bl	800028c <__adddf3>
 8009f50:	2000      	movs	r0, #0
 8009f52:	4632      	mov	r2, r6
 8009f54:	463b      	mov	r3, r7
 8009f56:	4604      	mov	r4, r0
 8009f58:	460d      	mov	r5, r1
 8009f5a:	f7f6 f995 	bl	8000288 <__aeabi_dsub>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 f98f 	bl	8000288 <__aeabi_dsub>
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	9a06      	ldr	r2, [sp, #24]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4313      	orrs	r3, r2
 8009f72:	4682      	mov	sl, r0
 8009f74:	468b      	mov	fp, r1
 8009f76:	f040 81e7 	bne.w	800a348 <__ieee754_pow+0x700>
 8009f7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a030 <__ieee754_pow+0x3e8>
 8009f7e:	eeb0 8a47 	vmov.f32	s16, s14
 8009f82:	eef0 8a67 	vmov.f32	s17, s15
 8009f86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f8a:	2600      	movs	r6, #0
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	463b      	mov	r3, r7
 8009f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f94:	f7f6 f978 	bl	8000288 <__aeabi_dsub>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4689      	mov	r9, r1
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4659      	mov	r1, fp
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	f7f6 f968 	bl	800028c <__adddf3>
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4689      	mov	r9, r1
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 fb16 	bl	80005f8 <__aeabi_dmul>
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f7f6 f958 	bl	800028c <__adddf3>
 8009fdc:	4b19      	ldr	r3, [pc, #100]	; (800a044 <__ieee754_pow+0x3fc>)
 8009fde:	4299      	cmp	r1, r3
 8009fe0:	ec45 4b19 	vmov	d9, r4, r5
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	468b      	mov	fp, r1
 8009fea:	f340 82f1 	ble.w	800a5d0 <__ieee754_pow+0x988>
 8009fee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009ff2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ff6:	4303      	orrs	r3, r0
 8009ff8:	f000 81e4 	beq.w	800a3c4 <__ieee754_pow+0x77c>
 8009ffc:	ec51 0b18 	vmov	r0, r1, d8
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	f7f6 fd6a 	bl	8000adc <__aeabi_dcmplt>
 800a008:	3800      	subs	r0, #0
 800a00a:	bf18      	it	ne
 800a00c:	2001      	movne	r0, #1
 800a00e:	e72b      	b.n	8009e68 <__ieee754_pow+0x220>
 800a010:	60000000 	.word	0x60000000
 800a014:	3ff71547 	.word	0x3ff71547
 800a018:	f85ddf44 	.word	0xf85ddf44
 800a01c:	3e54ae0b 	.word	0x3e54ae0b
 800a020:	55555555 	.word	0x55555555
 800a024:	3fd55555 	.word	0x3fd55555
 800a028:	652b82fe 	.word	0x652b82fe
 800a02c:	3ff71547 	.word	0x3ff71547
 800a030:	00000000 	.word	0x00000000
 800a034:	bff00000 	.word	0xbff00000
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	3fd00000 	.word	0x3fd00000
 800a040:	3fe00000 	.word	0x3fe00000
 800a044:	408fffff 	.word	0x408fffff
 800a048:	4bd5      	ldr	r3, [pc, #852]	; (800a3a0 <__ieee754_pow+0x758>)
 800a04a:	402b      	ands	r3, r5
 800a04c:	2200      	movs	r2, #0
 800a04e:	b92b      	cbnz	r3, 800a05c <__ieee754_pow+0x414>
 800a050:	4bd4      	ldr	r3, [pc, #848]	; (800a3a4 <__ieee754_pow+0x75c>)
 800a052:	f7f6 fad1 	bl	80005f8 <__aeabi_dmul>
 800a056:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a05a:	460c      	mov	r4, r1
 800a05c:	1523      	asrs	r3, r4, #20
 800a05e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a062:	4413      	add	r3, r2
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	4bd0      	ldr	r3, [pc, #832]	; (800a3a8 <__ieee754_pow+0x760>)
 800a068:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a06c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a070:	429c      	cmp	r4, r3
 800a072:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a076:	dd08      	ble.n	800a08a <__ieee754_pow+0x442>
 800a078:	4bcc      	ldr	r3, [pc, #816]	; (800a3ac <__ieee754_pow+0x764>)
 800a07a:	429c      	cmp	r4, r3
 800a07c:	f340 8162 	ble.w	800a344 <__ieee754_pow+0x6fc>
 800a080:	9b05      	ldr	r3, [sp, #20]
 800a082:	3301      	adds	r3, #1
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a08a:	2400      	movs	r4, #0
 800a08c:	00e3      	lsls	r3, r4, #3
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	4bc7      	ldr	r3, [pc, #796]	; (800a3b0 <__ieee754_pow+0x768>)
 800a092:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a096:	ed93 7b00 	vldr	d7, [r3]
 800a09a:	4629      	mov	r1, r5
 800a09c:	ec53 2b17 	vmov	r2, r3, d7
 800a0a0:	eeb0 9a47 	vmov.f32	s18, s14
 800a0a4:	eef0 9a67 	vmov.f32	s19, s15
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	f7f6 f8ed 	bl	8000288 <__aeabi_dsub>
 800a0ae:	4652      	mov	r2, sl
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	ec51 0b19 	vmov	r0, r1, d9
 800a0ba:	f7f6 f8e7 	bl	800028c <__adddf3>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	49bb      	ldr	r1, [pc, #748]	; (800a3b4 <__ieee754_pow+0x76c>)
 800a0c6:	f7f6 fbc1 	bl	800084c <__aeabi_ddiv>
 800a0ca:	ec41 0b1a 	vmov	d10, r0, r1
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 fa8f 	bl	80005f8 <__aeabi_dmul>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0e6:	46ab      	mov	fp, r5
 800a0e8:	106d      	asrs	r5, r5, #1
 800a0ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0f2:	ec41 0b18 	vmov	d8, r0, r1
 800a0f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	4614      	mov	r4, r2
 800a102:	461d      	mov	r5, r3
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4630      	mov	r0, r6
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 f8ba 	bl	8000288 <__aeabi_dsub>
 800a114:	ec53 2b19 	vmov	r2, r3, d9
 800a118:	4606      	mov	r6, r0
 800a11a:	460f      	mov	r7, r1
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 f8b2 	bl	8000288 <__aeabi_dsub>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4650      	mov	r0, sl
 800a12a:	4659      	mov	r1, fp
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	f7f6 fa60 	bl	80005f8 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4630      	mov	r0, r6
 800a13e:	4639      	mov	r1, r7
 800a140:	f7f6 f8a2 	bl	8000288 <__aeabi_dsub>
 800a144:	ec53 2b1a 	vmov	r2, r3, d10
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	ec53 2b18 	vmov	r2, r3, d8
 800a150:	ec41 0b19 	vmov	d9, r0, r1
 800a154:	ec51 0b18 	vmov	r0, r1, d8
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	a37c      	add	r3, pc, #496	; (adr r3, 800a350 <__ieee754_pow+0x708>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
 800a166:	f7f6 fa47 	bl	80005f8 <__aeabi_dmul>
 800a16a:	a37b      	add	r3, pc, #492	; (adr r3, 800a358 <__ieee754_pow+0x710>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 f88c 	bl	800028c <__adddf3>
 800a174:	4622      	mov	r2, r4
 800a176:	462b      	mov	r3, r5
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	a378      	add	r3, pc, #480	; (adr r3, 800a360 <__ieee754_pow+0x718>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f883 	bl	800028c <__adddf3>
 800a186:	4622      	mov	r2, r4
 800a188:	462b      	mov	r3, r5
 800a18a:	f7f6 fa35 	bl	80005f8 <__aeabi_dmul>
 800a18e:	a376      	add	r3, pc, #472	; (adr r3, 800a368 <__ieee754_pow+0x720>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f7f6 f87a 	bl	800028c <__adddf3>
 800a198:	4622      	mov	r2, r4
 800a19a:	462b      	mov	r3, r5
 800a19c:	f7f6 fa2c 	bl	80005f8 <__aeabi_dmul>
 800a1a0:	a373      	add	r3, pc, #460	; (adr r3, 800a370 <__ieee754_pow+0x728>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	462b      	mov	r3, r5
 800a1ae:	f7f6 fa23 	bl	80005f8 <__aeabi_dmul>
 800a1b2:	a371      	add	r3, pc, #452	; (adr r3, 800a378 <__ieee754_pow+0x730>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	f7f6 f868 	bl	800028c <__adddf3>
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 fa16 	bl	80005f8 <__aeabi_dmul>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f7f6 fa10 	bl	80005f8 <__aeabi_dmul>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	4604      	mov	r4, r0
 800a1dc:	460d      	mov	r5, r1
 800a1de:	464b      	mov	r3, r9
 800a1e0:	ec51 0b18 	vmov	r0, r1, d8
 800a1e4:	f7f6 f852 	bl	800028c <__adddf3>
 800a1e8:	ec53 2b19 	vmov	r2, r3, d9
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	f7f6 f84a 	bl	800028c <__adddf3>
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	4682      	mov	sl, r0
 800a1fc:	468b      	mov	fp, r1
 800a1fe:	464b      	mov	r3, r9
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	4b6b      	ldr	r3, [pc, #428]	; (800a3b8 <__ieee754_pow+0x770>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	f7f6 f83c 	bl	800028c <__adddf3>
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	f7f6 f838 	bl	800028c <__adddf3>
 800a21c:	2000      	movs	r0, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4640      	mov	r0, r8
 800a228:	4649      	mov	r1, r9
 800a22a:	f7f6 f9e5 	bl	80005f8 <__aeabi_dmul>
 800a22e:	4b62      	ldr	r3, [pc, #392]	; (800a3b8 <__ieee754_pow+0x770>)
 800a230:	4680      	mov	r8, r0
 800a232:	4689      	mov	r9, r1
 800a234:	2200      	movs	r2, #0
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f825 	bl	8000288 <__aeabi_dsub>
 800a23e:	4632      	mov	r2, r6
 800a240:	463b      	mov	r3, r7
 800a242:	f7f6 f821 	bl	8000288 <__aeabi_dsub>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4650      	mov	r0, sl
 800a24c:	4659      	mov	r1, fp
 800a24e:	f7f6 f81b 	bl	8000288 <__aeabi_dsub>
 800a252:	ec53 2b18 	vmov	r2, r3, d8
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	4622      	mov	r2, r4
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	462b      	mov	r3, r5
 800a262:	ec51 0b19 	vmov	r0, r1, d9
 800a266:	f7f6 f9c7 	bl	80005f8 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4630      	mov	r0, r6
 800a270:	4639      	mov	r1, r7
 800a272:	f7f6 f80b 	bl	800028c <__adddf3>
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4640      	mov	r0, r8
 800a280:	4649      	mov	r1, r9
 800a282:	f7f6 f803 	bl	800028c <__adddf3>
 800a286:	a33e      	add	r3, pc, #248	; (adr r3, 800a380 <__ieee754_pow+0x738>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	2000      	movs	r0, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	460d      	mov	r5, r1
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	4642      	mov	r2, r8
 800a298:	ec41 0b18 	vmov	d8, r0, r1
 800a29c:	464b      	mov	r3, r9
 800a29e:	4620      	mov	r0, r4
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7f5 fff1 	bl	8000288 <__aeabi_dsub>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	a335      	add	r3, pc, #212	; (adr r3, 800a388 <__ieee754_pow+0x740>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	a334      	add	r3, pc, #208	; (adr r3, 800a390 <__ieee754_pow+0x748>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	f7f5 ffd9 	bl	800028c <__adddf3>
 800a2da:	9a07      	ldr	r2, [sp, #28]
 800a2dc:	4b37      	ldr	r3, [pc, #220]	; (800a3bc <__ieee754_pow+0x774>)
 800a2de:	4413      	add	r3, r2
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	9805      	ldr	r0, [sp, #20]
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	f7f6 f919 	bl	8000524 <__aeabi_i2d>
 800a2f2:	9a07      	ldr	r2, [sp, #28]
 800a2f4:	4b32      	ldr	r3, [pc, #200]	; (800a3c0 <__ieee754_pow+0x778>)
 800a2f6:	4413      	add	r3, r2
 800a2f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	4652      	mov	r2, sl
 800a302:	465b      	mov	r3, fp
 800a304:	ec51 0b18 	vmov	r0, r1, d8
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	4642      	mov	r2, r8
 800a30e:	464b      	mov	r3, r9
 800a310:	f7f5 ffbc 	bl	800028c <__adddf3>
 800a314:	4632      	mov	r2, r6
 800a316:	463b      	mov	r3, r7
 800a318:	f7f5 ffb8 	bl	800028c <__adddf3>
 800a31c:	2000      	movs	r0, #0
 800a31e:	4632      	mov	r2, r6
 800a320:	463b      	mov	r3, r7
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	f7f5 ffaf 	bl	8000288 <__aeabi_dsub>
 800a32a:	4642      	mov	r2, r8
 800a32c:	464b      	mov	r3, r9
 800a32e:	f7f5 ffab 	bl	8000288 <__aeabi_dsub>
 800a332:	ec53 2b18 	vmov	r2, r3, d8
 800a336:	f7f5 ffa7 	bl	8000288 <__aeabi_dsub>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4650      	mov	r0, sl
 800a340:	4659      	mov	r1, fp
 800a342:	e610      	b.n	8009f66 <__ieee754_pow+0x31e>
 800a344:	2401      	movs	r4, #1
 800a346:	e6a1      	b.n	800a08c <__ieee754_pow+0x444>
 800a348:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a398 <__ieee754_pow+0x750>
 800a34c:	e617      	b.n	8009f7e <__ieee754_pow+0x336>
 800a34e:	bf00      	nop
 800a350:	4a454eef 	.word	0x4a454eef
 800a354:	3fca7e28 	.word	0x3fca7e28
 800a358:	93c9db65 	.word	0x93c9db65
 800a35c:	3fcd864a 	.word	0x3fcd864a
 800a360:	a91d4101 	.word	0xa91d4101
 800a364:	3fd17460 	.word	0x3fd17460
 800a368:	518f264d 	.word	0x518f264d
 800a36c:	3fd55555 	.word	0x3fd55555
 800a370:	db6fabff 	.word	0xdb6fabff
 800a374:	3fdb6db6 	.word	0x3fdb6db6
 800a378:	33333303 	.word	0x33333303
 800a37c:	3fe33333 	.word	0x3fe33333
 800a380:	e0000000 	.word	0xe0000000
 800a384:	3feec709 	.word	0x3feec709
 800a388:	dc3a03fd 	.word	0xdc3a03fd
 800a38c:	3feec709 	.word	0x3feec709
 800a390:	145b01f5 	.word	0x145b01f5
 800a394:	be3e2fe0 	.word	0xbe3e2fe0
 800a398:	00000000 	.word	0x00000000
 800a39c:	3ff00000 	.word	0x3ff00000
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	43400000 	.word	0x43400000
 800a3a8:	0003988e 	.word	0x0003988e
 800a3ac:	000bb679 	.word	0x000bb679
 800a3b0:	0800b4c0 	.word	0x0800b4c0
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	40080000 	.word	0x40080000
 800a3bc:	0800b4e0 	.word	0x0800b4e0
 800a3c0:	0800b4d0 	.word	0x0800b4d0
 800a3c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a69c <__ieee754_pow+0xa54>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	f7f5 ff5d 	bl	800028c <__adddf3>
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	ec41 0b1a 	vmov	d10, r0, r1
 800a3d8:	462b      	mov	r3, r5
 800a3da:	4630      	mov	r0, r6
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f5 ff53 	bl	8000288 <__aeabi_dsub>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	ec51 0b1a 	vmov	r0, r1, d10
 800a3ea:	f7f6 fb95 	bl	8000b18 <__aeabi_dcmpgt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f47f ae04 	bne.w	8009ffc <__ieee754_pow+0x3b4>
 800a3f4:	4aa4      	ldr	r2, [pc, #656]	; (800a688 <__ieee754_pow+0xa40>)
 800a3f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	f340 8108 	ble.w	800a610 <__ieee754_pow+0x9c8>
 800a400:	151b      	asrs	r3, r3, #20
 800a402:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a406:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a40a:	fa4a f303 	asr.w	r3, sl, r3
 800a40e:	445b      	add	r3, fp
 800a410:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a414:	4e9d      	ldr	r6, [pc, #628]	; (800a68c <__ieee754_pow+0xa44>)
 800a416:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a41a:	4116      	asrs	r6, r2
 800a41c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a420:	2000      	movs	r0, #0
 800a422:	ea23 0106 	bic.w	r1, r3, r6
 800a426:	f1c2 0214 	rsb	r2, r2, #20
 800a42a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a42e:	fa4a fa02 	asr.w	sl, sl, r2
 800a432:	f1bb 0f00 	cmp.w	fp, #0
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	bfb8      	it	lt
 800a440:	f1ca 0a00 	rsblt	sl, sl, #0
 800a444:	f7f5 ff20 	bl	8000288 <__aeabi_dsub>
 800a448:	ec41 0b19 	vmov	d9, r0, r1
 800a44c:	4642      	mov	r2, r8
 800a44e:	464b      	mov	r3, r9
 800a450:	ec51 0b19 	vmov	r0, r1, d9
 800a454:	f7f5 ff1a 	bl	800028c <__adddf3>
 800a458:	a37b      	add	r3, pc, #492	; (adr r3, 800a648 <__ieee754_pow+0xa00>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	2000      	movs	r0, #0
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	ec53 2b19 	vmov	r2, r3, d9
 800a46c:	4606      	mov	r6, r0
 800a46e:	460f      	mov	r7, r1
 800a470:	4620      	mov	r0, r4
 800a472:	4629      	mov	r1, r5
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f5 ff02 	bl	8000288 <__aeabi_dsub>
 800a484:	a372      	add	r3, pc, #456	; (adr r3, 800a650 <__ieee754_pow+0xa08>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f7f6 f8b5 	bl	80005f8 <__aeabi_dmul>
 800a48e:	a372      	add	r3, pc, #456	; (adr r3, 800a658 <__ieee754_pow+0xa10>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	4680      	mov	r8, r0
 800a496:	4689      	mov	r9, r1
 800a498:	4620      	mov	r0, r4
 800a49a:	4629      	mov	r1, r5
 800a49c:	f7f6 f8ac 	bl	80005f8 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f5 fef0 	bl	800028c <__adddf3>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f7f5 fee8 	bl	800028c <__adddf3>
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4689      	mov	r9, r1
 800a4c4:	f7f5 fee0 	bl	8000288 <__aeabi_dsub>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f5 feda 	bl	8000288 <__aeabi_dsub>
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460f      	mov	r7, r1
 800a4da:	464b      	mov	r3, r9
 800a4dc:	4640      	mov	r0, r8
 800a4de:	4649      	mov	r1, r9
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	a35e      	add	r3, pc, #376	; (adr r3, 800a660 <__ieee754_pow+0xa18>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	460d      	mov	r5, r1
 800a4ee:	f7f6 f883 	bl	80005f8 <__aeabi_dmul>
 800a4f2:	a35d      	add	r3, pc, #372	; (adr r3, 800a668 <__ieee754_pow+0xa20>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f5 fec6 	bl	8000288 <__aeabi_dsub>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	462b      	mov	r3, r5
 800a500:	f7f6 f87a 	bl	80005f8 <__aeabi_dmul>
 800a504:	a35a      	add	r3, pc, #360	; (adr r3, 800a670 <__ieee754_pow+0xa28>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f5 febf 	bl	800028c <__adddf3>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f6 f871 	bl	80005f8 <__aeabi_dmul>
 800a516:	a358      	add	r3, pc, #352	; (adr r3, 800a678 <__ieee754_pow+0xa30>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	a355      	add	r3, pc, #340	; (adr r3, 800a680 <__ieee754_pow+0xa38>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f5 fead 	bl	800028c <__adddf3>
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	f7f6 f85f 	bl	80005f8 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4640      	mov	r0, r8
 800a540:	4649      	mov	r1, r9
 800a542:	f7f5 fea1 	bl	8000288 <__aeabi_dsub>
 800a546:	4604      	mov	r4, r0
 800a548:	460d      	mov	r5, r1
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f6 f851 	bl	80005f8 <__aeabi_dmul>
 800a556:	2200      	movs	r2, #0
 800a558:	ec41 0b19 	vmov	d9, r0, r1
 800a55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	ec51 0b19 	vmov	r0, r1, d9
 800a570:	f7f6 f96c 	bl	800084c <__aeabi_ddiv>
 800a574:	4632      	mov	r2, r6
 800a576:	4604      	mov	r4, r0
 800a578:	460d      	mov	r5, r1
 800a57a:	463b      	mov	r3, r7
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	f7f6 f83a 	bl	80005f8 <__aeabi_dmul>
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	f7f5 fe80 	bl	800028c <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4620      	mov	r0, r4
 800a592:	4629      	mov	r1, r5
 800a594:	f7f5 fe78 	bl	8000288 <__aeabi_dsub>
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	f7f5 fe74 	bl	8000288 <__aeabi_dsub>
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	493a      	ldr	r1, [pc, #232]	; (800a690 <__ieee754_pow+0xa48>)
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	f7f5 fe6e 	bl	8000288 <__aeabi_dsub>
 800a5ac:	ec41 0b10 	vmov	d0, r0, r1
 800a5b0:	ee10 3a90 	vmov	r3, s1
 800a5b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a5b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5bc:	da2b      	bge.n	800a616 <__ieee754_pow+0x9ce>
 800a5be:	4650      	mov	r0, sl
 800a5c0:	f000 f966 	bl	800a890 <scalbn>
 800a5c4:	ec51 0b10 	vmov	r0, r1, d0
 800a5c8:	ec53 2b18 	vmov	r2, r3, d8
 800a5cc:	f7ff bbed 	b.w	8009daa <__ieee754_pow+0x162>
 800a5d0:	4b30      	ldr	r3, [pc, #192]	; (800a694 <__ieee754_pow+0xa4c>)
 800a5d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a5d6:	429e      	cmp	r6, r3
 800a5d8:	f77f af0c 	ble.w	800a3f4 <__ieee754_pow+0x7ac>
 800a5dc:	4b2e      	ldr	r3, [pc, #184]	; (800a698 <__ieee754_pow+0xa50>)
 800a5de:	440b      	add	r3, r1
 800a5e0:	4303      	orrs	r3, r0
 800a5e2:	d009      	beq.n	800a5f8 <__ieee754_pow+0x9b0>
 800a5e4:	ec51 0b18 	vmov	r0, r1, d8
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f7f6 fa76 	bl	8000adc <__aeabi_dcmplt>
 800a5f0:	3800      	subs	r0, #0
 800a5f2:	bf18      	it	ne
 800a5f4:	2001      	movne	r0, #1
 800a5f6:	e447      	b.n	8009e88 <__ieee754_pow+0x240>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	f7f5 fe44 	bl	8000288 <__aeabi_dsub>
 800a600:	4642      	mov	r2, r8
 800a602:	464b      	mov	r3, r9
 800a604:	f7f6 fa7e 	bl	8000b04 <__aeabi_dcmpge>
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f aef3 	beq.w	800a3f4 <__ieee754_pow+0x7ac>
 800a60e:	e7e9      	b.n	800a5e4 <__ieee754_pow+0x99c>
 800a610:	f04f 0a00 	mov.w	sl, #0
 800a614:	e71a      	b.n	800a44c <__ieee754_pow+0x804>
 800a616:	ec51 0b10 	vmov	r0, r1, d0
 800a61a:	4619      	mov	r1, r3
 800a61c:	e7d4      	b.n	800a5c8 <__ieee754_pow+0x980>
 800a61e:	491c      	ldr	r1, [pc, #112]	; (800a690 <__ieee754_pow+0xa48>)
 800a620:	2000      	movs	r0, #0
 800a622:	f7ff bb30 	b.w	8009c86 <__ieee754_pow+0x3e>
 800a626:	2000      	movs	r0, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	f7ff bb2c 	b.w	8009c86 <__ieee754_pow+0x3e>
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	f7ff bb28 	b.w	8009c86 <__ieee754_pow+0x3e>
 800a636:	9204      	str	r2, [sp, #16]
 800a638:	f7ff bb7a 	b.w	8009d30 <__ieee754_pow+0xe8>
 800a63c:	2300      	movs	r3, #0
 800a63e:	f7ff bb64 	b.w	8009d0a <__ieee754_pow+0xc2>
 800a642:	bf00      	nop
 800a644:	f3af 8000 	nop.w
 800a648:	00000000 	.word	0x00000000
 800a64c:	3fe62e43 	.word	0x3fe62e43
 800a650:	fefa39ef 	.word	0xfefa39ef
 800a654:	3fe62e42 	.word	0x3fe62e42
 800a658:	0ca86c39 	.word	0x0ca86c39
 800a65c:	be205c61 	.word	0xbe205c61
 800a660:	72bea4d0 	.word	0x72bea4d0
 800a664:	3e663769 	.word	0x3e663769
 800a668:	c5d26bf1 	.word	0xc5d26bf1
 800a66c:	3ebbbd41 	.word	0x3ebbbd41
 800a670:	af25de2c 	.word	0xaf25de2c
 800a674:	3f11566a 	.word	0x3f11566a
 800a678:	16bebd93 	.word	0x16bebd93
 800a67c:	3f66c16c 	.word	0x3f66c16c
 800a680:	5555553e 	.word	0x5555553e
 800a684:	3fc55555 	.word	0x3fc55555
 800a688:	3fe00000 	.word	0x3fe00000
 800a68c:	000fffff 	.word	0x000fffff
 800a690:	3ff00000 	.word	0x3ff00000
 800a694:	4090cbff 	.word	0x4090cbff
 800a698:	3f6f3400 	.word	0x3f6f3400
 800a69c:	652b82fe 	.word	0x652b82fe
 800a6a0:	3c971547 	.word	0x3c971547

0800a6a4 <__ieee754_sqrt>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	ec55 4b10 	vmov	r4, r5, d0
 800a6ac:	4e55      	ldr	r6, [pc, #340]	; (800a804 <__ieee754_sqrt+0x160>)
 800a6ae:	43ae      	bics	r6, r5
 800a6b0:	ee10 0a10 	vmov	r0, s0
 800a6b4:	ee10 3a10 	vmov	r3, s0
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	d110      	bne.n	800a6e0 <__ieee754_sqrt+0x3c>
 800a6be:	ee10 2a10 	vmov	r2, s0
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fddc 	bl	800028c <__adddf3>
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	ec45 4b10 	vmov	d0, r4, r5
 800a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	dc10      	bgt.n	800a706 <__ieee754_sqrt+0x62>
 800a6e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6e8:	4330      	orrs	r0, r6
 800a6ea:	d0f5      	beq.n	800a6d8 <__ieee754_sqrt+0x34>
 800a6ec:	b15d      	cbz	r5, 800a706 <__ieee754_sqrt+0x62>
 800a6ee:	ee10 2a10 	vmov	r2, s0
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	ee10 0a10 	vmov	r0, s0
 800a6f8:	f7f5 fdc6 	bl	8000288 <__aeabi_dsub>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	f7f6 f8a4 	bl	800084c <__aeabi_ddiv>
 800a704:	e7e6      	b.n	800a6d4 <__ieee754_sqrt+0x30>
 800a706:	1512      	asrs	r2, r2, #20
 800a708:	d074      	beq.n	800a7f4 <__ieee754_sqrt+0x150>
 800a70a:	07d4      	lsls	r4, r2, #31
 800a70c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a710:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a718:	bf5e      	ittt	pl
 800a71a:	0fda      	lsrpl	r2, r3, #31
 800a71c:	005b      	lslpl	r3, r3, #1
 800a71e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a722:	2400      	movs	r4, #0
 800a724:	0fda      	lsrs	r2, r3, #31
 800a726:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a72a:	107f      	asrs	r7, r7, #1
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	2516      	movs	r5, #22
 800a730:	4620      	mov	r0, r4
 800a732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a736:	1886      	adds	r6, r0, r2
 800a738:	428e      	cmp	r6, r1
 800a73a:	bfde      	ittt	le
 800a73c:	1b89      	suble	r1, r1, r6
 800a73e:	18b0      	addle	r0, r6, r2
 800a740:	18a4      	addle	r4, r4, r2
 800a742:	0049      	lsls	r1, r1, #1
 800a744:	3d01      	subs	r5, #1
 800a746:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a74a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a74e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a752:	d1f0      	bne.n	800a736 <__ieee754_sqrt+0x92>
 800a754:	462a      	mov	r2, r5
 800a756:	f04f 0e20 	mov.w	lr, #32
 800a75a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a75e:	4281      	cmp	r1, r0
 800a760:	eb06 0c05 	add.w	ip, r6, r5
 800a764:	dc02      	bgt.n	800a76c <__ieee754_sqrt+0xc8>
 800a766:	d113      	bne.n	800a790 <__ieee754_sqrt+0xec>
 800a768:	459c      	cmp	ip, r3
 800a76a:	d811      	bhi.n	800a790 <__ieee754_sqrt+0xec>
 800a76c:	f1bc 0f00 	cmp.w	ip, #0
 800a770:	eb0c 0506 	add.w	r5, ip, r6
 800a774:	da43      	bge.n	800a7fe <__ieee754_sqrt+0x15a>
 800a776:	2d00      	cmp	r5, #0
 800a778:	db41      	blt.n	800a7fe <__ieee754_sqrt+0x15a>
 800a77a:	f100 0801 	add.w	r8, r0, #1
 800a77e:	1a09      	subs	r1, r1, r0
 800a780:	459c      	cmp	ip, r3
 800a782:	bf88      	it	hi
 800a784:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a788:	eba3 030c 	sub.w	r3, r3, ip
 800a78c:	4432      	add	r2, r6
 800a78e:	4640      	mov	r0, r8
 800a790:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a794:	f1be 0e01 	subs.w	lr, lr, #1
 800a798:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a79c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a7a4:	d1db      	bne.n	800a75e <__ieee754_sqrt+0xba>
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	d006      	beq.n	800a7b8 <__ieee754_sqrt+0x114>
 800a7aa:	1c50      	adds	r0, r2, #1
 800a7ac:	bf13      	iteet	ne
 800a7ae:	3201      	addne	r2, #1
 800a7b0:	3401      	addeq	r4, #1
 800a7b2:	4672      	moveq	r2, lr
 800a7b4:	f022 0201 	bicne.w	r2, r2, #1
 800a7b8:	1063      	asrs	r3, r4, #1
 800a7ba:	0852      	lsrs	r2, r2, #1
 800a7bc:	07e1      	lsls	r1, r4, #31
 800a7be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7c6:	bf48      	it	mi
 800a7c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	e781      	b.n	800a6d8 <__ieee754_sqrt+0x34>
 800a7d4:	0ad9      	lsrs	r1, r3, #11
 800a7d6:	3815      	subs	r0, #21
 800a7d8:	055b      	lsls	r3, r3, #21
 800a7da:	2900      	cmp	r1, #0
 800a7dc:	d0fa      	beq.n	800a7d4 <__ieee754_sqrt+0x130>
 800a7de:	02cd      	lsls	r5, r1, #11
 800a7e0:	d50a      	bpl.n	800a7f8 <__ieee754_sqrt+0x154>
 800a7e2:	f1c2 0420 	rsb	r4, r2, #32
 800a7e6:	fa23 f404 	lsr.w	r4, r3, r4
 800a7ea:	1e55      	subs	r5, r2, #1
 800a7ec:	4093      	lsls	r3, r2
 800a7ee:	4321      	orrs	r1, r4
 800a7f0:	1b42      	subs	r2, r0, r5
 800a7f2:	e78a      	b.n	800a70a <__ieee754_sqrt+0x66>
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	e7f0      	b.n	800a7da <__ieee754_sqrt+0x136>
 800a7f8:	0049      	lsls	r1, r1, #1
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	e7ef      	b.n	800a7de <__ieee754_sqrt+0x13a>
 800a7fe:	4680      	mov	r8, r0
 800a800:	e7bd      	b.n	800a77e <__ieee754_sqrt+0xda>
 800a802:	bf00      	nop
 800a804:	7ff00000 	.word	0x7ff00000

0800a808 <with_errno>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	4604      	mov	r4, r0
 800a80c:	460d      	mov	r5, r1
 800a80e:	4616      	mov	r6, r2
 800a810:	f7fc fbd4 	bl	8006fbc <__errno>
 800a814:	4629      	mov	r1, r5
 800a816:	6006      	str	r6, [r0, #0]
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}

0800a81c <xflow>:
 800a81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a81e:	4614      	mov	r4, r2
 800a820:	461d      	mov	r5, r3
 800a822:	b108      	cbz	r0, 800a828 <xflow+0xc>
 800a824:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a828:	e9cd 2300 	strd	r2, r3, [sp]
 800a82c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a830:	4620      	mov	r0, r4
 800a832:	4629      	mov	r1, r5
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	2222      	movs	r2, #34	; 0x22
 800a83a:	b003      	add	sp, #12
 800a83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a840:	f7ff bfe2 	b.w	800a808 <with_errno>

0800a844 <__math_uflow>:
 800a844:	b508      	push	{r3, lr}
 800a846:	2200      	movs	r2, #0
 800a848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a84c:	f7ff ffe6 	bl	800a81c <xflow>
 800a850:	ec41 0b10 	vmov	d0, r0, r1
 800a854:	bd08      	pop	{r3, pc}

0800a856 <__math_oflow>:
 800a856:	b508      	push	{r3, lr}
 800a858:	2200      	movs	r2, #0
 800a85a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a85e:	f7ff ffdd 	bl	800a81c <xflow>
 800a862:	ec41 0b10 	vmov	d0, r0, r1
 800a866:	bd08      	pop	{r3, pc}

0800a868 <fabs>:
 800a868:	ec51 0b10 	vmov	r0, r1, d0
 800a86c:	ee10 2a10 	vmov	r2, s0
 800a870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a874:	ec43 2b10 	vmov	d0, r2, r3
 800a878:	4770      	bx	lr

0800a87a <finite>:
 800a87a:	b082      	sub	sp, #8
 800a87c:	ed8d 0b00 	vstr	d0, [sp]
 800a880:	9801      	ldr	r0, [sp, #4]
 800a882:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a886:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a88a:	0fc0      	lsrs	r0, r0, #31
 800a88c:	b002      	add	sp, #8
 800a88e:	4770      	bx	lr

0800a890 <scalbn>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	ec55 4b10 	vmov	r4, r5, d0
 800a896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a89a:	4606      	mov	r6, r0
 800a89c:	462b      	mov	r3, r5
 800a89e:	b99a      	cbnz	r2, 800a8c8 <scalbn+0x38>
 800a8a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8a4:	4323      	orrs	r3, r4
 800a8a6:	d036      	beq.n	800a916 <scalbn+0x86>
 800a8a8:	4b39      	ldr	r3, [pc, #228]	; (800a990 <scalbn+0x100>)
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	ee10 0a10 	vmov	r0, s0
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f7f5 fea1 	bl	80005f8 <__aeabi_dmul>
 800a8b6:	4b37      	ldr	r3, [pc, #220]	; (800a994 <scalbn+0x104>)
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	da10      	bge.n	800a8e2 <scalbn+0x52>
 800a8c0:	a32b      	add	r3, pc, #172	; (adr r3, 800a970 <scalbn+0xe0>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	e03a      	b.n	800a93e <scalbn+0xae>
 800a8c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8cc:	428a      	cmp	r2, r1
 800a8ce:	d10c      	bne.n	800a8ea <scalbn+0x5a>
 800a8d0:	ee10 2a10 	vmov	r2, s0
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	e019      	b.n	800a916 <scalbn+0x86>
 800a8e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	3a36      	subs	r2, #54	; 0x36
 800a8ea:	4432      	add	r2, r6
 800a8ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8f0:	428a      	cmp	r2, r1
 800a8f2:	dd08      	ble.n	800a906 <scalbn+0x76>
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	a120      	add	r1, pc, #128	; (adr r1, 800a978 <scalbn+0xe8>)
 800a8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8fc:	da1c      	bge.n	800a938 <scalbn+0xa8>
 800a8fe:	a120      	add	r1, pc, #128	; (adr r1, 800a980 <scalbn+0xf0>)
 800a900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a904:	e018      	b.n	800a938 <scalbn+0xa8>
 800a906:	2a00      	cmp	r2, #0
 800a908:	dd08      	ble.n	800a91c <scalbn+0x8c>
 800a90a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a90e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a912:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a916:	ec45 4b10 	vmov	d0, r4, r5
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a920:	da19      	bge.n	800a956 <scalbn+0xc6>
 800a922:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a926:	429e      	cmp	r6, r3
 800a928:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a92c:	dd0a      	ble.n	800a944 <scalbn+0xb4>
 800a92e:	a112      	add	r1, pc, #72	; (adr r1, 800a978 <scalbn+0xe8>)
 800a930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e2      	bne.n	800a8fe <scalbn+0x6e>
 800a938:	a30f      	add	r3, pc, #60	; (adr r3, 800a978 <scalbn+0xe8>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	e7cb      	b.n	800a8dc <scalbn+0x4c>
 800a944:	a10a      	add	r1, pc, #40	; (adr r1, 800a970 <scalbn+0xe0>)
 800a946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0b8      	beq.n	800a8c0 <scalbn+0x30>
 800a94e:	a10e      	add	r1, pc, #56	; (adr r1, 800a988 <scalbn+0xf8>)
 800a950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a954:	e7b4      	b.n	800a8c0 <scalbn+0x30>
 800a956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a95a:	3236      	adds	r2, #54	; 0x36
 800a95c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a960:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a964:	4620      	mov	r0, r4
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <scalbn+0x108>)
 800a968:	2200      	movs	r2, #0
 800a96a:	e7e8      	b.n	800a93e <scalbn+0xae>
 800a96c:	f3af 8000 	nop.w
 800a970:	c2f8f359 	.word	0xc2f8f359
 800a974:	01a56e1f 	.word	0x01a56e1f
 800a978:	8800759c 	.word	0x8800759c
 800a97c:	7e37e43c 	.word	0x7e37e43c
 800a980:	8800759c 	.word	0x8800759c
 800a984:	fe37e43c 	.word	0xfe37e43c
 800a988:	c2f8f359 	.word	0xc2f8f359
 800a98c:	81a56e1f 	.word	0x81a56e1f
 800a990:	43500000 	.word	0x43500000
 800a994:	ffff3cb0 	.word	0xffff3cb0
 800a998:	3c900000 	.word	0x3c900000

0800a99c <_init>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	bf00      	nop
 800a9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a2:	bc08      	pop	{r3}
 800a9a4:	469e      	mov	lr, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <_fini>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr
