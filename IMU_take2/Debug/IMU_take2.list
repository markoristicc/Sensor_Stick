
IMU_take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a034  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800a1c8  0800a1c8  0001a1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca0  0800aca0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aca0  0800aca0  0001aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca8  0800aca8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800acb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001dc  0800ae8c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800ae8c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157e2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002793  00000000  00000000  000359ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c949  00000000  00000000  0003a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001563f  00000000  00000000  00057279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3569  00000000  00000000  0006c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fe21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  0011fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1ac 	.word	0x0800a1ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a1ac 	.word	0x0800a1ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fab0 	bl	80014be <null_ptr_check>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d141      	bne.n	8000fee <bmi08a_init+0xa2>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7b1b      	ldrb	r3, [r3, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10c      	bne.n	8000f8c <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	739a      	strb	r2, [r3, #14]
//            printf("Dev correct\n\r");
            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f78:	f107 010e 	add.w	r1, r7, #14
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fac0 	bl	8001506 <get_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e002      	b.n	8000f92 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d129      	bne.n	8000fee <bmi08a_init+0xa2>
        {
//        	chip_id = 0;
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f9a:	f107 010e 	add.w	r1, r7, #14
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 faaf 	bl	8001506 <get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11c      	bne.n	8000fee <bmi08a_init+0xa2>
            {
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <bmi08a_init+0xb0>)
 8000fba:	f006 f8a1 	bl	8007100 <iprintf>
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b5b      	ldrb	r3, [r3, #13]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <bmi08a_init+0x88>
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d103      	bne.n	8000fd4 <bmi08a_init+0x88>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fcc:	7bba      	ldrb	r2, [r7, #14]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e00c      	b.n	8000fee <bmi08a_init+0xa2>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b5b      	ldrb	r3, [r3, #13]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d106      	bne.n	8000fea <bmi08a_init+0x9e>
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b1e      	cmp	r3, #30
 8000fe0:	d103      	bne.n	8000fea <bmi08a_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fe2:	7bba      	ldrb	r2, [r7, #14]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e001      	b.n	8000fee <bmi08a_init+0xa2>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000fea:	23fd      	movs	r3, #253	; 0xfd
 8000fec:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800a1c8 	.word	0x0800a1c8

08001000 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f000 fa54 	bl	80014be <null_ptr_check>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800101a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <bmi08a_get_regs+0x46>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00e      	beq.n	8001046 <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	f000 fa66 	bl	8001506 <get_regs>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800103e:	e004      	b.n	800104a <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001040:	23f9      	movs	r3, #249	; 0xf9
 8001042:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001044:	e001      	b.n	800104a <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001046:	23ff      	movs	r3, #255	; 0xff
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800104a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 fa29 	bl	80014be <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d12c      	bne.n	80010d2 <bmi08a_set_regs+0x7c>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d029      	beq.n	80010d2 <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d023      	beq.n	80010cc <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001084:	7bf8      	ldrb	r0, [r7, #15]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	f000 fa8b 	bl	80015a6 <set_regs>
 8001090:	4603      	mov	r3, r0
 8001092:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	7bdb      	ldrb	r3, [r3, #15]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d108      	bne.n	80010ae <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	6852      	ldr	r2, [r2, #4]
 80010a4:	4611      	mov	r1, r2
 80010a6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80010aa:	4798      	blx	r3
        if (len > 0)
 80010ac:	e013      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7bdb      	ldrb	r3, [r3, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6852      	ldr	r2, [r2, #4]
 80010be:	4611      	mov	r1, r2
 80010c0:	2002      	movs	r0, #2
 80010c2:	4798      	blx	r3
        if (len > 0)
 80010c4:	e007      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 80010c6:	23fb      	movs	r3, #251	; 0xfb
 80010c8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010ca:	e004      	b.n	80010d6 <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80010cc:	23f9      	movs	r3, #249	; 0xf9
 80010ce:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010d0:	e001      	b.n	80010d6 <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <bmi08a_soft_reset>:

/*!
 *  @brief This API resets the accel sensor.
 */
int8_t bmi08a_soft_reset(struct bmi08x_dev *dev)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f9e7 	bl	80014be <null_ptr_check>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d123      	bne.n	8001144 <bmi08a_soft_reset+0x62>
    {
        data = BMI08X_SOFT_RESET_CMD;
 80010fc:	23b6      	movs	r3, #182	; 0xb6
 80010fe:	73bb      	strb	r3, [r7, #14]

        /* Reset accel device */
        rslt = set_regs(BMI08X_REG_ACCEL_SOFTRESET, &data, 1, dev);
 8001100:	f107 010e 	add.w	r1, r7, #14
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	207e      	movs	r0, #126	; 0x7e
 800110a:	f000 fa4c 	bl	80015a6 <set_regs>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d114      	bne.n	8001144 <bmi08a_soft_reset+0x62>
        {
            /* Delay 1 ms after reset value is written to its register */
            dev->delay_us(BMI08X_MS_TO_US(BMI08X_ACCEL_SOFTRESET_DELAY_MS), dev->intf_ptr_accel);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	4611      	mov	r1, r2
 8001124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001128:	4798      	blx	r3

            /* After soft reset SPI mode in the initialization phase, need to  perform a dummy SPI read
             * operation, The soft-reset performs a fundamental reset to the device,
             * which is largely equivalent to a power cycle. */
            if (dev->intf == BMI08X_SPI_INTF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7b1b      	ldrb	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <bmi08a_soft_reset+0x62>
            {
                /* Dummy SPI read operation of Chip-ID */
                rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CHIP_ID, &data, 1, dev);
 8001132:	f107 010e 	add.w	r1, r7, #14
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff60 	bl	8001000 <bmi08a_get_regs>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001158:	2300      	movs	r3, #0
 800115a:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 800115c:	2300      	movs	r3, #0
 800115e:	75bb      	strb	r3, [r7, #22]
 8001160:	2300      	movs	r3, #0
 8001162:	757b      	strb	r3, [r7, #21]
 8001164:	2300      	movs	r3, #0
 8001166:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f9a8 	bl	80014be <null_ptr_check>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d171      	bne.n	800125e <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7c9b      	ldrb	r3, [r3, #18]
 800117e:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7c5b      	ldrb	r3, [r3, #17]
 8001184:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7c1b      	ldrb	r3, [r3, #16]
 800118a:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d902      	bls.n	8001198 <bmi08a_set_meas_conf+0x48>
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d901      	bls.n	800119c <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001198:	2301      	movs	r3, #1
 800119a:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 800119c:	7cbb      	ldrb	r3, [r7, #18]
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	d901      	bls.n	80011a6 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7b5b      	ldrb	r3, [r3, #13]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 80011ae:	7c7b      	ldrb	r3, [r7, #17]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d901      	bls.n	80011b8 <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 80011b4:	2301      	movs	r3, #1
 80011b6:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7b5b      	ldrb	r3, [r3, #13]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d104      	bne.n	80011ca <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 80011c0:	7c7b      	ldrb	r3, [r7, #17]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d901      	bls.n	80011ca <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 80011ca:	7dbb      	ldrb	r3, [r7, #22]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d144      	bne.n	800125a <bmi08a_set_meas_conf+0x10a>
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d141      	bne.n	800125a <bmi08a_set_meas_conf+0x10a>
 80011d6:	7d3b      	ldrb	r3, [r7, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d13e      	bne.n	800125a <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	2040      	movs	r0, #64	; 0x40
 80011e6:	f7ff ff0b 	bl	8001000 <bmi08a_get_regs>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80011ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d133      	bne.n	800125e <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 80011f6:	7b3b      	ldrb	r3, [r7, #12]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	f023 030f 	bic.w	r3, r3, #15
 80011fe:	b25a      	sxtb	r2, r3
 8001200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b25b      	sxtb	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b25b      	sxtb	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	b25a      	sxtb	r2, r3
 800121c:	7cbb      	ldrb	r3, [r7, #18]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	b25b      	sxtb	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	b25a      	sxtb	r2, r3
 8001234:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b25b      	sxtb	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	2040      	movs	r0, #64	; 0x40
 8001250:	f000 f9a9 	bl	80015a6 <set_regs>
 8001254:	4603      	mov	r3, r0
 8001256:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001258:	e001      	b.n	800125e <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 800125a:	23f8      	movs	r3, #248	; 0xf8
 800125c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800125e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8001272:	2300      	movs	r3, #0
 8001274:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f921 	bl	80014be <null_ptr_check>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d143      	bne.n	8001310 <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7bdb      	ldrb	r3, [r3, #15]
 800128c:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 800128e:	7bbb      	ldrb	r3, [r7, #14]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 8001294:	2300      	movs	r3, #0
 8001296:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 8001298:	2304      	movs	r3, #4
 800129a:	737b      	strb	r3, [r7, #13]
 800129c:	e009      	b.n	80012b2 <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d104      	bne.n	80012ae <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 80012a4:	2303      	movs	r3, #3
 80012a6:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	737b      	strb	r3, [r7, #13]
 80012ac:	e001      	b.n	80012b2 <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 80012ae:	23fb      	movs	r3, #251	; 0xfb
 80012b0:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d12a      	bne.n	8001310 <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	207c      	movs	r0, #124	; 0x7c
 80012c4:	f000 f96f 	bl	80015a6 <set_regs>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d11d      	bne.n	8001310 <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6852      	ldr	r2, [r2, #4]
 80012dc:	4611      	mov	r1, r2
 80012de:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e2:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	207d      	movs	r0, #125	; 0x7d
 80012f0:	f000 f959 	bl	80015a6 <set_regs>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6852      	ldr	r2, [r2, #4]
 8001308:	4611      	mov	r1, r2
 800130a:	f241 3088 	movw	r0, #5000	; 0x1388
 800130e:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 8001310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f000 f8c5 	bl	80014be <null_ptr_check>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 8001338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d140      	bne.n	80013c2 <bmi08a_get_data+0xa6>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03d      	beq.n	80013c2 <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 8001346:	f107 010c 	add.w	r1, r7, #12
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2206      	movs	r2, #6
 800134e:	2012      	movs	r0, #18
 8001350:	f7ff fe56 	bl	8001000 <bmi08a_get_regs>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d132      	bne.n	80013c6 <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001368:	7d7b      	ldrb	r3, [r7, #21]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 8001378:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 8001398:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80013a0:	7c3b      	ldrb	r3, [r7, #16]
 80013a2:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80013a4:	7c7b      	ldrb	r3, [r7, #17]
 80013a6:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80013a8:	7d7b      	ldrb	r3, [r7, #21]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80013b8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80013c0:	e001      	b.n	80013c6 <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80013c2:	23ff      	movs	r3, #255	; 0xff
 80013c4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f000 f86d 	bl	80014be <null_ptr_check>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d13a      	bne.n	8001466 <bmi08a_set_int_config+0x92>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d037      	beq.n	8001466 <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d82f      	bhi.n	800145e <bmi08a_set_int_config+0x8a>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <bmi08a_set_int_config+0x30>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001419 	.word	0x08001419
 8001408:	08001427 	.word	0x08001427
 800140c:	08001435 	.word	0x08001435
 8001410:	08001443 	.word	0x08001443
 8001414:	08001451 	.word	0x08001451
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f97e 	bl	800171c <set_accel_data_ready_int>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
                break;
 8001424:	e01e      	b.n	8001464 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f9d5 	bl	80017d8 <set_accel_sync_data_ready_int>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
                break;
 8001432:	e017      	b.n	8001464 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fa13 	bl	8001862 <set_accel_sync_input>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
                break;
 8001440:	e010      	b.n	8001464 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 8001442:	6839      	ldr	r1, [r7, #0]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fa26 	bl	8001896 <set_fifo_wm_int>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
                break;
 800144e:	e009      	b.n	8001464 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fa7d 	bl	8001952 <set_fifo_full_int>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
                break;
 800145c:	e002      	b.n	8001464 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 800145e:	23f8      	movs	r3, #248	; 0xf8
 8001460:	73fb      	strb	r3, [r7, #15]
                break;
 8001462:	bf00      	nop
        switch (int_config->int_type)
 8001464:	e001      	b.n	800146a <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop

08001478 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d010      	beq.n	80014ae <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 800148c:	f107 010e 	add.w	r1, r7, #14
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	201d      	movs	r0, #29
 8001496:	f7ff fdb3 	bl	8001000 <bmi08a_get_regs>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 80014a6:	7bba      	ldrb	r2, [r7, #14]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e001      	b.n	80014b2 <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80014ae:	23ff      	movs	r3, #255	; 0xff
 80014b0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00f      	beq.n	80014ec <null_ptr_check+0x2e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00b      	beq.n	80014ec <null_ptr_check+0x2e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <null_ptr_check+0x2e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e001      	b.n	80014f6 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b0a7      	sub	sp, #156	; 0x9c
 800150a:	af00      	add	r7, sp, #0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d103      	bne.n	800152c <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800152a:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6a1c      	ldr	r4, [r3, #32]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7b9b      	ldrb	r3, [r3, #14]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	441a      	add	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f107 0114 	add.w	r1, r7, #20
 8001542:	7bf8      	ldrb	r0, [r7, #15]
 8001544:	47a0      	blx	r4
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11c      	bne.n	8001594 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 800155a:	2300      	movs	r3, #0
 800155c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001560:	e012      	b.n	8001588 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001562:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	7b92      	ldrb	r2, [r2, #14]
 800156a:	441a      	add	r2, r3
 800156c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	440b      	add	r3, r1
 8001574:	3298      	adds	r2, #152	; 0x98
 8001576:	443a      	add	r2, r7
 8001578:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800157c:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 800157e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001582:	3301      	adds	r3, #1
 8001584:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001588:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d8e7      	bhi.n	8001562 <get_regs+0x5c>
 8001592:	e002      	b.n	800159a <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8001594:	23fe      	movs	r3, #254	; 0xfe
 8001596:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 800159a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800159e:	4618      	mov	r0, r3
 80015a0:	379c      	adds	r7, #156	; 0x9c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}

080015a6 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80015a6:	b590      	push	{r4, r7, lr}
 80015a8:	b087      	sub	sp, #28
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	7b1b      	ldrb	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d103      	bne.n	80015ca <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	7bf8      	ldrb	r0, [r7, #15]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	47a0      	blx	r4
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 80015ee:	23fe      	movs	r3, #254	; 0xfe
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001608:	2300      	movs	r3, #0
 800160a:	73bb      	strb	r3, [r7, #14]
 800160c:	2300      	movs	r3, #0
 800160e:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <set_int_pin_config+0x20>
 8001618:	2b01      	cmp	r3, #1
 800161a:	d003      	beq.n	8001624 <set_int_pin_config+0x26>
 800161c:	e005      	b.n	800162a <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 800161e:	2353      	movs	r3, #83	; 0x53
 8001620:	73bb      	strb	r3, [r7, #14]
            break;
 8001622:	e005      	b.n	8001630 <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 8001624:	2354      	movs	r3, #84	; 0x54
 8001626:	73bb      	strb	r3, [r7, #14]
            break;
 8001628:	e002      	b.n	8001630 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 800162a:	2301      	movs	r3, #1
 800162c:	737b      	strb	r3, [r7, #13]
            break;
 800162e:	bf00      	nop
    }

    if (!is_channel_invalid)
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d16a      	bne.n	800170c <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	7bb8      	ldrb	r0, [r7, #14]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	f7ff ff61 	bl	8001506 <get_regs>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d15f      	bne.n	8001710 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8001650:	7b3b      	ldrb	r3, [r7, #12]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	f023 0302 	bic.w	r3, r3, #2
 8001658:	b25a      	sxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	b25b      	sxtb	r3, r3
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001670:	7b3b      	ldrb	r3, [r7, #12]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	b25a      	sxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d11a      	bne.n	80016ce <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 8001698:	7b3b      	ldrb	r3, [r7, #12]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 80016a2:	7b3b      	ldrb	r3, [r7, #12]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	f023 0308 	bic.w	r3, r3, #8
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	733b      	strb	r3, [r7, #12]
 80016cc:	e014      	b.n	80016f8 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 80016ce:	7b3b      	ldrb	r3, [r7, #12]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f023 0308 	bic.w	r3, r3, #8
 80016d6:	b25a      	sxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	f023 0310 	bic.w	r3, r3, #16
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 80016f8:	f107 010c 	add.w	r1, r7, #12
 80016fc:	7bb8      	ldrb	r0, [r7, #14]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	f7ff fca8 	bl	8001056 <bmi08a_set_regs>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e001      	b.n	8001710 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 800170c:	23fb      	movs	r3, #251	; 0xfb
 800170e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001726:	2300      	movs	r3, #0
 8001728:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800172a:	f107 010d 	add.w	r1, r7, #13
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	2058      	movs	r0, #88	; 0x58
 8001734:	f7ff fee7 	bl	8001506 <get_regs>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d143      	bne.n	80017cc <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	791b      	ldrb	r3, [r3, #4]
 8001748:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <set_accel_data_ready_int+0x3c>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d010      	beq.n	8001778 <set_accel_data_ready_int+0x5c>
 8001756:	e01f      	b.n	8001798 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	b25a      	sxtb	r2, r3
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	b25b      	sxtb	r3, r3
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	b25b      	sxtb	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	737b      	strb	r3, [r7, #13]
                break;
 8001776:	e012      	b.n	800179e <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001780:	b25a      	sxtb	r2, r3
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	019b      	lsls	r3, r3, #6
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	737b      	strb	r3, [r7, #13]
                break;
 8001796:	e002      	b.n	800179e <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001798:	23fb      	movs	r3, #251	; 0xfb
 800179a:	73fb      	strb	r3, [r7, #15]
                break;
 800179c:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d112      	bne.n	80017cc <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff28 	bl	80015fe <set_int_pin_config>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d108      	bne.n	80017cc <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80017ba:	f107 010d 	add.w	r1, r7, #13
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	2058      	movs	r0, #88	; 0x58
 80017c4:	f7ff fc47 	bl	8001056 <bmi08a_set_regs>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7ff fe69 	bl	80014be <null_ptr_check>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 80017f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d12e      	bne.n	8001856 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <set_accel_sync_data_ready_int+0x32>
 8001804:	2b01      	cmp	r3, #1
 8001806:	d003      	beq.n	8001810 <set_accel_sync_data_ready_int+0x38>
 8001808:	e005      	b.n	8001816 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 800180a:	2356      	movs	r3, #86	; 0x56
 800180c:	73bb      	strb	r3, [r7, #14]
                break;
 800180e:	e005      	b.n	800181c <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 8001810:	2357      	movs	r3, #87	; 0x57
 8001812:	73bb      	strb	r3, [r7, #14]
                break;
 8001814:	e002      	b.n	800181c <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001816:	23fb      	movs	r3, #251	; 0xfb
 8001818:	73fb      	strb	r3, [r7, #15]
                break;
 800181a:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 800182c:	2301      	movs	r3, #1
 800182e:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001830:	f107 010d 	add.w	r1, r7, #13
 8001834:	7bb8      	ldrb	r0, [r7, #14]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	f7ff fc0c 	bl	8001056 <bmi08a_set_regs>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fed6 	bl	80015fe <set_int_pin_config>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800186c:	6838      	ldr	r0, [r7, #0]
 800186e:	f7ff fe26 	bl	80014be <null_ptr_check>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff febc 	bl	80015fe <set_int_pin_config>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80018a0:	2300      	movs	r3, #0
 80018a2:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80018a4:	f107 010d 	add.w	r1, r7, #13
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	2058      	movs	r0, #88	; 0x58
 80018ae:	f7ff fe2a 	bl	8001506 <get_regs>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d143      	bne.n	8001946 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <set_fifo_wm_int+0x3c>
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d010      	beq.n	80018f2 <set_fifo_wm_int+0x5c>
 80018d0:	e01f      	b.n	8001912 <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	f023 0302 	bic.w	r3, r3, #2
 80018da:	b25a      	sxtb	r2, r3
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	737b      	strb	r3, [r7, #13]
                break;
 80018f0:	e012      	b.n	8001918 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	f023 0320 	bic.w	r3, r3, #32
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	b25b      	sxtb	r3, r3
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	b25b      	sxtb	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b25b      	sxtb	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	737b      	strb	r3, [r7, #13]
                break;
 8001910:	e002      	b.n	8001918 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001912:	23fb      	movs	r3, #251	; 0xfb
 8001914:	73fb      	strb	r3, [r7, #15]
                break;
 8001916:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d112      	bne.n	8001946 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fe6b 	bl	80015fe <set_int_pin_config>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d108      	bne.n	8001946 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001934:	f107 010d 	add.w	r1, r7, #13
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	2058      	movs	r0, #88	; 0x58
 800193e:	f7ff fb8a 	bl	8001056 <bmi08a_set_regs>
 8001942:	4603      	mov	r3, r0
 8001944:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800195c:	2300      	movs	r3, #0
 800195e:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001960:	f107 010d 	add.w	r1, r7, #13
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	2058      	movs	r0, #88	; 0x58
 800196a:	f7ff fdcc 	bl	8001506 <get_regs>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d142      	bne.n	8001a00 <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <set_fifo_full_int+0x3c>
 8001988:	2b01      	cmp	r3, #1
 800198a:	d00f      	beq.n	80019ac <set_fifo_full_int+0x5a>
 800198c:	e01e      	b.n	80019cc <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 800198e:	7b7b      	ldrb	r3, [r7, #13]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	b25a      	sxtb	r2, r3
 8001998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	737b      	strb	r3, [r7, #13]
                break;
 80019aa:	e012      	b.n	80019d2 <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 80019ac:	7b7b      	ldrb	r3, [r7, #13]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	f023 0310 	bic.w	r3, r3, #16
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	737b      	strb	r3, [r7, #13]
                break;
 80019ca:	e002      	b.n	80019d2 <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80019cc:	23fb      	movs	r3, #251	; 0xfb
 80019ce:	73fb      	strb	r3, [r7, #15]
                break;
 80019d0:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d112      	bne.n	8001a00 <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fe0e 	bl	80015fe <set_int_pin_config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019ee:	f107 010d 	add.w	r1, r7, #13
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	2058      	movs	r0, #88	; 0x58
 80019f8:	f7ff fb2d 	bl	8001056 <bmi08a_set_regs>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa1f 	bl	8001e5c <null_ptr_check>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11a      	bne.n	8001a60 <bmi08g_init+0x54>
    {
        /* Read gyro chip id */


        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8001a2a:	f107 010e 	add.w	r1, r7, #14
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 fa36 	bl	8001ea4 <get_regs>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
        printf("%d: Chip id\r\n", chip_id);
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480a      	ldr	r0, [pc, #40]	; (8001a6c <bmi08g_init+0x60>)
 8001a42:	f005 fb5d 	bl	8007100 <iprintf>
        if (rslt == BMI08X_OK)
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d108      	bne.n	8001a60 <bmi08g_init+0x54>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8001a4e:	7bbb      	ldrb	r3, [r7, #14]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d103      	bne.n	8001a5c <bmi08g_init+0x50>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8001a54:	7bba      	ldrb	r2, [r7, #14]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	705a      	strb	r2, [r3, #1]
 8001a5a:	e001      	b.n	8001a60 <bmi08g_init+0x54>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8001a5c:	23fd      	movs	r3, #253	; 0xfd
 8001a5e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	0800a1dc 	.word	0x0800a1dc

08001a70 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a80:	6838      	ldr	r0, [r7, #0]
 8001a82:	f000 f9eb 	bl	8001e5c <null_ptr_check>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d111      	bne.n	8001ab6 <bmi08g_get_regs+0x46>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001a9e:	7bf8      	ldrb	r0, [r7, #15]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	f000 f9fd 	bl	8001ea4 <get_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001aae:	e004      	b.n	8001aba <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001ab0:	23f9      	movs	r3, #249	; 0xf9
 8001ab2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001ab4:	e001      	b.n	8001aba <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001ab6:	23ff      	movs	r3, #255	; 0xff
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f000 f9c0 	bl	8001e5c <null_ptr_check>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d130      	bne.n	8001b4a <bmi08g_set_regs+0x84>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02d      	beq.n	8001b4a <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d027      	beq.n	8001b44 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001af4:	7bf8      	ldrb	r0, [r7, #15]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	f000 f9fe 	bl	8001efc <set_regs>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7cdb      	ldrb	r3, [r3, #19]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d003      	beq.n	8001b14 <bmi08g_set_regs+0x4e>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7cdb      	ldrb	r3, [r3, #19]
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d108      	bne.n	8001b26 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	6892      	ldr	r2, [r2, #8]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001b22:	4798      	blx	r3
        if (len > 0)
 8001b24:	e013      	b.n	8001b4e <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	7cdb      	ldrb	r3, [r3, #19]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d107      	bne.n	8001b3e <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6892      	ldr	r2, [r2, #8]
 8001b36:	4611      	mov	r1, r2
 8001b38:	2002      	movs	r0, #2
 8001b3a:	4798      	blx	r3
        if (len > 0)
 8001b3c:	e007      	b.n	8001b4e <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8001b3e:	23fb      	movs	r3, #251	; 0xfb
 8001b40:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b42:	e004      	b.n	8001b4e <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001b44:	23f9      	movs	r3, #249	; 0xf9
 8001b46:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b48:	e001      	b.n	8001b4e <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001b4a:	23ff      	movs	r3, #255	; 0xff
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73bb      	strb	r3, [r7, #14]
 8001b66:	2300      	movs	r3, #0
 8001b68:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f976 	bl	8001e5c <null_ptr_check>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d166      	bne.n	8001c4a <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7d9b      	ldrb	r3, [r3, #22]
 8001b80:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7d1b      	ldrb	r3, [r3, #20]
 8001b86:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d901      	bls.n	8001b92 <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d901      	bls.n	8001b9c <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d14f      	bne.n	8001c42 <bmi08g_set_meas_conf+0xe8>
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d14c      	bne.n	8001c42 <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001ba8:	f107 010a 	add.w	r1, r7, #10
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	f7ff ff5d 	bl	8001a70 <bmi08g_get_regs>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d142      	bne.n	8001c48 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8001bc2:	7abb      	ldrb	r3, [r7, #10]
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f023 030f 	bic.w	r3, r3, #15
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001bde:	f107 010a 	add.w	r1, r7, #10
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	2010      	movs	r0, #16
 8001be8:	f7ff ff6d 	bl	8001ac6 <bmi08g_set_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d127      	bne.n	8001c48 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001bf8:	f107 010a 	add.w	r1, r7, #10
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	200f      	movs	r0, #15
 8001c02:	f7ff ff35 	bl	8001a70 <bmi08g_get_regs>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11a      	bne.n	8001c48 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8001c12:	7abb      	ldrb	r3, [r7, #10]
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	f023 0307 	bic.w	r3, r3, #7
 8001c1a:	b25a      	sxtb	r2, r3
 8001c1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001c2e:	f107 010a 	add.w	r1, r7, #10
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	200f      	movs	r0, #15
 8001c38:	f7ff ff45 	bl	8001ac6 <bmi08g_set_regs>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8001c40:	e002      	b.n	8001c48 <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001c42:	23f8      	movs	r3, #248	; 0xf8
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e000      	b.n	8001c4a <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8001c48:	bf00      	nop
        }
    }

    return rslt;
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8fa 	bl	8001e5c <null_ptr_check>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13a      	bne.n	8001cea <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 8001c74:	f107 010c 	add.w	r1, r7, #12
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2011      	movs	r0, #17
 8001c7e:	f7ff fef7 	bl	8001a70 <bmi08g_get_regs>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12d      	bne.n	8001cea <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7cdb      	ldrb	r3, [r3, #19]
 8001c92:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	2b80      	cmp	r3, #128	; 0x80
 8001c98:	d104      	bne.n	8001ca4 <bmi08g_set_power_mode+0x4e>
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d101      	bne.n	8001ca4 <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8001ca4:	7b7b      	ldrb	r3, [r7, #13]
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d104      	bne.n	8001cb4 <bmi08g_set_power_mode+0x5e>
 8001caa:	7b3b      	ldrb	r3, [r7, #12]
 8001cac:	2b80      	cmp	r3, #128	; 0x80
 8001cae:	d101      	bne.n	8001cb4 <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001cb4:	7bbb      	ldrb	r3, [r7, #14]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001cba:	f107 010d 	add.w	r1, r7, #13
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2011      	movs	r0, #17
 8001cc4:	f7ff feff 	bl	8001ac6 <bmi08g_set_regs>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6892      	ldr	r2, [r2, #8]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f247 5030 	movw	r0, #30000	; 0x7530
 8001ce2:	4798      	blx	r3
 8001ce4:	e001      	b.n	8001cea <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8001ce6:	23fb      	movs	r3, #251	; 0xfb
 8001ce8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 8001d00:	23c8      	movs	r3, #200	; 0xc8
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	2300      	movs	r3, #0
 8001d06:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f000 f8a7 	bl	8001e5c <null_ptr_check>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8001d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d140      	bne.n	8001d9c <bmi08g_get_data+0xa6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03d      	beq.n	8001d9c <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 8001d20:	f107 010c 	add.w	r1, r7, #12
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2206      	movs	r2, #6
 8001d28:	2002      	movs	r0, #2
 8001d2a:	f7ff fea1 	bl	8001a70 <bmi08g_get_regs>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d132      	bne.n	8001da0 <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8001d3a:	7b3b      	ldrb	r3, [r7, #12]
 8001d3c:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d42:	7d7b      	ldrb	r3, [r7, #21]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	7dbb      	ldrb	r3, [r7, #22]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001d52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d62:	7d7b      	ldrb	r3, [r7, #21]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7dbb      	ldrb	r3, [r7, #22]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001d72:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001d7a:	7c3b      	ldrb	r3, [r7, #16]
 8001d7c:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001d7e:	7c7b      	ldrb	r3, [r7, #17]
 8001d80:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d82:	7d7b      	ldrb	r3, [r7, #21]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	7dbb      	ldrb	r3, [r7, #22]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001d92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001d9a:	e001      	b.n	8001da0 <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001d9c:	23ff      	movs	r3, #255	; 0xff
 8001d9e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f000 f850 	bl	8001e5c <null_ptr_check>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d11e      	bne.n	8001e06 <bmi08g_set_int_config+0x5a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01b      	beq.n	8001e06 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <bmi08g_set_int_config+0x36>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db11      	blt.n	8001dfe <bmi08g_set_int_config+0x52>
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d80e      	bhi.n	8001dfe <bmi08g_set_int_config+0x52>
 8001de0:	e006      	b.n	8001df0 <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8e1 	bl	8001fac <set_gyro_data_ready_int>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
                break;
 8001dee:	e009      	b.n	8001e04 <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f94c 	bl	8002090 <set_fifo_int>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]
                break;
 8001dfc:	e002      	b.n	8001e04 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001dfe:	23f8      	movs	r3, #248	; 0xf8
 8001e00:	73fb      	strb	r3, [r7, #15]
                break;
 8001e02:	bf00      	nop
        switch (int_config->int_type)
 8001e04:	e001      	b.n	8001e0a <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001e06:	23ff      	movs	r3, #255	; 0xff
 8001e08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d010      	beq.n	8001e4c <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001e2a:	f107 010e 	add.w	r1, r7, #14
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff fe1c 	bl	8001a70 <bmi08g_get_regs>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001e44:	7bba      	ldrb	r2, [r7, #14]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	e001      	b.n	8001e50 <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001e4c:	23ff      	movs	r3, #255	; 0xff
 8001e4e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00f      	beq.n	8001e8a <null_ptr_check+0x2e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <null_ptr_check+0x2e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <null_ptr_check+0x2e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001e8a:	23ff      	movs	r3, #255	; 0xff
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e001      	b.n	8001e94 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d103      	bne.n	8001ec8 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ec6:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6a1c      	ldr	r4, [r3, #32]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	7bf8      	ldrb	r0, [r7, #15]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	47a0      	blx	r4
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8001eec:	23fe      	movs	r3, #254	; 0xfe
 8001eee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}

08001efc <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7b1b      	ldrb	r3, [r3, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d103      	bne.n	8001f24 <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f22:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d113      	bne.n	8001f52 <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	7bf8      	ldrb	r0, [r7, #15]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	47a0      	blx	r4
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001f4e:	23fe      	movs	r3, #254	; 0xfe
 8001f50:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d923      	bls.n	8001fa0 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75bb      	strb	r3, [r7, #22]
 8001f5c:	e01c      	b.n	8001f98 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f62:	7dbb      	ldrb	r3, [r7, #22]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	18d1      	adds	r1, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	7bf8      	ldrb	r0, [r7, #15]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	47a0      	blx	r4
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001f8c:	23fe      	movs	r3, #254	; 0xfe
 8001f8e:	75fb      	strb	r3, [r7, #23]
                break;
 8001f90:	e006      	b.n	8001fa0 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 8001f92:	7dbb      	ldrb	r3, [r7, #22]
 8001f94:	3301      	adds	r3, #1
 8001f96:	75bb      	strb	r3, [r7, #22]
 8001f98:	7dbb      	ldrb	r3, [r7, #22]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8de      	bhi.n	8001f5e <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001fba:	f107 010c 	add.w	r1, r7, #12
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2018      	movs	r0, #24
 8001fc4:	f7ff ff6e 	bl	8001ea4 <get_regs>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d157      	bne.n	8002084 <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <set_gyro_data_ready_int+0x3c>
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00f      	beq.n	8002006 <set_gyro_data_ready_int+0x5a>
 8001fe6:	e01b      	b.n	8002020 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 8001fe8:	7b3b      	ldrb	r3, [r7, #12]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	733b      	strb	r3, [r7, #12]
                break;
 8002004:	e00f      	b.n	8002026 <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200e:	b25a      	sxtb	r2, r3
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	01db      	lsls	r3, r3, #7
 8002014:	b25b      	sxtb	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b25b      	sxtb	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	733b      	strb	r3, [r7, #12]
                break;
 800201e:	e002      	b.n	8002026 <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002020:	23fb      	movs	r3, #251	; 0xfb
 8002022:	73fb      	strb	r3, [r7, #15]
                break;
 8002024:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d12a      	bne.n	8002084 <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 800202e:	7b3b      	ldrb	r3, [r7, #12]
 8002030:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	737b      	strb	r3, [r7, #13]
 800203c:	e001      	b.n	8002042 <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 800203e:	2300      	movs	r3, #0
 8002040:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002042:	f107 010c 	add.w	r1, r7, #12
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	2018      	movs	r0, #24
 800204c:	f7ff fd3b 	bl	8001ac6 <bmi08g_set_regs>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d113      	bne.n	8002084 <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f88c 	bl	800217c <set_int_pin_config>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	1c59      	adds	r1, r3, #1
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	2015      	movs	r0, #21
 800207c:	f7ff fd23 	bl	8001ac6 <bmi08g_set_regs>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 800209a:	2300      	movs	r3, #0
 800209c:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 800209e:	f107 010c 	add.w	r1, r7, #12
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	2018      	movs	r0, #24
 80020a8:	f7ff fefc 	bl	8001ea4 <get_regs>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d15b      	bne.n	8002170 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	791b      	ldrb	r3, [r3, #4]
 80020bc:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <set_fifo_int+0x3c>
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d010      	beq.n	80020ec <set_fifo_int+0x5c>
 80020ca:	e01f      	b.n	800210c <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 80020cc:	7b3b      	ldrb	r3, [r7, #12]
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	b25a      	sxtb	r2, r3
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	733b      	strb	r3, [r7, #12]
                break;
 80020ea:	e012      	b.n	8002112 <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 80020ec:	7b3b      	ldrb	r3, [r7, #12]
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f023 0320 	bic.w	r3, r3, #32
 80020f4:	b25a      	sxtb	r2, r3
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	b25b      	sxtb	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b25b      	sxtb	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	733b      	strb	r3, [r7, #12]
                break;
 800210a:	e002      	b.n	8002112 <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800210c:	23fb      	movs	r3, #251	; 0xfb
 800210e:	73fb      	strb	r3, [r7, #15]
                break;
 8002110:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12a      	bne.n	8002170 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	737b      	strb	r3, [r7, #13]
 8002128:	e001      	b.n	800212e <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 800212a:	2300      	movs	r3, #0
 800212c:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 800212e:	f107 010c 	add.w	r1, r7, #12
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	2018      	movs	r0, #24
 8002138:	f7ff fcc5 	bl	8001ac6 <bmi08g_set_regs>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d113      	bne.n	8002170 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f816 	bl	800217c <set_int_pin_config>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	2015      	movs	r0, #21
 8002168:	f7ff fcad 	bl	8001ac6 <bmi08g_set_regs>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002186:	f107 010e 	add.w	r1, r7, #14
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	2016      	movs	r0, #22
 8002190:	f7ff fe88 	bl	8001ea4 <get_regs>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d150      	bne.n	8002242 <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <set_int_pin_config+0x32>
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d020      	beq.n	80021ee <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 80021ac:	e040      	b.n	8002230 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	b25a      	sxtb	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	789b      	ldrb	r3, [r3, #2]
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	f023 0302 	bic.w	r3, r3, #2
 80021d4:	b25a      	sxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	73bb      	strb	r3, [r7, #14]
                break;
 80021ec:	e020      	b.n	8002230 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	789b      	ldrb	r3, [r3, #2]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	b25b      	sxtb	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	f023 0308 	bic.w	r3, r3, #8
 8002216:	b25a      	sxtb	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	b25b      	sxtb	r3, r3
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	b25b      	sxtb	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b25b      	sxtb	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	73bb      	strb	r3, [r7, #14]
                break;
 800222e:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002230:	f107 010e 	add.w	r1, r7, #14
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	2016      	movs	r0, #22
 800223a:	f7ff fc44 	bl	8001ac6 <bmi08g_set_regs>
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f003 fe13 	bl	8005e8c <HAL_UART_Transmit>
}
 8002266:	bf00      	nop
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200002a8 	.word	0x200002a8

08002274 <init_bmi08x_get_data>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x_get_data(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 800227a:	483d      	ldr	r0, [pc, #244]	; (8002370 <init_bmi08x_get_data+0xfc>)
 800227c:	f7fe fe66 	bl	8000f4c <bmi08a_init>
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4619      	mov	r1, r3
 800228a:	483a      	ldr	r0, [pc, #232]	; (8002374 <init_bmi08x_get_data+0x100>)
 800228c:	f000 fda4 	bl	8002dd8 <bmi08x_error_codes_print_result>
	printf("Accel init\n\r");
 8002290:	4839      	ldr	r0, [pc, #228]	; (8002378 <init_bmi08x_get_data+0x104>)
 8002292:	f004 ff35 	bl	8007100 <iprintf>

	if (rslt == BMI08X_OK) {
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <init_bmi08x_get_data+0x46>

		rslt = bmi08g_init(&bmi08xdev);
 800229e:	4834      	ldr	r0, [pc, #208]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022a0:	f7ff fbb4 	bl	8001a0c <bmi08g_init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4619      	mov	r1, r3
 80022ae:	4833      	ldr	r0, [pc, #204]	; (800237c <init_bmi08x_get_data+0x108>)
 80022b0:	f000 fd92 	bl	8002dd8 <bmi08x_error_codes_print_result>
		printf("Gyro init\n\r");
 80022b4:	4832      	ldr	r0, [pc, #200]	; (8002380 <init_bmi08x_get_data+0x10c>)
 80022b6:	f004 ff23 	bl	8007100 <iprintf>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d14f      	bne.n	8002362 <init_bmi08x_get_data+0xee>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022c4:	220c      	movs	r2, #12
 80022c6:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022ca:	7b5b      	ldrb	r3, [r3, #13]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <init_bmi08x_get_data+0x64>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022d2:	2203      	movs	r2, #3
 80022d4:	741a      	strb	r2, [r3, #16]
 80022d6:	e006      	b.n	80022e6 <init_bmi08x_get_data+0x72>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022da:	7b5b      	ldrb	r3, [r3, #13]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d102      	bne.n	80022e6 <init_bmi08x_get_data+0x72>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022ee:	220a      	movs	r2, #10
 80022f0:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 80022f2:	481f      	ldr	r0, [pc, #124]	; (8002370 <init_bmi08x_get_data+0xfc>)
 80022f4:	f7fe ffb9 	bl	800126a <bmi08a_set_power_mode>
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4619      	mov	r1, r3
 8002302:	4820      	ldr	r0, [pc, #128]	; (8002384 <init_bmi08x_get_data+0x110>)
 8002304:	f000 fd68 	bl	8002dd8 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 8002308:	4819      	ldr	r0, [pc, #100]	; (8002370 <init_bmi08x_get_data+0xfc>)
 800230a:	f7fe ff21 	bl	8001150 <bmi08a_set_meas_conf>
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	4619      	mov	r1, r3
 8002318:	481b      	ldr	r0, [pc, #108]	; (8002388 <init_bmi08x_get_data+0x114>)
 800231a:	f000 fd5d 	bl	8002dd8 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <init_bmi08x_get_data+0xfc>)
 8002320:	2201      	movs	r2, #1
 8002322:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_250_DPS;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <init_bmi08x_get_data+0xfc>)
 8002326:	2203      	movs	r2, #3
 8002328:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <init_bmi08x_get_data+0xfc>)
 800232c:	2201      	movs	r2, #1
 800232e:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <init_bmi08x_get_data+0xfc>)
 8002332:	2200      	movs	r2, #0
 8002334:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 8002336:	480e      	ldr	r0, [pc, #56]	; (8002370 <init_bmi08x_get_data+0xfc>)
 8002338:	f7ff fc8d 	bl	8001c56 <bmi08g_set_power_mode>
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4619      	mov	r1, r3
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <init_bmi08x_get_data+0x118>)
 8002348:	f000 fd46 	bl	8002dd8 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <init_bmi08x_get_data+0xfc>)
 800234e:	f7ff fc04 	bl	8001b5a <bmi08g_set_meas_conf>
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <init_bmi08x_get_data+0x11c>)
 800235e:	f000 fd3b 	bl	8002dd8 <bmi08x_error_codes_print_result>
	}

	return rslt;
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000032c 	.word	0x2000032c
 8002374:	0800a1ec 	.word	0x0800a1ec
 8002378:	0800a1f8 	.word	0x0800a1f8
 800237c:	0800a208 	.word	0x0800a208
 8002380:	0800a214 	.word	0x0800a214
 8002384:	0800a220 	.word	0x0800a220
 8002388:	0800a238 	.word	0x0800a238
 800238c:	0800a250 	.word	0x0800a250
 8002390:	0800a268 	.word	0x0800a268

08002394 <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 80023bc:	4920      	ldr	r1, [pc, #128]	; (8002440 <enable_bmi08x_interrupt+0xac>)
 80023be:	481f      	ldr	r0, [pc, #124]	; (800243c <enable_bmi08x_interrupt+0xa8>)
 80023c0:	f7ff f808 	bl	80013d4 <bmi08a_set_int_config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4619      	mov	r1, r3
 80023ce:	481d      	ldr	r0, [pc, #116]	; (8002444 <enable_bmi08x_interrupt+0xb0>)
 80023d0:	f000 fd02 	bl	8002dd8 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d128      	bne.n	800242e <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 80023fa:	4911      	ldr	r1, [pc, #68]	; (8002440 <enable_bmi08x_interrupt+0xac>)
 80023fc:	4812      	ldr	r0, [pc, #72]	; (8002448 <enable_bmi08x_interrupt+0xb4>)
 80023fe:	f7ff fcd5 	bl	8001dac <bmi08g_set_int_config>
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	4619      	mov	r1, r3
 800240c:	480f      	ldr	r0, [pc, #60]	; (800244c <enable_bmi08x_interrupt+0xb8>)
 800240e:	f000 fce3 	bl	8002dd8 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 8002412:	1db9      	adds	r1, r7, #6
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <enable_bmi08x_interrupt+0xac>)
 8002416:	2201      	movs	r2, #1
 8002418:	2018      	movs	r0, #24
 800241a:	f7ff fb29 	bl	8001a70 <bmi08g_get_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	4619      	mov	r1, r3
 8002428:	4809      	ldr	r0, [pc, #36]	; (8002450 <enable_bmi08x_interrupt+0xbc>)
 800242a:	f000 fcd5 	bl	8002dd8 <bmi08x_error_codes_print_result>
	}

	return rslt;
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000035c 	.word	0x2000035c
 8002440:	2000032c 	.word	0x2000032c
 8002444:	0800a3cc 	.word	0x0800a3cc
 8002448:	20000364 	.word	0x20000364
 800244c:	0800a3e4 	.word	0x0800a3e4
 8002450:	0800a3fc 	.word	0x0800a3fc

08002454 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002458:	b08f      	sub	sp, #60	; 0x3c
 800245a:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800245c:	f000 ff71 	bl	8003342 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002460:	f000 f9a4 	bl	80027ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002464:	f000 fac0 	bl	80029e8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002468:	f000 fa8e 	bl	8002988 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800246c:	f000 fa00 	bl	8002870 <MX_SPI1_Init>
	MX_TIM2_Init();
 8002470:	f000 fa3c 	bl	80028ec <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	int8_t rslt;
	float x = 0.0, y = 0.0, z = 0.0;
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
	int times_to_read = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
	int status = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
	 *           For SPI : BMI08X_SPI_INTF
	 * Sensor variant given as parameter
	 *          For BMI085 : BMI085_VARIANT
	 *          For BMI088 : BMI088_VARIANT
	 */
	HAL_TIM_Base_Start(&htim2);
 800248e:	48b0      	ldr	r0, [pc, #704]	; (8002750 <main+0x2fc>)
 8002490:	f003 fa34 	bl	80058fc <HAL_TIM_Base_Start>
	//	HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	printf("Hello\n\r");
 8002494:	48af      	ldr	r0, [pc, #700]	; (8002754 <main+0x300>)
 8002496:	f004 fe33 	bl	8007100 <iprintf>
//  	init_handle(&bmi085_handle);

// This is where we would set the CS for accel/gyro, urrently have the .ioc just have the GPIO pins output high
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI085_VARIANT);
 800249a:	2200      	movs	r2, #0
 800249c:	2101      	movs	r1, #1
 800249e:	48ae      	ldr	r0, [pc, #696]	; (8002758 <main+0x304>)
 80024a0:	f000 fc40 	bl	8002d24 <bmi08x_interface_init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4619      	mov	r1, r3
 80024ae:	48ab      	ldr	r0, [pc, #684]	; (800275c <main+0x308>)
 80024b0:	f000 fc92 	bl	8002dd8 <bmi08x_error_codes_print_result>

//  	printf("Did we make it?\n\r");
	bmi08a_soft_reset(&bmi08xdev);
 80024b4:	48a8      	ldr	r0, [pc, #672]	; (8002758 <main+0x304>)
 80024b6:	f7fe fe14 	bl	80010e2 <bmi08a_soft_reset>
	/* Initialize the sensors */
	if(rslt == BMI08X_OK){

	}
	rslt = init_bmi08x_get_data(); // An API function that has very few edits from me, should just work if wired properly and spi read/write works
 80024ba:	f7ff fedb 	bl	8002274 <init_bmi08x_get_data>
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("init_bmi08x_get_data", rslt);
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	4619      	mov	r1, r3
 80024c8:	48a5      	ldr	r0, [pc, #660]	; (8002760 <main+0x30c>)
 80024ca:	f000 fc85 	bl	8002dd8 <bmi08x_error_codes_print_result>
	/* Enable data ready interrupts */
	//	enable_bmi08x_data_synchronization_interrupt();
	//	uint32_t start_time = HAL_GetTick();
	rslt = enable_bmi08x_interrupt();
 80024ce:	f7ff ff61 	bl	8002394 <enable_bmi08x_interrupt>
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	4619      	mov	r1, r3
 80024dc:	48a1      	ldr	r0, [pc, #644]	; (8002764 <main+0x310>)
 80024de:	f000 fc7b 	bl	8002dd8 <bmi08x_error_codes_print_result>

	printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\r");
 80024e2:	48a1      	ldr	r0, [pc, #644]	; (8002768 <main+0x314>)
 80024e4:	f004 fe0c 	bl	8007100 <iprintf>
	printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 80024e8:	48a0      	ldr	r0, [pc, #640]	; (800276c <main+0x318>)
 80024ea:	f004 fe09 	bl	8007100 <iprintf>

	if (rslt == BMI08X_OK) {
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8125 	bne.w	8002742 <main+0x2ee>
		if (bmi08xdev.accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE) {
 80024f8:	4b97      	ldr	r3, [pc, #604]	; (8002758 <main+0x304>)
 80024fa:	7bdb      	ldrb	r3, [r3, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 80a0 	bne.w	8002642 <main+0x1ee>
			printf("\nACCEL DATA\n\r");
 8002502:	489b      	ldr	r0, [pc, #620]	; (8002770 <main+0x31c>)
 8002504:	f004 fdfc 	bl	8007100 <iprintf>
			printf("Accel data in LSB units and Gravity data in m/s^2\n\r");
 8002508:	489a      	ldr	r0, [pc, #616]	; (8002774 <main+0x320>)
 800250a:	f004 fdf9 	bl	8007100 <iprintf>
			printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n\r");
 800250e:	489a      	ldr	r0, [pc, #616]	; (8002778 <main+0x324>)
 8002510:	f004 fdf6 	bl	8007100 <iprintf>

			printf(
 8002514:	4899      	ldr	r0, [pc, #612]	; (800277c <main+0x328>)
 8002516:	f004 fdf3 	bl	8007100 <iprintf>
					"Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n\r");

			while (1) {
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 800251a:	463b      	mov	r3, r7
 800251c:	498e      	ldr	r1, [pc, #568]	; (8002758 <main+0x304>)
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe ffaa 	bl	8001478 <bmi08a_get_data_int_status>
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08a_get_data_int_status",
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4619      	mov	r1, r3
 800252e:	4894      	ldr	r0, [pc, #592]	; (8002780 <main+0x32c>)
 8002530:	f000 fc52 	bl	8002dd8 <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_ACCEL_DATA_READY_INT) {
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07b      	beq.n	8002636 <main+0x1e2>
					rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 800253e:	4986      	ldr	r1, [pc, #536]	; (8002758 <main+0x304>)
 8002540:	4890      	ldr	r0, [pc, #576]	; (8002784 <main+0x330>)
 8002542:	f7fe feeb 	bl	800131c <bmi08a_get_data>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	4619      	mov	r1, r3
 8002550:	488d      	ldr	r0, [pc, #564]	; (8002788 <main+0x334>)
 8002552:	f000 fc41 	bl	8002dd8 <bmi08x_error_codes_print_result>

					if (bmi08xdev.variant == BMI085_VARIANT) {
 8002556:	4b80      	ldr	r3, [pc, #512]	; (8002758 <main+0x304>)
 8002558:	7b5b      	ldrb	r3, [r3, #13]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11e      	bne.n	800259c <main+0x148>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 4, 16);
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <main+0x330>)
 8002560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002564:	2210      	movs	r2, #16
 8002566:	2104      	movs	r1, #4
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fabb 	bl	8002ae4 <lsb_to_mps2>
 800256e:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 4, 16);
 8002572:	4b84      	ldr	r3, [pc, #528]	; (8002784 <main+0x330>)
 8002574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002578:	2210      	movs	r2, #16
 800257a:	2104      	movs	r1, #4
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fab1 	bl	8002ae4 <lsb_to_mps2>
 8002582:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 4, 16);
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <main+0x330>)
 8002588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800258c:	2210      	movs	r2, #16
 800258e:	2104      	movs	r1, #4
 8002590:	4618      	mov	r0, r3
 8002592:	f000 faa7 	bl	8002ae4 <lsb_to_mps2>
 8002596:	ed87 0a03 	vstr	s0, [r7, #12]
 800259a:	e021      	b.n	80025e0 <main+0x18c>
					} else if (bmi08xdev.variant == BMI088_VARIANT) {
 800259c:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <main+0x304>)
 800259e:	7b5b      	ldrb	r3, [r3, #13]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11d      	bne.n	80025e0 <main+0x18c>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <main+0x330>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	2210      	movs	r2, #16
 80025ac:	2118      	movs	r1, #24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fa98 	bl	8002ae4 <lsb_to_mps2>
 80025b4:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 80025b8:	4b72      	ldr	r3, [pc, #456]	; (8002784 <main+0x330>)
 80025ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025be:	2210      	movs	r2, #16
 80025c0:	2118      	movs	r1, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fa8e 	bl	8002ae4 <lsb_to_mps2>
 80025c8:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <main+0x330>)
 80025ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025d2:	2210      	movs	r2, #16
 80025d4:	2118      	movs	r1, #24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fa84 	bl	8002ae4 <lsb_to_mps2>
 80025dc:	ed87 0a03 	vstr	s0, [r7, #12]
					}

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <main+0x330>)
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025e6:	469a      	mov	sl, r3
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <main+0x330>)
 80025ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025ee:	469b      	mov	fp, r3
							bmi08x_accel.z, x, y, z);
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <main+0x330>)
 80025f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025f6:	461e      	mov	r6, r3
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7fd ffa5 	bl	8000548 <__aeabi_f2d>
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	6938      	ldr	r0, [r7, #16]
 8002604:	f7fd ffa0 	bl	8000548 <__aeabi_f2d>
 8002608:	4680      	mov	r8, r0
 800260a:	4689      	mov	r9, r1
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7fd ff9b 	bl	8000548 <__aeabi_f2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800261a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800261e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002622:	9600      	str	r6, [sp, #0]
 8002624:	465b      	mov	r3, fp
 8002626:	4652      	mov	r2, sl
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4858      	ldr	r0, [pc, #352]	; (800278c <main+0x338>)
 800262c:	f004 fd68 	bl	8007100 <iprintf>

					times_to_read = times_to_read + 1;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]

				}
				bmi08x_delay_us(1000,0);
 8002636:	2100      	movs	r1, #0
 8002638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263c:	f000 fb54 	bl	8002ce8 <bmi08x_delay_us>
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 8002640:	e76b      	b.n	800251a <main+0xc6>
			}
		}

		if (bmi08xdev.gyro_cfg.power == BMI08X_GYRO_PM_NORMAL) {
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <main+0x304>)
 8002644:	7cdb      	ldrb	r3, [r3, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d17b      	bne.n	8002742 <main+0x2ee>
			times_to_read = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]

			printf("\n\nGYRO DATA\n");
 800264e:	4850      	ldr	r0, [pc, #320]	; (8002790 <main+0x33c>)
 8002650:	f004 fddc 	bl	800720c <puts>
			printf("Gyro data in LSB units and degrees per second\n\r");
 8002654:	484f      	ldr	r0, [pc, #316]	; (8002794 <main+0x340>)
 8002656:	f004 fd53 	bl	8007100 <iprintf>
			printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 800265a:	4844      	ldr	r0, [pc, #272]	; (800276c <main+0x318>)
 800265c:	f004 fd50 	bl	8007100 <iprintf>

			printf(
 8002660:	484d      	ldr	r0, [pc, #308]	; (8002798 <main+0x344>)
 8002662:	f004 fd4d 	bl	8007100 <iprintf>
					"Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n\r");

			while (times_to_read < 10) {
 8002666:	e069      	b.n	800273c <main+0x2e8>
				rslt = bmi08g_get_data_int_status(&status, &bmi08xdev);
 8002668:	463b      	mov	r3, r7
 800266a:	493b      	ldr	r1, [pc, #236]	; (8002758 <main+0x304>)
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fbd2 	bl	8001e16 <bmi08g_get_data_int_status>
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08g_get_data_int_status",
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	4619      	mov	r1, r3
 800267c:	4847      	ldr	r0, [pc, #284]	; (800279c <main+0x348>)
 800267e:	f000 fbab 	bl	8002dd8 <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_GYRO_DATA_READY_INT) {
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d057      	beq.n	800273c <main+0x2e8>
					rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 800268c:	4932      	ldr	r1, [pc, #200]	; (8002758 <main+0x304>)
 800268e:	4844      	ldr	r0, [pc, #272]	; (80027a0 <main+0x34c>)
 8002690:	f7ff fb31 	bl	8001cf6 <bmi08g_get_data>
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08g_get_data", rslt);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4619      	mov	r1, r3
 800269e:	4841      	ldr	r0, [pc, #260]	; (80027a4 <main+0x350>)
 80026a0:	f000 fb9a 	bl	8002dd8 <bmi08x_error_codes_print_result>

					/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
					x = lsb_to_dps(bmi08x_gyro.x, (float) 250, 16);
 80026a4:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <main+0x34c>)
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	2110      	movs	r1, #16
 80026ac:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80027a8 <main+0x354>
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fa61 	bl	8002b78 <lsb_to_dps>
 80026b6:	ed87 0a05 	vstr	s0, [r7, #20]
					y = lsb_to_dps(bmi08x_gyro.y, (float) 250, 16);
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <main+0x34c>)
 80026bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026c0:	2110      	movs	r1, #16
 80026c2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80027a8 <main+0x354>
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fa56 	bl	8002b78 <lsb_to_dps>
 80026cc:	ed87 0a04 	vstr	s0, [r7, #16]
					z = lsb_to_dps(bmi08x_gyro.z, (float) 250, 16);
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <main+0x34c>)
 80026d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026d6:	2110      	movs	r1, #16
 80026d8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80027a8 <main+0x354>
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fa4b 	bl	8002b78 <lsb_to_dps>
 80026e2:	ed87 0a03 	vstr	s0, [r7, #12]

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 80026e6:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <main+0x34c>)
 80026e8:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80026ec:	469a      	mov	sl, r3
							times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <main+0x34c>)
 80026f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80026f4:	469b      	mov	fp, r3
							bmi08x_gyro.z, x, y, z);
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <main+0x34c>)
 80026f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80026fc:	461e      	mov	r6, r3
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
 8002708:	6938      	ldr	r0, [r7, #16]
 800270a:	f7fd ff1d 	bl	8000548 <__aeabi_f2d>
 800270e:	4680      	mov	r8, r0
 8002710:	4689      	mov	r9, r1
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7fd ff18 	bl	8000548 <__aeabi_f2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002720:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002724:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002728:	9600      	str	r6, [sp, #0]
 800272a:	465b      	mov	r3, fp
 800272c:	4652      	mov	r2, sl
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4816      	ldr	r0, [pc, #88]	; (800278c <main+0x338>)
 8002732:	f004 fce5 	bl	8007100 <iprintf>

					times_to_read = times_to_read + 1;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3301      	adds	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
			while (times_to_read < 10) {
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b09      	cmp	r3, #9
 8002740:	dd92      	ble.n	8002668 <main+0x214>
				}
			}
		}
	}

	return 0;
 8002742:	2300      	movs	r3, #0
//
//    /* USER CODE BEGIN 3 */
////	 printf("Hello\n");
//  }
	/* USER CODE END 3 */
}
 8002744:	4618      	mov	r0, r3
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274e:	bf00      	nop
 8002750:	2000025c 	.word	0x2000025c
 8002754:	0800a42c 	.word	0x0800a42c
 8002758:	2000032c 	.word	0x2000032c
 800275c:	0800a434 	.word	0x0800a434
 8002760:	0800a44c 	.word	0x0800a44c
 8002764:	0800a464 	.word	0x0800a464
 8002768:	0800a47c 	.word	0x0800a47c
 800276c:	0800a4b4 	.word	0x0800a4b4
 8002770:	0800a4e8 	.word	0x0800a4e8
 8002774:	0800a4f8 	.word	0x0800a4f8
 8002778:	0800a52c 	.word	0x0800a52c
 800277c:	0800a564 	.word	0x0800a564
 8002780:	0800a5b8 	.word	0x0800a5b8
 8002784:	2000036c 	.word	0x2000036c
 8002788:	0800a5d4 	.word	0x0800a5d4
 800278c:	0800a5e4 	.word	0x0800a5e4
 8002790:	0800a610 	.word	0x0800a610
 8002794:	0800a61c 	.word	0x0800a61c
 8002798:	0800a64c 	.word	0x0800a64c
 800279c:	0800a6a0 	.word	0x0800a6a0
 80027a0:	20000374 	.word	0x20000374
 80027a4:	0800a6bc 	.word	0x0800a6bc
 80027a8:	437a0000 	.word	0x437a0000

080027ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b096      	sub	sp, #88	; 0x58
 80027b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	2244      	movs	r2, #68	; 0x44
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f82e 	bl	800681c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027c0:	463b      	mov	r3, r7
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027d2:	f001 f8b9 	bl	8003948 <HAL_PWREx_ControlVoltageScaling>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80027dc:	f000 fba4 	bl	8002f28 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80027e0:	f001 f894 	bl	800390c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <SystemClock_Config+0xc0>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a20      	ldr	r2, [pc, #128]	; (800286c <SystemClock_Config+0xc0>)
 80027ec:	f023 0318 	bic.w	r3, r3, #24
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80027f4:	2314      	movs	r3, #20
 80027f6:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027fc:	2301      	movs	r3, #1
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002804:	2360      	movs	r3, #96	; 0x60
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002808:	2302      	movs	r3, #2
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800280c:	2301      	movs	r3, #1
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002810:	2301      	movs	r3, #1
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 8002814:	2310      	movs	r3, #16
 8002816:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002818:	2302      	movs	r3, #2
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800281c:	2302      	movs	r3, #2
 800281e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f8e5 	bl	80039f4 <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0x88>
		Error_Handler();
 8002830:	f000 fb7a 	bl	8002f28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002834:	230f      	movs	r3, #15
 8002836:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002838:	2303      	movs	r3, #3
 800283a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002840:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002844:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800284a:	463b      	mov	r3, r7
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fd32 	bl	80042b8 <HAL_RCC_ClockConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0xb2>
		Error_Handler();
 800285a:	f000 fb65 	bl	8002f28 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800285e:	f002 f8d5 	bl	8004a0c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002862:	bf00      	nop
 8002864:	3758      	adds	r7, #88	; 0x58
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_SPI1_Init+0x74>)
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <MX_SPI1_Init+0x78>)
 8002878:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_SPI1_Init+0x74>)
 800287c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002880:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_SPI1_Init+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_SPI1_Init+0x74>)
 800288a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800288e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <MX_SPI1_Init+0x74>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <MX_SPI1_Init+0x74>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_SPI1_Init+0x74>)
 800289e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028a6:	2208      	movs	r2, #8
 80028a8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028be:	2207      	movs	r2, #7
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028ca:	2208      	movs	r2, #8
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_SPI1_Init+0x74>)
 80028d0:	f002 f8ac 	bl	8004a2c <HAL_SPI_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_SPI1_Init+0x6e>
		Error_Handler();
 80028da:	f000 fb25 	bl	8002f28 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001f8 	.word	0x200001f8
 80028e8:	40013000 	.word	0x40013000

080028ec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <MX_TIM2_Init+0x98>)
 800290c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002910:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8 - 1;
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_TIM2_Init+0x98>)
 8002914:	2207      	movs	r2, #7
 8002916:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MX_TIM2_Init+0x98>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff - 1;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_TIM2_Init+0x98>)
 8002920:	f06f 0201 	mvn.w	r2, #1
 8002924:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <MX_TIM2_Init+0x98>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <MX_TIM2_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002932:	4814      	ldr	r0, [pc, #80]	; (8002984 <MX_TIM2_Init+0x98>)
 8002934:	f002 ff8a 	bl	800584c <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x56>
		Error_Handler();
 800293e:	f000 faf3 	bl	8002f28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4619      	mov	r1, r3
 800294e:	480d      	ldr	r0, [pc, #52]	; (8002984 <MX_TIM2_Init+0x98>)
 8002950:	f003 f820 	bl	8005994 <HAL_TIM_ConfigClockSource>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x72>
		Error_Handler();
 800295a:	f000 fae5 	bl	8002f28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4806      	ldr	r0, [pc, #24]	; (8002984 <MX_TIM2_Init+0x98>)
 800296c:	f003 f9da 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8002976:	f000 fad7 	bl	8002f28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000025c 	.word	0x2000025c

08002988 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <MX_USART2_UART_Init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029cc:	f003 fa10 	bl	8005df0 <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80029d6:	f000 faa7 	bl	8002f28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200002a8 	.word	0x200002a8
 80029e4:	40004400 	.word	0x40004400

080029e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a35      	ldr	r2, [pc, #212]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a64:	481d      	ldr	r0, [pc, #116]	; (8002adc <MX_GPIO_Init+0xf4>)
 8002a66:	f000 ff39 	bl	80038dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BMI085_NSSg_Pin | BMI085_NSSa_Pin, GPIO_PIN_SET);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002a70:	481b      	ldr	r0, [pc, #108]	; (8002ae0 <MX_GPIO_Init+0xf8>)
 8002a72:	f000 ff33 	bl	80038dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <MX_GPIO_Init+0xf8>)
 8002a8e:	f000 fdb3 	bl	80035f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 8002a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <MX_GPIO_Init+0xf4>)
 8002aac:	f000 fda4 	bl	80035f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BMI085_NSSg_Pin BMI085_NSSa_Pin */
	GPIO_InitStruct.Pin = BMI085_NSSg_Pin | BMI085_NSSa_Pin;
 8002ab0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_GPIO_Init+0xf8>)
 8002aca:	f000 fd95 	bl	80035f8 <HAL_GPIO_Init>

}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	48000800 	.word	0x48000800

08002ae4 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	717b      	strb	r3, [r7, #5]
 8002af2:	4613      	mov	r3, r2
 8002af4:	713b      	strb	r3, [r7, #4]
    double power = 2;
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002afe:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002b02:	793b      	ldrb	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fcfd 	bl	8000504 <__aeabi_ui2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	ec43 2b11 	vmov	d1, r2, r3
 8002b12:	ed97 0b04 	vldr	d0, [r7, #16]
 8002b16:	f006 fc2d 	bl	8009374 <pow>
 8002b1a:	ec51 0b10 	vmov	r0, r1, d0
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b26:	f7fd fe91 	bl	800084c <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fe f839 	bl	8000ba8 <__aeabi_d2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8002b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b46:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b74 <lsb_to_mps2+0x90>
 8002b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b66:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	411ce80a 	.word	0x411ce80a

08002b78 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	ed87 0a00 	vstr	s0, [r7]
 8002b84:	460a      	mov	r2, r1
 8002b86:	80fb      	strh	r3, [r7, #6]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b94:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002b98:	797b      	ldrb	r3, [r7, #5]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcb2 	bl	8000504 <__aeabi_ui2d>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	ec43 2b11 	vmov	d1, r2, r3
 8002ba8:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bac:	f006 fbe2 	bl	8009374 <pow>
 8002bb0:	ec51 0b10 	vmov	r0, r1, d0
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bbc:	f7fd fe46 	bl	800084c <__aeabi_ddiv>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7fd ffee 	bl	8000ba8 <__aeabi_d2f>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002bd0:	edd7 6a00 	vldr	s13, [r7]
 8002bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <bmi08x_spi_read>:

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002c0e:	8afb      	ldrh	r3, [r7, #22]
 8002c10:	2200      	movs	r2, #0
 8002c12:	4619      	mov	r1, r3
 8002c14:	4814      	ldr	r0, [pc, #80]	; (8002c68 <bmi08x_spi_read+0x70>)
 8002c16:	f000 fe61 	bl	80038dc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 8002c1a:	f107 010f 	add.w	r1, r7, #15
 8002c1e:	2332      	movs	r3, #50	; 0x32
 8002c20:	2201      	movs	r2, #1
 8002c22:	4812      	ldr	r0, [pc, #72]	; (8002c6c <bmi08x_spi_read+0x74>)
 8002c24:	f001 ffa5 	bl	8004b72 <HAL_SPI_Transmit>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <bmi08x_spi_read+0x3a>
		return 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e016      	b.n	8002c60 <bmi08x_spi_read+0x68>
	}
	if (HAL_SPI_Receive(&hspi1, reg_data, len, 50) != HAL_OK) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	2332      	movs	r3, #50	; 0x32
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	480c      	ldr	r0, [pc, #48]	; (8002c6c <bmi08x_spi_read+0x74>)
 8002c3c:	f002 f907 	bl	8004e4e <HAL_SPI_Receive>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <bmi08x_spi_read+0x52>
		return 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00a      	b.n	8002c60 <bmi08x_spi_read+0x68>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4805      	ldr	r0, [pc, #20]	; (8002c68 <bmi08x_spi_read+0x70>)
 8002c52:	f000 fe43 	bl	80038dc <HAL_GPIO_WritePin>
	bmi08x_delay_us(100, 0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f000 f845 	bl	8002ce8 <bmi08x_delay_us>
	return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	48000800 	.word	0x48000800
 8002c6c:	200001f8 	.word	0x200001f8

08002c70 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002c86:	8afb      	ldrh	r3, [r7, #22]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4814      	ldr	r0, [pc, #80]	; (8002ce0 <bmi08x_spi_write+0x70>)
 8002c8e:	f000 fe25 	bl	80038dc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 8002c92:	f107 010f 	add.w	r1, r7, #15
 8002c96:	2332      	movs	r3, #50	; 0x32
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <bmi08x_spi_write+0x74>)
 8002c9c:	f001 ff69 	bl	8004b72 <HAL_SPI_Transmit>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <bmi08x_spi_write+0x3a>
		return 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e015      	b.n	8002cd6 <bmi08x_spi_write+0x66>
	}
	if (HAL_SPI_Transmit(&hspi1, reg_data, 1, 5) != HAL_OK) {
 8002caa:	2305      	movs	r3, #5
 8002cac:	2201      	movs	r2, #1
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <bmi08x_spi_write+0x74>)
 8002cb2:	f001 ff5e 	bl	8004b72 <HAL_SPI_Transmit>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <bmi08x_spi_write+0x50>
		return 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e00a      	b.n	8002cd6 <bmi08x_spi_write+0x66>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002cc0:	8afb      	ldrh	r3, [r7, #22]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <bmi08x_spi_write+0x70>)
 8002cc8:	f000 fe08 	bl	80038dc <HAL_GPIO_WritePin>

	bmi08x_delay_us(100, 0);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2064      	movs	r0, #100	; 0x64
 8002cd0:	f000 f80a 	bl	8002ce8 <bmi08x_delay_us>
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	48000800 	.word	0x48000800
 8002ce4:	200001f8 	.word	0x200001f8

08002ce8 <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <bmi08x_delay_us+0x38>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period * 10)
 8002cfa:	bf00      	nop
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <bmi08x_delay_us+0x38>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4299      	cmp	r1, r3
 8002d0e:	d3f5      	bcc.n	8002cfc <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000025c 	.word	0x2000025c

08002d24 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
 8002d30:	4613      	mov	r3, r2
 8002d32:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03a      	beq.n	8002db4 <bmi08x_interface_init+0x90>

#if defined(PC)
        setbuf(stdout, NULL);
#endif

		bmi08x_delay_us(1000, 0);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d44:	f7ff ffd0 	bl	8002ce8 <bmi08x_delay_us>

		/* Bus configuration : I2C */
		if (intf == BMI08X_I2C_INTF) {
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d018      	beq.n	8002d80 <bmi08x_interface_init+0x5c>
//            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
//            coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);
		}
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		else if (intf == BMI08X_SPI_INTF) {
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d115      	bne.n	8002d80 <bmi08x_interface_init+0x5c>

			bmi08x->intf = BMI08X_SPI_INTF;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <bmi08x_interface_init+0xa0>)
 8002d5e:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <bmi08x_interface_init+0xa4>)
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085_NSSa_Pin;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <bmi08x_interface_init+0xa8>)
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085_NSSg_Pin;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <bmi08x_interface_init+0xac>)
 8002d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d74:	801a      	strh	r2, [r3, #0]

			/* CSB1 pin is made high for selecting SPI protocol (accelerometer)*/
			// Done through STM32CubeIDE
//			HAL_GPIO_WritePin(GPIOC, BMI085_NSSa_Pin, GPIO_PIN_SET);
			bmi08x_delay_us(1000, 00);
 8002d76:	2100      	movs	r1, #0
 8002d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d7c:	f7ff ffb4 	bl	8002ce8 <bmi08x_delay_us>
//			HAL_Delay(10);
//            coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	78ba      	ldrb	r2, [r7, #2]
 8002d84:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <bmi08x_interface_init+0xa8>)
 8002d8a:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <bmi08x_interface_init+0xac>)
 8002d90:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <bmi08x_interface_init+0xb0>)
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = BMI08X_READ_WRITE_LEN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	222e      	movs	r2, #46	; 0x2e
 8002d9c:	771a      	strb	r2, [r3, #28]

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da4:	f7ff ffa0 	bl	8002ce8 <bmi08x_delay_us>

//        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dae:	f7ff ff9b 	bl	8002ce8 <bmi08x_delay_us>
 8002db2:	e001      	b.n	8002db8 <bmi08x_interface_init+0x94>
	} else {
		rslt = BMI08X_E_NULL_PTR;
 8002db4:	23ff      	movs	r3, #255	; 0xff
 8002db6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002db8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08002bf9 	.word	0x08002bf9
 8002dc8:	08002c71 	.word	0x08002c71
 8002dcc:	2000037a 	.word	0x2000037a
 8002dd0:	2000037c 	.word	0x2000037c
 8002dd4:	08002ce9 	.word	0x08002ce9

08002dd8 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8002de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8081 	beq.w	8002ef0 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4841      	ldr	r0, [pc, #260]	; (8002ef8 <bmi08x_error_codes_print_result+0x120>)
 8002df2:	f004 f985 	bl	8007100 <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8002df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d106      	bne.n	8002e0e <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8002e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e04:	4619      	mov	r1, r3
 8002e06:	483d      	ldr	r0, [pc, #244]	; (8002efc <bmi08x_error_codes_print_result+0x124>)
 8002e08:	f004 f97a 	bl	8007100 <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8002e0c:	e070      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8002e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e12:	f113 0f02 	cmn.w	r3, #2
 8002e16:	d106      	bne.n	8002e26 <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8002e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4838      	ldr	r0, [pc, #224]	; (8002f00 <bmi08x_error_codes_print_result+0x128>)
 8002e20:	f004 f96e 	bl	8007100 <iprintf>
}
 8002e24:	e064      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8002e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2a:	f113 0f03 	cmn.w	r3, #3
 8002e2e:	d106      	bne.n	8002e3e <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8002e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4833      	ldr	r0, [pc, #204]	; (8002f04 <bmi08x_error_codes_print_result+0x12c>)
 8002e38:	f004 f962 	bl	8007100 <iprintf>
}
 8002e3c:	e058      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8002e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e42:	f113 0f04 	cmn.w	r3, #4
 8002e46:	d106      	bne.n	8002e56 <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8002e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	482e      	ldr	r0, [pc, #184]	; (8002f08 <bmi08x_error_codes_print_result+0x130>)
 8002e50:	f004 f956 	bl	8007100 <iprintf>
}
 8002e54:	e04c      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8002e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5a:	f113 0f05 	cmn.w	r3, #5
 8002e5e:	d106      	bne.n	8002e6e <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8002e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e64:	4619      	mov	r1, r3
 8002e66:	4829      	ldr	r0, [pc, #164]	; (8002f0c <bmi08x_error_codes_print_result+0x134>)
 8002e68:	f004 f94a 	bl	8007100 <iprintf>
}
 8002e6c:	e040      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8002e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e72:	f113 0f06 	cmn.w	r3, #6
 8002e76:	d106      	bne.n	8002e86 <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4824      	ldr	r0, [pc, #144]	; (8002f10 <bmi08x_error_codes_print_result+0x138>)
 8002e80:	f004 f93e 	bl	8007100 <iprintf>
}
 8002e84:	e034      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8002e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8a:	f113 0f07 	cmn.w	r3, #7
 8002e8e:	d106      	bne.n	8002e9e <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	4619      	mov	r1, r3
 8002e96:	481f      	ldr	r0, [pc, #124]	; (8002f14 <bmi08x_error_codes_print_result+0x13c>)
 8002e98:	f004 f932 	bl	8007100 <iprintf>
}
 8002e9c:	e028      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8002e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea2:	f113 0f08 	cmn.w	r3, #8
 8002ea6:	d106      	bne.n	8002eb6 <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8002ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eac:	4619      	mov	r1, r3
 8002eae:	481a      	ldr	r0, [pc, #104]	; (8002f18 <bmi08x_error_codes_print_result+0x140>)
 8002eb0:	f004 f926 	bl	8007100 <iprintf>
}
 8002eb4:	e01c      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8002eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eba:	f113 0f09 	cmn.w	r3, #9
 8002ebe:	d106      	bne.n	8002ece <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8002ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4815      	ldr	r0, [pc, #84]	; (8002f1c <bmi08x_error_codes_print_result+0x144>)
 8002ec8:	f004 f91a 	bl	8007100 <iprintf>
}
 8002ecc:	e010      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8002ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8002ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4810      	ldr	r0, [pc, #64]	; (8002f20 <bmi08x_error_codes_print_result+0x148>)
 8002ede:	f004 f90f 	bl	8007100 <iprintf>
}
 8002ee2:	e005      	b.n	8002ef0 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8002ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480e      	ldr	r0, [pc, #56]	; (8002f24 <bmi08x_error_codes_print_result+0x14c>)
 8002eec:	f004 f908 	bl	8007100 <iprintf>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	0800a6cc 	.word	0x0800a6cc
 8002efc:	0800a6d0 	.word	0x0800a6d0
 8002f00:	0800a6ec 	.word	0x0800a6ec
 8002f04:	0800a714 	.word	0x0800a714
 8002f08:	0800a734 	.word	0x0800a734
 8002f0c:	0800a750 	.word	0x0800a750
 8002f10:	0800a770 	.word	0x0800a770
 8002f14:	0800a794 	.word	0x0800a794
 8002f18:	0800a7c0 	.word	0x0800a7c0
 8002f1c:	0800a7e0 	.word	0x0800a7e0
 8002f20:	0800a808 	.word	0x0800a808
 8002f24:	0800a824 	.word	0x0800a824

08002f28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f30:	e7fe      	b.n	8002f30 <Error_Handler+0x8>
	...

08002f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_MspInit+0x44>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6613      	str	r3, [r2, #96]	; 0x60
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_MspInit+0x44>)
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_MspInit+0x44>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_MspInit+0x44>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_SPI_MspInit+0x7c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d128      	bne.n	8002ff0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fce:	23e0      	movs	r3, #224	; 0xe0
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fec:	f000 fb04 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d10b      	bne.n	800302a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_TIM_Base_MspInit+0x38>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	4a08      	ldr	r2, [pc, #32]	; (8003038 <HAL_TIM_Base_MspInit+0x38>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_TIM_Base_MspInit+0x38>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b096      	sub	sp, #88	; 0x58
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	2234      	movs	r2, #52	; 0x34
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fbdd 	bl	800681c <memset>
  if(huart->Instance==USART2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_UART_MspInit+0xa8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d136      	bne.n	80030da <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800306c:	2302      	movs	r3, #2
 800306e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fb41 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003084:	f7ff ff50 	bl	8002f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_UART_MspInit+0xac>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_UART_MspInit+0xac>)
 800308e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_UART_MspInit+0xac>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_UART_MspInit+0xac>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <HAL_UART_MspInit+0xac>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_UART_MspInit+0xac>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030b8:	230c      	movs	r3, #12
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030c8:	2307      	movs	r3, #7
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f000 fa8f 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3758      	adds	r7, #88	; 0x58
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40021000 	.word	0x40021000

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <NMI_Handler+0x4>

080030f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <HardFault_Handler+0x4>

080030f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <MemManage_Handler+0x4>

080030fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <UsageFault_Handler+0x4>

0800310a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003138:	f000 f958 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return 1;
 8003144:	2301      	movs	r3, #1
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_kill>:

int _kill(int pid, int sig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800315a:	f003 fb35 	bl	80067c8 <__errno>
 800315e:	4603      	mov	r3, r0
 8003160:	2216      	movs	r2, #22
 8003162:	601a      	str	r2, [r3, #0]
  return -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_exit>:

void _exit (int status)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ffe7 	bl	8003150 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003182:	e7fe      	b.n	8003182 <_exit+0x12>

08003184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00a      	b.n	80031ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003196:	f3af 8000 	nop.w
 800319a:	4601      	mov	r1, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	b2ca      	uxtb	r2, r1
 80031a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf0      	blt.n	8003196 <_read+0x12>
  }

  return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e009      	b.n	80031e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	60ba      	str	r2, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f839 	bl	8002250 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf1      	blt.n	80031d0 <_write+0x12>
  }
  return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_close>:

int _close(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321e:	605a      	str	r2, [r3, #4]
  return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_isatty>:

int _isatty(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <_sbrk+0x5c>)
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <_sbrk+0x60>)
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <_sbrk+0x64>)
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <_sbrk+0x68>)
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d207      	bcs.n	80032a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003290:	f003 fa9a 	bl	80067c8 <__errno>
 8003294:	4603      	mov	r3, r0
 8003296:	220c      	movs	r2, #12
 8003298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	e009      	b.n	80032b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <_sbrk+0x64>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <_sbrk+0x64>)
 80032b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000a000 	.word	0x2000a000
 80032c0:	00000400 	.word	0x00000400
 80032c4:	20000380 	.word	0x20000380
 80032c8:	20000398 	.word	0x20000398

080032cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <SystemInit+0x20>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <SystemInit+0x20>)
 80032d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032f4:	f7ff ffea 	bl	80032cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopForever+0x6>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopForever+0xe>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopForever+0x16>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800331e:	f003 fa59 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003322:	f7ff f897 	bl	8002454 <main>

08003326 <LoopForever>:

LoopForever:
    b LoopForever
 8003326:	e7fe      	b.n	8003326 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003328:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003334:	0800acb0 	.word	0x0800acb0
  ldr r2, =_sbss
 8003338:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800333c:	20000398 	.word	0x20000398

08003340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC1_2_IRQHandler>

08003342 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 f91f 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f80e 	bl	8003374 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	e001      	b.n	8003368 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003364:	f7ff fde6 	bl	8002f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003368:	79fb      	ldrb	r3, [r7, #7]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_InitTick+0x6c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_InitTick+0x70>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_InitTick+0x6c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f91d 	bl	80035de <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d809      	bhi.n	80033c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b0:	2200      	movs	r2, #0
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f000 f8f5 	bl	80035a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_InitTick+0x74>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e004      	b.n	80033d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e001      	b.n	80033d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000008 	.word	0x20000008
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008
 8003410:	20000384 	.word	0x20000384

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000384 	.word	0x20000384

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f7ff ff8e 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff47 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff5c 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff8e 	bl	80034e4 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5d 	bl	8003490 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffb0 	bl	800354c <SysTick_Config>
 80035ec:	4603      	mov	r3, r0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	e14e      	b.n	80038a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8140 	beq.w	80038a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d005      	beq.n	8003638 <HAL_GPIO_Init+0x40>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d130      	bne.n	800369a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366e:	2201      	movs	r2, #1
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0201 	and.w	r2, r3, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d017      	beq.n	80036d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d123      	bne.n	800372a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	6939      	ldr	r1, [r7, #16]
 8003726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	2203      	movs	r2, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0203 	and.w	r2, r3, #3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 809a 	beq.w	80038a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_GPIO_Init+0x2cc>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	4a54      	ldr	r2, [pc, #336]	; (80038c4 <HAL_GPIO_Init+0x2cc>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6613      	str	r3, [r2, #96]	; 0x60
 8003778:	4b52      	ldr	r3, [pc, #328]	; (80038c4 <HAL_GPIO_Init+0x2cc>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003784:	4a50      	ldr	r2, [pc, #320]	; (80038c8 <HAL_GPIO_Init+0x2d0>)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ae:	d013      	beq.n	80037d8 <HAL_GPIO_Init+0x1e0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a46      	ldr	r2, [pc, #280]	; (80038cc <HAL_GPIO_Init+0x2d4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00d      	beq.n	80037d4 <HAL_GPIO_Init+0x1dc>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <HAL_GPIO_Init+0x2d8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <HAL_GPIO_Init+0x1d8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <HAL_GPIO_Init+0x2dc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_GPIO_Init+0x1d4>
 80037c8:	2303      	movs	r3, #3
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x1e2>
 80037cc:	2307      	movs	r3, #7
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x1e2>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x1e2>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x1e2>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_GPIO_Init+0x2d0>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381c:	4a2e      	ldr	r2, [pc, #184]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003846:	4a24      	ldr	r2, [pc, #144]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_GPIO_Init+0x2e0>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f aea9 	bne.w	8003608 <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	40010400 	.word	0x40010400

080038dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
 80038e8:	4613      	mov	r3, r2
 80038ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ec:	787b      	ldrb	r3, [r7, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038f2:	887a      	ldrh	r2, [r7, #2]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40007000 	.word	0x40007000

0800392c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <HAL_PWREx_GetVoltageRange+0x18>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40007000 	.word	0x40007000

08003948 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003956:	d130      	bne.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d038      	beq.n	80039d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800396e:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2232      	movs	r2, #50	; 0x32
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0c9b      	lsrs	r3, r3, #18
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800398c:	e002      	b.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3b01      	subs	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a0:	d102      	bne.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f2      	bne.n	800398e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b4:	d110      	bne.n	80039d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e00f      	b.n	80039da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d007      	beq.n	80039d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d0:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000
 80039ec:	20000000 	.word	0x20000000
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f000 bc4f 	b.w	80042a6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a08:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a12:	4b95      	ldr	r3, [pc, #596]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80e6 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4c>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	f040 808d 	bne.w	8003b52 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 8089 	bne.w	8003b52 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a40:	4b89      	ldr	r3, [pc, #548]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <HAL_RCC_OscConfig+0x66>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f000 bc26 	b.w	80042a6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCC_OscConfig+0x80>
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_OscConfig+0x8c>
 8003a74:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d224      	bcs.n	8003ace <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fdd9 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f000 bc06 	b.w	80042a6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	496d      	ldr	r1, [pc, #436]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab8:	4b6b      	ldr	r3, [pc, #428]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	4968      	ldr	r1, [pc, #416]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
 8003acc:	e025      	b.n	8003b1a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	4960      	ldr	r1, [pc, #384]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aec:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	495b      	ldr	r1, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fd98 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e3c5      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b1a:	f000 fccd 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4950      	ldr	r1, [pc, #320]	; (8003c6c <HAL_RCC_OscConfig+0x278>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fc18 	bl	8003374 <HAL_InitTick>
 8003b44:	4603      	mov	r3, r0
 8003b46:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d052      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	e3a9      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d032      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b66:	f7ff fc55 	bl	8003414 <HAL_GetTick>
 8003b6a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b6e:	f7ff fc51 	bl	8003414 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e392      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a35      	ldr	r2, [pc, #212]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	4930      	ldr	r1, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	492b      	ldr	r1, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
 8003bbe:	e01a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bcc:	f7ff fc22 	bl	8003414 <HAL_GetTick>
 8003bd0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd4:	f7ff fc1e 	bl	8003414 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e35f      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x1e0>
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d073      	beq.n	8003cea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_OscConfig+0x220>
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d10e      	bne.n	8003c2c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d063      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x2f4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d15f      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e33c      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x250>
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e025      	b.n	8003c90 <HAL_RCC_OscConfig+0x29c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d114      	bne.n	8003c78 <HAL_RCC_OscConfig+0x284>
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e013      	b.n	8003c90 <HAL_RCC_OscConfig+0x29c>
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	0800a848 	.word	0x0800a848
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004
 8003c78:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a8e      	ldr	r2, [pc, #568]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b8c      	ldr	r3, [pc, #560]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8b      	ldr	r2, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7ff fbbc 	bl	8003414 <HAL_GetTick>
 8003c9c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7ff fbb8 	bl	8003414 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e2f9      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	4b81      	ldr	r3, [pc, #516]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2ac>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7ff fba8 	bl	8003414 <HAL_GetTick>
 8003cc4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7ff fba4 	bl	8003414 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e2e5      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cda:	4b77      	ldr	r3, [pc, #476]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2d4>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d060      	beq.n	8003db8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_OscConfig+0x314>
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d116      	bne.n	8003d36 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	4b6b      	ldr	r3, [pc, #428]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x32c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e2c2      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	4962      	ldr	r1, [pc, #392]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	e040      	b.n	8003db8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d023      	beq.n	8003d86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3e:	4b5e      	ldr	r3, [pc, #376]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7ff fb63 	bl	8003414 <HAL_GetTick>
 8003d4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7ff fb5f 	bl	8003414 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e2a0      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d64:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b51      	ldr	r3, [pc, #324]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	494e      	ldr	r1, [pc, #312]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	e018      	b.n	8003db8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a4b      	ldr	r2, [pc, #300]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7ff fb3f 	bl	8003414 <HAL_GetTick>
 8003d96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7ff fb3b 	bl	8003414 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e27c      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8082 	beq.w	8003eca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d05f      	beq.n	8003e8e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003dce:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d037      	beq.n	8003e54 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e254      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e16:	f7ff fafd 	bl	8003414 <HAL_GetTick>
 8003e1a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7ff faf9 	bl	8003414 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b11      	cmp	r3, #17
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e23a      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ef      	bne.n	8003e1e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	f023 0210 	bic.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	491a      	ldr	r1, [pc, #104]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7ff fad6 	bl	8003414 <HAL_GetTick>
 8003e68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7ff fad2 	bl	8003414 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b11      	cmp	r3, #17
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e213      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x478>
 8003e8c:	e01d      	b.n	8003eca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7ff fab9 	bl	8003414 <HAL_GetTick>
 8003ea2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7ff fab5 	bl	8003414 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b11      	cmp	r3, #17
 8003eb2:	d903      	bls.n	8003ebc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1f6      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
 8003eb8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ebc:	4ba9      	ldr	r3, [pc, #676]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ed      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80bd 	beq.w	8004052 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ede:	4ba1      	ldr	r3, [pc, #644]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10e      	bne.n	8003f08 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4b9e      	ldr	r3, [pc, #632]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	4a9d      	ldr	r2, [pc, #628]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef6:	4b9b      	ldr	r3, [pc, #620]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b97      	ldr	r3, [pc, #604]	; (8004168 <HAL_RCC_OscConfig+0x774>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b94      	ldr	r3, [pc, #592]	; (8004168 <HAL_RCC_OscConfig+0x774>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a93      	ldr	r2, [pc, #588]	; (8004168 <HAL_RCC_OscConfig+0x774>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7ff fa78 	bl	8003414 <HAL_GetTick>
 8003f24:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7ff fa74 	bl	8003414 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1b5      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x774>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02c      	beq.n	8003fac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003f52:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	497f      	ldr	r1, [pc, #508]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f78:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a79      	ldr	r2, [pc, #484]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f88:	4b76      	ldr	r3, [pc, #472]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	4a75      	ldr	r2, [pc, #468]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f98:	e018      	b.n	8003fcc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f9a:	4b72      	ldr	r3, [pc, #456]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	4a70      	ldr	r2, [pc, #448]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003faa:	e00f      	b.n	8003fcc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fac:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	4a6c      	ldr	r2, [pc, #432]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fbc:	4b69      	ldr	r3, [pc, #420]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7ff fa1e 	bl	8003414 <HAL_GetTick>
 8003fd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7ff fa1a 	bl	8003414 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e159      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ed      	beq.n	8003fdc <HAL_RCC_OscConfig+0x5e8>
 8004000:	e01d      	b.n	800403e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7ff fa07 	bl	8003414 <HAL_GetTick>
 8004006:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7ff fa03 	bl	8003414 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e142      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ed      	bne.n	800400a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800402e:	4b4d      	ldr	r3, [pc, #308]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 800404c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004050:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d03c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004066:	4b3f      	ldr	r3, [pc, #252]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406c:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7ff f9cd 	bl	8003414 <HAL_GetTick>
 800407a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800407e:	f7ff f9c9 	bl	8003414 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e10a      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004090:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ef      	beq.n	800407e <HAL_RCC_OscConfig+0x68a>
 800409e:	e01b      	b.n	80040d8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040a0:	4b30      	ldr	r3, [pc, #192]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 80040a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a6:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7ff f9b0 	bl	8003414 <HAL_GetTick>
 80040b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b8:	f7ff f9ac 	bl	8003414 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0ed      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 80040cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ef      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80e1 	beq.w	80042a4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	f040 80b5 	bne.w	8004256 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0203 	and.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d124      	bne.n	800414a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	3b01      	subs	r3, #1
 800410c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11b      	bne.n	800414a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d113      	bne.n	800414a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d109      	bne.n	800414a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d05f      	beq.n	800420a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d05a      	beq.n	8004206 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a03      	ldr	r2, [pc, #12]	; (8004164 <HAL_RCC_OscConfig+0x770>)
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800415c:	f7ff f95a 	bl	8003414 <HAL_GetTick>
 8004160:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004162:	e00c      	b.n	800417e <HAL_RCC_OscConfig+0x78a>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7ff f952 	bl	8003414 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e093      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417e:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <HAL_RCC_OscConfig+0x8c0>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800419a:	3a01      	subs	r2, #1
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041a4:	0212      	lsls	r2, r2, #8
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	0552      	lsls	r2, r2, #21
 80041b2:	4311      	orrs	r1, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041b8:	0852      	lsrs	r2, r2, #1
 80041ba:	3a01      	subs	r2, #1
 80041bc:	0652      	lsls	r2, r2, #25
 80041be:	430a      	orrs	r2, r1
 80041c0:	493b      	ldr	r1, [pc, #236]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d2:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a36      	ldr	r2, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041dc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041de:	f7ff f919 	bl	8003414 <HAL_GetTick>
 80041e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e6:	f7ff f915 	bl	8003414 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e056      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004204:	e04e      	b.n	80042a4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e04d      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d146      	bne.n	80042a4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 800421c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004220:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800422e:	f7ff f8f1 	bl	8003414 <HAL_GetTick>
 8004232:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7ff f8ed 	bl	8003414 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e02e      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x842>
 8004254:	e026      	b.n	80042a4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d021      	beq.n	80042a0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7ff f8d4 	bl	8003414 <HAL_GetTick>
 800426c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7ff f8d0 	bl	8003414 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e011      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <HAL_RCC_OscConfig+0x8bc>)
 8004294:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	60d3      	str	r3, [r2, #12]
 800429e:	e001      	b.n	80042a4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	; 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	f99f808c 	.word	0xf99f808c

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0e7      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0207 	bic.w	r2, r3, #7
 80042e2:	4970      	ldr	r1, [pc, #448]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cf      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4960      	ldr	r1, [pc, #384]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04c      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b5a      	ldr	r3, [pc, #360]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0a6      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e09a      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437e:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e086      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4943      	ldr	r1, [pc, #268]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7ff f838 	bl	8003414 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7ff f834 	bl	8003414 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e06e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	492b      	ldr	r1, [pc, #172]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d210      	bcs.n	800442e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 0207 	bic.w	r2, r3, #7
 8004414:	4923      	ldr	r1, [pc, #140]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e036      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4918      	ldr	r1, [pc, #96]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4910      	ldr	r1, [pc, #64]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446c:	f000 f824 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	490b      	ldr	r1, [pc, #44]	; (80044ac <HAL_RCC_ClockConfig+0x1f4>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1f8>)
 800448a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1fc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe ff6f 	bl	8003374 <HAL_InitTick>
 8004496:	4603      	mov	r3, r0
 8004498:	72fb      	strb	r3, [r7, #11]

  return status;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800a848 	.word	0x0800a848
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d0:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d121      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11e      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044ec:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e005      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d102      	bne.n	8004536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e004      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d101      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 800453e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d134      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d003      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0xa6>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0xac>
 800455c:	e005      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004560:	617b      	str	r3, [r7, #20]
      break;
 8004562:	e005      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004566:	617b      	str	r3, [r7, #20]
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	617b      	str	r3, [r7, #20]
      break;
 800456e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	fb03 f202 	mul.w	r2, r3, r2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	0e5b      	lsrs	r3, r3, #25
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	3301      	adds	r3, #1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045b0:	69bb      	ldr	r3, [r7, #24]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	; 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800a860 	.word	0x0800a860
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800a858 	.word	0x0800a858

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004618:	f7ff ffda 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0adb      	lsrs	r3, r3, #11
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4904      	ldr	r1, [pc, #16]	; (800463c <HAL_RCC_GetPCLK2Freq+0x28>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	0800a858 	.word	0x0800a858

08004640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004658:	f7ff f968 	bl	800392c <HAL_PWREx_GetVoltageRange>
 800465c:	6178      	str	r0, [r7, #20]
 800465e:	e014      	b.n	800468a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6593      	str	r3, [r2, #88]	; 0x58
 800466c:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004678:	f7ff f958 	bl	800392c <HAL_PWREx_GetVoltageRange>
 800467c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004690:	d10b      	bne.n	80046aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d919      	bls.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2ba0      	cmp	r3, #160	; 0xa0
 800469c:	d902      	bls.n	80046a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800469e:	2302      	movs	r3, #2
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e013      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046a4:	2301      	movs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e010      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d902      	bls.n	80046b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046b0:	2303      	movs	r3, #3
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	e00a      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	d102      	bne.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046bc:	2302      	movs	r3, #2
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	e004      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d101      	bne.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c8:	2301      	movs	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	4909      	ldr	r1, [pc, #36]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40022000 	.word	0x40022000

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004708:	2300      	movs	r3, #0
 800470a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800470c:	2300      	movs	r3, #0
 800470e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 809e 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004722:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	4a3f      	ldr	r2, [pc, #252]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800473e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004742:	6593      	str	r3, [r2, #88]	; 0x58
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004750:	2301      	movs	r3, #1
 8004752:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a39      	ldr	r2, [pc, #228]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004760:	f7fe fe58 	bl	8003414 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004766:	e009      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7fe fe54 	bl	8003414 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	74fb      	strb	r3, [r7, #19]
        break;
 800477a:	e005      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ef      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d15a      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478e:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01e      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d019      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b6:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d016      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe fe14 	bl	8003414 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fe fe10 	bl	8003414 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d902      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	74fb      	strb	r3, [r7, #19]
            break;
 8004806:	e006      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ec      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004832:	e009      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004848:	7c7b      	ldrb	r3, [r7, #17]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b6e      	ldr	r3, [pc, #440]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	4a6d      	ldr	r2, [pc, #436]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004866:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0203 	bic.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4964      	ldr	r1, [pc, #400]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004888:	4b5f      	ldr	r3, [pc, #380]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	495c      	ldr	r1, [pc, #368]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048aa:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4953      	ldr	r1, [pc, #332]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048cc:	4b4e      	ldr	r3, [pc, #312]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	494b      	ldr	r1, [pc, #300]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ee:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4942      	ldr	r1, [pc, #264]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004910:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	493a      	ldr	r1, [pc, #232]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004932:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4931      	ldr	r1, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004954:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4929      	ldr	r1, [pc, #164]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4920      	ldr	r1, [pc, #128]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	4918      	ldr	r1, [pc, #96]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	d105      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000

08004a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e095      	b.n	8004b6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4e:	d009      	beq.n	8004a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	61da      	str	r2, [r3, #28]
 8004a56:	e005      	b.n	8004a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe fa7c 	bl	8002f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa4:	d902      	bls.n	8004aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e002      	b.n	8004ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aba:	d007      	beq.n	8004acc <HAL_SPI_Init+0xa0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	ea42 0103 	orr.w	r1, r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	f003 0204 	and.w	r2, r3, #4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b088      	sub	sp, #32
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_SPI_Transmit+0x22>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e158      	b.n	8004e46 <HAL_SPI_Transmit+0x2d4>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9c:	f7fe fc3a 	bl	8003414 <HAL_GetTick>
 8004ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d002      	beq.n	8004bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bb6:	e13d      	b.n	8004e34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Transmit+0x52>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bc8:	e134      	b.n	8004e34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	d10f      	bne.n	8004c36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d007      	beq.n	8004c54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c5c:	d94b      	bls.n	8004cf6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_SPI_Transmit+0xfa>
 8004c66:	8afb      	ldrh	r3, [r7, #22]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d13e      	bne.n	8004cea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	881a      	ldrh	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	1c9a      	adds	r2, r3, #2
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c90:	e02b      	b.n	8004cea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d112      	bne.n	8004cc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	1c9a      	adds	r2, r3, #2
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc4:	e011      	b.n	8004cea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc6:	f7fe fba5 	bl	8003414 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d803      	bhi.n	8004cde <HAL_SPI_Transmit+0x16c>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d102      	bne.n	8004ce4 <HAL_SPI_Transmit+0x172>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ce8:	e0a4      	b.n	8004e34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ce      	bne.n	8004c92 <HAL_SPI_Transmit+0x120>
 8004cf4:	e07c      	b.n	8004df0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_Transmit+0x192>
 8004cfe:	8afb      	ldrh	r3, [r7, #22]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d170      	bne.n	8004de6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d912      	bls.n	8004d34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b02      	subs	r3, #2
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d32:	e058      	b.n	8004de6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d5a:	e044      	b.n	8004de6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d12b      	bne.n	8004dc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d912      	bls.n	8004d9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b02      	subs	r3, #2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d98:	e025      	b.n	8004de6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc0:	e011      	b.n	8004de6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc2:	f7fe fb27 	bl	8003414 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d803      	bhi.n	8004dda <HAL_SPI_Transmit+0x268>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <HAL_SPI_Transmit+0x26e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004de4:	e026      	b.n	8004e34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1b5      	bne.n	8004d5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fce3 	bl	80057c0 <SPI_EndRxTxTransaction>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e000      	b.n	8004e34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b088      	sub	sp, #32
 8004e52:	af02      	add	r7, sp, #8
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6a:	d112      	bne.n	8004e92 <HAL_SPI_Receive+0x44>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f910 	bl	80050ae <HAL_SPI_TransmitReceive>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	e109      	b.n	80050a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_SPI_Receive+0x52>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e102      	b.n	80050a6 <HAL_SPI_Receive+0x258>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea8:	f7fe fab4 	bl	8003414 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ebe:	e0e9      	b.n	8005094 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Receive+0x7e>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ed0:	e0e0      	b.n	8005094 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f1c:	d908      	bls.n	8004f30 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	e007      	b.n	8004f40 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	d10f      	bne.n	8004f6a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f90:	d867      	bhi.n	8005062 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f92:	e030      	b.n	8004ff6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d117      	bne.n	8004fd2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f103 020c 	add.w	r2, r3, #12
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fd0:	e011      	b.n	8004ff6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd2:	f7fe fa1f 	bl	8003414 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d803      	bhi.n	8004fea <HAL_SPI_Receive+0x19c>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d102      	bne.n	8004ff0 <HAL_SPI_Receive+0x1a2>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ff4:	e04e      	b.n	8005094 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1c8      	bne.n	8004f94 <HAL_SPI_Receive+0x146>
 8005002:	e034      	b.n	800506e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d115      	bne.n	800503e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	b292      	uxth	r2, r2
 800501e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800503c:	e011      	b.n	8005062 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503e:	f7fe f9e9 	bl	8003414 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d803      	bhi.n	8005056 <HAL_SPI_Receive+0x208>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d102      	bne.n	800505c <HAL_SPI_Receive+0x20e>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005060:	e018      	b.n	8005094 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ca      	bne.n	8005004 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fb4c 	bl	8005710 <SPI_EndRxTransaction>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
 8005090:	e000      	b.n	8005094 <HAL_SPI_Receive+0x246>
  }

error :
 8005092:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08a      	sub	sp, #40	; 0x28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050bc:	2301      	movs	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x26>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e1fb      	b.n	80054cc <HAL_SPI_TransmitReceive+0x41e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050dc:	f7fe f99a 	bl	8003414 <HAL_GetTick>
 80050e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050f4:	887b      	ldrh	r3, [r7, #2]
 80050f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050f8:	7efb      	ldrb	r3, [r7, #27]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d00e      	beq.n	800511c <HAL_SPI_TransmitReceive+0x6e>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d106      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x66>
 800510e:	7efb      	ldrb	r3, [r7, #27]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d003      	beq.n	800511c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005114:	2302      	movs	r3, #2
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800511a:	e1cd      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_SPI_TransmitReceive+0x80>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_SPI_TransmitReceive+0x80>
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005134:	e1c0      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b04      	cmp	r3, #4
 8005140:	d003      	beq.n	800514a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2205      	movs	r2, #5
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	887a      	ldrh	r2, [r7, #2]
 800515a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	887a      	ldrh	r2, [r7, #2]
 8005176:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800518c:	d802      	bhi.n	8005194 <HAL_SPI_TransmitReceive+0xe6>
 800518e:	8a3b      	ldrh	r3, [r7, #16]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d908      	bls.n	80051a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e007      	b.n	80051b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d007      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051dc:	d97c      	bls.n	80052d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x13e>
 80051e6:	8a7b      	ldrh	r3, [r7, #18]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d169      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	881a      	ldrh	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005210:	e056      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d11b      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x1aa>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x1aa>
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	2b01      	cmp	r3, #1
 800522e:	d113      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	881a      	ldrh	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	1c9a      	adds	r2, r3, #2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d11c      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1f2>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	b292      	uxth	r2, r2
 800527e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800529c:	2301      	movs	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052a0:	f7fe f8b8 	bl	8003414 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d807      	bhi.n	80052c0 <HAL_SPI_TransmitReceive+0x212>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d003      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052be:	e0fb      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1a3      	bne.n	8005212 <HAL_SPI_TransmitReceive+0x164>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d19d      	bne.n	8005212 <HAL_SPI_TransmitReceive+0x164>
 80052d6:	e0df      	b.n	8005498 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x23a>
 80052e0:	8a7b      	ldrh	r3, [r7, #18]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	f040 80cb 	bne.w	800547e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d912      	bls.n	8005318 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b02      	subs	r3, #2
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005316:	e0b2      	b.n	800547e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533e:	e09e      	b.n	800547e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d134      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x30a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02f      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x30a>
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	2b01      	cmp	r3, #1
 800535c:	d12c      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d912      	bls.n	800538e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b02      	subs	r3, #2
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800538c:	e012      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d148      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x3aa>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d042      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d923      	bls.n	8005426 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	b292      	uxth	r2, r2
 80053ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b02      	subs	r3, #2
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d81f      	bhi.n	8005454 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	e016      	b.n	8005454 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f103 020c 	add.w	r2, r3, #12
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005454:	2301      	movs	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005458:	f7fd ffdc 	bl	8003414 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005464:	429a      	cmp	r2, r3
 8005466:	d803      	bhi.n	8005470 <HAL_SPI_TransmitReceive+0x3c2>
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d102      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x3c8>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800547c:	e01c      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	f47f af5b 	bne.w	8005340 <HAL_SPI_TransmitReceive+0x292>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	f47f af54 	bne.w	8005340 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f98f 	bl	80057c0 <SPI_EndRxTxTransaction>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
 80054b4:	e000      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3728      	adds	r7, #40	; 0x28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e4:	f7fd ff96 	bl	8003414 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f4:	f7fd ff8e 	bl	8003414 <HAL_GetTick>
 80054f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	015b      	lsls	r3, r3, #5
 8005500:	0d1b      	lsrs	r3, r3, #20
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550a:	e054      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d050      	beq.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005514:	f7fd ff7e 	bl	8003414 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	429a      	cmp	r2, r3
 8005522:	d902      	bls.n	800552a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d13d      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d111      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554c:	d004      	beq.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d107      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d10f      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e017      	b.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d19b      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000000 	.word	0x20000000

080055e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055f6:	f7fd ff0d 	bl	8003414 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	4413      	add	r3, r2
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005606:	f7fd ff05 	bl	8003414 <HAL_GetTick>
 800560a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005614:	4b3d      	ldr	r3, [pc, #244]	; (800570c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00da      	lsls	r2, r3, #3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	0d1b      	lsrs	r3, r3, #20
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800562c:	e060      	b.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005634:	d107      	bne.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005644:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d050      	beq.n	80056f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800564e:	f7fd fee1 	bl	8003414 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	429a      	cmp	r2, r3
 800565c:	d902      	bls.n	8005664 <SPI_WaitFifoStateUntilTimeout+0x80>
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d13d      	bne.n	80056e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005672:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567c:	d111      	bne.n	80056a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005686:	d004      	beq.n	8005692 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	d107      	bne.n	80056a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056aa:	d10f      	bne.n	80056cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d196      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3728      	adds	r7, #40	; 0x28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000000 	.word	0x20000000

08005710 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005724:	d111      	bne.n	800574a <SPI_EndRxTransaction+0x3a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	d004      	beq.n	800573a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005738:	d107      	bne.n	800574a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005748:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff febd 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e023      	b.n	80057b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005778:	d11d      	bne.n	80057b6 <SPI_EndRxTransaction+0xa6>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005782:	d004      	beq.n	800578e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d113      	bne.n	80057b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff ff22 	bl	80055e4 <SPI_WaitFifoStateUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e000      	b.n	80057b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ff03 	bl	80055e4 <SPI_WaitFifoStateUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e027      	b.n	8005844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fe68 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e014      	b.n	8005844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2200      	movs	r2, #0
 8005822:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fedc 	bl	80055e4 <SPI_WaitFifoStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e000      	b.n	8005844 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e049      	b.n	80058f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fd fbc4 	bl	8003000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f000 f94c 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e033      	b.n	800597c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_TIM_Base_Start+0x8c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIM_Base_Start+0x3e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d004      	beq.n	800593a <HAL_TIM_Base_Start+0x3e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_TIM_Base_Start+0x90>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d115      	bne.n	8005966 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b13      	ldr	r3, [pc, #76]	; (8005990 <HAL_TIM_Base_Start+0x94>)
 8005942:	4013      	ands	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d015      	beq.n	8005978 <HAL_TIM_Base_Start+0x7c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005952:	d011      	beq.n	8005978 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	e008      	b.n	8005978 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e000      	b.n	800597a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40014000 	.word	0x40014000
 8005990:	00010007 	.word	0x00010007

08005994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIM_ConfigClockSource+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0b6      	b.n	8005b1e <HAL_TIM_ConfigClockSource+0x18a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ec:	d03e      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0xd8>
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	f200 8087 	bhi.w	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	f000 8086 	beq.w	8005b0a <HAL_TIM_ConfigClockSource+0x176>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	d87f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a04:	2b70      	cmp	r3, #112	; 0x70
 8005a06:	d01a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xaa>
 8005a08:	2b70      	cmp	r3, #112	; 0x70
 8005a0a:	d87b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a0c:	2b60      	cmp	r3, #96	; 0x60
 8005a0e:	d050      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x11e>
 8005a10:	2b60      	cmp	r3, #96	; 0x60
 8005a12:	d877      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a14:	2b50      	cmp	r3, #80	; 0x50
 8005a16:	d03c      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xfe>
 8005a18:	2b50      	cmp	r3, #80	; 0x50
 8005a1a:	d873      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d058      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x13e>
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d86f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a24:	2b30      	cmp	r3, #48	; 0x30
 8005a26:	d064      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a28:	2b30      	cmp	r3, #48	; 0x30
 8005a2a:	d86b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d060      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d867      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d05c      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d05a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a3c:	e062      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f000 f949 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]
      break;
 8005a6a:	e04f      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6899      	ldr	r1, [r3, #8]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f000 f932 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a8e:	609a      	str	r2, [r3, #8]
      break;
 8005a90:	e03c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 f8a6 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2150      	movs	r1, #80	; 0x50
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f8ff 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e02c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 f8c5 	bl	8005c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2160      	movs	r1, #96	; 0x60
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f8ef 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e01c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 f886 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f8df 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005af0:	e00c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 f8d6 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005b02:	e003      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      break;
 8005b08:	e000      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2a      	ldr	r2, [pc, #168]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x20>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <TIM_Base_SetConfig+0xc4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0b      	ldr	r2, [pc, #44]	; (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <TIM_Base_SetConfig+0xc4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400

08005bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 030a 	bic.w	r3, r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f043 0307 	orr.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	609a      	str	r2, [r3, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e04f      	b.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d004      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40014000 	.word	0x40014000

08005df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e040      	b.n	8005e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fd f912 	bl	800303c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2224      	movs	r2, #36	; 0x24
 8005e1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8c0 	bl	8005fb4 <UART_SetConfig>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e022      	b.n	8005e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb0e 	bl	8006468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb95 	bl	80065ac <UART_CheckIdleState>
 8005e82:	4603      	mov	r3, r0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	f040 8082 	bne.w	8005faa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_Transmit+0x26>
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07a      	b.n	8005fac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Transmit+0x38>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e073      	b.n	8005fac <HAL_UART_Transmit+0x120>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2221      	movs	r2, #33	; 0x21
 8005ed8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eda:	f7fd fa9b 	bl	8003414 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d108      	bne.n	8005f0c <HAL_UART_Transmit+0x80>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e003      	b.n	8005f14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f1c:	e02d      	b.n	8005f7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fb88 	bl	800663e <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e039      	b.n	8005fac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3302      	adds	r3, #2
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e008      	b.n	8005f68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cb      	bne.n	8005f1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fb54 	bl	800663e <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e005      	b.n	8005fac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e000      	b.n	8005fac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
  }
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b08a      	sub	sp, #40	; 0x28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b9e      	ldr	r3, [pc, #632]	; (800625c <UART_SetConfig+0x2a8>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a93      	ldr	r2, [pc, #588]	; (8006260 <UART_SetConfig+0x2ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601c:	4313      	orrs	r3, r2
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a8a      	ldr	r2, [pc, #552]	; (8006264 <UART_SetConfig+0x2b0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d126      	bne.n	800608c <UART_SetConfig+0xd8>
 800603e:	4b8a      	ldr	r3, [pc, #552]	; (8006268 <UART_SetConfig+0x2b4>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b03      	cmp	r3, #3
 800604a:	d81b      	bhi.n	8006084 <UART_SetConfig+0xd0>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0xa0>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006065 	.word	0x08006065
 8006058:	08006075 	.word	0x08006075
 800605c:	0800606d 	.word	0x0800606d
 8006060:	0800607d 	.word	0x0800607d
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606a:	e0ab      	b.n	80061c4 <UART_SetConfig+0x210>
 800606c:	2302      	movs	r3, #2
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e0a7      	b.n	80061c4 <UART_SetConfig+0x210>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e0a3      	b.n	80061c4 <UART_SetConfig+0x210>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e09f      	b.n	80061c4 <UART_SetConfig+0x210>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e09b      	b.n	80061c4 <UART_SetConfig+0x210>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a76      	ldr	r2, [pc, #472]	; (800626c <UART_SetConfig+0x2b8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d138      	bne.n	8006108 <UART_SetConfig+0x154>
 8006096:	4b74      	ldr	r3, [pc, #464]	; (8006268 <UART_SetConfig+0x2b4>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d82d      	bhi.n	8006100 <UART_SetConfig+0x14c>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0xf8>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e1 	.word	0x080060e1
 80060b0:	08006101 	.word	0x08006101
 80060b4:	08006101 	.word	0x08006101
 80060b8:	08006101 	.word	0x08006101
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006101 	.word	0x08006101
 80060c8:	08006101 	.word	0x08006101
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	08006101 	.word	0x08006101
 80060d4:	08006101 	.word	0x08006101
 80060d8:	08006101 	.word	0x08006101
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e06d      	b.n	80061c4 <UART_SetConfig+0x210>
 80060e8:	2302      	movs	r3, #2
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ee:	e069      	b.n	80061c4 <UART_SetConfig+0x210>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f6:	e065      	b.n	80061c4 <UART_SetConfig+0x210>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fe:	e061      	b.n	80061c4 <UART_SetConfig+0x210>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006106:	e05d      	b.n	80061c4 <UART_SetConfig+0x210>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a58      	ldr	r2, [pc, #352]	; (8006270 <UART_SetConfig+0x2bc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d125      	bne.n	800615e <UART_SetConfig+0x1aa>
 8006112:	4b55      	ldr	r3, [pc, #340]	; (8006268 <UART_SetConfig+0x2b4>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d016      	beq.n	800614e <UART_SetConfig+0x19a>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d818      	bhi.n	8006156 <UART_SetConfig+0x1a2>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d00a      	beq.n	800613e <UART_SetConfig+0x18a>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d814      	bhi.n	8006156 <UART_SetConfig+0x1a2>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <UART_SetConfig+0x182>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d008      	beq.n	8006146 <UART_SetConfig+0x192>
 8006134:	e00f      	b.n	8006156 <UART_SetConfig+0x1a2>
 8006136:	2300      	movs	r3, #0
 8006138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613c:	e042      	b.n	80061c4 <UART_SetConfig+0x210>
 800613e:	2302      	movs	r3, #2
 8006140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006144:	e03e      	b.n	80061c4 <UART_SetConfig+0x210>
 8006146:	2304      	movs	r3, #4
 8006148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614c:	e03a      	b.n	80061c4 <UART_SetConfig+0x210>
 800614e:	2308      	movs	r3, #8
 8006150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006154:	e036      	b.n	80061c4 <UART_SetConfig+0x210>
 8006156:	2310      	movs	r3, #16
 8006158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615c:	e032      	b.n	80061c4 <UART_SetConfig+0x210>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3f      	ldr	r2, [pc, #252]	; (8006260 <UART_SetConfig+0x2ac>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d12a      	bne.n	80061be <UART_SetConfig+0x20a>
 8006168:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <UART_SetConfig+0x2b4>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006176:	d01a      	beq.n	80061ae <UART_SetConfig+0x1fa>
 8006178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800617c:	d81b      	bhi.n	80061b6 <UART_SetConfig+0x202>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006182:	d00c      	beq.n	800619e <UART_SetConfig+0x1ea>
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d815      	bhi.n	80061b6 <UART_SetConfig+0x202>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <UART_SetConfig+0x1e2>
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d008      	beq.n	80061a6 <UART_SetConfig+0x1f2>
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0x202>
 8006196:	2300      	movs	r3, #0
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619c:	e012      	b.n	80061c4 <UART_SetConfig+0x210>
 800619e:	2302      	movs	r3, #2
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a4:	e00e      	b.n	80061c4 <UART_SetConfig+0x210>
 80061a6:	2304      	movs	r3, #4
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ac:	e00a      	b.n	80061c4 <UART_SetConfig+0x210>
 80061ae:	2308      	movs	r3, #8
 80061b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b4:	e006      	b.n	80061c4 <UART_SetConfig+0x210>
 80061b6:	2310      	movs	r3, #16
 80061b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061bc:	e002      	b.n	80061c4 <UART_SetConfig+0x210>
 80061be:	2310      	movs	r3, #16
 80061c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <UART_SetConfig+0x2ac>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f040 808a 	bne.w	80062e4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d824      	bhi.n	8006222 <UART_SetConfig+0x26e>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x22c>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006205 	.word	0x08006205
 80061e4:	08006223 	.word	0x08006223
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006223 	.word	0x08006223
 80061f0:	08006213 	.word	0x08006213
 80061f4:	08006223 	.word	0x08006223
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006223 	.word	0x08006223
 8006200:	0800621b 	.word	0x0800621b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006204:	f7fe f9f0 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006208:	61f8      	str	r0, [r7, #28]
        break;
 800620a:	e010      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <UART_SetConfig+0x2c0>)
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e00d      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7fe f951 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8006216:	61f8      	str	r0, [r7, #28]
        break;
 8006218:	e009      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621e:	61fb      	str	r3, [r7, #28]
        break;
 8006220:	e005      	b.n	800622e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800622c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8109 	beq.w	8006448 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	4413      	add	r3, r2
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	429a      	cmp	r2, r3
 8006244:	d305      	bcc.n	8006252 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	429a      	cmp	r2, r3
 8006250:	d912      	bls.n	8006278 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006258:	e0f6      	b.n	8006448 <UART_SetConfig+0x494>
 800625a:	bf00      	nop
 800625c:	efff69f3 	.word	0xefff69f3
 8006260:	40008000 	.word	0x40008000
 8006264:	40013800 	.word	0x40013800
 8006268:	40021000 	.word	0x40021000
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2200      	movs	r2, #0
 800627c:	461c      	mov	r4, r3
 800627e:	4615      	mov	r5, r2
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	022b      	lsls	r3, r5, #8
 800628a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800628e:	0222      	lsls	r2, r4, #8
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	6849      	ldr	r1, [r1, #4]
 8006294:	0849      	lsrs	r1, r1, #1
 8006296:	2000      	movs	r0, #0
 8006298:	4688      	mov	r8, r1
 800629a:	4681      	mov	r9, r0
 800629c:	eb12 0a08 	adds.w	sl, r2, r8
 80062a0:	eb43 0b09 	adc.w	fp, r3, r9
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b2:	4650      	mov	r0, sl
 80062b4:	4659      	mov	r1, fp
 80062b6:	f7fa fcc7 	bl	8000c48 <__aeabi_uldivmod>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4613      	mov	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d308      	bcc.n	80062dc <UART_SetConfig+0x328>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	d204      	bcs.n	80062dc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e0b5      	b.n	8006448 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062e2:	e0b1      	b.n	8006448 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d15d      	bne.n	80063aa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80062ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d827      	bhi.n	8006346 <UART_SetConfig+0x392>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x348>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	08006347 	.word	0x08006347
 800630c:	08006337 	.word	0x08006337
 8006310:	08006347 	.word	0x08006347
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
 800631c:	0800633f 	.word	0x0800633f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006320:	f7fe f962 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006324:	61f8      	str	r0, [r7, #28]
        break;
 8006326:	e014      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fe f974 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 800632c:	61f8      	str	r0, [r7, #28]
        break;
 800632e:	e010      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006330:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <UART_SetConfig+0x4b0>)
 8006332:	61fb      	str	r3, [r7, #28]
        break;
 8006334:	e00d      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006336:	f7fe f8bf 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800633a:	61f8      	str	r0, [r7, #28]
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	61fb      	str	r3, [r7, #28]
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d077      	beq.n	8006448 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	005a      	lsls	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	441a      	add	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b0f      	cmp	r3, #15
 8006372:	d916      	bls.n	80063a2 <UART_SetConfig+0x3ee>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d212      	bcs.n	80063a2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f023 030f 	bic.w	r3, r3, #15
 8006384:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	b29a      	uxth	r2, r3
 8006392:	8afb      	ldrh	r3, [r7, #22]
 8006394:	4313      	orrs	r3, r2
 8006396:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	8afa      	ldrh	r2, [r7, #22]
 800639e:	60da      	str	r2, [r3, #12]
 80063a0:	e052      	b.n	8006448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a8:	e04e      	b.n	8006448 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d827      	bhi.n	8006402 <UART_SetConfig+0x44e>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <UART_SetConfig+0x404>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	08006403 	.word	0x08006403
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	08006403 	.word	0x08006403
 80063d0:	08006403 	.word	0x08006403
 80063d4:	08006403 	.word	0x08006403
 80063d8:	080063fb 	.word	0x080063fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7fe f904 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
        break;
 80063e2:	e014      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e4:	f7fe f916 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 80063e8:	61f8      	str	r0, [r7, #28]
        break;
 80063ea:	e010      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063ec:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <UART_SetConfig+0x4b0>)
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e00d      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063f2:	f7fe f861 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80063f6:	61f8      	str	r0, [r7, #28]
        break;
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fe:	61fb      	str	r3, [r7, #28]
        break;
 8006400:	e005      	b.n	800640e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800640c:	bf00      	nop
    }

    if (pclk != 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d019      	beq.n	8006448 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	085a      	lsrs	r2, r3, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d909      	bls.n	8006442 <UART_SetConfig+0x48e>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006434:	d205      	bcs.n	8006442 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e002      	b.n	8006448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop
 8006464:	00f42400 	.word	0x00f42400

08006468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01a      	beq.n	800657e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d10a      	bne.n	800657e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	605a      	str	r2, [r3, #4]
  }
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065bc:	f7fc ff2a 	bl	8003414 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d10e      	bne.n	80065ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f82d 	bl	800663e <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e023      	b.n	8006636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d10e      	bne.n	800661a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f817 	bl	800663e <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e00d      	b.n	8006636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b09c      	sub	sp, #112	; 0x70
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664e:	e0a5      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	f000 80a1 	beq.w	800679c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665a:	f7fc fedb 	bl	8003414 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006666:	429a      	cmp	r2, r3
 8006668:	d302      	bcc.n	8006670 <UART_WaitOnFlagUntilTimeout+0x32>
 800666a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800666c:	2b00      	cmp	r3, #0
 800666e:	d13e      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800667e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006684:	667b      	str	r3, [r7, #100]	; 0x64
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006690:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800669c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e6      	bne.n	8006670 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	663b      	str	r3, [r7, #96]	; 0x60
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e5      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e067      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d04f      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670a:	d147      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006714:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800672a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
 8006736:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800673a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	613b      	str	r3, [r7, #16]
   return(result);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006768:	623a      	str	r2, [r7, #32]
 800676a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	61bb      	str	r3, [r7, #24]
   return(result);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e010      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f43f af4a 	beq.w	8006650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3770      	adds	r7, #112	; 0x70
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <__errno>:
 80067c8:	4b01      	ldr	r3, [pc, #4]	; (80067d0 <__errno+0x8>)
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	2000000c 	.word	0x2000000c

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4d0d      	ldr	r5, [pc, #52]	; (800680c <__libc_init_array+0x38>)
 80067d8:	4c0d      	ldr	r4, [pc, #52]	; (8006810 <__libc_init_array+0x3c>)
 80067da:	1b64      	subs	r4, r4, r5
 80067dc:	10a4      	asrs	r4, r4, #2
 80067de:	2600      	movs	r6, #0
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	4d0b      	ldr	r5, [pc, #44]	; (8006814 <__libc_init_array+0x40>)
 80067e6:	4c0c      	ldr	r4, [pc, #48]	; (8006818 <__libc_init_array+0x44>)
 80067e8:	f003 fce0 	bl	800a1ac <_init>
 80067ec:	1b64      	subs	r4, r4, r5
 80067ee:	10a4      	asrs	r4, r4, #2
 80067f0:	2600      	movs	r6, #0
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	0800aca8 	.word	0x0800aca8
 8006810:	0800aca8 	.word	0x0800aca8
 8006814:	0800aca8 	.word	0x0800aca8
 8006818:	0800acac 	.word	0x0800acac

0800681c <memset>:
 800681c:	4402      	add	r2, r0
 800681e:	4603      	mov	r3, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <__cvt>:
 800682c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	ec55 4b10 	vmov	r4, r5, d0
 8006834:	2d00      	cmp	r5, #0
 8006836:	460e      	mov	r6, r1
 8006838:	4619      	mov	r1, r3
 800683a:	462b      	mov	r3, r5
 800683c:	bfbb      	ittet	lt
 800683e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006842:	461d      	movlt	r5, r3
 8006844:	2300      	movge	r3, #0
 8006846:	232d      	movlt	r3, #45	; 0x2d
 8006848:	700b      	strb	r3, [r1, #0]
 800684a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800684c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006850:	4691      	mov	r9, r2
 8006852:	f023 0820 	bic.w	r8, r3, #32
 8006856:	bfbc      	itt	lt
 8006858:	4622      	movlt	r2, r4
 800685a:	4614      	movlt	r4, r2
 800685c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006860:	d005      	beq.n	800686e <__cvt+0x42>
 8006862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006866:	d100      	bne.n	800686a <__cvt+0x3e>
 8006868:	3601      	adds	r6, #1
 800686a:	2102      	movs	r1, #2
 800686c:	e000      	b.n	8006870 <__cvt+0x44>
 800686e:	2103      	movs	r1, #3
 8006870:	ab03      	add	r3, sp, #12
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	ab02      	add	r3, sp, #8
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	ec45 4b10 	vmov	d0, r4, r5
 800687c:	4653      	mov	r3, sl
 800687e:	4632      	mov	r2, r6
 8006880:	f000 fe1a 	bl	80074b8 <_dtoa_r>
 8006884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006888:	4607      	mov	r7, r0
 800688a:	d102      	bne.n	8006892 <__cvt+0x66>
 800688c:	f019 0f01 	tst.w	r9, #1
 8006890:	d022      	beq.n	80068d8 <__cvt+0xac>
 8006892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006896:	eb07 0906 	add.w	r9, r7, r6
 800689a:	d110      	bne.n	80068be <__cvt+0x92>
 800689c:	783b      	ldrb	r3, [r7, #0]
 800689e:	2b30      	cmp	r3, #48	; 0x30
 80068a0:	d10a      	bne.n	80068b8 <__cvt+0x8c>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7fa f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ae:	b918      	cbnz	r0, 80068b8 <__cvt+0x8c>
 80068b0:	f1c6 0601 	rsb	r6, r6, #1
 80068b4:	f8ca 6000 	str.w	r6, [sl]
 80068b8:	f8da 3000 	ldr.w	r3, [sl]
 80068bc:	4499      	add	r9, r3
 80068be:	2200      	movs	r2, #0
 80068c0:	2300      	movs	r3, #0
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7fa f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ca:	b108      	cbz	r0, 80068d0 <__cvt+0xa4>
 80068cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80068d0:	2230      	movs	r2, #48	; 0x30
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	454b      	cmp	r3, r9
 80068d6:	d307      	bcc.n	80068e8 <__cvt+0xbc>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068dc:	1bdb      	subs	r3, r3, r7
 80068de:	4638      	mov	r0, r7
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	b004      	add	sp, #16
 80068e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	9103      	str	r1, [sp, #12]
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e7f0      	b.n	80068d2 <__cvt+0xa6>

080068f0 <__exponent>:
 80068f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068f2:	4603      	mov	r3, r0
 80068f4:	2900      	cmp	r1, #0
 80068f6:	bfb8      	it	lt
 80068f8:	4249      	neglt	r1, r1
 80068fa:	f803 2b02 	strb.w	r2, [r3], #2
 80068fe:	bfb4      	ite	lt
 8006900:	222d      	movlt	r2, #45	; 0x2d
 8006902:	222b      	movge	r2, #43	; 0x2b
 8006904:	2909      	cmp	r1, #9
 8006906:	7042      	strb	r2, [r0, #1]
 8006908:	dd2a      	ble.n	8006960 <__exponent+0x70>
 800690a:	f10d 0407 	add.w	r4, sp, #7
 800690e:	46a4      	mov	ip, r4
 8006910:	270a      	movs	r7, #10
 8006912:	46a6      	mov	lr, r4
 8006914:	460a      	mov	r2, r1
 8006916:	fb91 f6f7 	sdiv	r6, r1, r7
 800691a:	fb07 1516 	mls	r5, r7, r6, r1
 800691e:	3530      	adds	r5, #48	; 0x30
 8006920:	2a63      	cmp	r2, #99	; 0x63
 8006922:	f104 34ff 	add.w	r4, r4, #4294967295
 8006926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800692a:	4631      	mov	r1, r6
 800692c:	dcf1      	bgt.n	8006912 <__exponent+0x22>
 800692e:	3130      	adds	r1, #48	; 0x30
 8006930:	f1ae 0502 	sub.w	r5, lr, #2
 8006934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006938:	1c44      	adds	r4, r0, #1
 800693a:	4629      	mov	r1, r5
 800693c:	4561      	cmp	r1, ip
 800693e:	d30a      	bcc.n	8006956 <__exponent+0x66>
 8006940:	f10d 0209 	add.w	r2, sp, #9
 8006944:	eba2 020e 	sub.w	r2, r2, lr
 8006948:	4565      	cmp	r5, ip
 800694a:	bf88      	it	hi
 800694c:	2200      	movhi	r2, #0
 800694e:	4413      	add	r3, r2
 8006950:	1a18      	subs	r0, r3, r0
 8006952:	b003      	add	sp, #12
 8006954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800695a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800695e:	e7ed      	b.n	800693c <__exponent+0x4c>
 8006960:	2330      	movs	r3, #48	; 0x30
 8006962:	3130      	adds	r1, #48	; 0x30
 8006964:	7083      	strb	r3, [r0, #2]
 8006966:	70c1      	strb	r1, [r0, #3]
 8006968:	1d03      	adds	r3, r0, #4
 800696a:	e7f1      	b.n	8006950 <__exponent+0x60>

0800696c <_printf_float>:
 800696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	ed2d 8b02 	vpush	{d8}
 8006974:	b08d      	sub	sp, #52	; 0x34
 8006976:	460c      	mov	r4, r1
 8006978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800697c:	4616      	mov	r6, r2
 800697e:	461f      	mov	r7, r3
 8006980:	4605      	mov	r5, r0
 8006982:	f001 fd3f 	bl	8008404 <_localeconv_r>
 8006986:	f8d0 a000 	ldr.w	sl, [r0]
 800698a:	4650      	mov	r0, sl
 800698c:	f7f9 fc20 	bl	80001d0 <strlen>
 8006990:	2300      	movs	r3, #0
 8006992:	930a      	str	r3, [sp, #40]	; 0x28
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	f8d8 3000 	ldr.w	r3, [r8]
 800699c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069a0:	3307      	adds	r3, #7
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	f103 0208 	add.w	r2, r3, #8
 80069aa:	f8c8 2000 	str.w	r2, [r8]
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80069b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80069ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80069c4:	ee08 0a10 	vmov	s16, r0
 80069c8:	4b9f      	ldr	r3, [pc, #636]	; (8006c48 <_printf_float+0x2dc>)
 80069ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	f7fa f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80069d6:	bb88      	cbnz	r0, 8006a3c <_printf_float+0xd0>
 80069d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069dc:	4b9a      	ldr	r3, [pc, #616]	; (8006c48 <_printf_float+0x2dc>)
 80069de:	f04f 32ff 	mov.w	r2, #4294967295
 80069e2:	f7fa f885 	bl	8000af0 <__aeabi_dcmple>
 80069e6:	bb48      	cbnz	r0, 8006a3c <_printf_float+0xd0>
 80069e8:	2200      	movs	r2, #0
 80069ea:	2300      	movs	r3, #0
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7fa f874 	bl	8000adc <__aeabi_dcmplt>
 80069f4:	b110      	cbz	r0, 80069fc <_printf_float+0x90>
 80069f6:	232d      	movs	r3, #45	; 0x2d
 80069f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069fc:	4b93      	ldr	r3, [pc, #588]	; (8006c4c <_printf_float+0x2e0>)
 80069fe:	4894      	ldr	r0, [pc, #592]	; (8006c50 <_printf_float+0x2e4>)
 8006a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a04:	bf94      	ite	ls
 8006a06:	4698      	movls	r8, r3
 8006a08:	4680      	movhi	r8, r0
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	f023 0204 	bic.w	r2, r3, #4
 8006a14:	6022      	str	r2, [r4, #0]
 8006a16:	f04f 0900 	mov.w	r9, #0
 8006a1a:	9700      	str	r7, [sp, #0]
 8006a1c:	4633      	mov	r3, r6
 8006a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a20:	4621      	mov	r1, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f9d8 	bl	8006dd8 <_printf_common>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f040 8090 	bne.w	8006b4e <_printf_float+0x1e2>
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	b00d      	add	sp, #52	; 0x34
 8006a34:	ecbd 8b02 	vpop	{d8}
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7fa f872 	bl	8000b2c <__aeabi_dcmpun>
 8006a48:	b140      	cbz	r0, 8006a5c <_printf_float+0xf0>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfbc      	itt	lt
 8006a50:	232d      	movlt	r3, #45	; 0x2d
 8006a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a56:	487f      	ldr	r0, [pc, #508]	; (8006c54 <_printf_float+0x2e8>)
 8006a58:	4b7f      	ldr	r3, [pc, #508]	; (8006c58 <_printf_float+0x2ec>)
 8006a5a:	e7d1      	b.n	8006a00 <_printf_float+0x94>
 8006a5c:	6863      	ldr	r3, [r4, #4]
 8006a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a62:	9206      	str	r2, [sp, #24]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	d13f      	bne.n	8006ae8 <_printf_float+0x17c>
 8006a68:	2306      	movs	r3, #6
 8006a6a:	6063      	str	r3, [r4, #4]
 8006a6c:	9b05      	ldr	r3, [sp, #20]
 8006a6e:	6861      	ldr	r1, [r4, #4]
 8006a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a74:	2300      	movs	r3, #0
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	ab0a      	add	r3, sp, #40	; 0x28
 8006a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a7e:	ab09      	add	r3, sp, #36	; 0x24
 8006a80:	ec49 8b10 	vmov	d0, r8, r9
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff fecd 	bl	800682c <__cvt>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	2b47      	cmp	r3, #71	; 0x47
 8006a98:	4680      	mov	r8, r0
 8006a9a:	d108      	bne.n	8006aae <_printf_float+0x142>
 8006a9c:	1cc8      	adds	r0, r1, #3
 8006a9e:	db02      	blt.n	8006aa6 <_printf_float+0x13a>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	dd41      	ble.n	8006b2a <_printf_float+0x1be>
 8006aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8006aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ab2:	d820      	bhi.n	8006af6 <_printf_float+0x18a>
 8006ab4:	3901      	subs	r1, #1
 8006ab6:	465a      	mov	r2, fp
 8006ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006abc:	9109      	str	r1, [sp, #36]	; 0x24
 8006abe:	f7ff ff17 	bl	80068f0 <__exponent>
 8006ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac4:	1813      	adds	r3, r2, r0
 8006ac6:	2a01      	cmp	r2, #1
 8006ac8:	4681      	mov	r9, r0
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	dc02      	bgt.n	8006ad4 <_printf_float+0x168>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_float+0x16c>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d09c      	beq.n	8006a1a <_printf_float+0xae>
 8006ae0:	232d      	movs	r3, #45	; 0x2d
 8006ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae6:	e798      	b.n	8006a1a <_printf_float+0xae>
 8006ae8:	9a06      	ldr	r2, [sp, #24]
 8006aea:	2a47      	cmp	r2, #71	; 0x47
 8006aec:	d1be      	bne.n	8006a6c <_printf_float+0x100>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1bc      	bne.n	8006a6c <_printf_float+0x100>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e7b9      	b.n	8006a6a <_printf_float+0xfe>
 8006af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006afa:	d118      	bne.n	8006b2e <_printf_float+0x1c2>
 8006afc:	2900      	cmp	r1, #0
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	dd0b      	ble.n	8006b1a <_printf_float+0x1ae>
 8006b02:	6121      	str	r1, [r4, #16]
 8006b04:	b913      	cbnz	r3, 8006b0c <_printf_float+0x1a0>
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	07d0      	lsls	r0, r2, #31
 8006b0a:	d502      	bpl.n	8006b12 <_printf_float+0x1a6>
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	440b      	add	r3, r1
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b14:	f04f 0900 	mov.w	r9, #0
 8006b18:	e7de      	b.n	8006ad8 <_printf_float+0x16c>
 8006b1a:	b913      	cbnz	r3, 8006b22 <_printf_float+0x1b6>
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	07d2      	lsls	r2, r2, #31
 8006b20:	d501      	bpl.n	8006b26 <_printf_float+0x1ba>
 8006b22:	3302      	adds	r3, #2
 8006b24:	e7f4      	b.n	8006b10 <_printf_float+0x1a4>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e7f2      	b.n	8006b10 <_printf_float+0x1a4>
 8006b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b30:	4299      	cmp	r1, r3
 8006b32:	db05      	blt.n	8006b40 <_printf_float+0x1d4>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	6121      	str	r1, [r4, #16]
 8006b38:	07d8      	lsls	r0, r3, #31
 8006b3a:	d5ea      	bpl.n	8006b12 <_printf_float+0x1a6>
 8006b3c:	1c4b      	adds	r3, r1, #1
 8006b3e:	e7e7      	b.n	8006b10 <_printf_float+0x1a4>
 8006b40:	2900      	cmp	r1, #0
 8006b42:	bfd4      	ite	le
 8006b44:	f1c1 0202 	rsble	r2, r1, #2
 8006b48:	2201      	movgt	r2, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	e7e0      	b.n	8006b10 <_printf_float+0x1a4>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	055a      	lsls	r2, r3, #21
 8006b52:	d407      	bmi.n	8006b64 <_printf_float+0x1f8>
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	4642      	mov	r2, r8
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d12c      	bne.n	8006bbc <_printf_float+0x250>
 8006b62:	e764      	b.n	8006a2e <_printf_float+0xc2>
 8006b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b68:	f240 80e0 	bls.w	8006d2c <_printf_float+0x3c0>
 8006b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b70:	2200      	movs	r2, #0
 8006b72:	2300      	movs	r3, #0
 8006b74:	f7f9 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d034      	beq.n	8006be6 <_printf_float+0x27a>
 8006b7c:	4a37      	ldr	r2, [pc, #220]	; (8006c5c <_printf_float+0x2f0>)
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f af51 	beq.w	8006a2e <_printf_float+0xc2>
 8006b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b90:	429a      	cmp	r2, r3
 8006b92:	db02      	blt.n	8006b9a <_printf_float+0x22e>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07d8      	lsls	r0, r3, #31
 8006b98:	d510      	bpl.n	8006bbc <_printf_float+0x250>
 8006b9a:	ee18 3a10 	vmov	r3, s16
 8006b9e:	4652      	mov	r2, sl
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f af41 	beq.w	8006a2e <_printf_float+0xc2>
 8006bac:	f04f 0800 	mov.w	r8, #0
 8006bb0:	f104 091a 	add.w	r9, r4, #26
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	4543      	cmp	r3, r8
 8006bba:	dc09      	bgt.n	8006bd0 <_printf_float+0x264>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	079b      	lsls	r3, r3, #30
 8006bc0:	f100 8105 	bmi.w	8006dce <_printf_float+0x462>
 8006bc4:	68e0      	ldr	r0, [r4, #12]
 8006bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc8:	4298      	cmp	r0, r3
 8006bca:	bfb8      	it	lt
 8006bcc:	4618      	movlt	r0, r3
 8006bce:	e730      	b.n	8006a32 <_printf_float+0xc6>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	464a      	mov	r2, r9
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f af27 	beq.w	8006a2e <_printf_float+0xc2>
 8006be0:	f108 0801 	add.w	r8, r8, #1
 8006be4:	e7e6      	b.n	8006bb4 <_printf_float+0x248>
 8006be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dc39      	bgt.n	8006c60 <_printf_float+0x2f4>
 8006bec:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <_printf_float+0x2f0>)
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af19 	beq.w	8006a2e <_printf_float+0xc2>
 8006bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d102      	bne.n	8006c0a <_printf_float+0x29e>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d5d8      	bpl.n	8006bbc <_printf_float+0x250>
 8006c0a:	ee18 3a10 	vmov	r3, s16
 8006c0e:	4652      	mov	r2, sl
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af09 	beq.w	8006a2e <_printf_float+0xc2>
 8006c1c:	f04f 0900 	mov.w	r9, #0
 8006c20:	f104 0a1a 	add.w	sl, r4, #26
 8006c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c26:	425b      	negs	r3, r3
 8006c28:	454b      	cmp	r3, r9
 8006c2a:	dc01      	bgt.n	8006c30 <_printf_float+0x2c4>
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	e792      	b.n	8006b56 <_printf_float+0x1ea>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4652      	mov	r2, sl
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b8      	blx	r7
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f43f aef7 	beq.w	8006a2e <_printf_float+0xc2>
 8006c40:	f109 0901 	add.w	r9, r9, #1
 8006c44:	e7ee      	b.n	8006c24 <_printf_float+0x2b8>
 8006c46:	bf00      	nop
 8006c48:	7fefffff 	.word	0x7fefffff
 8006c4c:	0800a894 	.word	0x0800a894
 8006c50:	0800a898 	.word	0x0800a898
 8006c54:	0800a8a0 	.word	0x0800a8a0
 8006c58:	0800a89c 	.word	0x0800a89c
 8006c5c:	0800a8a4 	.word	0x0800a8a4
 8006c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c64:	429a      	cmp	r2, r3
 8006c66:	bfa8      	it	ge
 8006c68:	461a      	movge	r2, r3
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	dc37      	bgt.n	8006ce0 <_printf_float+0x374>
 8006c70:	f04f 0b00 	mov.w	fp, #0
 8006c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c78:	f104 021a 	add.w	r2, r4, #26
 8006c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c7e:	9305      	str	r3, [sp, #20]
 8006c80:	eba3 0309 	sub.w	r3, r3, r9
 8006c84:	455b      	cmp	r3, fp
 8006c86:	dc33      	bgt.n	8006cf0 <_printf_float+0x384>
 8006c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	db3b      	blt.n	8006d08 <_printf_float+0x39c>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07da      	lsls	r2, r3, #31
 8006c94:	d438      	bmi.n	8006d08 <_printf_float+0x39c>
 8006c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c98:	9a05      	ldr	r2, [sp, #20]
 8006c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9c:	1a9a      	subs	r2, r3, r2
 8006c9e:	eba3 0901 	sub.w	r9, r3, r1
 8006ca2:	4591      	cmp	r9, r2
 8006ca4:	bfa8      	it	ge
 8006ca6:	4691      	movge	r9, r2
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	dc35      	bgt.n	8006d1a <_printf_float+0x3ae>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cb6:	f104 0a1a 	add.w	sl, r4, #26
 8006cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	eba3 0309 	sub.w	r3, r3, r9
 8006cc4:	4543      	cmp	r3, r8
 8006cc6:	f77f af79 	ble.w	8006bbc <_printf_float+0x250>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f aeaa 	beq.w	8006a2e <_printf_float+0xc2>
 8006cda:	f108 0801 	add.w	r8, r8, #1
 8006cde:	e7ec      	b.n	8006cba <_printf_float+0x34e>
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	d1c0      	bne.n	8006c70 <_printf_float+0x304>
 8006cee:	e69e      	b.n	8006a2e <_printf_float+0xc2>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	9205      	str	r2, [sp, #20]
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f ae97 	beq.w	8006a2e <_printf_float+0xc2>
 8006d00:	9a05      	ldr	r2, [sp, #20]
 8006d02:	f10b 0b01 	add.w	fp, fp, #1
 8006d06:	e7b9      	b.n	8006c7c <_printf_float+0x310>
 8006d08:	ee18 3a10 	vmov	r3, s16
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	d1be      	bne.n	8006c96 <_printf_float+0x32a>
 8006d18:	e689      	b.n	8006a2e <_printf_float+0xc2>
 8006d1a:	9a05      	ldr	r2, [sp, #20]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	4442      	add	r2, r8
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	d1c1      	bne.n	8006cae <_printf_float+0x342>
 8006d2a:	e680      	b.n	8006a2e <_printf_float+0xc2>
 8006d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2e:	2a01      	cmp	r2, #1
 8006d30:	dc01      	bgt.n	8006d36 <_printf_float+0x3ca>
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d538      	bpl.n	8006da8 <_printf_float+0x43c>
 8006d36:	2301      	movs	r3, #1
 8006d38:	4642      	mov	r2, r8
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	f43f ae74 	beq.w	8006a2e <_printf_float+0xc2>
 8006d46:	ee18 3a10 	vmov	r3, s16
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f ae6b 	beq.w	8006a2e <_printf_float+0xc2>
 8006d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f7f9 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d64:	b9d8      	cbnz	r0, 8006d9e <_printf_float+0x432>
 8006d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d68:	f108 0201 	add.w	r2, r8, #1
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	d10e      	bne.n	8006d96 <_printf_float+0x42a>
 8006d78:	e659      	b.n	8006a2e <_printf_float+0xc2>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae52 	beq.w	8006a2e <_printf_float+0xc2>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d90:	3b01      	subs	r3, #1
 8006d92:	4543      	cmp	r3, r8
 8006d94:	dcf1      	bgt.n	8006d7a <_printf_float+0x40e>
 8006d96:	464b      	mov	r3, r9
 8006d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d9c:	e6dc      	b.n	8006b58 <_printf_float+0x1ec>
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	f104 0a1a 	add.w	sl, r4, #26
 8006da6:	e7f2      	b.n	8006d8e <_printf_float+0x422>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4642      	mov	r2, r8
 8006dac:	e7df      	b.n	8006d6e <_printf_float+0x402>
 8006dae:	2301      	movs	r3, #1
 8006db0:	464a      	mov	r2, r9
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	f43f ae38 	beq.w	8006a2e <_printf_float+0xc2>
 8006dbe:	f108 0801 	add.w	r8, r8, #1
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	4543      	cmp	r3, r8
 8006dca:	dcf0      	bgt.n	8006dae <_printf_float+0x442>
 8006dcc:	e6fa      	b.n	8006bc4 <_printf_float+0x258>
 8006dce:	f04f 0800 	mov.w	r8, #0
 8006dd2:	f104 0919 	add.w	r9, r4, #25
 8006dd6:	e7f4      	b.n	8006dc2 <_printf_float+0x456>

08006dd8 <_printf_common>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	4616      	mov	r6, r2
 8006dde:	4699      	mov	r9, r3
 8006de0:	688a      	ldr	r2, [r1, #8]
 8006de2:	690b      	ldr	r3, [r1, #16]
 8006de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	bfb8      	it	lt
 8006dec:	4613      	movlt	r3, r2
 8006dee:	6033      	str	r3, [r6, #0]
 8006df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006df4:	4607      	mov	r7, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	b10a      	cbz	r2, 8006dfe <_printf_common+0x26>
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	0699      	lsls	r1, r3, #26
 8006e02:	bf42      	ittt	mi
 8006e04:	6833      	ldrmi	r3, [r6, #0]
 8006e06:	3302      	addmi	r3, #2
 8006e08:	6033      	strmi	r3, [r6, #0]
 8006e0a:	6825      	ldr	r5, [r4, #0]
 8006e0c:	f015 0506 	ands.w	r5, r5, #6
 8006e10:	d106      	bne.n	8006e20 <_printf_common+0x48>
 8006e12:	f104 0a19 	add.w	sl, r4, #25
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	6832      	ldr	r2, [r6, #0]
 8006e1a:	1a9b      	subs	r3, r3, r2
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dc26      	bgt.n	8006e6e <_printf_common+0x96>
 8006e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e24:	1e13      	subs	r3, r2, #0
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	bf18      	it	ne
 8006e2a:	2301      	movne	r3, #1
 8006e2c:	0692      	lsls	r2, r2, #26
 8006e2e:	d42b      	bmi.n	8006e88 <_printf_common+0xb0>
 8006e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d01e      	beq.n	8006e7c <_printf_common+0xa4>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	68e5      	ldr	r5, [r4, #12]
 8006e42:	6832      	ldr	r2, [r6, #0]
 8006e44:	f003 0306 	and.w	r3, r3, #6
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	bf08      	it	eq
 8006e4c:	1aad      	subeq	r5, r5, r2
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	6922      	ldr	r2, [r4, #16]
 8006e52:	bf0c      	ite	eq
 8006e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e58:	2500      	movne	r5, #0
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bfc4      	itt	gt
 8006e5e:	1a9b      	subgt	r3, r3, r2
 8006e60:	18ed      	addgt	r5, r5, r3
 8006e62:	2600      	movs	r6, #0
 8006e64:	341a      	adds	r4, #26
 8006e66:	42b5      	cmp	r5, r6
 8006e68:	d11a      	bne.n	8006ea0 <_printf_common+0xc8>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e008      	b.n	8006e80 <_printf_common+0xa8>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4652      	mov	r2, sl
 8006e72:	4649      	mov	r1, r9
 8006e74:	4638      	mov	r0, r7
 8006e76:	47c0      	blx	r8
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d103      	bne.n	8006e84 <_printf_common+0xac>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	3501      	adds	r5, #1
 8006e86:	e7c6      	b.n	8006e16 <_printf_common+0x3e>
 8006e88:	18e1      	adds	r1, r4, r3
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	2030      	movs	r0, #48	; 0x30
 8006e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e92:	4422      	add	r2, r4
 8006e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	e7c7      	b.n	8006e30 <_printf_common+0x58>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d0e6      	beq.n	8006e7c <_printf_common+0xa4>
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7d9      	b.n	8006e66 <_printf_common+0x8e>
	...

08006eb4 <_printf_i>:
 8006eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	7e0f      	ldrb	r7, [r1, #24]
 8006eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ebc:	2f78      	cmp	r7, #120	; 0x78
 8006ebe:	4691      	mov	r9, r2
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	469a      	mov	sl, r3
 8006ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eca:	d807      	bhi.n	8006edc <_printf_i+0x28>
 8006ecc:	2f62      	cmp	r7, #98	; 0x62
 8006ece:	d80a      	bhi.n	8006ee6 <_printf_i+0x32>
 8006ed0:	2f00      	cmp	r7, #0
 8006ed2:	f000 80d8 	beq.w	8007086 <_printf_i+0x1d2>
 8006ed6:	2f58      	cmp	r7, #88	; 0x58
 8006ed8:	f000 80a3 	beq.w	8007022 <_printf_i+0x16e>
 8006edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ee4:	e03a      	b.n	8006f5c <_printf_i+0xa8>
 8006ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eea:	2b15      	cmp	r3, #21
 8006eec:	d8f6      	bhi.n	8006edc <_printf_i+0x28>
 8006eee:	a101      	add	r1, pc, #4	; (adr r1, 8006ef4 <_printf_i+0x40>)
 8006ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f61 	.word	0x08006f61
 8006efc:	08006edd 	.word	0x08006edd
 8006f00:	08006edd 	.word	0x08006edd
 8006f04:	08006edd 	.word	0x08006edd
 8006f08:	08006edd 	.word	0x08006edd
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	08006edd 	.word	0x08006edd
 8006f14:	08006edd 	.word	0x08006edd
 8006f18:	08006edd 	.word	0x08006edd
 8006f1c:	08006edd 	.word	0x08006edd
 8006f20:	0800706d 	.word	0x0800706d
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	0800704f 	.word	0x0800704f
 8006f2c:	08006edd 	.word	0x08006edd
 8006f30:	08006edd 	.word	0x08006edd
 8006f34:	0800708f 	.word	0x0800708f
 8006f38:	08006edd 	.word	0x08006edd
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006edd 	.word	0x08006edd
 8006f44:	08006edd 	.word	0x08006edd
 8006f48:	08007057 	.word	0x08007057
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	602a      	str	r2, [r5, #0]
 8006f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0a3      	b.n	80070a8 <_printf_i+0x1f4>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	6829      	ldr	r1, [r5, #0]
 8006f64:	0606      	lsls	r6, r0, #24
 8006f66:	f101 0304 	add.w	r3, r1, #4
 8006f6a:	d50a      	bpl.n	8006f82 <_printf_i+0xce>
 8006f6c:	680e      	ldr	r6, [r1, #0]
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	da03      	bge.n	8006f7c <_printf_i+0xc8>
 8006f74:	232d      	movs	r3, #45	; 0x2d
 8006f76:	4276      	negs	r6, r6
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	485e      	ldr	r0, [pc, #376]	; (80070f8 <_printf_i+0x244>)
 8006f7e:	230a      	movs	r3, #10
 8006f80:	e019      	b.n	8006fb6 <_printf_i+0x102>
 8006f82:	680e      	ldr	r6, [r1, #0]
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f8a:	bf18      	it	ne
 8006f8c:	b236      	sxthne	r6, r6
 8006f8e:	e7ef      	b.n	8006f70 <_printf_i+0xbc>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1d19      	adds	r1, r3, #4
 8006f96:	6029      	str	r1, [r5, #0]
 8006f98:	0601      	lsls	r1, r0, #24
 8006f9a:	d501      	bpl.n	8006fa0 <_printf_i+0xec>
 8006f9c:	681e      	ldr	r6, [r3, #0]
 8006f9e:	e002      	b.n	8006fa6 <_printf_i+0xf2>
 8006fa0:	0646      	lsls	r6, r0, #25
 8006fa2:	d5fb      	bpl.n	8006f9c <_printf_i+0xe8>
 8006fa4:	881e      	ldrh	r6, [r3, #0]
 8006fa6:	4854      	ldr	r0, [pc, #336]	; (80070f8 <_printf_i+0x244>)
 8006fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8006faa:	bf0c      	ite	eq
 8006fac:	2308      	moveq	r3, #8
 8006fae:	230a      	movne	r3, #10
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fb6:	6865      	ldr	r5, [r4, #4]
 8006fb8:	60a5      	str	r5, [r4, #8]
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	bfa2      	ittt	ge
 8006fbe:	6821      	ldrge	r1, [r4, #0]
 8006fc0:	f021 0104 	bicge.w	r1, r1, #4
 8006fc4:	6021      	strge	r1, [r4, #0]
 8006fc6:	b90e      	cbnz	r6, 8006fcc <_printf_i+0x118>
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	d04d      	beq.n	8007068 <_printf_i+0x1b4>
 8006fcc:	4615      	mov	r5, r2
 8006fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fd6:	5dc7      	ldrb	r7, [r0, r7]
 8006fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fdc:	4637      	mov	r7, r6
 8006fde:	42bb      	cmp	r3, r7
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	d9f4      	bls.n	8006fce <_printf_i+0x11a>
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d10b      	bne.n	8007000 <_printf_i+0x14c>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	07de      	lsls	r6, r3, #31
 8006fec:	d508      	bpl.n	8007000 <_printf_i+0x14c>
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	6861      	ldr	r1, [r4, #4]
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	bfde      	ittt	le
 8006ff6:	2330      	movle	r3, #48	; 0x30
 8006ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007000:	1b52      	subs	r2, r2, r5
 8007002:	6122      	str	r2, [r4, #16]
 8007004:	f8cd a000 	str.w	sl, [sp]
 8007008:	464b      	mov	r3, r9
 800700a:	aa03      	add	r2, sp, #12
 800700c:	4621      	mov	r1, r4
 800700e:	4640      	mov	r0, r8
 8007010:	f7ff fee2 	bl	8006dd8 <_printf_common>
 8007014:	3001      	adds	r0, #1
 8007016:	d14c      	bne.n	80070b2 <_printf_i+0x1fe>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b004      	add	sp, #16
 800701e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007022:	4835      	ldr	r0, [pc, #212]	; (80070f8 <_printf_i+0x244>)
 8007024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007028:	6829      	ldr	r1, [r5, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007030:	6029      	str	r1, [r5, #0]
 8007032:	061d      	lsls	r5, r3, #24
 8007034:	d514      	bpl.n	8007060 <_printf_i+0x1ac>
 8007036:	07df      	lsls	r7, r3, #31
 8007038:	bf44      	itt	mi
 800703a:	f043 0320 	orrmi.w	r3, r3, #32
 800703e:	6023      	strmi	r3, [r4, #0]
 8007040:	b91e      	cbnz	r6, 800704a <_printf_i+0x196>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	f023 0320 	bic.w	r3, r3, #32
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	2310      	movs	r3, #16
 800704c:	e7b0      	b.n	8006fb0 <_printf_i+0xfc>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	f043 0320 	orr.w	r3, r3, #32
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	2378      	movs	r3, #120	; 0x78
 8007058:	4828      	ldr	r0, [pc, #160]	; (80070fc <_printf_i+0x248>)
 800705a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800705e:	e7e3      	b.n	8007028 <_printf_i+0x174>
 8007060:	0659      	lsls	r1, r3, #25
 8007062:	bf48      	it	mi
 8007064:	b2b6      	uxthmi	r6, r6
 8007066:	e7e6      	b.n	8007036 <_printf_i+0x182>
 8007068:	4615      	mov	r5, r2
 800706a:	e7bb      	b.n	8006fe4 <_printf_i+0x130>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	6826      	ldr	r6, [r4, #0]
 8007070:	6961      	ldr	r1, [r4, #20]
 8007072:	1d18      	adds	r0, r3, #4
 8007074:	6028      	str	r0, [r5, #0]
 8007076:	0635      	lsls	r5, r6, #24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	d501      	bpl.n	8007080 <_printf_i+0x1cc>
 800707c:	6019      	str	r1, [r3, #0]
 800707e:	e002      	b.n	8007086 <_printf_i+0x1d2>
 8007080:	0670      	lsls	r0, r6, #25
 8007082:	d5fb      	bpl.n	800707c <_printf_i+0x1c8>
 8007084:	8019      	strh	r1, [r3, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	4615      	mov	r5, r2
 800708c:	e7ba      	b.n	8007004 <_printf_i+0x150>
 800708e:	682b      	ldr	r3, [r5, #0]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	602a      	str	r2, [r5, #0]
 8007094:	681d      	ldr	r5, [r3, #0]
 8007096:	6862      	ldr	r2, [r4, #4]
 8007098:	2100      	movs	r1, #0
 800709a:	4628      	mov	r0, r5
 800709c:	f7f9 f8a0 	bl	80001e0 <memchr>
 80070a0:	b108      	cbz	r0, 80070a6 <_printf_i+0x1f2>
 80070a2:	1b40      	subs	r0, r0, r5
 80070a4:	6060      	str	r0, [r4, #4]
 80070a6:	6863      	ldr	r3, [r4, #4]
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	2300      	movs	r3, #0
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b0:	e7a8      	b.n	8007004 <_printf_i+0x150>
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	462a      	mov	r2, r5
 80070b6:	4649      	mov	r1, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	47d0      	blx	sl
 80070bc:	3001      	adds	r0, #1
 80070be:	d0ab      	beq.n	8007018 <_printf_i+0x164>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	079b      	lsls	r3, r3, #30
 80070c4:	d413      	bmi.n	80070ee <_printf_i+0x23a>
 80070c6:	68e0      	ldr	r0, [r4, #12]
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	4298      	cmp	r0, r3
 80070cc:	bfb8      	it	lt
 80070ce:	4618      	movlt	r0, r3
 80070d0:	e7a4      	b.n	800701c <_printf_i+0x168>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4632      	mov	r2, r6
 80070d6:	4649      	mov	r1, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	47d0      	blx	sl
 80070dc:	3001      	adds	r0, #1
 80070de:	d09b      	beq.n	8007018 <_printf_i+0x164>
 80070e0:	3501      	adds	r5, #1
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	9903      	ldr	r1, [sp, #12]
 80070e6:	1a5b      	subs	r3, r3, r1
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	dcf2      	bgt.n	80070d2 <_printf_i+0x21e>
 80070ec:	e7eb      	b.n	80070c6 <_printf_i+0x212>
 80070ee:	2500      	movs	r5, #0
 80070f0:	f104 0619 	add.w	r6, r4, #25
 80070f4:	e7f5      	b.n	80070e2 <_printf_i+0x22e>
 80070f6:	bf00      	nop
 80070f8:	0800a8a6 	.word	0x0800a8a6
 80070fc:	0800a8b7 	.word	0x0800a8b7

08007100 <iprintf>:
 8007100:	b40f      	push	{r0, r1, r2, r3}
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <iprintf+0x2c>)
 8007104:	b513      	push	{r0, r1, r4, lr}
 8007106:	681c      	ldr	r4, [r3, #0]
 8007108:	b124      	cbz	r4, 8007114 <iprintf+0x14>
 800710a:	69a3      	ldr	r3, [r4, #24]
 800710c:	b913      	cbnz	r3, 8007114 <iprintf+0x14>
 800710e:	4620      	mov	r0, r4
 8007110:	f001 f8da 	bl	80082c8 <__sinit>
 8007114:	ab05      	add	r3, sp, #20
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	68a1      	ldr	r1, [r4, #8]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	4620      	mov	r0, r4
 800711e:	f001 fe97 	bl	8008e50 <_vfiprintf_r>
 8007122:	b002      	add	sp, #8
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	b004      	add	sp, #16
 800712a:	4770      	bx	lr
 800712c:	2000000c 	.word	0x2000000c

08007130 <_puts_r>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	460e      	mov	r6, r1
 8007134:	4605      	mov	r5, r0
 8007136:	b118      	cbz	r0, 8007140 <_puts_r+0x10>
 8007138:	6983      	ldr	r3, [r0, #24]
 800713a:	b90b      	cbnz	r3, 8007140 <_puts_r+0x10>
 800713c:	f001 f8c4 	bl	80082c8 <__sinit>
 8007140:	69ab      	ldr	r3, [r5, #24]
 8007142:	68ac      	ldr	r4, [r5, #8]
 8007144:	b913      	cbnz	r3, 800714c <_puts_r+0x1c>
 8007146:	4628      	mov	r0, r5
 8007148:	f001 f8be 	bl	80082c8 <__sinit>
 800714c:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <_puts_r+0xd0>)
 800714e:	429c      	cmp	r4, r3
 8007150:	d120      	bne.n	8007194 <_puts_r+0x64>
 8007152:	686c      	ldr	r4, [r5, #4]
 8007154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007156:	07db      	lsls	r3, r3, #31
 8007158:	d405      	bmi.n	8007166 <_puts_r+0x36>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	0598      	lsls	r0, r3, #22
 800715e:	d402      	bmi.n	8007166 <_puts_r+0x36>
 8007160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007162:	f001 f954 	bl	800840e <__retarget_lock_acquire_recursive>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	0719      	lsls	r1, r3, #28
 800716a:	d51d      	bpl.n	80071a8 <_puts_r+0x78>
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	b1db      	cbz	r3, 80071a8 <_puts_r+0x78>
 8007170:	3e01      	subs	r6, #1
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007178:	3b01      	subs	r3, #1
 800717a:	60a3      	str	r3, [r4, #8]
 800717c:	bb39      	cbnz	r1, 80071ce <_puts_r+0x9e>
 800717e:	2b00      	cmp	r3, #0
 8007180:	da38      	bge.n	80071f4 <_puts_r+0xc4>
 8007182:	4622      	mov	r2, r4
 8007184:	210a      	movs	r1, #10
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f848 	bl	800721c <__swbuf_r>
 800718c:	3001      	adds	r0, #1
 800718e:	d011      	beq.n	80071b4 <_puts_r+0x84>
 8007190:	250a      	movs	r5, #10
 8007192:	e011      	b.n	80071b8 <_puts_r+0x88>
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <_puts_r+0xd4>)
 8007196:	429c      	cmp	r4, r3
 8007198:	d101      	bne.n	800719e <_puts_r+0x6e>
 800719a:	68ac      	ldr	r4, [r5, #8]
 800719c:	e7da      	b.n	8007154 <_puts_r+0x24>
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <_puts_r+0xd8>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	bf08      	it	eq
 80071a4:	68ec      	ldreq	r4, [r5, #12]
 80071a6:	e7d5      	b.n	8007154 <_puts_r+0x24>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f888 	bl	80072c0 <__swsetup_r>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0dd      	beq.n	8007170 <_puts_r+0x40>
 80071b4:	f04f 35ff 	mov.w	r5, #4294967295
 80071b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ba:	07da      	lsls	r2, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_puts_r+0x9a>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	059b      	lsls	r3, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_puts_r+0x9a>
 80071c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c6:	f001 f923 	bl	8008410 <__retarget_lock_release_recursive>
 80071ca:	4628      	mov	r0, r5
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da04      	bge.n	80071dc <_puts_r+0xac>
 80071d2:	69a2      	ldr	r2, [r4, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	dc06      	bgt.n	80071e6 <_puts_r+0xb6>
 80071d8:	290a      	cmp	r1, #10
 80071da:	d004      	beq.n	80071e6 <_puts_r+0xb6>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	7019      	strb	r1, [r3, #0]
 80071e4:	e7c5      	b.n	8007172 <_puts_r+0x42>
 80071e6:	4622      	mov	r2, r4
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f817 	bl	800721c <__swbuf_r>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d1bf      	bne.n	8007172 <_puts_r+0x42>
 80071f2:	e7df      	b.n	80071b4 <_puts_r+0x84>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	250a      	movs	r5, #10
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	701d      	strb	r5, [r3, #0]
 80071fe:	e7db      	b.n	80071b8 <_puts_r+0x88>
 8007200:	0800a978 	.word	0x0800a978
 8007204:	0800a998 	.word	0x0800a998
 8007208:	0800a958 	.word	0x0800a958

0800720c <puts>:
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <puts+0xc>)
 800720e:	4601      	mov	r1, r0
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f7ff bf8d 	b.w	8007130 <_puts_r>
 8007216:	bf00      	nop
 8007218:	2000000c 	.word	0x2000000c

0800721c <__swbuf_r>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	460e      	mov	r6, r1
 8007220:	4614      	mov	r4, r2
 8007222:	4605      	mov	r5, r0
 8007224:	b118      	cbz	r0, 800722e <__swbuf_r+0x12>
 8007226:	6983      	ldr	r3, [r0, #24]
 8007228:	b90b      	cbnz	r3, 800722e <__swbuf_r+0x12>
 800722a:	f001 f84d 	bl	80082c8 <__sinit>
 800722e:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <__swbuf_r+0x98>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d12b      	bne.n	800728c <__swbuf_r+0x70>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	69a3      	ldr	r3, [r4, #24]
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	071a      	lsls	r2, r3, #28
 800723e:	d52f      	bpl.n	80072a0 <__swbuf_r+0x84>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	b36b      	cbz	r3, 80072a0 <__swbuf_r+0x84>
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	6820      	ldr	r0, [r4, #0]
 8007248:	1ac0      	subs	r0, r0, r3
 800724a:	6963      	ldr	r3, [r4, #20]
 800724c:	b2f6      	uxtb	r6, r6
 800724e:	4283      	cmp	r3, r0
 8007250:	4637      	mov	r7, r6
 8007252:	dc04      	bgt.n	800725e <__swbuf_r+0x42>
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f000 ffa2 	bl	80081a0 <_fflush_r>
 800725c:	bb30      	cbnz	r0, 80072ac <__swbuf_r+0x90>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	701e      	strb	r6, [r3, #0]
 800726c:	6963      	ldr	r3, [r4, #20]
 800726e:	3001      	adds	r0, #1
 8007270:	4283      	cmp	r3, r0
 8007272:	d004      	beq.n	800727e <__swbuf_r+0x62>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	07db      	lsls	r3, r3, #31
 8007278:	d506      	bpl.n	8007288 <__swbuf_r+0x6c>
 800727a:	2e0a      	cmp	r6, #10
 800727c:	d104      	bne.n	8007288 <__swbuf_r+0x6c>
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 ff8d 	bl	80081a0 <_fflush_r>
 8007286:	b988      	cbnz	r0, 80072ac <__swbuf_r+0x90>
 8007288:	4638      	mov	r0, r7
 800728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <__swbuf_r+0x9c>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <__swbuf_r+0x7a>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7cf      	b.n	8007236 <__swbuf_r+0x1a>
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <__swbuf_r+0xa0>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7ca      	b.n	8007236 <__swbuf_r+0x1a>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 f80c 	bl	80072c0 <__swsetup_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0cb      	beq.n	8007244 <__swbuf_r+0x28>
 80072ac:	f04f 37ff 	mov.w	r7, #4294967295
 80072b0:	e7ea      	b.n	8007288 <__swbuf_r+0x6c>
 80072b2:	bf00      	nop
 80072b4:	0800a978 	.word	0x0800a978
 80072b8:	0800a998 	.word	0x0800a998
 80072bc:	0800a958 	.word	0x0800a958

080072c0 <__swsetup_r>:
 80072c0:	4b32      	ldr	r3, [pc, #200]	; (800738c <__swsetup_r+0xcc>)
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	681d      	ldr	r5, [r3, #0]
 80072c6:	4606      	mov	r6, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	b125      	cbz	r5, 80072d6 <__swsetup_r+0x16>
 80072cc:	69ab      	ldr	r3, [r5, #24]
 80072ce:	b913      	cbnz	r3, 80072d6 <__swsetup_r+0x16>
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fff9 	bl	80082c8 <__sinit>
 80072d6:	4b2e      	ldr	r3, [pc, #184]	; (8007390 <__swsetup_r+0xd0>)
 80072d8:	429c      	cmp	r4, r3
 80072da:	d10f      	bne.n	80072fc <__swsetup_r+0x3c>
 80072dc:	686c      	ldr	r4, [r5, #4]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d42c      	bmi.n	8007342 <__swsetup_r+0x82>
 80072e8:	06dd      	lsls	r5, r3, #27
 80072ea:	d411      	bmi.n	8007310 <__swsetup_r+0x50>
 80072ec:	2309      	movs	r3, #9
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	e03e      	b.n	800737a <__swsetup_r+0xba>
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <__swsetup_r+0xd4>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	d101      	bne.n	8007306 <__swsetup_r+0x46>
 8007302:	68ac      	ldr	r4, [r5, #8]
 8007304:	e7eb      	b.n	80072de <__swsetup_r+0x1e>
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <__swsetup_r+0xd8>)
 8007308:	429c      	cmp	r4, r3
 800730a:	bf08      	it	eq
 800730c:	68ec      	ldreq	r4, [r5, #12]
 800730e:	e7e6      	b.n	80072de <__swsetup_r+0x1e>
 8007310:	0758      	lsls	r0, r3, #29
 8007312:	d512      	bpl.n	800733a <__swsetup_r+0x7a>
 8007314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007316:	b141      	cbz	r1, 800732a <__swsetup_r+0x6a>
 8007318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800731c:	4299      	cmp	r1, r3
 800731e:	d002      	beq.n	8007326 <__swsetup_r+0x66>
 8007320:	4630      	mov	r0, r6
 8007322:	f001 fc8b 	bl	8008c3c <_free_r>
 8007326:	2300      	movs	r3, #0
 8007328:	6363      	str	r3, [r4, #52]	; 0x34
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	2300      	movs	r3, #0
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0308 	orr.w	r3, r3, #8
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	b94b      	cbnz	r3, 800735a <__swsetup_r+0x9a>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800734c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007350:	d003      	beq.n	800735a <__swsetup_r+0x9a>
 8007352:	4621      	mov	r1, r4
 8007354:	4630      	mov	r0, r6
 8007356:	f001 f881 	bl	800845c <__smakebuf_r>
 800735a:	89a0      	ldrh	r0, [r4, #12]
 800735c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007360:	f010 0301 	ands.w	r3, r0, #1
 8007364:	d00a      	beq.n	800737c <__swsetup_r+0xbc>
 8007366:	2300      	movs	r3, #0
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	425b      	negs	r3, r3
 800736e:	61a3      	str	r3, [r4, #24]
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	b943      	cbnz	r3, 8007386 <__swsetup_r+0xc6>
 8007374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007378:	d1ba      	bne.n	80072f0 <__swsetup_r+0x30>
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	0781      	lsls	r1, r0, #30
 800737e:	bf58      	it	pl
 8007380:	6963      	ldrpl	r3, [r4, #20]
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	e7f4      	b.n	8007370 <__swsetup_r+0xb0>
 8007386:	2000      	movs	r0, #0
 8007388:	e7f7      	b.n	800737a <__swsetup_r+0xba>
 800738a:	bf00      	nop
 800738c:	2000000c 	.word	0x2000000c
 8007390:	0800a978 	.word	0x0800a978
 8007394:	0800a998 	.word	0x0800a998
 8007398:	0800a958 	.word	0x0800a958

0800739c <quorem>:
 800739c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	6903      	ldr	r3, [r0, #16]
 80073a2:	690c      	ldr	r4, [r1, #16]
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	4607      	mov	r7, r0
 80073a8:	f2c0 8081 	blt.w	80074ae <quorem+0x112>
 80073ac:	3c01      	subs	r4, #1
 80073ae:	f101 0814 	add.w	r8, r1, #20
 80073b2:	f100 0514 	add.w	r5, r0, #20
 80073b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073c4:	3301      	adds	r3, #1
 80073c6:	429a      	cmp	r2, r3
 80073c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073d4:	d331      	bcc.n	800743a <quorem+0x9e>
 80073d6:	f04f 0e00 	mov.w	lr, #0
 80073da:	4640      	mov	r0, r8
 80073dc:	46ac      	mov	ip, r5
 80073de:	46f2      	mov	sl, lr
 80073e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80073e4:	b293      	uxth	r3, r2
 80073e6:	fb06 e303 	mla	r3, r6, r3, lr
 80073ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	ebaa 0303 	sub.w	r3, sl, r3
 80073f4:	f8dc a000 	ldr.w	sl, [ip]
 80073f8:	0c12      	lsrs	r2, r2, #16
 80073fa:	fa13 f38a 	uxtah	r3, r3, sl
 80073fe:	fb06 e202 	mla	r2, r6, r2, lr
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800740a:	b292      	uxth	r2, r2
 800740c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007414:	f8bd 3000 	ldrh.w	r3, [sp]
 8007418:	4581      	cmp	r9, r0
 800741a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800741e:	f84c 3b04 	str.w	r3, [ip], #4
 8007422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007426:	d2db      	bcs.n	80073e0 <quorem+0x44>
 8007428:	f855 300b 	ldr.w	r3, [r5, fp]
 800742c:	b92b      	cbnz	r3, 800743a <quorem+0x9e>
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	3b04      	subs	r3, #4
 8007432:	429d      	cmp	r5, r3
 8007434:	461a      	mov	r2, r3
 8007436:	d32e      	bcc.n	8007496 <quorem+0xfa>
 8007438:	613c      	str	r4, [r7, #16]
 800743a:	4638      	mov	r0, r7
 800743c:	f001 fae6 	bl	8008a0c <__mcmp>
 8007440:	2800      	cmp	r0, #0
 8007442:	db24      	blt.n	800748e <quorem+0xf2>
 8007444:	3601      	adds	r6, #1
 8007446:	4628      	mov	r0, r5
 8007448:	f04f 0c00 	mov.w	ip, #0
 800744c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007450:	f8d0 e000 	ldr.w	lr, [r0]
 8007454:	b293      	uxth	r3, r2
 8007456:	ebac 0303 	sub.w	r3, ip, r3
 800745a:	0c12      	lsrs	r2, r2, #16
 800745c:	fa13 f38e 	uxtah	r3, r3, lr
 8007460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746e:	45c1      	cmp	r9, r8
 8007470:	f840 3b04 	str.w	r3, [r0], #4
 8007474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007478:	d2e8      	bcs.n	800744c <quorem+0xb0>
 800747a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007482:	b922      	cbnz	r2, 800748e <quorem+0xf2>
 8007484:	3b04      	subs	r3, #4
 8007486:	429d      	cmp	r5, r3
 8007488:	461a      	mov	r2, r3
 800748a:	d30a      	bcc.n	80074a2 <quorem+0x106>
 800748c:	613c      	str	r4, [r7, #16]
 800748e:	4630      	mov	r0, r6
 8007490:	b003      	add	sp, #12
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	3b04      	subs	r3, #4
 800749a:	2a00      	cmp	r2, #0
 800749c:	d1cc      	bne.n	8007438 <quorem+0x9c>
 800749e:	3c01      	subs	r4, #1
 80074a0:	e7c7      	b.n	8007432 <quorem+0x96>
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	3b04      	subs	r3, #4
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	d1f0      	bne.n	800748c <quorem+0xf0>
 80074aa:	3c01      	subs	r4, #1
 80074ac:	e7eb      	b.n	8007486 <quorem+0xea>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e7ee      	b.n	8007490 <quorem+0xf4>
 80074b2:	0000      	movs	r0, r0
 80074b4:	0000      	movs	r0, r0
	...

080074b8 <_dtoa_r>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ed2d 8b04 	vpush	{d8-d9}
 80074c0:	ec57 6b10 	vmov	r6, r7, d0
 80074c4:	b093      	sub	sp, #76	; 0x4c
 80074c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074cc:	9106      	str	r1, [sp, #24]
 80074ce:	ee10 aa10 	vmov	sl, s0
 80074d2:	4604      	mov	r4, r0
 80074d4:	9209      	str	r2, [sp, #36]	; 0x24
 80074d6:	930c      	str	r3, [sp, #48]	; 0x30
 80074d8:	46bb      	mov	fp, r7
 80074da:	b975      	cbnz	r5, 80074fa <_dtoa_r+0x42>
 80074dc:	2010      	movs	r0, #16
 80074de:	f000 fffd 	bl	80084dc <malloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	6260      	str	r0, [r4, #36]	; 0x24
 80074e6:	b920      	cbnz	r0, 80074f2 <_dtoa_r+0x3a>
 80074e8:	4ba7      	ldr	r3, [pc, #668]	; (8007788 <_dtoa_r+0x2d0>)
 80074ea:	21ea      	movs	r1, #234	; 0xea
 80074ec:	48a7      	ldr	r0, [pc, #668]	; (800778c <_dtoa_r+0x2d4>)
 80074ee:	f001 fe45 	bl	800917c <__assert_func>
 80074f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074f6:	6005      	str	r5, [r0, #0]
 80074f8:	60c5      	str	r5, [r0, #12]
 80074fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	b151      	cbz	r1, 8007516 <_dtoa_r+0x5e>
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	604a      	str	r2, [r1, #4]
 8007504:	2301      	movs	r3, #1
 8007506:	4093      	lsls	r3, r2
 8007508:	608b      	str	r3, [r1, #8]
 800750a:	4620      	mov	r0, r4
 800750c:	f001 f83c 	bl	8008588 <_Bfree>
 8007510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	1e3b      	subs	r3, r7, #0
 8007518:	bfaa      	itet	ge
 800751a:	2300      	movge	r3, #0
 800751c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007520:	f8c8 3000 	strge.w	r3, [r8]
 8007524:	4b9a      	ldr	r3, [pc, #616]	; (8007790 <_dtoa_r+0x2d8>)
 8007526:	bfbc      	itt	lt
 8007528:	2201      	movlt	r2, #1
 800752a:	f8c8 2000 	strlt.w	r2, [r8]
 800752e:	ea33 030b 	bics.w	r3, r3, fp
 8007532:	d11b      	bne.n	800756c <_dtoa_r+0xb4>
 8007534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007536:	f242 730f 	movw	r3, #9999	; 0x270f
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007540:	4333      	orrs	r3, r6
 8007542:	f000 8592 	beq.w	800806a <_dtoa_r+0xbb2>
 8007546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007548:	b963      	cbnz	r3, 8007564 <_dtoa_r+0xac>
 800754a:	4b92      	ldr	r3, [pc, #584]	; (8007794 <_dtoa_r+0x2dc>)
 800754c:	e022      	b.n	8007594 <_dtoa_r+0xdc>
 800754e:	4b92      	ldr	r3, [pc, #584]	; (8007798 <_dtoa_r+0x2e0>)
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	3308      	adds	r3, #8
 8007554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	9801      	ldr	r0, [sp, #4]
 800755a:	b013      	add	sp, #76	; 0x4c
 800755c:	ecbd 8b04 	vpop	{d8-d9}
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	4b8b      	ldr	r3, [pc, #556]	; (8007794 <_dtoa_r+0x2dc>)
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	3303      	adds	r3, #3
 800756a:	e7f3      	b.n	8007554 <_dtoa_r+0x9c>
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4650      	mov	r0, sl
 8007572:	4659      	mov	r1, fp
 8007574:	f7f9 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007578:	ec4b ab19 	vmov	d9, sl, fp
 800757c:	4680      	mov	r8, r0
 800757e:	b158      	cbz	r0, 8007598 <_dtoa_r+0xe0>
 8007580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007582:	2301      	movs	r3, #1
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 856b 	beq.w	8008064 <_dtoa_r+0xbac>
 800758e:	4883      	ldr	r0, [pc, #524]	; (800779c <_dtoa_r+0x2e4>)
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	1e43      	subs	r3, r0, #1
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	e7df      	b.n	8007558 <_dtoa_r+0xa0>
 8007598:	ec4b ab10 	vmov	d0, sl, fp
 800759c:	aa10      	add	r2, sp, #64	; 0x40
 800759e:	a911      	add	r1, sp, #68	; 0x44
 80075a0:	4620      	mov	r0, r4
 80075a2:	f001 fad9 	bl	8008b58 <__d2b>
 80075a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075aa:	ee08 0a10 	vmov	s16, r0
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	f000 8084 	beq.w	80076bc <_dtoa_r+0x204>
 80075b4:	ee19 3a90 	vmov	r3, s19
 80075b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075c0:	4656      	mov	r6, sl
 80075c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075ce:	4b74      	ldr	r3, [pc, #464]	; (80077a0 <_dtoa_r+0x2e8>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 fe57 	bl	8000288 <__aeabi_dsub>
 80075da:	a365      	add	r3, pc, #404	; (adr r3, 8007770 <_dtoa_r+0x2b8>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f9 f80a 	bl	80005f8 <__aeabi_dmul>
 80075e4:	a364      	add	r3, pc, #400	; (adr r3, 8007778 <_dtoa_r+0x2c0>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 fe4f 	bl	800028c <__adddf3>
 80075ee:	4606      	mov	r6, r0
 80075f0:	4628      	mov	r0, r5
 80075f2:	460f      	mov	r7, r1
 80075f4:	f7f8 ff96 	bl	8000524 <__aeabi_i2d>
 80075f8:	a361      	add	r3, pc, #388	; (adr r3, 8007780 <_dtoa_r+0x2c8>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fffb 	bl	80005f8 <__aeabi_dmul>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f8 fe3f 	bl	800028c <__adddf3>
 800760e:	4606      	mov	r6, r0
 8007610:	460f      	mov	r7, r1
 8007612:	f7f9 faa1 	bl	8000b58 <__aeabi_d2iz>
 8007616:	2200      	movs	r2, #0
 8007618:	9000      	str	r0, [sp, #0]
 800761a:	2300      	movs	r3, #0
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f9 fa5c 	bl	8000adc <__aeabi_dcmplt>
 8007624:	b150      	cbz	r0, 800763c <_dtoa_r+0x184>
 8007626:	9800      	ldr	r0, [sp, #0]
 8007628:	f7f8 ff7c 	bl	8000524 <__aeabi_i2d>
 800762c:	4632      	mov	r2, r6
 800762e:	463b      	mov	r3, r7
 8007630:	f7f9 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007634:	b910      	cbnz	r0, 800763c <_dtoa_r+0x184>
 8007636:	9b00      	ldr	r3, [sp, #0]
 8007638:	3b01      	subs	r3, #1
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	9b00      	ldr	r3, [sp, #0]
 800763e:	2b16      	cmp	r3, #22
 8007640:	d85a      	bhi.n	80076f8 <_dtoa_r+0x240>
 8007642:	9a00      	ldr	r2, [sp, #0]
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <_dtoa_r+0x2ec>)
 8007646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	ec51 0b19 	vmov	r0, r1, d9
 8007652:	f7f9 fa43 	bl	8000adc <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d050      	beq.n	80076fc <_dtoa_r+0x244>
 800765a:	9b00      	ldr	r3, [sp, #0]
 800765c:	3b01      	subs	r3, #1
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	2300      	movs	r3, #0
 8007662:	930b      	str	r3, [sp, #44]	; 0x2c
 8007664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007666:	1b5d      	subs	r5, r3, r5
 8007668:	1e6b      	subs	r3, r5, #1
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	bf45      	ittet	mi
 800766e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007672:	9304      	strmi	r3, [sp, #16]
 8007674:	2300      	movpl	r3, #0
 8007676:	2300      	movmi	r3, #0
 8007678:	bf4c      	ite	mi
 800767a:	9305      	strmi	r3, [sp, #20]
 800767c:	9304      	strpl	r3, [sp, #16]
 800767e:	9b00      	ldr	r3, [sp, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	db3d      	blt.n	8007700 <_dtoa_r+0x248>
 8007684:	9b05      	ldr	r3, [sp, #20]
 8007686:	9a00      	ldr	r2, [sp, #0]
 8007688:	920a      	str	r2, [sp, #40]	; 0x28
 800768a:	4413      	add	r3, r2
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	2300      	movs	r3, #0
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	2b09      	cmp	r3, #9
 8007696:	f200 8089 	bhi.w	80077ac <_dtoa_r+0x2f4>
 800769a:	2b05      	cmp	r3, #5
 800769c:	bfc4      	itt	gt
 800769e:	3b04      	subgt	r3, #4
 80076a0:	9306      	strgt	r3, [sp, #24]
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	f1a3 0302 	sub.w	r3, r3, #2
 80076a8:	bfcc      	ite	gt
 80076aa:	2500      	movgt	r5, #0
 80076ac:	2501      	movle	r5, #1
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	f200 8087 	bhi.w	80077c2 <_dtoa_r+0x30a>
 80076b4:	e8df f003 	tbb	[pc, r3]
 80076b8:	59383a2d 	.word	0x59383a2d
 80076bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076c0:	441d      	add	r5, r3
 80076c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	bfc1      	itttt	gt
 80076ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80076d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076da:	bfda      	itte	le
 80076dc:	f1c3 0320 	rsble	r3, r3, #32
 80076e0:	fa06 f003 	lslle.w	r0, r6, r3
 80076e4:	4318      	orrgt	r0, r3
 80076e6:	f7f8 ff0d 	bl	8000504 <__aeabi_ui2d>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4606      	mov	r6, r0
 80076ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076f2:	3d01      	subs	r5, #1
 80076f4:	930e      	str	r3, [sp, #56]	; 0x38
 80076f6:	e76a      	b.n	80075ce <_dtoa_r+0x116>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e7b2      	b.n	8007662 <_dtoa_r+0x1aa>
 80076fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80076fe:	e7b1      	b.n	8007664 <_dtoa_r+0x1ac>
 8007700:	9b04      	ldr	r3, [sp, #16]
 8007702:	9a00      	ldr	r2, [sp, #0]
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	4253      	negs	r3, r2
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	2300      	movs	r3, #0
 800770e:	930a      	str	r3, [sp, #40]	; 0x28
 8007710:	e7bf      	b.n	8007692 <_dtoa_r+0x1da>
 8007712:	2300      	movs	r3, #0
 8007714:	9308      	str	r3, [sp, #32]
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	dc55      	bgt.n	80077c8 <_dtoa_r+0x310>
 800771c:	2301      	movs	r3, #1
 800771e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007722:	461a      	mov	r2, r3
 8007724:	9209      	str	r2, [sp, #36]	; 0x24
 8007726:	e00c      	b.n	8007742 <_dtoa_r+0x28a>
 8007728:	2301      	movs	r3, #1
 800772a:	e7f3      	b.n	8007714 <_dtoa_r+0x25c>
 800772c:	2300      	movs	r3, #0
 800772e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007730:	9308      	str	r3, [sp, #32]
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	4413      	add	r3, r2
 8007736:	9302      	str	r3, [sp, #8]
 8007738:	3301      	adds	r3, #1
 800773a:	2b01      	cmp	r3, #1
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	bfb8      	it	lt
 8007740:	2301      	movlt	r3, #1
 8007742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007744:	2200      	movs	r2, #0
 8007746:	6042      	str	r2, [r0, #4]
 8007748:	2204      	movs	r2, #4
 800774a:	f102 0614 	add.w	r6, r2, #20
 800774e:	429e      	cmp	r6, r3
 8007750:	6841      	ldr	r1, [r0, #4]
 8007752:	d93d      	bls.n	80077d0 <_dtoa_r+0x318>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 fed7 	bl	8008508 <_Balloc>
 800775a:	9001      	str	r0, [sp, #4]
 800775c:	2800      	cmp	r0, #0
 800775e:	d13b      	bne.n	80077d8 <_dtoa_r+0x320>
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <_dtoa_r+0x2f0>)
 8007762:	4602      	mov	r2, r0
 8007764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007768:	e6c0      	b.n	80074ec <_dtoa_r+0x34>
 800776a:	2301      	movs	r3, #1
 800776c:	e7df      	b.n	800772e <_dtoa_r+0x276>
 800776e:	bf00      	nop
 8007770:	636f4361 	.word	0x636f4361
 8007774:	3fd287a7 	.word	0x3fd287a7
 8007778:	8b60c8b3 	.word	0x8b60c8b3
 800777c:	3fc68a28 	.word	0x3fc68a28
 8007780:	509f79fb 	.word	0x509f79fb
 8007784:	3fd34413 	.word	0x3fd34413
 8007788:	0800a8d5 	.word	0x0800a8d5
 800778c:	0800a8ec 	.word	0x0800a8ec
 8007790:	7ff00000 	.word	0x7ff00000
 8007794:	0800a8d1 	.word	0x0800a8d1
 8007798:	0800a8c8 	.word	0x0800a8c8
 800779c:	0800a8a5 	.word	0x0800a8a5
 80077a0:	3ff80000 	.word	0x3ff80000
 80077a4:	0800aa40 	.word	0x0800aa40
 80077a8:	0800a947 	.word	0x0800a947
 80077ac:	2501      	movs	r5, #1
 80077ae:	2300      	movs	r3, #0
 80077b0:	9306      	str	r3, [sp, #24]
 80077b2:	9508      	str	r5, [sp, #32]
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295
 80077b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	2312      	movs	r3, #18
 80077c0:	e7b0      	b.n	8007724 <_dtoa_r+0x26c>
 80077c2:	2301      	movs	r3, #1
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	e7f5      	b.n	80077b4 <_dtoa_r+0x2fc>
 80077c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077ce:	e7b8      	b.n	8007742 <_dtoa_r+0x28a>
 80077d0:	3101      	adds	r1, #1
 80077d2:	6041      	str	r1, [r0, #4]
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	e7b8      	b.n	800774a <_dtoa_r+0x292>
 80077d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	2b0e      	cmp	r3, #14
 80077e2:	f200 809d 	bhi.w	8007920 <_dtoa_r+0x468>
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	f000 809a 	beq.w	8007920 <_dtoa_r+0x468>
 80077ec:	9b00      	ldr	r3, [sp, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd32      	ble.n	8007858 <_dtoa_r+0x3a0>
 80077f2:	4ab7      	ldr	r2, [pc, #732]	; (8007ad0 <_dtoa_r+0x618>)
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007800:	9b00      	ldr	r3, [sp, #0]
 8007802:	05d8      	lsls	r0, r3, #23
 8007804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007808:	d516      	bpl.n	8007838 <_dtoa_r+0x380>
 800780a:	4bb2      	ldr	r3, [pc, #712]	; (8007ad4 <_dtoa_r+0x61c>)
 800780c:	ec51 0b19 	vmov	r0, r1, d9
 8007810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007814:	f7f9 f81a 	bl	800084c <__aeabi_ddiv>
 8007818:	f007 070f 	and.w	r7, r7, #15
 800781c:	4682      	mov	sl, r0
 800781e:	468b      	mov	fp, r1
 8007820:	2503      	movs	r5, #3
 8007822:	4eac      	ldr	r6, [pc, #688]	; (8007ad4 <_dtoa_r+0x61c>)
 8007824:	b957      	cbnz	r7, 800783c <_dtoa_r+0x384>
 8007826:	4642      	mov	r2, r8
 8007828:	464b      	mov	r3, r9
 800782a:	4650      	mov	r0, sl
 800782c:	4659      	mov	r1, fp
 800782e:	f7f9 f80d 	bl	800084c <__aeabi_ddiv>
 8007832:	4682      	mov	sl, r0
 8007834:	468b      	mov	fp, r1
 8007836:	e028      	b.n	800788a <_dtoa_r+0x3d2>
 8007838:	2502      	movs	r5, #2
 800783a:	e7f2      	b.n	8007822 <_dtoa_r+0x36a>
 800783c:	07f9      	lsls	r1, r7, #31
 800783e:	d508      	bpl.n	8007852 <_dtoa_r+0x39a>
 8007840:	4640      	mov	r0, r8
 8007842:	4649      	mov	r1, r9
 8007844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007848:	f7f8 fed6 	bl	80005f8 <__aeabi_dmul>
 800784c:	3501      	adds	r5, #1
 800784e:	4680      	mov	r8, r0
 8007850:	4689      	mov	r9, r1
 8007852:	107f      	asrs	r7, r7, #1
 8007854:	3608      	adds	r6, #8
 8007856:	e7e5      	b.n	8007824 <_dtoa_r+0x36c>
 8007858:	f000 809b 	beq.w	8007992 <_dtoa_r+0x4da>
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	4f9d      	ldr	r7, [pc, #628]	; (8007ad4 <_dtoa_r+0x61c>)
 8007860:	425e      	negs	r6, r3
 8007862:	4b9b      	ldr	r3, [pc, #620]	; (8007ad0 <_dtoa_r+0x618>)
 8007864:	f006 020f 	and.w	r2, r6, #15
 8007868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	ec51 0b19 	vmov	r0, r1, d9
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	1136      	asrs	r6, r6, #4
 800787a:	4682      	mov	sl, r0
 800787c:	468b      	mov	fp, r1
 800787e:	2300      	movs	r3, #0
 8007880:	2502      	movs	r5, #2
 8007882:	2e00      	cmp	r6, #0
 8007884:	d17a      	bne.n	800797c <_dtoa_r+0x4c4>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1d3      	bne.n	8007832 <_dtoa_r+0x37a>
 800788a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8082 	beq.w	8007996 <_dtoa_r+0x4de>
 8007892:	4b91      	ldr	r3, [pc, #580]	; (8007ad8 <_dtoa_r+0x620>)
 8007894:	2200      	movs	r2, #0
 8007896:	4650      	mov	r0, sl
 8007898:	4659      	mov	r1, fp
 800789a:	f7f9 f91f 	bl	8000adc <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d079      	beq.n	8007996 <_dtoa_r+0x4de>
 80078a2:	9b03      	ldr	r3, [sp, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d076      	beq.n	8007996 <_dtoa_r+0x4de>
 80078a8:	9b02      	ldr	r3, [sp, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dd36      	ble.n	800791c <_dtoa_r+0x464>
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	4650      	mov	r0, sl
 80078b2:	4659      	mov	r1, fp
 80078b4:	1e5f      	subs	r7, r3, #1
 80078b6:	2200      	movs	r2, #0
 80078b8:	4b88      	ldr	r3, [pc, #544]	; (8007adc <_dtoa_r+0x624>)
 80078ba:	f7f8 fe9d 	bl	80005f8 <__aeabi_dmul>
 80078be:	9e02      	ldr	r6, [sp, #8]
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	3501      	adds	r5, #1
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7f8 fe2c 	bl	8000524 <__aeabi_i2d>
 80078cc:	4652      	mov	r2, sl
 80078ce:	465b      	mov	r3, fp
 80078d0:	f7f8 fe92 	bl	80005f8 <__aeabi_dmul>
 80078d4:	4b82      	ldr	r3, [pc, #520]	; (8007ae0 <_dtoa_r+0x628>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	f7f8 fcd8 	bl	800028c <__adddf3>
 80078dc:	46d0      	mov	r8, sl
 80078de:	46d9      	mov	r9, fp
 80078e0:	4682      	mov	sl, r0
 80078e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	d158      	bne.n	800799c <_dtoa_r+0x4e4>
 80078ea:	4b7e      	ldr	r3, [pc, #504]	; (8007ae4 <_dtoa_r+0x62c>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	f7f8 fcc9 	bl	8000288 <__aeabi_dsub>
 80078f6:	4652      	mov	r2, sl
 80078f8:	465b      	mov	r3, fp
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	f7f9 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8007902:	2800      	cmp	r0, #0
 8007904:	f040 8295 	bne.w	8007e32 <_dtoa_r+0x97a>
 8007908:	4652      	mov	r2, sl
 800790a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800790e:	4640      	mov	r0, r8
 8007910:	4649      	mov	r1, r9
 8007912:	f7f9 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	f040 8289 	bne.w	8007e2e <_dtoa_r+0x976>
 800791c:	ec5b ab19 	vmov	sl, fp, d9
 8007920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007922:	2b00      	cmp	r3, #0
 8007924:	f2c0 8148 	blt.w	8007bb8 <_dtoa_r+0x700>
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	2a0e      	cmp	r2, #14
 800792c:	f300 8144 	bgt.w	8007bb8 <_dtoa_r+0x700>
 8007930:	4b67      	ldr	r3, [pc, #412]	; (8007ad0 <_dtoa_r+0x618>)
 8007932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800793a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	f280 80d5 	bge.w	8007aec <_dtoa_r+0x634>
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f300 80d1 	bgt.w	8007aec <_dtoa_r+0x634>
 800794a:	f040 826f 	bne.w	8007e2c <_dtoa_r+0x974>
 800794e:	4b65      	ldr	r3, [pc, #404]	; (8007ae4 <_dtoa_r+0x62c>)
 8007950:	2200      	movs	r2, #0
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	4652      	mov	r2, sl
 800795c:	465b      	mov	r3, fp
 800795e:	f7f9 f8d1 	bl	8000b04 <__aeabi_dcmpge>
 8007962:	9e03      	ldr	r6, [sp, #12]
 8007964:	4637      	mov	r7, r6
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8245 	bne.w	8007df6 <_dtoa_r+0x93e>
 800796c:	9d01      	ldr	r5, [sp, #4]
 800796e:	2331      	movs	r3, #49	; 0x31
 8007970:	f805 3b01 	strb.w	r3, [r5], #1
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	3301      	adds	r3, #1
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	e240      	b.n	8007dfe <_dtoa_r+0x946>
 800797c:	07f2      	lsls	r2, r6, #31
 800797e:	d505      	bpl.n	800798c <_dtoa_r+0x4d4>
 8007980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007984:	f7f8 fe38 	bl	80005f8 <__aeabi_dmul>
 8007988:	3501      	adds	r5, #1
 800798a:	2301      	movs	r3, #1
 800798c:	1076      	asrs	r6, r6, #1
 800798e:	3708      	adds	r7, #8
 8007990:	e777      	b.n	8007882 <_dtoa_r+0x3ca>
 8007992:	2502      	movs	r5, #2
 8007994:	e779      	b.n	800788a <_dtoa_r+0x3d2>
 8007996:	9f00      	ldr	r7, [sp, #0]
 8007998:	9e03      	ldr	r6, [sp, #12]
 800799a:	e794      	b.n	80078c6 <_dtoa_r+0x40e>
 800799c:	9901      	ldr	r1, [sp, #4]
 800799e:	4b4c      	ldr	r3, [pc, #304]	; (8007ad0 <_dtoa_r+0x618>)
 80079a0:	4431      	add	r1, r6
 80079a2:	910d      	str	r1, [sp, #52]	; 0x34
 80079a4:	9908      	ldr	r1, [sp, #32]
 80079a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079ae:	2900      	cmp	r1, #0
 80079b0:	d043      	beq.n	8007a3a <_dtoa_r+0x582>
 80079b2:	494d      	ldr	r1, [pc, #308]	; (8007ae8 <_dtoa_r+0x630>)
 80079b4:	2000      	movs	r0, #0
 80079b6:	f7f8 ff49 	bl	800084c <__aeabi_ddiv>
 80079ba:	4652      	mov	r2, sl
 80079bc:	465b      	mov	r3, fp
 80079be:	f7f8 fc63 	bl	8000288 <__aeabi_dsub>
 80079c2:	9d01      	ldr	r5, [sp, #4]
 80079c4:	4682      	mov	sl, r0
 80079c6:	468b      	mov	fp, r1
 80079c8:	4649      	mov	r1, r9
 80079ca:	4640      	mov	r0, r8
 80079cc:	f7f9 f8c4 	bl	8000b58 <__aeabi_d2iz>
 80079d0:	4606      	mov	r6, r0
 80079d2:	f7f8 fda7 	bl	8000524 <__aeabi_i2d>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fc53 	bl	8000288 <__aeabi_dsub>
 80079e2:	3630      	adds	r6, #48	; 0x30
 80079e4:	f805 6b01 	strb.w	r6, [r5], #1
 80079e8:	4652      	mov	r2, sl
 80079ea:	465b      	mov	r3, fp
 80079ec:	4680      	mov	r8, r0
 80079ee:	4689      	mov	r9, r1
 80079f0:	f7f9 f874 	bl	8000adc <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d163      	bne.n	8007ac0 <_dtoa_r+0x608>
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	4936      	ldr	r1, [pc, #216]	; (8007ad8 <_dtoa_r+0x620>)
 80079fe:	2000      	movs	r0, #0
 8007a00:	f7f8 fc42 	bl	8000288 <__aeabi_dsub>
 8007a04:	4652      	mov	r2, sl
 8007a06:	465b      	mov	r3, fp
 8007a08:	f7f9 f868 	bl	8000adc <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f040 80b5 	bne.w	8007b7c <_dtoa_r+0x6c4>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	429d      	cmp	r5, r3
 8007a16:	d081      	beq.n	800791c <_dtoa_r+0x464>
 8007a18:	4b30      	ldr	r3, [pc, #192]	; (8007adc <_dtoa_r+0x624>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	4659      	mov	r1, fp
 8007a20:	f7f8 fdea 	bl	80005f8 <__aeabi_dmul>
 8007a24:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <_dtoa_r+0x624>)
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f7f8 fde2 	bl	80005f8 <__aeabi_dmul>
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
 8007a38:	e7c6      	b.n	80079c8 <_dtoa_r+0x510>
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	f7f8 fddb 	bl	80005f8 <__aeabi_dmul>
 8007a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a44:	9d01      	ldr	r5, [sp, #4]
 8007a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a48:	4682      	mov	sl, r0
 8007a4a:	468b      	mov	fp, r1
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f7f9 f882 	bl	8000b58 <__aeabi_d2iz>
 8007a54:	4606      	mov	r6, r0
 8007a56:	f7f8 fd65 	bl	8000524 <__aeabi_i2d>
 8007a5a:	3630      	adds	r6, #48	; 0x30
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f8 fc10 	bl	8000288 <__aeabi_dsub>
 8007a68:	f805 6b01 	strb.w	r6, [r5], #1
 8007a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6e:	429d      	cmp	r5, r3
 8007a70:	4680      	mov	r8, r0
 8007a72:	4689      	mov	r9, r1
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	d124      	bne.n	8007ac4 <_dtoa_r+0x60c>
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <_dtoa_r+0x630>)
 8007a7c:	4650      	mov	r0, sl
 8007a7e:	4659      	mov	r1, fp
 8007a80:	f7f8 fc04 	bl	800028c <__adddf3>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	f7f9 f844 	bl	8000b18 <__aeabi_dcmpgt>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d173      	bne.n	8007b7c <_dtoa_r+0x6c4>
 8007a94:	4652      	mov	r2, sl
 8007a96:	465b      	mov	r3, fp
 8007a98:	4913      	ldr	r1, [pc, #76]	; (8007ae8 <_dtoa_r+0x630>)
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f7f8 fbf4 	bl	8000288 <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	f7f9 f818 	bl	8000adc <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f43f af35 	beq.w	800791c <_dtoa_r+0x464>
 8007ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ab4:	1e6b      	subs	r3, r5, #1
 8007ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d0f8      	beq.n	8007ab2 <_dtoa_r+0x5fa>
 8007ac0:	9700      	str	r7, [sp, #0]
 8007ac2:	e049      	b.n	8007b58 <_dtoa_r+0x6a0>
 8007ac4:	4b05      	ldr	r3, [pc, #20]	; (8007adc <_dtoa_r+0x624>)
 8007ac6:	f7f8 fd97 	bl	80005f8 <__aeabi_dmul>
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	e7bd      	b.n	8007a4c <_dtoa_r+0x594>
 8007ad0:	0800aa40 	.word	0x0800aa40
 8007ad4:	0800aa18 	.word	0x0800aa18
 8007ad8:	3ff00000 	.word	0x3ff00000
 8007adc:	40240000 	.word	0x40240000
 8007ae0:	401c0000 	.word	0x401c0000
 8007ae4:	40140000 	.word	0x40140000
 8007ae8:	3fe00000 	.word	0x3fe00000
 8007aec:	9d01      	ldr	r5, [sp, #4]
 8007aee:	4656      	mov	r6, sl
 8007af0:	465f      	mov	r7, fp
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	4630      	mov	r0, r6
 8007af8:	4639      	mov	r1, r7
 8007afa:	f7f8 fea7 	bl	800084c <__aeabi_ddiv>
 8007afe:	f7f9 f82b 	bl	8000b58 <__aeabi_d2iz>
 8007b02:	4682      	mov	sl, r0
 8007b04:	f7f8 fd0e 	bl	8000524 <__aeabi_i2d>
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	f7f8 fd74 	bl	80005f8 <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b1c:	f7f8 fbb4 	bl	8000288 <__aeabi_dsub>
 8007b20:	f805 6b01 	strb.w	r6, [r5], #1
 8007b24:	9e01      	ldr	r6, [sp, #4]
 8007b26:	9f03      	ldr	r7, [sp, #12]
 8007b28:	1bae      	subs	r6, r5, r6
 8007b2a:	42b7      	cmp	r7, r6
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	d135      	bne.n	8007b9e <_dtoa_r+0x6e6>
 8007b32:	f7f8 fbab 	bl	800028c <__adddf3>
 8007b36:	4642      	mov	r2, r8
 8007b38:	464b      	mov	r3, r9
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	460f      	mov	r7, r1
 8007b3e:	f7f8 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007b42:	b9d0      	cbnz	r0, 8007b7a <_dtoa_r+0x6c2>
 8007b44:	4642      	mov	r2, r8
 8007b46:	464b      	mov	r3, r9
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b50:	b110      	cbz	r0, 8007b58 <_dtoa_r+0x6a0>
 8007b52:	f01a 0f01 	tst.w	sl, #1
 8007b56:	d110      	bne.n	8007b7a <_dtoa_r+0x6c2>
 8007b58:	4620      	mov	r0, r4
 8007b5a:	ee18 1a10 	vmov	r1, s16
 8007b5e:	f000 fd13 	bl	8008588 <_Bfree>
 8007b62:	2300      	movs	r3, #0
 8007b64:	9800      	ldr	r0, [sp, #0]
 8007b66:	702b      	strb	r3, [r5, #0]
 8007b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	6018      	str	r0, [r3, #0]
 8007b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f43f acf1 	beq.w	8007558 <_dtoa_r+0xa0>
 8007b76:	601d      	str	r5, [r3, #0]
 8007b78:	e4ee      	b.n	8007558 <_dtoa_r+0xa0>
 8007b7a:	9f00      	ldr	r7, [sp, #0]
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	461d      	mov	r5, r3
 8007b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b84:	2a39      	cmp	r2, #57	; 0x39
 8007b86:	d106      	bne.n	8007b96 <_dtoa_r+0x6de>
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d1f7      	bne.n	8007b7e <_dtoa_r+0x6c6>
 8007b8e:	9901      	ldr	r1, [sp, #4]
 8007b90:	2230      	movs	r2, #48	; 0x30
 8007b92:	3701      	adds	r7, #1
 8007b94:	700a      	strb	r2, [r1, #0]
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	3201      	adds	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e790      	b.n	8007ac0 <_dtoa_r+0x608>
 8007b9e:	4ba6      	ldr	r3, [pc, #664]	; (8007e38 <_dtoa_r+0x980>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	f7f8 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d09d      	beq.n	8007af2 <_dtoa_r+0x63a>
 8007bb6:	e7cf      	b.n	8007b58 <_dtoa_r+0x6a0>
 8007bb8:	9a08      	ldr	r2, [sp, #32]
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	f000 80d7 	beq.w	8007d6e <_dtoa_r+0x8b6>
 8007bc0:	9a06      	ldr	r2, [sp, #24]
 8007bc2:	2a01      	cmp	r2, #1
 8007bc4:	f300 80ba 	bgt.w	8007d3c <_dtoa_r+0x884>
 8007bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	f000 80b2 	beq.w	8007d34 <_dtoa_r+0x87c>
 8007bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bd4:	9e07      	ldr	r6, [sp, #28]
 8007bd6:	9d04      	ldr	r5, [sp, #16]
 8007bd8:	9a04      	ldr	r2, [sp, #16]
 8007bda:	441a      	add	r2, r3
 8007bdc:	9204      	str	r2, [sp, #16]
 8007bde:	9a05      	ldr	r2, [sp, #20]
 8007be0:	2101      	movs	r1, #1
 8007be2:	441a      	add	r2, r3
 8007be4:	4620      	mov	r0, r4
 8007be6:	9205      	str	r2, [sp, #20]
 8007be8:	f000 fd86 	bl	80086f8 <__i2b>
 8007bec:	4607      	mov	r7, r0
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	dd0c      	ble.n	8007c0c <_dtoa_r+0x754>
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd09      	ble.n	8007c0c <_dtoa_r+0x754>
 8007bf8:	42ab      	cmp	r3, r5
 8007bfa:	9a04      	ldr	r2, [sp, #16]
 8007bfc:	bfa8      	it	ge
 8007bfe:	462b      	movge	r3, r5
 8007c00:	1ad2      	subs	r2, r2, r3
 8007c02:	9204      	str	r2, [sp, #16]
 8007c04:	9a05      	ldr	r2, [sp, #20]
 8007c06:	1aed      	subs	r5, r5, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	b31b      	cbz	r3, 8007c58 <_dtoa_r+0x7a0>
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80af 	beq.w	8007d76 <_dtoa_r+0x8be>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	dd13      	ble.n	8007c44 <_dtoa_r+0x78c>
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4632      	mov	r2, r6
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fe29 	bl	8008878 <__pow5mult>
 8007c26:	ee18 2a10 	vmov	r2, s16
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fd78 	bl	8008724 <__multiply>
 8007c34:	ee18 1a10 	vmov	r1, s16
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fca4 	bl	8008588 <_Bfree>
 8007c40:	ee08 8a10 	vmov	s16, r8
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	1b9a      	subs	r2, r3, r6
 8007c48:	d006      	beq.n	8007c58 <_dtoa_r+0x7a0>
 8007c4a:	ee18 1a10 	vmov	r1, s16
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 fe12 	bl	8008878 <__pow5mult>
 8007c54:	ee08 0a10 	vmov	s16, r0
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fd4c 	bl	80086f8 <__i2b>
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	4606      	mov	r6, r0
 8007c66:	f340 8088 	ble.w	8007d7a <_dtoa_r+0x8c2>
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fe02 	bl	8008878 <__pow5mult>
 8007c74:	9b06      	ldr	r3, [sp, #24]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	4606      	mov	r6, r0
 8007c7a:	f340 8081 	ble.w	8007d80 <_dtoa_r+0x8c8>
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	6933      	ldr	r3, [r6, #16]
 8007c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c88:	6918      	ldr	r0, [r3, #16]
 8007c8a:	f000 fce5 	bl	8008658 <__hi0bits>
 8007c8e:	f1c0 0020 	rsb	r0, r0, #32
 8007c92:	9b05      	ldr	r3, [sp, #20]
 8007c94:	4418      	add	r0, r3
 8007c96:	f010 001f 	ands.w	r0, r0, #31
 8007c9a:	f000 8092 	beq.w	8007dc2 <_dtoa_r+0x90a>
 8007c9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	f340 808a 	ble.w	8007dbc <_dtoa_r+0x904>
 8007ca8:	f1c0 001c 	rsb	r0, r0, #28
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	4403      	add	r3, r0
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	4403      	add	r3, r0
 8007cb6:	4405      	add	r5, r0
 8007cb8:	9305      	str	r3, [sp, #20]
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dd07      	ble.n	8007cd0 <_dtoa_r+0x818>
 8007cc0:	ee18 1a10 	vmov	r1, s16
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 fe30 	bl	800892c <__lshift>
 8007ccc:	ee08 0a10 	vmov	s16, r0
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dd05      	ble.n	8007ce2 <_dtoa_r+0x82a>
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fe26 	bl	800892c <__lshift>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d06e      	beq.n	8007dc6 <_dtoa_r+0x90e>
 8007ce8:	ee18 0a10 	vmov	r0, s16
 8007cec:	4631      	mov	r1, r6
 8007cee:	f000 fe8d 	bl	8008a0c <__mcmp>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	da67      	bge.n	8007dc6 <_dtoa_r+0x90e>
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	ee18 1a10 	vmov	r1, s16
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	220a      	movs	r2, #10
 8007d02:	2300      	movs	r3, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fc61 	bl	80085cc <__multadd>
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	ee08 0a10 	vmov	s16, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 81b1 	beq.w	8008078 <_dtoa_r+0xbc0>
 8007d16:	2300      	movs	r3, #0
 8007d18:	4639      	mov	r1, r7
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fc55 	bl	80085cc <__multadd>
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	4607      	mov	r7, r0
 8007d28:	f300 808e 	bgt.w	8007e48 <_dtoa_r+0x990>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	dc51      	bgt.n	8007dd6 <_dtoa_r+0x91e>
 8007d32:	e089      	b.n	8007e48 <_dtoa_r+0x990>
 8007d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d3a:	e74b      	b.n	8007bd4 <_dtoa_r+0x71c>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	1e5e      	subs	r6, r3, #1
 8007d40:	9b07      	ldr	r3, [sp, #28]
 8007d42:	42b3      	cmp	r3, r6
 8007d44:	bfbf      	itttt	lt
 8007d46:	9b07      	ldrlt	r3, [sp, #28]
 8007d48:	9607      	strlt	r6, [sp, #28]
 8007d4a:	1af2      	sublt	r2, r6, r3
 8007d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d4e:	bfb6      	itet	lt
 8007d50:	189b      	addlt	r3, r3, r2
 8007d52:	1b9e      	subge	r6, r3, r6
 8007d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	bfb8      	it	lt
 8007d5a:	2600      	movlt	r6, #0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfb7      	itett	lt
 8007d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d68:	1a9d      	sublt	r5, r3, r2
 8007d6a:	2300      	movlt	r3, #0
 8007d6c:	e734      	b.n	8007bd8 <_dtoa_r+0x720>
 8007d6e:	9e07      	ldr	r6, [sp, #28]
 8007d70:	9d04      	ldr	r5, [sp, #16]
 8007d72:	9f08      	ldr	r7, [sp, #32]
 8007d74:	e73b      	b.n	8007bee <_dtoa_r+0x736>
 8007d76:	9a07      	ldr	r2, [sp, #28]
 8007d78:	e767      	b.n	8007c4a <_dtoa_r+0x792>
 8007d7a:	9b06      	ldr	r3, [sp, #24]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	dc18      	bgt.n	8007db2 <_dtoa_r+0x8fa>
 8007d80:	f1ba 0f00 	cmp.w	sl, #0
 8007d84:	d115      	bne.n	8007db2 <_dtoa_r+0x8fa>
 8007d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d8a:	b993      	cbnz	r3, 8007db2 <_dtoa_r+0x8fa>
 8007d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d90:	0d1b      	lsrs	r3, r3, #20
 8007d92:	051b      	lsls	r3, r3, #20
 8007d94:	b183      	cbz	r3, 8007db8 <_dtoa_r+0x900>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	f04f 0801 	mov.w	r8, #1
 8007da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f47f af6a 	bne.w	8007c82 <_dtoa_r+0x7ca>
 8007dae:	2001      	movs	r0, #1
 8007db0:	e76f      	b.n	8007c92 <_dtoa_r+0x7da>
 8007db2:	f04f 0800 	mov.w	r8, #0
 8007db6:	e7f6      	b.n	8007da6 <_dtoa_r+0x8ee>
 8007db8:	4698      	mov	r8, r3
 8007dba:	e7f4      	b.n	8007da6 <_dtoa_r+0x8ee>
 8007dbc:	f43f af7d 	beq.w	8007cba <_dtoa_r+0x802>
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	301c      	adds	r0, #28
 8007dc4:	e772      	b.n	8007cac <_dtoa_r+0x7f4>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc37      	bgt.n	8007e3c <_dtoa_r+0x984>
 8007dcc:	9b06      	ldr	r3, [sp, #24]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	dd34      	ble.n	8007e3c <_dtoa_r+0x984>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	9302      	str	r3, [sp, #8]
 8007dd6:	9b02      	ldr	r3, [sp, #8]
 8007dd8:	b96b      	cbnz	r3, 8007df6 <_dtoa_r+0x93e>
 8007dda:	4631      	mov	r1, r6
 8007ddc:	2205      	movs	r2, #5
 8007dde:	4620      	mov	r0, r4
 8007de0:	f000 fbf4 	bl	80085cc <__multadd>
 8007de4:	4601      	mov	r1, r0
 8007de6:	4606      	mov	r6, r0
 8007de8:	ee18 0a10 	vmov	r0, s16
 8007dec:	f000 fe0e 	bl	8008a0c <__mcmp>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f73f adbb 	bgt.w	800796c <_dtoa_r+0x4b4>
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	9d01      	ldr	r5, [sp, #4]
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	f04f 0800 	mov.w	r8, #0
 8007e02:	4631      	mov	r1, r6
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fbbf 	bl	8008588 <_Bfree>
 8007e0a:	2f00      	cmp	r7, #0
 8007e0c:	f43f aea4 	beq.w	8007b58 <_dtoa_r+0x6a0>
 8007e10:	f1b8 0f00 	cmp.w	r8, #0
 8007e14:	d005      	beq.n	8007e22 <_dtoa_r+0x96a>
 8007e16:	45b8      	cmp	r8, r7
 8007e18:	d003      	beq.n	8007e22 <_dtoa_r+0x96a>
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fbb3 	bl	8008588 <_Bfree>
 8007e22:	4639      	mov	r1, r7
 8007e24:	4620      	mov	r0, r4
 8007e26:	f000 fbaf 	bl	8008588 <_Bfree>
 8007e2a:	e695      	b.n	8007b58 <_dtoa_r+0x6a0>
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	4637      	mov	r7, r6
 8007e30:	e7e1      	b.n	8007df6 <_dtoa_r+0x93e>
 8007e32:	9700      	str	r7, [sp, #0]
 8007e34:	4637      	mov	r7, r6
 8007e36:	e599      	b.n	800796c <_dtoa_r+0x4b4>
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80ca 	beq.w	8007fd8 <_dtoa_r+0xb20>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	dd05      	ble.n	8007e58 <_dtoa_r+0x9a0>
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fd6b 	bl	800892c <__lshift>
 8007e56:	4607      	mov	r7, r0
 8007e58:	f1b8 0f00 	cmp.w	r8, #0
 8007e5c:	d05b      	beq.n	8007f16 <_dtoa_r+0xa5e>
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fb51 	bl	8008508 <_Balloc>
 8007e66:	4605      	mov	r5, r0
 8007e68:	b928      	cbnz	r0, 8007e76 <_dtoa_r+0x9be>
 8007e6a:	4b87      	ldr	r3, [pc, #540]	; (8008088 <_dtoa_r+0xbd0>)
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e72:	f7ff bb3b 	b.w	80074ec <_dtoa_r+0x34>
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	3202      	adds	r2, #2
 8007e7a:	0092      	lsls	r2, r2, #2
 8007e7c:	f107 010c 	add.w	r1, r7, #12
 8007e80:	300c      	adds	r0, #12
 8007e82:	f000 fb33 	bl	80084ec <memcpy>
 8007e86:	2201      	movs	r2, #1
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fd4e 	bl	800892c <__lshift>
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	f103 0901 	add.w	r9, r3, #1
 8007e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	f00a 0301 	and.w	r3, sl, #1
 8007ea2:	46b8      	mov	r8, r7
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	ee18 0a10 	vmov	r0, s16
 8007eae:	f7ff fa75 	bl	800739c <quorem>
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	9002      	str	r0, [sp, #8]
 8007eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007eba:	ee18 0a10 	vmov	r0, s16
 8007ebe:	f000 fda5 	bl	8008a0c <__mcmp>
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	9003      	str	r0, [sp, #12]
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fdbb 	bl	8008a44 <__mdiff>
 8007ece:	68c2      	ldr	r2, [r0, #12]
 8007ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	bb02      	cbnz	r2, 8007f1a <_dtoa_r+0xa62>
 8007ed8:	4601      	mov	r1, r0
 8007eda:	ee18 0a10 	vmov	r0, s16
 8007ede:	f000 fd95 	bl	8008a0c <__mcmp>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	9207      	str	r2, [sp, #28]
 8007eea:	f000 fb4d 	bl	8008588 <_Bfree>
 8007eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ef2:	ea43 0102 	orr.w	r1, r3, r2
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	464d      	mov	r5, r9
 8007efc:	d10f      	bne.n	8007f1e <_dtoa_r+0xa66>
 8007efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f02:	d02a      	beq.n	8007f5a <_dtoa_r+0xaa2>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dd02      	ble.n	8007f10 <_dtoa_r+0xa58>
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f10:	f88b a000 	strb.w	sl, [fp]
 8007f14:	e775      	b.n	8007e02 <_dtoa_r+0x94a>
 8007f16:	4638      	mov	r0, r7
 8007f18:	e7ba      	b.n	8007e90 <_dtoa_r+0x9d8>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	e7e2      	b.n	8007ee4 <_dtoa_r+0xa2c>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	db04      	blt.n	8007f2e <_dtoa_r+0xa76>
 8007f24:	9906      	ldr	r1, [sp, #24]
 8007f26:	430b      	orrs	r3, r1
 8007f28:	9904      	ldr	r1, [sp, #16]
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	d122      	bne.n	8007f74 <_dtoa_r+0xabc>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	ddee      	ble.n	8007f10 <_dtoa_r+0xa58>
 8007f32:	ee18 1a10 	vmov	r1, s16
 8007f36:	2201      	movs	r2, #1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fcf7 	bl	800892c <__lshift>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	ee08 0a10 	vmov	s16, r0
 8007f44:	f000 fd62 	bl	8008a0c <__mcmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dc03      	bgt.n	8007f54 <_dtoa_r+0xa9c>
 8007f4c:	d1e0      	bne.n	8007f10 <_dtoa_r+0xa58>
 8007f4e:	f01a 0f01 	tst.w	sl, #1
 8007f52:	d0dd      	beq.n	8007f10 <_dtoa_r+0xa58>
 8007f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f58:	d1d7      	bne.n	8007f0a <_dtoa_r+0xa52>
 8007f5a:	2339      	movs	r3, #57	; 0x39
 8007f5c:	f88b 3000 	strb.w	r3, [fp]
 8007f60:	462b      	mov	r3, r5
 8007f62:	461d      	mov	r5, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f6a:	2a39      	cmp	r2, #57	; 0x39
 8007f6c:	d071      	beq.n	8008052 <_dtoa_r+0xb9a>
 8007f6e:	3201      	adds	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	e746      	b.n	8007e02 <_dtoa_r+0x94a>
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	dd07      	ble.n	8007f88 <_dtoa_r+0xad0>
 8007f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f7c:	d0ed      	beq.n	8007f5a <_dtoa_r+0xaa2>
 8007f7e:	f10a 0301 	add.w	r3, sl, #1
 8007f82:	f88b 3000 	strb.w	r3, [fp]
 8007f86:	e73c      	b.n	8007e02 <_dtoa_r+0x94a>
 8007f88:	9b05      	ldr	r3, [sp, #20]
 8007f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f8e:	4599      	cmp	r9, r3
 8007f90:	d047      	beq.n	8008022 <_dtoa_r+0xb6a>
 8007f92:	ee18 1a10 	vmov	r1, s16
 8007f96:	2300      	movs	r3, #0
 8007f98:	220a      	movs	r2, #10
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fb16 	bl	80085cc <__multadd>
 8007fa0:	45b8      	cmp	r8, r7
 8007fa2:	ee08 0a10 	vmov	s16, r0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	f04f 020a 	mov.w	r2, #10
 8007fae:	4641      	mov	r1, r8
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	d106      	bne.n	8007fc2 <_dtoa_r+0xb0a>
 8007fb4:	f000 fb0a 	bl	80085cc <__multadd>
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4607      	mov	r7, r0
 8007fbc:	f109 0901 	add.w	r9, r9, #1
 8007fc0:	e772      	b.n	8007ea8 <_dtoa_r+0x9f0>
 8007fc2:	f000 fb03 	bl	80085cc <__multadd>
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	4680      	mov	r8, r0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	220a      	movs	r2, #10
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fafc 	bl	80085cc <__multadd>
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	e7f1      	b.n	8007fbc <_dtoa_r+0xb04>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	9d01      	ldr	r5, [sp, #4]
 8007fde:	ee18 0a10 	vmov	r0, s16
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	f7ff f9da 	bl	800739c <quorem>
 8007fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	f805 ab01 	strb.w	sl, [r5], #1
 8007ff2:	1aea      	subs	r2, r5, r3
 8007ff4:	9b02      	ldr	r3, [sp, #8]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	dd09      	ble.n	800800e <_dtoa_r+0xb56>
 8007ffa:	ee18 1a10 	vmov	r1, s16
 8007ffe:	2300      	movs	r3, #0
 8008000:	220a      	movs	r2, #10
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fae2 	bl	80085cc <__multadd>
 8008008:	ee08 0a10 	vmov	s16, r0
 800800c:	e7e7      	b.n	8007fde <_dtoa_r+0xb26>
 800800e:	9b02      	ldr	r3, [sp, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	bfc8      	it	gt
 8008014:	461d      	movgt	r5, r3
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	bfd8      	it	le
 800801a:	2501      	movle	r5, #1
 800801c:	441d      	add	r5, r3
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	ee18 1a10 	vmov	r1, s16
 8008026:	2201      	movs	r2, #1
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fc7f 	bl	800892c <__lshift>
 800802e:	4631      	mov	r1, r6
 8008030:	ee08 0a10 	vmov	s16, r0
 8008034:	f000 fcea 	bl	8008a0c <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dc91      	bgt.n	8007f60 <_dtoa_r+0xaa8>
 800803c:	d102      	bne.n	8008044 <_dtoa_r+0xb8c>
 800803e:	f01a 0f01 	tst.w	sl, #1
 8008042:	d18d      	bne.n	8007f60 <_dtoa_r+0xaa8>
 8008044:	462b      	mov	r3, r5
 8008046:	461d      	mov	r5, r3
 8008048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800804c:	2a30      	cmp	r2, #48	; 0x30
 800804e:	d0fa      	beq.n	8008046 <_dtoa_r+0xb8e>
 8008050:	e6d7      	b.n	8007e02 <_dtoa_r+0x94a>
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d184      	bne.n	8007f62 <_dtoa_r+0xaaa>
 8008058:	9b00      	ldr	r3, [sp, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2331      	movs	r3, #49	; 0x31
 8008060:	7013      	strb	r3, [r2, #0]
 8008062:	e6ce      	b.n	8007e02 <_dtoa_r+0x94a>
 8008064:	4b09      	ldr	r3, [pc, #36]	; (800808c <_dtoa_r+0xbd4>)
 8008066:	f7ff ba95 	b.w	8007594 <_dtoa_r+0xdc>
 800806a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800806c:	2b00      	cmp	r3, #0
 800806e:	f47f aa6e 	bne.w	800754e <_dtoa_r+0x96>
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <_dtoa_r+0xbd8>)
 8008074:	f7ff ba8e 	b.w	8007594 <_dtoa_r+0xdc>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	dcae      	bgt.n	8007fdc <_dtoa_r+0xb24>
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	2b02      	cmp	r3, #2
 8008082:	f73f aea8 	bgt.w	8007dd6 <_dtoa_r+0x91e>
 8008086:	e7a9      	b.n	8007fdc <_dtoa_r+0xb24>
 8008088:	0800a947 	.word	0x0800a947
 800808c:	0800a8a4 	.word	0x0800a8a4
 8008090:	0800a8c8 	.word	0x0800a8c8

08008094 <__sflush_r>:
 8008094:	898a      	ldrh	r2, [r1, #12]
 8008096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	4605      	mov	r5, r0
 800809c:	0710      	lsls	r0, r2, #28
 800809e:	460c      	mov	r4, r1
 80080a0:	d458      	bmi.n	8008154 <__sflush_r+0xc0>
 80080a2:	684b      	ldr	r3, [r1, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc05      	bgt.n	80080b4 <__sflush_r+0x20>
 80080a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc02      	bgt.n	80080b4 <__sflush_r+0x20>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b6:	2e00      	cmp	r6, #0
 80080b8:	d0f9      	beq.n	80080ae <__sflush_r+0x1a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080c0:	682f      	ldr	r7, [r5, #0]
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	d032      	beq.n	800812c <__sflush_r+0x98>
 80080c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	075a      	lsls	r2, r3, #29
 80080cc:	d505      	bpl.n	80080da <__sflush_r+0x46>
 80080ce:	6863      	ldr	r3, [r4, #4]
 80080d0:	1ac0      	subs	r0, r0, r3
 80080d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080d4:	b10b      	cbz	r3, 80080da <__sflush_r+0x46>
 80080d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080d8:	1ac0      	subs	r0, r0, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	4602      	mov	r2, r0
 80080de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e0:	6a21      	ldr	r1, [r4, #32]
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b0      	blx	r6
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	d106      	bne.n	80080fa <__sflush_r+0x66>
 80080ec:	6829      	ldr	r1, [r5, #0]
 80080ee:	291d      	cmp	r1, #29
 80080f0:	d82c      	bhi.n	800814c <__sflush_r+0xb8>
 80080f2:	4a2a      	ldr	r2, [pc, #168]	; (800819c <__sflush_r+0x108>)
 80080f4:	40ca      	lsrs	r2, r1
 80080f6:	07d6      	lsls	r6, r2, #31
 80080f8:	d528      	bpl.n	800814c <__sflush_r+0xb8>
 80080fa:	2200      	movs	r2, #0
 80080fc:	6062      	str	r2, [r4, #4]
 80080fe:	04d9      	lsls	r1, r3, #19
 8008100:	6922      	ldr	r2, [r4, #16]
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	d504      	bpl.n	8008110 <__sflush_r+0x7c>
 8008106:	1c42      	adds	r2, r0, #1
 8008108:	d101      	bne.n	800810e <__sflush_r+0x7a>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b903      	cbnz	r3, 8008110 <__sflush_r+0x7c>
 800810e:	6560      	str	r0, [r4, #84]	; 0x54
 8008110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008112:	602f      	str	r7, [r5, #0]
 8008114:	2900      	cmp	r1, #0
 8008116:	d0ca      	beq.n	80080ae <__sflush_r+0x1a>
 8008118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800811c:	4299      	cmp	r1, r3
 800811e:	d002      	beq.n	8008126 <__sflush_r+0x92>
 8008120:	4628      	mov	r0, r5
 8008122:	f000 fd8b 	bl	8008c3c <_free_r>
 8008126:	2000      	movs	r0, #0
 8008128:	6360      	str	r0, [r4, #52]	; 0x34
 800812a:	e7c1      	b.n	80080b0 <__sflush_r+0x1c>
 800812c:	6a21      	ldr	r1, [r4, #32]
 800812e:	2301      	movs	r3, #1
 8008130:	4628      	mov	r0, r5
 8008132:	47b0      	blx	r6
 8008134:	1c41      	adds	r1, r0, #1
 8008136:	d1c7      	bne.n	80080c8 <__sflush_r+0x34>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0c4      	beq.n	80080c8 <__sflush_r+0x34>
 800813e:	2b1d      	cmp	r3, #29
 8008140:	d001      	beq.n	8008146 <__sflush_r+0xb2>
 8008142:	2b16      	cmp	r3, #22
 8008144:	d101      	bne.n	800814a <__sflush_r+0xb6>
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	e7b1      	b.n	80080ae <__sflush_r+0x1a>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	e7ad      	b.n	80080b0 <__sflush_r+0x1c>
 8008154:	690f      	ldr	r7, [r1, #16]
 8008156:	2f00      	cmp	r7, #0
 8008158:	d0a9      	beq.n	80080ae <__sflush_r+0x1a>
 800815a:	0793      	lsls	r3, r2, #30
 800815c:	680e      	ldr	r6, [r1, #0]
 800815e:	bf08      	it	eq
 8008160:	694b      	ldreq	r3, [r1, #20]
 8008162:	600f      	str	r7, [r1, #0]
 8008164:	bf18      	it	ne
 8008166:	2300      	movne	r3, #0
 8008168:	eba6 0807 	sub.w	r8, r6, r7
 800816c:	608b      	str	r3, [r1, #8]
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	dd9c      	ble.n	80080ae <__sflush_r+0x1a>
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008178:	4643      	mov	r3, r8
 800817a:	463a      	mov	r2, r7
 800817c:	4628      	mov	r0, r5
 800817e:	47b0      	blx	r6
 8008180:	2800      	cmp	r0, #0
 8008182:	dc06      	bgt.n	8008192 <__sflush_r+0xfe>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e78e      	b.n	80080b0 <__sflush_r+0x1c>
 8008192:	4407      	add	r7, r0
 8008194:	eba8 0800 	sub.w	r8, r8, r0
 8008198:	e7e9      	b.n	800816e <__sflush_r+0xda>
 800819a:	bf00      	nop
 800819c:	20400001 	.word	0x20400001

080081a0 <_fflush_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	690b      	ldr	r3, [r1, #16]
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b913      	cbnz	r3, 80081b0 <_fflush_r+0x10>
 80081aa:	2500      	movs	r5, #0
 80081ac:	4628      	mov	r0, r5
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	b118      	cbz	r0, 80081ba <_fflush_r+0x1a>
 80081b2:	6983      	ldr	r3, [r0, #24]
 80081b4:	b90b      	cbnz	r3, 80081ba <_fflush_r+0x1a>
 80081b6:	f000 f887 	bl	80082c8 <__sinit>
 80081ba:	4b14      	ldr	r3, [pc, #80]	; (800820c <_fflush_r+0x6c>)
 80081bc:	429c      	cmp	r4, r3
 80081be:	d11b      	bne.n	80081f8 <_fflush_r+0x58>
 80081c0:	686c      	ldr	r4, [r5, #4]
 80081c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0ef      	beq.n	80081aa <_fflush_r+0xa>
 80081ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081cc:	07d0      	lsls	r0, r2, #31
 80081ce:	d404      	bmi.n	80081da <_fflush_r+0x3a>
 80081d0:	0599      	lsls	r1, r3, #22
 80081d2:	d402      	bmi.n	80081da <_fflush_r+0x3a>
 80081d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081d6:	f000 f91a 	bl	800840e <__retarget_lock_acquire_recursive>
 80081da:	4628      	mov	r0, r5
 80081dc:	4621      	mov	r1, r4
 80081de:	f7ff ff59 	bl	8008094 <__sflush_r>
 80081e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081e4:	07da      	lsls	r2, r3, #31
 80081e6:	4605      	mov	r5, r0
 80081e8:	d4e0      	bmi.n	80081ac <_fflush_r+0xc>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	059b      	lsls	r3, r3, #22
 80081ee:	d4dd      	bmi.n	80081ac <_fflush_r+0xc>
 80081f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f2:	f000 f90d 	bl	8008410 <__retarget_lock_release_recursive>
 80081f6:	e7d9      	b.n	80081ac <_fflush_r+0xc>
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <_fflush_r+0x70>)
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d101      	bne.n	8008202 <_fflush_r+0x62>
 80081fe:	68ac      	ldr	r4, [r5, #8]
 8008200:	e7df      	b.n	80081c2 <_fflush_r+0x22>
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <_fflush_r+0x74>)
 8008204:	429c      	cmp	r4, r3
 8008206:	bf08      	it	eq
 8008208:	68ec      	ldreq	r4, [r5, #12]
 800820a:	e7da      	b.n	80081c2 <_fflush_r+0x22>
 800820c:	0800a978 	.word	0x0800a978
 8008210:	0800a998 	.word	0x0800a998
 8008214:	0800a958 	.word	0x0800a958

08008218 <std>:
 8008218:	2300      	movs	r3, #0
 800821a:	b510      	push	{r4, lr}
 800821c:	4604      	mov	r4, r0
 800821e:	e9c0 3300 	strd	r3, r3, [r0]
 8008222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008226:	6083      	str	r3, [r0, #8]
 8008228:	8181      	strh	r1, [r0, #12]
 800822a:	6643      	str	r3, [r0, #100]	; 0x64
 800822c:	81c2      	strh	r2, [r0, #14]
 800822e:	6183      	str	r3, [r0, #24]
 8008230:	4619      	mov	r1, r3
 8008232:	2208      	movs	r2, #8
 8008234:	305c      	adds	r0, #92	; 0x5c
 8008236:	f7fe faf1 	bl	800681c <memset>
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <std+0x38>)
 800823c:	6263      	str	r3, [r4, #36]	; 0x24
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <std+0x3c>)
 8008240:	62a3      	str	r3, [r4, #40]	; 0x28
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <std+0x40>)
 8008244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <std+0x44>)
 8008248:	6224      	str	r4, [r4, #32]
 800824a:	6323      	str	r3, [r4, #48]	; 0x30
 800824c:	bd10      	pop	{r4, pc}
 800824e:	bf00      	nop
 8008250:	080090d1 	.word	0x080090d1
 8008254:	080090f3 	.word	0x080090f3
 8008258:	0800912b 	.word	0x0800912b
 800825c:	0800914f 	.word	0x0800914f

08008260 <_cleanup_r>:
 8008260:	4901      	ldr	r1, [pc, #4]	; (8008268 <_cleanup_r+0x8>)
 8008262:	f000 b8af 	b.w	80083c4 <_fwalk_reent>
 8008266:	bf00      	nop
 8008268:	080081a1 	.word	0x080081a1

0800826c <__sfmoreglue>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	2268      	movs	r2, #104	; 0x68
 8008270:	1e4d      	subs	r5, r1, #1
 8008272:	4355      	muls	r5, r2
 8008274:	460e      	mov	r6, r1
 8008276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800827a:	f000 fd4b 	bl	8008d14 <_malloc_r>
 800827e:	4604      	mov	r4, r0
 8008280:	b140      	cbz	r0, 8008294 <__sfmoreglue+0x28>
 8008282:	2100      	movs	r1, #0
 8008284:	e9c0 1600 	strd	r1, r6, [r0]
 8008288:	300c      	adds	r0, #12
 800828a:	60a0      	str	r0, [r4, #8]
 800828c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008290:	f7fe fac4 	bl	800681c <memset>
 8008294:	4620      	mov	r0, r4
 8008296:	bd70      	pop	{r4, r5, r6, pc}

08008298 <__sfp_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sfp_lock_acquire+0x8>)
 800829a:	f000 b8b8 	b.w	800840e <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	20000389 	.word	0x20000389

080082a4 <__sfp_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_release+0x8>)
 80082a6:	f000 b8b3 	b.w	8008410 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	20000389 	.word	0x20000389

080082b0 <__sinit_lock_acquire>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__sinit_lock_acquire+0x8>)
 80082b2:	f000 b8ac 	b.w	800840e <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	2000038a 	.word	0x2000038a

080082bc <__sinit_lock_release>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__sinit_lock_release+0x8>)
 80082be:	f000 b8a7 	b.w	8008410 <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	2000038a 	.word	0x2000038a

080082c8 <__sinit>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	f7ff fff0 	bl	80082b0 <__sinit_lock_acquire>
 80082d0:	69a3      	ldr	r3, [r4, #24]
 80082d2:	b11b      	cbz	r3, 80082dc <__sinit+0x14>
 80082d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d8:	f7ff bff0 	b.w	80082bc <__sinit_lock_release>
 80082dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082e0:	6523      	str	r3, [r4, #80]	; 0x50
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <__sinit+0x68>)
 80082e4:	4a13      	ldr	r2, [pc, #76]	; (8008334 <__sinit+0x6c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	bf04      	itt	eq
 80082ee:	2301      	moveq	r3, #1
 80082f0:	61a3      	streq	r3, [r4, #24]
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 f820 	bl	8008338 <__sfp>
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f81c 	bl	8008338 <__sfp>
 8008300:	60a0      	str	r0, [r4, #8]
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f818 	bl	8008338 <__sfp>
 8008308:	2200      	movs	r2, #0
 800830a:	60e0      	str	r0, [r4, #12]
 800830c:	2104      	movs	r1, #4
 800830e:	6860      	ldr	r0, [r4, #4]
 8008310:	f7ff ff82 	bl	8008218 <std>
 8008314:	68a0      	ldr	r0, [r4, #8]
 8008316:	2201      	movs	r2, #1
 8008318:	2109      	movs	r1, #9
 800831a:	f7ff ff7d 	bl	8008218 <std>
 800831e:	68e0      	ldr	r0, [r4, #12]
 8008320:	2202      	movs	r2, #2
 8008322:	2112      	movs	r1, #18
 8008324:	f7ff ff78 	bl	8008218 <std>
 8008328:	2301      	movs	r3, #1
 800832a:	61a3      	str	r3, [r4, #24]
 800832c:	e7d2      	b.n	80082d4 <__sinit+0xc>
 800832e:	bf00      	nop
 8008330:	0800a890 	.word	0x0800a890
 8008334:	08008261 	.word	0x08008261

08008338 <__sfp>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	4607      	mov	r7, r0
 800833c:	f7ff ffac 	bl	8008298 <__sfp_lock_acquire>
 8008340:	4b1e      	ldr	r3, [pc, #120]	; (80083bc <__sfp+0x84>)
 8008342:	681e      	ldr	r6, [r3, #0]
 8008344:	69b3      	ldr	r3, [r6, #24]
 8008346:	b913      	cbnz	r3, 800834e <__sfp+0x16>
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff ffbd 	bl	80082c8 <__sinit>
 800834e:	3648      	adds	r6, #72	; 0x48
 8008350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008354:	3b01      	subs	r3, #1
 8008356:	d503      	bpl.n	8008360 <__sfp+0x28>
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	b30b      	cbz	r3, 80083a0 <__sfp+0x68>
 800835c:	6836      	ldr	r6, [r6, #0]
 800835e:	e7f7      	b.n	8008350 <__sfp+0x18>
 8008360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008364:	b9d5      	cbnz	r5, 800839c <__sfp+0x64>
 8008366:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <__sfp+0x88>)
 8008368:	60e3      	str	r3, [r4, #12]
 800836a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800836e:	6665      	str	r5, [r4, #100]	; 0x64
 8008370:	f000 f84c 	bl	800840c <__retarget_lock_init_recursive>
 8008374:	f7ff ff96 	bl	80082a4 <__sfp_lock_release>
 8008378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800837c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008380:	6025      	str	r5, [r4, #0]
 8008382:	61a5      	str	r5, [r4, #24]
 8008384:	2208      	movs	r2, #8
 8008386:	4629      	mov	r1, r5
 8008388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800838c:	f7fe fa46 	bl	800681c <memset>
 8008390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008398:	4620      	mov	r0, r4
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	3468      	adds	r4, #104	; 0x68
 800839e:	e7d9      	b.n	8008354 <__sfp+0x1c>
 80083a0:	2104      	movs	r1, #4
 80083a2:	4638      	mov	r0, r7
 80083a4:	f7ff ff62 	bl	800826c <__sfmoreglue>
 80083a8:	4604      	mov	r4, r0
 80083aa:	6030      	str	r0, [r6, #0]
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1d5      	bne.n	800835c <__sfp+0x24>
 80083b0:	f7ff ff78 	bl	80082a4 <__sfp_lock_release>
 80083b4:	230c      	movs	r3, #12
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	e7ee      	b.n	8008398 <__sfp+0x60>
 80083ba:	bf00      	nop
 80083bc:	0800a890 	.word	0x0800a890
 80083c0:	ffff0001 	.word	0xffff0001

080083c4 <_fwalk_reent>:
 80083c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	4606      	mov	r6, r0
 80083ca:	4688      	mov	r8, r1
 80083cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083d0:	2700      	movs	r7, #0
 80083d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083d6:	f1b9 0901 	subs.w	r9, r9, #1
 80083da:	d505      	bpl.n	80083e8 <_fwalk_reent+0x24>
 80083dc:	6824      	ldr	r4, [r4, #0]
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d1f7      	bne.n	80083d2 <_fwalk_reent+0xe>
 80083e2:	4638      	mov	r0, r7
 80083e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e8:	89ab      	ldrh	r3, [r5, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d907      	bls.n	80083fe <_fwalk_reent+0x3a>
 80083ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083f2:	3301      	adds	r3, #1
 80083f4:	d003      	beq.n	80083fe <_fwalk_reent+0x3a>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	47c0      	blx	r8
 80083fc:	4307      	orrs	r7, r0
 80083fe:	3568      	adds	r5, #104	; 0x68
 8008400:	e7e9      	b.n	80083d6 <_fwalk_reent+0x12>
	...

08008404 <_localeconv_r>:
 8008404:	4800      	ldr	r0, [pc, #0]	; (8008408 <_localeconv_r+0x4>)
 8008406:	4770      	bx	lr
 8008408:	20000160 	.word	0x20000160

0800840c <__retarget_lock_init_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_acquire_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_release_recursive>:
 8008410:	4770      	bx	lr

08008412 <__swhatbuf_r>:
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	460e      	mov	r6, r1
 8008416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841a:	2900      	cmp	r1, #0
 800841c:	b096      	sub	sp, #88	; 0x58
 800841e:	4614      	mov	r4, r2
 8008420:	461d      	mov	r5, r3
 8008422:	da08      	bge.n	8008436 <__swhatbuf_r+0x24>
 8008424:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	602a      	str	r2, [r5, #0]
 800842c:	061a      	lsls	r2, r3, #24
 800842e:	d410      	bmi.n	8008452 <__swhatbuf_r+0x40>
 8008430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008434:	e00e      	b.n	8008454 <__swhatbuf_r+0x42>
 8008436:	466a      	mov	r2, sp
 8008438:	f000 fee0 	bl	80091fc <_fstat_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	dbf1      	blt.n	8008424 <__swhatbuf_r+0x12>
 8008440:	9a01      	ldr	r2, [sp, #4]
 8008442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800844a:	425a      	negs	r2, r3
 800844c:	415a      	adcs	r2, r3
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	e7ee      	b.n	8008430 <__swhatbuf_r+0x1e>
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	2000      	movs	r0, #0
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	b016      	add	sp, #88	; 0x58
 800845a:	bd70      	pop	{r4, r5, r6, pc}

0800845c <__smakebuf_r>:
 800845c:	898b      	ldrh	r3, [r1, #12]
 800845e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008460:	079d      	lsls	r5, r3, #30
 8008462:	4606      	mov	r6, r0
 8008464:	460c      	mov	r4, r1
 8008466:	d507      	bpl.n	8008478 <__smakebuf_r+0x1c>
 8008468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	2301      	movs	r3, #1
 8008472:	6163      	str	r3, [r4, #20]
 8008474:	b002      	add	sp, #8
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	ab01      	add	r3, sp, #4
 800847a:	466a      	mov	r2, sp
 800847c:	f7ff ffc9 	bl	8008412 <__swhatbuf_r>
 8008480:	9900      	ldr	r1, [sp, #0]
 8008482:	4605      	mov	r5, r0
 8008484:	4630      	mov	r0, r6
 8008486:	f000 fc45 	bl	8008d14 <_malloc_r>
 800848a:	b948      	cbnz	r0, 80084a0 <__smakebuf_r+0x44>
 800848c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008490:	059a      	lsls	r2, r3, #22
 8008492:	d4ef      	bmi.n	8008474 <__smakebuf_r+0x18>
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e7e3      	b.n	8008468 <__smakebuf_r+0xc>
 80084a0:	4b0d      	ldr	r3, [pc, #52]	; (80084d8 <__smakebuf_r+0x7c>)
 80084a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	9b00      	ldr	r3, [sp, #0]
 80084b0:	6163      	str	r3, [r4, #20]
 80084b2:	9b01      	ldr	r3, [sp, #4]
 80084b4:	6120      	str	r0, [r4, #16]
 80084b6:	b15b      	cbz	r3, 80084d0 <__smakebuf_r+0x74>
 80084b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 feaf 	bl	8009220 <_isatty_r>
 80084c2:	b128      	cbz	r0, 80084d0 <__smakebuf_r+0x74>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	89a0      	ldrh	r0, [r4, #12]
 80084d2:	4305      	orrs	r5, r0
 80084d4:	81a5      	strh	r5, [r4, #12]
 80084d6:	e7cd      	b.n	8008474 <__smakebuf_r+0x18>
 80084d8:	08008261 	.word	0x08008261

080084dc <malloc>:
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <malloc+0xc>)
 80084de:	4601      	mov	r1, r0
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	f000 bc17 	b.w	8008d14 <_malloc_r>
 80084e6:	bf00      	nop
 80084e8:	2000000c 	.word	0x2000000c

080084ec <memcpy>:
 80084ec:	440a      	add	r2, r1
 80084ee:	4291      	cmp	r1, r2
 80084f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f4:	d100      	bne.n	80084f8 <memcpy+0xc>
 80084f6:	4770      	bx	lr
 80084f8:	b510      	push	{r4, lr}
 80084fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008502:	4291      	cmp	r1, r2
 8008504:	d1f9      	bne.n	80084fa <memcpy+0xe>
 8008506:	bd10      	pop	{r4, pc}

08008508 <_Balloc>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800850c:	4604      	mov	r4, r0
 800850e:	460d      	mov	r5, r1
 8008510:	b976      	cbnz	r6, 8008530 <_Balloc+0x28>
 8008512:	2010      	movs	r0, #16
 8008514:	f7ff ffe2 	bl	80084dc <malloc>
 8008518:	4602      	mov	r2, r0
 800851a:	6260      	str	r0, [r4, #36]	; 0x24
 800851c:	b920      	cbnz	r0, 8008528 <_Balloc+0x20>
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <_Balloc+0x78>)
 8008520:	4818      	ldr	r0, [pc, #96]	; (8008584 <_Balloc+0x7c>)
 8008522:	2166      	movs	r1, #102	; 0x66
 8008524:	f000 fe2a 	bl	800917c <__assert_func>
 8008528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800852c:	6006      	str	r6, [r0, #0]
 800852e:	60c6      	str	r6, [r0, #12]
 8008530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008532:	68f3      	ldr	r3, [r6, #12]
 8008534:	b183      	cbz	r3, 8008558 <_Balloc+0x50>
 8008536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800853e:	b9b8      	cbnz	r0, 8008570 <_Balloc+0x68>
 8008540:	2101      	movs	r1, #1
 8008542:	fa01 f605 	lsl.w	r6, r1, r5
 8008546:	1d72      	adds	r2, r6, #5
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fb60 	bl	8008c10 <_calloc_r>
 8008550:	b160      	cbz	r0, 800856c <_Balloc+0x64>
 8008552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008556:	e00e      	b.n	8008576 <_Balloc+0x6e>
 8008558:	2221      	movs	r2, #33	; 0x21
 800855a:	2104      	movs	r1, #4
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fb57 	bl	8008c10 <_calloc_r>
 8008562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008564:	60f0      	str	r0, [r6, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e4      	bne.n	8008536 <_Balloc+0x2e>
 800856c:	2000      	movs	r0, #0
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	6802      	ldr	r2, [r0, #0]
 8008572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008576:	2300      	movs	r3, #0
 8008578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800857c:	e7f7      	b.n	800856e <_Balloc+0x66>
 800857e:	bf00      	nop
 8008580:	0800a8d5 	.word	0x0800a8d5
 8008584:	0800a9b8 	.word	0x0800a9b8

08008588 <_Bfree>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800858c:	4605      	mov	r5, r0
 800858e:	460c      	mov	r4, r1
 8008590:	b976      	cbnz	r6, 80085b0 <_Bfree+0x28>
 8008592:	2010      	movs	r0, #16
 8008594:	f7ff ffa2 	bl	80084dc <malloc>
 8008598:	4602      	mov	r2, r0
 800859a:	6268      	str	r0, [r5, #36]	; 0x24
 800859c:	b920      	cbnz	r0, 80085a8 <_Bfree+0x20>
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <_Bfree+0x3c>)
 80085a0:	4809      	ldr	r0, [pc, #36]	; (80085c8 <_Bfree+0x40>)
 80085a2:	218a      	movs	r1, #138	; 0x8a
 80085a4:	f000 fdea 	bl	800917c <__assert_func>
 80085a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085ac:	6006      	str	r6, [r0, #0]
 80085ae:	60c6      	str	r6, [r0, #12]
 80085b0:	b13c      	cbz	r4, 80085c2 <_Bfree+0x3a>
 80085b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085b4:	6862      	ldr	r2, [r4, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085bc:	6021      	str	r1, [r4, #0]
 80085be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	0800a8d5 	.word	0x0800a8d5
 80085c8:	0800a9b8 	.word	0x0800a9b8

080085cc <__multadd>:
 80085cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d0:	690d      	ldr	r5, [r1, #16]
 80085d2:	4607      	mov	r7, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	461e      	mov	r6, r3
 80085d8:	f101 0c14 	add.w	ip, r1, #20
 80085dc:	2000      	movs	r0, #0
 80085de:	f8dc 3000 	ldr.w	r3, [ip]
 80085e2:	b299      	uxth	r1, r3
 80085e4:	fb02 6101 	mla	r1, r2, r1, r6
 80085e8:	0c1e      	lsrs	r6, r3, #16
 80085ea:	0c0b      	lsrs	r3, r1, #16
 80085ec:	fb02 3306 	mla	r3, r2, r6, r3
 80085f0:	b289      	uxth	r1, r1
 80085f2:	3001      	adds	r0, #1
 80085f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085f8:	4285      	cmp	r5, r0
 80085fa:	f84c 1b04 	str.w	r1, [ip], #4
 80085fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008602:	dcec      	bgt.n	80085de <__multadd+0x12>
 8008604:	b30e      	cbz	r6, 800864a <__multadd+0x7e>
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	42ab      	cmp	r3, r5
 800860a:	dc19      	bgt.n	8008640 <__multadd+0x74>
 800860c:	6861      	ldr	r1, [r4, #4]
 800860e:	4638      	mov	r0, r7
 8008610:	3101      	adds	r1, #1
 8008612:	f7ff ff79 	bl	8008508 <_Balloc>
 8008616:	4680      	mov	r8, r0
 8008618:	b928      	cbnz	r0, 8008626 <__multadd+0x5a>
 800861a:	4602      	mov	r2, r0
 800861c:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <__multadd+0x84>)
 800861e:	480d      	ldr	r0, [pc, #52]	; (8008654 <__multadd+0x88>)
 8008620:	21b5      	movs	r1, #181	; 0xb5
 8008622:	f000 fdab 	bl	800917c <__assert_func>
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	3202      	adds	r2, #2
 800862a:	f104 010c 	add.w	r1, r4, #12
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	300c      	adds	r0, #12
 8008632:	f7ff ff5b 	bl	80084ec <memcpy>
 8008636:	4621      	mov	r1, r4
 8008638:	4638      	mov	r0, r7
 800863a:	f7ff ffa5 	bl	8008588 <_Bfree>
 800863e:	4644      	mov	r4, r8
 8008640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008644:	3501      	adds	r5, #1
 8008646:	615e      	str	r6, [r3, #20]
 8008648:	6125      	str	r5, [r4, #16]
 800864a:	4620      	mov	r0, r4
 800864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008650:	0800a947 	.word	0x0800a947
 8008654:	0800a9b8 	.word	0x0800a9b8

08008658 <__hi0bits>:
 8008658:	0c03      	lsrs	r3, r0, #16
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	b9d3      	cbnz	r3, 8008694 <__hi0bits+0x3c>
 800865e:	0400      	lsls	r0, r0, #16
 8008660:	2310      	movs	r3, #16
 8008662:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008666:	bf04      	itt	eq
 8008668:	0200      	lsleq	r0, r0, #8
 800866a:	3308      	addeq	r3, #8
 800866c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008670:	bf04      	itt	eq
 8008672:	0100      	lsleq	r0, r0, #4
 8008674:	3304      	addeq	r3, #4
 8008676:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800867a:	bf04      	itt	eq
 800867c:	0080      	lsleq	r0, r0, #2
 800867e:	3302      	addeq	r3, #2
 8008680:	2800      	cmp	r0, #0
 8008682:	db05      	blt.n	8008690 <__hi0bits+0x38>
 8008684:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008688:	f103 0301 	add.w	r3, r3, #1
 800868c:	bf08      	it	eq
 800868e:	2320      	moveq	r3, #32
 8008690:	4618      	mov	r0, r3
 8008692:	4770      	bx	lr
 8008694:	2300      	movs	r3, #0
 8008696:	e7e4      	b.n	8008662 <__hi0bits+0xa>

08008698 <__lo0bits>:
 8008698:	6803      	ldr	r3, [r0, #0]
 800869a:	f013 0207 	ands.w	r2, r3, #7
 800869e:	4601      	mov	r1, r0
 80086a0:	d00b      	beq.n	80086ba <__lo0bits+0x22>
 80086a2:	07da      	lsls	r2, r3, #31
 80086a4:	d423      	bmi.n	80086ee <__lo0bits+0x56>
 80086a6:	0798      	lsls	r0, r3, #30
 80086a8:	bf49      	itett	mi
 80086aa:	085b      	lsrmi	r3, r3, #1
 80086ac:	089b      	lsrpl	r3, r3, #2
 80086ae:	2001      	movmi	r0, #1
 80086b0:	600b      	strmi	r3, [r1, #0]
 80086b2:	bf5c      	itt	pl
 80086b4:	600b      	strpl	r3, [r1, #0]
 80086b6:	2002      	movpl	r0, #2
 80086b8:	4770      	bx	lr
 80086ba:	b298      	uxth	r0, r3
 80086bc:	b9a8      	cbnz	r0, 80086ea <__lo0bits+0x52>
 80086be:	0c1b      	lsrs	r3, r3, #16
 80086c0:	2010      	movs	r0, #16
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	b90a      	cbnz	r2, 80086ca <__lo0bits+0x32>
 80086c6:	3008      	adds	r0, #8
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	071a      	lsls	r2, r3, #28
 80086cc:	bf04      	itt	eq
 80086ce:	091b      	lsreq	r3, r3, #4
 80086d0:	3004      	addeq	r0, #4
 80086d2:	079a      	lsls	r2, r3, #30
 80086d4:	bf04      	itt	eq
 80086d6:	089b      	lsreq	r3, r3, #2
 80086d8:	3002      	addeq	r0, #2
 80086da:	07da      	lsls	r2, r3, #31
 80086dc:	d403      	bmi.n	80086e6 <__lo0bits+0x4e>
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	f100 0001 	add.w	r0, r0, #1
 80086e4:	d005      	beq.n	80086f2 <__lo0bits+0x5a>
 80086e6:	600b      	str	r3, [r1, #0]
 80086e8:	4770      	bx	lr
 80086ea:	4610      	mov	r0, r2
 80086ec:	e7e9      	b.n	80086c2 <__lo0bits+0x2a>
 80086ee:	2000      	movs	r0, #0
 80086f0:	4770      	bx	lr
 80086f2:	2020      	movs	r0, #32
 80086f4:	4770      	bx	lr
	...

080086f8 <__i2b>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	2101      	movs	r1, #1
 80086fe:	f7ff ff03 	bl	8008508 <_Balloc>
 8008702:	4602      	mov	r2, r0
 8008704:	b928      	cbnz	r0, 8008712 <__i2b+0x1a>
 8008706:	4b05      	ldr	r3, [pc, #20]	; (800871c <__i2b+0x24>)
 8008708:	4805      	ldr	r0, [pc, #20]	; (8008720 <__i2b+0x28>)
 800870a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800870e:	f000 fd35 	bl	800917c <__assert_func>
 8008712:	2301      	movs	r3, #1
 8008714:	6144      	str	r4, [r0, #20]
 8008716:	6103      	str	r3, [r0, #16]
 8008718:	bd10      	pop	{r4, pc}
 800871a:	bf00      	nop
 800871c:	0800a947 	.word	0x0800a947
 8008720:	0800a9b8 	.word	0x0800a9b8

08008724 <__multiply>:
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	4691      	mov	r9, r2
 800872a:	690a      	ldr	r2, [r1, #16]
 800872c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	bfb8      	it	lt
 8008734:	460b      	movlt	r3, r1
 8008736:	460c      	mov	r4, r1
 8008738:	bfbc      	itt	lt
 800873a:	464c      	movlt	r4, r9
 800873c:	4699      	movlt	r9, r3
 800873e:	6927      	ldr	r7, [r4, #16]
 8008740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008744:	68a3      	ldr	r3, [r4, #8]
 8008746:	6861      	ldr	r1, [r4, #4]
 8008748:	eb07 060a 	add.w	r6, r7, sl
 800874c:	42b3      	cmp	r3, r6
 800874e:	b085      	sub	sp, #20
 8008750:	bfb8      	it	lt
 8008752:	3101      	addlt	r1, #1
 8008754:	f7ff fed8 	bl	8008508 <_Balloc>
 8008758:	b930      	cbnz	r0, 8008768 <__multiply+0x44>
 800875a:	4602      	mov	r2, r0
 800875c:	4b44      	ldr	r3, [pc, #272]	; (8008870 <__multiply+0x14c>)
 800875e:	4845      	ldr	r0, [pc, #276]	; (8008874 <__multiply+0x150>)
 8008760:	f240 115d 	movw	r1, #349	; 0x15d
 8008764:	f000 fd0a 	bl	800917c <__assert_func>
 8008768:	f100 0514 	add.w	r5, r0, #20
 800876c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008770:	462b      	mov	r3, r5
 8008772:	2200      	movs	r2, #0
 8008774:	4543      	cmp	r3, r8
 8008776:	d321      	bcc.n	80087bc <__multiply+0x98>
 8008778:	f104 0314 	add.w	r3, r4, #20
 800877c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008780:	f109 0314 	add.w	r3, r9, #20
 8008784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008788:	9202      	str	r2, [sp, #8]
 800878a:	1b3a      	subs	r2, r7, r4
 800878c:	3a15      	subs	r2, #21
 800878e:	f022 0203 	bic.w	r2, r2, #3
 8008792:	3204      	adds	r2, #4
 8008794:	f104 0115 	add.w	r1, r4, #21
 8008798:	428f      	cmp	r7, r1
 800879a:	bf38      	it	cc
 800879c:	2204      	movcc	r2, #4
 800879e:	9201      	str	r2, [sp, #4]
 80087a0:	9a02      	ldr	r2, [sp, #8]
 80087a2:	9303      	str	r3, [sp, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d80c      	bhi.n	80087c2 <__multiply+0x9e>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	dd03      	ble.n	80087b4 <__multiply+0x90>
 80087ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d05a      	beq.n	800886a <__multiply+0x146>
 80087b4:	6106      	str	r6, [r0, #16]
 80087b6:	b005      	add	sp, #20
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	f843 2b04 	str.w	r2, [r3], #4
 80087c0:	e7d8      	b.n	8008774 <__multiply+0x50>
 80087c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80087c6:	f1ba 0f00 	cmp.w	sl, #0
 80087ca:	d024      	beq.n	8008816 <__multiply+0xf2>
 80087cc:	f104 0e14 	add.w	lr, r4, #20
 80087d0:	46a9      	mov	r9, r5
 80087d2:	f04f 0c00 	mov.w	ip, #0
 80087d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087da:	f8d9 1000 	ldr.w	r1, [r9]
 80087de:	fa1f fb82 	uxth.w	fp, r2
 80087e2:	b289      	uxth	r1, r1
 80087e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80087e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087ec:	f8d9 2000 	ldr.w	r2, [r9]
 80087f0:	4461      	add	r1, ip
 80087f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80087fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087fe:	b289      	uxth	r1, r1
 8008800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008804:	4577      	cmp	r7, lr
 8008806:	f849 1b04 	str.w	r1, [r9], #4
 800880a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800880e:	d8e2      	bhi.n	80087d6 <__multiply+0xb2>
 8008810:	9a01      	ldr	r2, [sp, #4]
 8008812:	f845 c002 	str.w	ip, [r5, r2]
 8008816:	9a03      	ldr	r2, [sp, #12]
 8008818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800881c:	3304      	adds	r3, #4
 800881e:	f1b9 0f00 	cmp.w	r9, #0
 8008822:	d020      	beq.n	8008866 <__multiply+0x142>
 8008824:	6829      	ldr	r1, [r5, #0]
 8008826:	f104 0c14 	add.w	ip, r4, #20
 800882a:	46ae      	mov	lr, r5
 800882c:	f04f 0a00 	mov.w	sl, #0
 8008830:	f8bc b000 	ldrh.w	fp, [ip]
 8008834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008838:	fb09 220b 	mla	r2, r9, fp, r2
 800883c:	4492      	add	sl, r2
 800883e:	b289      	uxth	r1, r1
 8008840:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008844:	f84e 1b04 	str.w	r1, [lr], #4
 8008848:	f85c 2b04 	ldr.w	r2, [ip], #4
 800884c:	f8be 1000 	ldrh.w	r1, [lr]
 8008850:	0c12      	lsrs	r2, r2, #16
 8008852:	fb09 1102 	mla	r1, r9, r2, r1
 8008856:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800885a:	4567      	cmp	r7, ip
 800885c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008860:	d8e6      	bhi.n	8008830 <__multiply+0x10c>
 8008862:	9a01      	ldr	r2, [sp, #4]
 8008864:	50a9      	str	r1, [r5, r2]
 8008866:	3504      	adds	r5, #4
 8008868:	e79a      	b.n	80087a0 <__multiply+0x7c>
 800886a:	3e01      	subs	r6, #1
 800886c:	e79c      	b.n	80087a8 <__multiply+0x84>
 800886e:	bf00      	nop
 8008870:	0800a947 	.word	0x0800a947
 8008874:	0800a9b8 	.word	0x0800a9b8

08008878 <__pow5mult>:
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	4615      	mov	r5, r2
 800887e:	f012 0203 	ands.w	r2, r2, #3
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	d007      	beq.n	8008898 <__pow5mult+0x20>
 8008888:	4c25      	ldr	r4, [pc, #148]	; (8008920 <__pow5mult+0xa8>)
 800888a:	3a01      	subs	r2, #1
 800888c:	2300      	movs	r3, #0
 800888e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008892:	f7ff fe9b 	bl	80085cc <__multadd>
 8008896:	4607      	mov	r7, r0
 8008898:	10ad      	asrs	r5, r5, #2
 800889a:	d03d      	beq.n	8008918 <__pow5mult+0xa0>
 800889c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800889e:	b97c      	cbnz	r4, 80088c0 <__pow5mult+0x48>
 80088a0:	2010      	movs	r0, #16
 80088a2:	f7ff fe1b 	bl	80084dc <malloc>
 80088a6:	4602      	mov	r2, r0
 80088a8:	6270      	str	r0, [r6, #36]	; 0x24
 80088aa:	b928      	cbnz	r0, 80088b8 <__pow5mult+0x40>
 80088ac:	4b1d      	ldr	r3, [pc, #116]	; (8008924 <__pow5mult+0xac>)
 80088ae:	481e      	ldr	r0, [pc, #120]	; (8008928 <__pow5mult+0xb0>)
 80088b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088b4:	f000 fc62 	bl	800917c <__assert_func>
 80088b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088bc:	6004      	str	r4, [r0, #0]
 80088be:	60c4      	str	r4, [r0, #12]
 80088c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088c8:	b94c      	cbnz	r4, 80088de <__pow5mult+0x66>
 80088ca:	f240 2171 	movw	r1, #625	; 0x271
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ff12 	bl	80086f8 <__i2b>
 80088d4:	2300      	movs	r3, #0
 80088d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80088da:	4604      	mov	r4, r0
 80088dc:	6003      	str	r3, [r0, #0]
 80088de:	f04f 0900 	mov.w	r9, #0
 80088e2:	07eb      	lsls	r3, r5, #31
 80088e4:	d50a      	bpl.n	80088fc <__pow5mult+0x84>
 80088e6:	4639      	mov	r1, r7
 80088e8:	4622      	mov	r2, r4
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7ff ff1a 	bl	8008724 <__multiply>
 80088f0:	4639      	mov	r1, r7
 80088f2:	4680      	mov	r8, r0
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff fe47 	bl	8008588 <_Bfree>
 80088fa:	4647      	mov	r7, r8
 80088fc:	106d      	asrs	r5, r5, #1
 80088fe:	d00b      	beq.n	8008918 <__pow5mult+0xa0>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	b938      	cbnz	r0, 8008914 <__pow5mult+0x9c>
 8008904:	4622      	mov	r2, r4
 8008906:	4621      	mov	r1, r4
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ff0b 	bl	8008724 <__multiply>
 800890e:	6020      	str	r0, [r4, #0]
 8008910:	f8c0 9000 	str.w	r9, [r0]
 8008914:	4604      	mov	r4, r0
 8008916:	e7e4      	b.n	80088e2 <__pow5mult+0x6a>
 8008918:	4638      	mov	r0, r7
 800891a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800891e:	bf00      	nop
 8008920:	0800ab08 	.word	0x0800ab08
 8008924:	0800a8d5 	.word	0x0800a8d5
 8008928:	0800a9b8 	.word	0x0800a9b8

0800892c <__lshift>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	460c      	mov	r4, r1
 8008932:	6849      	ldr	r1, [r1, #4]
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	4607      	mov	r7, r0
 800893e:	4691      	mov	r9, r2
 8008940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008944:	f108 0601 	add.w	r6, r8, #1
 8008948:	42b3      	cmp	r3, r6
 800894a:	db0b      	blt.n	8008964 <__lshift+0x38>
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff fddb 	bl	8008508 <_Balloc>
 8008952:	4605      	mov	r5, r0
 8008954:	b948      	cbnz	r0, 800896a <__lshift+0x3e>
 8008956:	4602      	mov	r2, r0
 8008958:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <__lshift+0xd8>)
 800895a:	482b      	ldr	r0, [pc, #172]	; (8008a08 <__lshift+0xdc>)
 800895c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008960:	f000 fc0c 	bl	800917c <__assert_func>
 8008964:	3101      	adds	r1, #1
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	e7ee      	b.n	8008948 <__lshift+0x1c>
 800896a:	2300      	movs	r3, #0
 800896c:	f100 0114 	add.w	r1, r0, #20
 8008970:	f100 0210 	add.w	r2, r0, #16
 8008974:	4618      	mov	r0, r3
 8008976:	4553      	cmp	r3, sl
 8008978:	db37      	blt.n	80089ea <__lshift+0xbe>
 800897a:	6920      	ldr	r0, [r4, #16]
 800897c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008980:	f104 0314 	add.w	r3, r4, #20
 8008984:	f019 091f 	ands.w	r9, r9, #31
 8008988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800898c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008990:	d02f      	beq.n	80089f2 <__lshift+0xc6>
 8008992:	f1c9 0e20 	rsb	lr, r9, #32
 8008996:	468a      	mov	sl, r1
 8008998:	f04f 0c00 	mov.w	ip, #0
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	fa02 f209 	lsl.w	r2, r2, r9
 80089a2:	ea42 020c 	orr.w	r2, r2, ip
 80089a6:	f84a 2b04 	str.w	r2, [sl], #4
 80089aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ae:	4298      	cmp	r0, r3
 80089b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089b4:	d8f2      	bhi.n	800899c <__lshift+0x70>
 80089b6:	1b03      	subs	r3, r0, r4
 80089b8:	3b15      	subs	r3, #21
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	3304      	adds	r3, #4
 80089c0:	f104 0215 	add.w	r2, r4, #21
 80089c4:	4290      	cmp	r0, r2
 80089c6:	bf38      	it	cc
 80089c8:	2304      	movcc	r3, #4
 80089ca:	f841 c003 	str.w	ip, [r1, r3]
 80089ce:	f1bc 0f00 	cmp.w	ip, #0
 80089d2:	d001      	beq.n	80089d8 <__lshift+0xac>
 80089d4:	f108 0602 	add.w	r6, r8, #2
 80089d8:	3e01      	subs	r6, #1
 80089da:	4638      	mov	r0, r7
 80089dc:	612e      	str	r6, [r5, #16]
 80089de:	4621      	mov	r1, r4
 80089e0:	f7ff fdd2 	bl	8008588 <_Bfree>
 80089e4:	4628      	mov	r0, r5
 80089e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ee:	3301      	adds	r3, #1
 80089f0:	e7c1      	b.n	8008976 <__lshift+0x4a>
 80089f2:	3904      	subs	r1, #4
 80089f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089fc:	4298      	cmp	r0, r3
 80089fe:	d8f9      	bhi.n	80089f4 <__lshift+0xc8>
 8008a00:	e7ea      	b.n	80089d8 <__lshift+0xac>
 8008a02:	bf00      	nop
 8008a04:	0800a947 	.word	0x0800a947
 8008a08:	0800a9b8 	.word	0x0800a9b8

08008a0c <__mcmp>:
 8008a0c:	b530      	push	{r4, r5, lr}
 8008a0e:	6902      	ldr	r2, [r0, #16]
 8008a10:	690c      	ldr	r4, [r1, #16]
 8008a12:	1b12      	subs	r2, r2, r4
 8008a14:	d10e      	bne.n	8008a34 <__mcmp+0x28>
 8008a16:	f100 0314 	add.w	r3, r0, #20
 8008a1a:	3114      	adds	r1, #20
 8008a1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a2c:	42a5      	cmp	r5, r4
 8008a2e:	d003      	beq.n	8008a38 <__mcmp+0x2c>
 8008a30:	d305      	bcc.n	8008a3e <__mcmp+0x32>
 8008a32:	2201      	movs	r2, #1
 8008a34:	4610      	mov	r0, r2
 8008a36:	bd30      	pop	{r4, r5, pc}
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	d3f3      	bcc.n	8008a24 <__mcmp+0x18>
 8008a3c:	e7fa      	b.n	8008a34 <__mcmp+0x28>
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	e7f7      	b.n	8008a34 <__mcmp+0x28>

08008a44 <__mdiff>:
 8008a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	460c      	mov	r4, r1
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4690      	mov	r8, r2
 8008a52:	f7ff ffdb 	bl	8008a0c <__mcmp>
 8008a56:	1e05      	subs	r5, r0, #0
 8008a58:	d110      	bne.n	8008a7c <__mdiff+0x38>
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7ff fd53 	bl	8008508 <_Balloc>
 8008a62:	b930      	cbnz	r0, 8008a72 <__mdiff+0x2e>
 8008a64:	4b3a      	ldr	r3, [pc, #232]	; (8008b50 <__mdiff+0x10c>)
 8008a66:	4602      	mov	r2, r0
 8008a68:	f240 2132 	movw	r1, #562	; 0x232
 8008a6c:	4839      	ldr	r0, [pc, #228]	; (8008b54 <__mdiff+0x110>)
 8008a6e:	f000 fb85 	bl	800917c <__assert_func>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7c:	bfa4      	itt	ge
 8008a7e:	4643      	movge	r3, r8
 8008a80:	46a0      	movge	r8, r4
 8008a82:	4630      	mov	r0, r6
 8008a84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a88:	bfa6      	itte	ge
 8008a8a:	461c      	movge	r4, r3
 8008a8c:	2500      	movge	r5, #0
 8008a8e:	2501      	movlt	r5, #1
 8008a90:	f7ff fd3a 	bl	8008508 <_Balloc>
 8008a94:	b920      	cbnz	r0, 8008aa0 <__mdiff+0x5c>
 8008a96:	4b2e      	ldr	r3, [pc, #184]	; (8008b50 <__mdiff+0x10c>)
 8008a98:	4602      	mov	r2, r0
 8008a9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a9e:	e7e5      	b.n	8008a6c <__mdiff+0x28>
 8008aa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008aa4:	6926      	ldr	r6, [r4, #16]
 8008aa6:	60c5      	str	r5, [r0, #12]
 8008aa8:	f104 0914 	add.w	r9, r4, #20
 8008aac:	f108 0514 	add.w	r5, r8, #20
 8008ab0:	f100 0e14 	add.w	lr, r0, #20
 8008ab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008abc:	f108 0210 	add.w	r2, r8, #16
 8008ac0:	46f2      	mov	sl, lr
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008acc:	fa1f f883 	uxth.w	r8, r3
 8008ad0:	fa11 f18b 	uxtah	r1, r1, fp
 8008ad4:	0c1b      	lsrs	r3, r3, #16
 8008ad6:	eba1 0808 	sub.w	r8, r1, r8
 8008ada:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ade:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ae2:	fa1f f888 	uxth.w	r8, r8
 8008ae6:	1419      	asrs	r1, r3, #16
 8008ae8:	454e      	cmp	r6, r9
 8008aea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aee:	f84a 3b04 	str.w	r3, [sl], #4
 8008af2:	d8e7      	bhi.n	8008ac4 <__mdiff+0x80>
 8008af4:	1b33      	subs	r3, r6, r4
 8008af6:	3b15      	subs	r3, #21
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	3304      	adds	r3, #4
 8008afe:	3415      	adds	r4, #21
 8008b00:	42a6      	cmp	r6, r4
 8008b02:	bf38      	it	cc
 8008b04:	2304      	movcc	r3, #4
 8008b06:	441d      	add	r5, r3
 8008b08:	4473      	add	r3, lr
 8008b0a:	469e      	mov	lr, r3
 8008b0c:	462e      	mov	r6, r5
 8008b0e:	4566      	cmp	r6, ip
 8008b10:	d30e      	bcc.n	8008b30 <__mdiff+0xec>
 8008b12:	f10c 0203 	add.w	r2, ip, #3
 8008b16:	1b52      	subs	r2, r2, r5
 8008b18:	f022 0203 	bic.w	r2, r2, #3
 8008b1c:	3d03      	subs	r5, #3
 8008b1e:	45ac      	cmp	ip, r5
 8008b20:	bf38      	it	cc
 8008b22:	2200      	movcc	r2, #0
 8008b24:	441a      	add	r2, r3
 8008b26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b2a:	b17b      	cbz	r3, 8008b4c <__mdiff+0x108>
 8008b2c:	6107      	str	r7, [r0, #16]
 8008b2e:	e7a3      	b.n	8008a78 <__mdiff+0x34>
 8008b30:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b34:	fa11 f288 	uxtah	r2, r1, r8
 8008b38:	1414      	asrs	r4, r2, #16
 8008b3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b44:	f84e 2b04 	str.w	r2, [lr], #4
 8008b48:	1421      	asrs	r1, r4, #16
 8008b4a:	e7e0      	b.n	8008b0e <__mdiff+0xca>
 8008b4c:	3f01      	subs	r7, #1
 8008b4e:	e7ea      	b.n	8008b26 <__mdiff+0xe2>
 8008b50:	0800a947 	.word	0x0800a947
 8008b54:	0800a9b8 	.word	0x0800a9b8

08008b58 <__d2b>:
 8008b58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4689      	mov	r9, r1
 8008b5e:	2101      	movs	r1, #1
 8008b60:	ec57 6b10 	vmov	r6, r7, d0
 8008b64:	4690      	mov	r8, r2
 8008b66:	f7ff fccf 	bl	8008508 <_Balloc>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	b930      	cbnz	r0, 8008b7c <__d2b+0x24>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <__d2b+0xb0>)
 8008b72:	4826      	ldr	r0, [pc, #152]	; (8008c0c <__d2b+0xb4>)
 8008b74:	f240 310a 	movw	r1, #778	; 0x30a
 8008b78:	f000 fb00 	bl	800917c <__assert_func>
 8008b7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b84:	bb35      	cbnz	r5, 8008bd4 <__d2b+0x7c>
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	d028      	beq.n	8008bde <__d2b+0x86>
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	9600      	str	r6, [sp, #0]
 8008b90:	f7ff fd82 	bl	8008698 <__lo0bits>
 8008b94:	9900      	ldr	r1, [sp, #0]
 8008b96:	b300      	cbz	r0, 8008bda <__d2b+0x82>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	f1c0 0320 	rsb	r3, r0, #32
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	40c2      	lsrs	r2, r0
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	9201      	str	r2, [sp, #4]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	61a3      	str	r3, [r4, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bf14      	ite	ne
 8008bb2:	2202      	movne	r2, #2
 8008bb4:	2201      	moveq	r2, #1
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	b1d5      	cbz	r5, 8008bf0 <__d2b+0x98>
 8008bba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bbe:	4405      	add	r5, r0
 8008bc0:	f8c9 5000 	str.w	r5, [r9]
 8008bc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bc8:	f8c8 0000 	str.w	r0, [r8]
 8008bcc:	4620      	mov	r0, r4
 8008bce:	b003      	add	sp, #12
 8008bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd8:	e7d5      	b.n	8008b86 <__d2b+0x2e>
 8008bda:	6161      	str	r1, [r4, #20]
 8008bdc:	e7e5      	b.n	8008baa <__d2b+0x52>
 8008bde:	a801      	add	r0, sp, #4
 8008be0:	f7ff fd5a 	bl	8008698 <__lo0bits>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	6163      	str	r3, [r4, #20]
 8008be8:	2201      	movs	r2, #1
 8008bea:	6122      	str	r2, [r4, #16]
 8008bec:	3020      	adds	r0, #32
 8008bee:	e7e3      	b.n	8008bb8 <__d2b+0x60>
 8008bf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf8:	f8c9 0000 	str.w	r0, [r9]
 8008bfc:	6918      	ldr	r0, [r3, #16]
 8008bfe:	f7ff fd2b 	bl	8008658 <__hi0bits>
 8008c02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c06:	e7df      	b.n	8008bc8 <__d2b+0x70>
 8008c08:	0800a947 	.word	0x0800a947
 8008c0c:	0800a9b8 	.word	0x0800a9b8

08008c10 <_calloc_r>:
 8008c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c12:	fba1 2402 	umull	r2, r4, r1, r2
 8008c16:	b94c      	cbnz	r4, 8008c2c <_calloc_r+0x1c>
 8008c18:	4611      	mov	r1, r2
 8008c1a:	9201      	str	r2, [sp, #4]
 8008c1c:	f000 f87a 	bl	8008d14 <_malloc_r>
 8008c20:	9a01      	ldr	r2, [sp, #4]
 8008c22:	4605      	mov	r5, r0
 8008c24:	b930      	cbnz	r0, 8008c34 <_calloc_r+0x24>
 8008c26:	4628      	mov	r0, r5
 8008c28:	b003      	add	sp, #12
 8008c2a:	bd30      	pop	{r4, r5, pc}
 8008c2c:	220c      	movs	r2, #12
 8008c2e:	6002      	str	r2, [r0, #0]
 8008c30:	2500      	movs	r5, #0
 8008c32:	e7f8      	b.n	8008c26 <_calloc_r+0x16>
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7fd fdf1 	bl	800681c <memset>
 8008c3a:	e7f4      	b.n	8008c26 <_calloc_r+0x16>

08008c3c <_free_r>:
 8008c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	d044      	beq.n	8008ccc <_free_r+0x90>
 8008c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c46:	9001      	str	r0, [sp, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c4e:	bfb8      	it	lt
 8008c50:	18e4      	addlt	r4, r4, r3
 8008c52:	f000 fb19 	bl	8009288 <__malloc_lock>
 8008c56:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <_free_r+0x94>)
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	b933      	cbnz	r3, 8008c6c <_free_r+0x30>
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	6014      	str	r4, [r2, #0]
 8008c62:	b003      	add	sp, #12
 8008c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c68:	f000 bb14 	b.w	8009294 <__malloc_unlock>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d908      	bls.n	8008c82 <_free_r+0x46>
 8008c70:	6825      	ldr	r5, [r4, #0]
 8008c72:	1961      	adds	r1, r4, r5
 8008c74:	428b      	cmp	r3, r1
 8008c76:	bf01      	itttt	eq
 8008c78:	6819      	ldreq	r1, [r3, #0]
 8008c7a:	685b      	ldreq	r3, [r3, #4]
 8008c7c:	1949      	addeq	r1, r1, r5
 8008c7e:	6021      	streq	r1, [r4, #0]
 8008c80:	e7ed      	b.n	8008c5e <_free_r+0x22>
 8008c82:	461a      	mov	r2, r3
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b10b      	cbz	r3, 8008c8c <_free_r+0x50>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d9fa      	bls.n	8008c82 <_free_r+0x46>
 8008c8c:	6811      	ldr	r1, [r2, #0]
 8008c8e:	1855      	adds	r5, r2, r1
 8008c90:	42a5      	cmp	r5, r4
 8008c92:	d10b      	bne.n	8008cac <_free_r+0x70>
 8008c94:	6824      	ldr	r4, [r4, #0]
 8008c96:	4421      	add	r1, r4
 8008c98:	1854      	adds	r4, r2, r1
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	d1e0      	bne.n	8008c62 <_free_r+0x26>
 8008ca0:	681c      	ldr	r4, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	6053      	str	r3, [r2, #4]
 8008ca6:	4421      	add	r1, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	e7da      	b.n	8008c62 <_free_r+0x26>
 8008cac:	d902      	bls.n	8008cb4 <_free_r+0x78>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	e7d6      	b.n	8008c62 <_free_r+0x26>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1961      	adds	r1, r4, r5
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf04      	itt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	bf04      	itt	eq
 8008cc4:	1949      	addeq	r1, r1, r5
 8008cc6:	6021      	streq	r1, [r4, #0]
 8008cc8:	6054      	str	r4, [r2, #4]
 8008cca:	e7ca      	b.n	8008c62 <_free_r+0x26>
 8008ccc:	b003      	add	sp, #12
 8008cce:	bd30      	pop	{r4, r5, pc}
 8008cd0:	2000038c 	.word	0x2000038c

08008cd4 <sbrk_aligned>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4e0e      	ldr	r6, [pc, #56]	; (8008d10 <sbrk_aligned+0x3c>)
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6831      	ldr	r1, [r6, #0]
 8008cdc:	4605      	mov	r5, r0
 8008cde:	b911      	cbnz	r1, 8008ce6 <sbrk_aligned+0x12>
 8008ce0:	f000 f9e6 	bl	80090b0 <_sbrk_r>
 8008ce4:	6030      	str	r0, [r6, #0]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 f9e1 	bl	80090b0 <_sbrk_r>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d00a      	beq.n	8008d08 <sbrk_aligned+0x34>
 8008cf2:	1cc4      	adds	r4, r0, #3
 8008cf4:	f024 0403 	bic.w	r4, r4, #3
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d007      	beq.n	8008d0c <sbrk_aligned+0x38>
 8008cfc:	1a21      	subs	r1, r4, r0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f9d6 	bl	80090b0 <_sbrk_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d101      	bne.n	8008d0c <sbrk_aligned+0x38>
 8008d08:	f04f 34ff 	mov.w	r4, #4294967295
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	20000390 	.word	0x20000390

08008d14 <_malloc_r>:
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	1ccd      	adds	r5, r1, #3
 8008d1a:	f025 0503 	bic.w	r5, r5, #3
 8008d1e:	3508      	adds	r5, #8
 8008d20:	2d0c      	cmp	r5, #12
 8008d22:	bf38      	it	cc
 8008d24:	250c      	movcc	r5, #12
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	4607      	mov	r7, r0
 8008d2a:	db01      	blt.n	8008d30 <_malloc_r+0x1c>
 8008d2c:	42a9      	cmp	r1, r5
 8008d2e:	d905      	bls.n	8008d3c <_malloc_r+0x28>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	2600      	movs	r6, #0
 8008d36:	4630      	mov	r0, r6
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	4e2e      	ldr	r6, [pc, #184]	; (8008df8 <_malloc_r+0xe4>)
 8008d3e:	f000 faa3 	bl	8009288 <__malloc_lock>
 8008d42:	6833      	ldr	r3, [r6, #0]
 8008d44:	461c      	mov	r4, r3
 8008d46:	bb34      	cbnz	r4, 8008d96 <_malloc_r+0x82>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	f7ff ffc2 	bl	8008cd4 <sbrk_aligned>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	4604      	mov	r4, r0
 8008d54:	d14d      	bne.n	8008df2 <_malloc_r+0xde>
 8008d56:	6834      	ldr	r4, [r6, #0]
 8008d58:	4626      	mov	r6, r4
 8008d5a:	2e00      	cmp	r6, #0
 8008d5c:	d140      	bne.n	8008de0 <_malloc_r+0xcc>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	4631      	mov	r1, r6
 8008d62:	4638      	mov	r0, r7
 8008d64:	eb04 0803 	add.w	r8, r4, r3
 8008d68:	f000 f9a2 	bl	80090b0 <_sbrk_r>
 8008d6c:	4580      	cmp	r8, r0
 8008d6e:	d13a      	bne.n	8008de6 <_malloc_r+0xd2>
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	3503      	adds	r5, #3
 8008d74:	1a6d      	subs	r5, r5, r1
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	4629      	mov	r1, r5
 8008d84:	4638      	mov	r0, r7
 8008d86:	f7ff ffa5 	bl	8008cd4 <sbrk_aligned>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d02b      	beq.n	8008de6 <_malloc_r+0xd2>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	442b      	add	r3, r5
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	e00e      	b.n	8008db4 <_malloc_r+0xa0>
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	1b52      	subs	r2, r2, r5
 8008d9a:	d41e      	bmi.n	8008dda <_malloc_r+0xc6>
 8008d9c:	2a0b      	cmp	r2, #11
 8008d9e:	d916      	bls.n	8008dce <_malloc_r+0xba>
 8008da0:	1961      	adds	r1, r4, r5
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	6025      	str	r5, [r4, #0]
 8008da6:	bf18      	it	ne
 8008da8:	6059      	strne	r1, [r3, #4]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	bf08      	it	eq
 8008dae:	6031      	streq	r1, [r6, #0]
 8008db0:	5162      	str	r2, [r4, r5]
 8008db2:	604b      	str	r3, [r1, #4]
 8008db4:	4638      	mov	r0, r7
 8008db6:	f104 060b 	add.w	r6, r4, #11
 8008dba:	f000 fa6b 	bl	8009294 <__malloc_unlock>
 8008dbe:	f026 0607 	bic.w	r6, r6, #7
 8008dc2:	1d23      	adds	r3, r4, #4
 8008dc4:	1af2      	subs	r2, r6, r3
 8008dc6:	d0b6      	beq.n	8008d36 <_malloc_r+0x22>
 8008dc8:	1b9b      	subs	r3, r3, r6
 8008dca:	50a3      	str	r3, [r4, r2]
 8008dcc:	e7b3      	b.n	8008d36 <_malloc_r+0x22>
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	bf0c      	ite	eq
 8008dd4:	6032      	streq	r2, [r6, #0]
 8008dd6:	605a      	strne	r2, [r3, #4]
 8008dd8:	e7ec      	b.n	8008db4 <_malloc_r+0xa0>
 8008dda:	4623      	mov	r3, r4
 8008ddc:	6864      	ldr	r4, [r4, #4]
 8008dde:	e7b2      	b.n	8008d46 <_malloc_r+0x32>
 8008de0:	4634      	mov	r4, r6
 8008de2:	6876      	ldr	r6, [r6, #4]
 8008de4:	e7b9      	b.n	8008d5a <_malloc_r+0x46>
 8008de6:	230c      	movs	r3, #12
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	4638      	mov	r0, r7
 8008dec:	f000 fa52 	bl	8009294 <__malloc_unlock>
 8008df0:	e7a1      	b.n	8008d36 <_malloc_r+0x22>
 8008df2:	6025      	str	r5, [r4, #0]
 8008df4:	e7de      	b.n	8008db4 <_malloc_r+0xa0>
 8008df6:	bf00      	nop
 8008df8:	2000038c 	.word	0x2000038c

08008dfc <__sfputc_r>:
 8008dfc:	6893      	ldr	r3, [r2, #8]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	b410      	push	{r4}
 8008e04:	6093      	str	r3, [r2, #8]
 8008e06:	da08      	bge.n	8008e1a <__sfputc_r+0x1e>
 8008e08:	6994      	ldr	r4, [r2, #24]
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	db01      	blt.n	8008e12 <__sfputc_r+0x16>
 8008e0e:	290a      	cmp	r1, #10
 8008e10:	d103      	bne.n	8008e1a <__sfputc_r+0x1e>
 8008e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e16:	f7fe ba01 	b.w	800721c <__swbuf_r>
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	1c58      	adds	r0, r3, #1
 8008e1e:	6010      	str	r0, [r2, #0]
 8008e20:	7019      	strb	r1, [r3, #0]
 8008e22:	4608      	mov	r0, r1
 8008e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <__sfputs_r>:
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	4614      	mov	r4, r2
 8008e32:	18d5      	adds	r5, r2, r3
 8008e34:	42ac      	cmp	r4, r5
 8008e36:	d101      	bne.n	8008e3c <__sfputs_r+0x12>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e007      	b.n	8008e4c <__sfputs_r+0x22>
 8008e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e40:	463a      	mov	r2, r7
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ffda 	bl	8008dfc <__sfputc_r>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d1f3      	bne.n	8008e34 <__sfputs_r+0xa>
 8008e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e50 <_vfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	460d      	mov	r5, r1
 8008e56:	b09d      	sub	sp, #116	; 0x74
 8008e58:	4614      	mov	r4, r2
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	b118      	cbz	r0, 8008e68 <_vfiprintf_r+0x18>
 8008e60:	6983      	ldr	r3, [r0, #24]
 8008e62:	b90b      	cbnz	r3, 8008e68 <_vfiprintf_r+0x18>
 8008e64:	f7ff fa30 	bl	80082c8 <__sinit>
 8008e68:	4b89      	ldr	r3, [pc, #548]	; (8009090 <_vfiprintf_r+0x240>)
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	d11b      	bne.n	8008ea6 <_vfiprintf_r+0x56>
 8008e6e:	6875      	ldr	r5, [r6, #4]
 8008e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	d405      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	059a      	lsls	r2, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7e:	f7ff fac6 	bl	800840e <__retarget_lock_acquire_recursive>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	071b      	lsls	r3, r3, #28
 8008e86:	d501      	bpl.n	8008e8c <_vfiprintf_r+0x3c>
 8008e88:	692b      	ldr	r3, [r5, #16]
 8008e8a:	b9eb      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x78>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7fe fa16 	bl	80072c0 <__swsetup_r>
 8008e94:	b1c0      	cbz	r0, 8008ec8 <_vfiprintf_r+0x78>
 8008e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e98:	07dc      	lsls	r4, r3, #31
 8008e9a:	d50e      	bpl.n	8008eba <_vfiprintf_r+0x6a>
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	b01d      	add	sp, #116	; 0x74
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	4b7b      	ldr	r3, [pc, #492]	; (8009094 <_vfiprintf_r+0x244>)
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	d101      	bne.n	8008eb0 <_vfiprintf_r+0x60>
 8008eac:	68b5      	ldr	r5, [r6, #8]
 8008eae:	e7df      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eb0:	4b79      	ldr	r3, [pc, #484]	; (8009098 <_vfiprintf_r+0x248>)
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	bf08      	it	eq
 8008eb6:	68f5      	ldreq	r5, [r6, #12]
 8008eb8:	e7da      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	0598      	lsls	r0, r3, #22
 8008ebe:	d4ed      	bmi.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff faa5 	bl	8008410 <__retarget_lock_release_recursive>
 8008ec6:	e7e9      	b.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ecc:	2320      	movs	r3, #32
 8008ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed6:	2330      	movs	r3, #48	; 0x30
 8008ed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800909c <_vfiprintf_r+0x24c>
 8008edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ee0:	f04f 0901 	mov.w	r9, #1
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	469a      	mov	sl, r3
 8008ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_vfiprintf_r+0xa2>
 8008eee:	2a25      	cmp	r2, #37	; 0x25
 8008ef0:	d1f9      	bne.n	8008ee6 <_vfiprintf_r+0x96>
 8008ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef6:	d00b      	beq.n	8008f10 <_vfiprintf_r+0xc0>
 8008ef8:	465b      	mov	r3, fp
 8008efa:	4622      	mov	r2, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff93 	bl	8008e2a <__sfputs_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	f000 80aa 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	445a      	add	r2, fp
 8008f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80a2 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f24:	f10a 0a01 	add.w	sl, sl, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f30:	931a      	str	r3, [sp, #104]	; 0x68
 8008f32:	4654      	mov	r4, sl
 8008f34:	2205      	movs	r2, #5
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4858      	ldr	r0, [pc, #352]	; (800909c <_vfiprintf_r+0x24c>)
 8008f3c:	f7f7 f950 	bl	80001e0 <memchr>
 8008f40:	9a04      	ldr	r2, [sp, #16]
 8008f42:	b9d8      	cbnz	r0, 8008f7c <_vfiprintf_r+0x12c>
 8008f44:	06d1      	lsls	r1, r2, #27
 8008f46:	bf44      	itt	mi
 8008f48:	2320      	movmi	r3, #32
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4e:	0713      	lsls	r3, r2, #28
 8008f50:	bf44      	itt	mi
 8008f52:	232b      	movmi	r3, #43	; 0x2b
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d015      	beq.n	8008f8c <_vfiprintf_r+0x13c>
 8008f60:	9a07      	ldr	r2, [sp, #28]
 8008f62:	4654      	mov	r4, sl
 8008f64:	2000      	movs	r0, #0
 8008f66:	f04f 0c0a 	mov.w	ip, #10
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f70:	3b30      	subs	r3, #48	; 0x30
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d94e      	bls.n	8009014 <_vfiprintf_r+0x1c4>
 8008f76:	b1b0      	cbz	r0, 8008fa6 <_vfiprintf_r+0x156>
 8008f78:	9207      	str	r2, [sp, #28]
 8008f7a:	e014      	b.n	8008fa6 <_vfiprintf_r+0x156>
 8008f7c:	eba0 0308 	sub.w	r3, r0, r8
 8008f80:	fa09 f303 	lsl.w	r3, r9, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	46a2      	mov	sl, r4
 8008f8a:	e7d2      	b.n	8008f32 <_vfiprintf_r+0xe2>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9103      	str	r1, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbb      	ittet	lt
 8008f98:	425b      	neglt	r3, r3
 8008f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9e:	9307      	strge	r3, [sp, #28]
 8008fa0:	9307      	strlt	r3, [sp, #28]
 8008fa2:	bfb8      	it	lt
 8008fa4:	9204      	strlt	r2, [sp, #16]
 8008fa6:	7823      	ldrb	r3, [r4, #0]
 8008fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008faa:	d10c      	bne.n	8008fc6 <_vfiprintf_r+0x176>
 8008fac:	7863      	ldrb	r3, [r4, #1]
 8008fae:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb0:	d135      	bne.n	800901e <_vfiprintf_r+0x1ce>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	9203      	str	r2, [sp, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfb8      	it	lt
 8008fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fc2:	3402      	adds	r4, #2
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090ac <_vfiprintf_r+0x25c>
 8008fca:	7821      	ldrb	r1, [r4, #0]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f7f7 f906 	bl	80001e0 <memchr>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_vfiprintf_r+0x198>
 8008fd6:	2340      	movs	r3, #64	; 0x40
 8008fd8:	eba0 000a 	sub.w	r0, r0, sl
 8008fdc:	fa03 f000 	lsl.w	r0, r3, r0
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	4303      	orrs	r3, r0
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	482c      	ldr	r0, [pc, #176]	; (80090a0 <_vfiprintf_r+0x250>)
 8008fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ff2:	2206      	movs	r2, #6
 8008ff4:	f7f7 f8f4 	bl	80001e0 <memchr>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d03f      	beq.n	800907c <_vfiprintf_r+0x22c>
 8008ffc:	4b29      	ldr	r3, [pc, #164]	; (80090a4 <_vfiprintf_r+0x254>)
 8008ffe:	bb1b      	cbnz	r3, 8009048 <_vfiprintf_r+0x1f8>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	3307      	adds	r3, #7
 8009004:	f023 0307 	bic.w	r3, r3, #7
 8009008:	3308      	adds	r3, #8
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900e:	443b      	add	r3, r7
 8009010:	9309      	str	r3, [sp, #36]	; 0x24
 8009012:	e767      	b.n	8008ee4 <_vfiprintf_r+0x94>
 8009014:	fb0c 3202 	mla	r2, ip, r2, r3
 8009018:	460c      	mov	r4, r1
 800901a:	2001      	movs	r0, #1
 800901c:	e7a5      	b.n	8008f6a <_vfiprintf_r+0x11a>
 800901e:	2300      	movs	r3, #0
 8009020:	3401      	adds	r4, #1
 8009022:	9305      	str	r3, [sp, #20]
 8009024:	4619      	mov	r1, r3
 8009026:	f04f 0c0a 	mov.w	ip, #10
 800902a:	4620      	mov	r0, r4
 800902c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009030:	3a30      	subs	r2, #48	; 0x30
 8009032:	2a09      	cmp	r2, #9
 8009034:	d903      	bls.n	800903e <_vfiprintf_r+0x1ee>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0c5      	beq.n	8008fc6 <_vfiprintf_r+0x176>
 800903a:	9105      	str	r1, [sp, #20]
 800903c:	e7c3      	b.n	8008fc6 <_vfiprintf_r+0x176>
 800903e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009042:	4604      	mov	r4, r0
 8009044:	2301      	movs	r3, #1
 8009046:	e7f0      	b.n	800902a <_vfiprintf_r+0x1da>
 8009048:	ab03      	add	r3, sp, #12
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	462a      	mov	r2, r5
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <_vfiprintf_r+0x258>)
 8009050:	a904      	add	r1, sp, #16
 8009052:	4630      	mov	r0, r6
 8009054:	f7fd fc8a 	bl	800696c <_printf_float>
 8009058:	4607      	mov	r7, r0
 800905a:	1c78      	adds	r0, r7, #1
 800905c:	d1d6      	bne.n	800900c <_vfiprintf_r+0x1bc>
 800905e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009060:	07d9      	lsls	r1, r3, #31
 8009062:	d405      	bmi.n	8009070 <_vfiprintf_r+0x220>
 8009064:	89ab      	ldrh	r3, [r5, #12]
 8009066:	059a      	lsls	r2, r3, #22
 8009068:	d402      	bmi.n	8009070 <_vfiprintf_r+0x220>
 800906a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906c:	f7ff f9d0 	bl	8008410 <__retarget_lock_release_recursive>
 8009070:	89ab      	ldrh	r3, [r5, #12]
 8009072:	065b      	lsls	r3, r3, #25
 8009074:	f53f af12 	bmi.w	8008e9c <_vfiprintf_r+0x4c>
 8009078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907a:	e711      	b.n	8008ea0 <_vfiprintf_r+0x50>
 800907c:	ab03      	add	r3, sp, #12
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	462a      	mov	r2, r5
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <_vfiprintf_r+0x258>)
 8009084:	a904      	add	r1, sp, #16
 8009086:	4630      	mov	r0, r6
 8009088:	f7fd ff14 	bl	8006eb4 <_printf_i>
 800908c:	e7e4      	b.n	8009058 <_vfiprintf_r+0x208>
 800908e:	bf00      	nop
 8009090:	0800a978 	.word	0x0800a978
 8009094:	0800a998 	.word	0x0800a998
 8009098:	0800a958 	.word	0x0800a958
 800909c:	0800ab14 	.word	0x0800ab14
 80090a0:	0800ab1e 	.word	0x0800ab1e
 80090a4:	0800696d 	.word	0x0800696d
 80090a8:	08008e2b 	.word	0x08008e2b
 80090ac:	0800ab1a 	.word	0x0800ab1a

080090b0 <_sbrk_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	; (80090cc <_sbrk_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7fa f8d0 	bl	8003260 <_sbrk>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_sbrk_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_sbrk_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000394 	.word	0x20000394

080090d0 <__sread>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d8:	f000 f8e2 	bl	80092a0 <_read_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	bfab      	itete	ge
 80090e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090e2:	89a3      	ldrhlt	r3, [r4, #12]
 80090e4:	181b      	addge	r3, r3, r0
 80090e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090ea:	bfac      	ite	ge
 80090ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80090ee:	81a3      	strhlt	r3, [r4, #12]
 80090f0:	bd10      	pop	{r4, pc}

080090f2 <__swrite>:
 80090f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f6:	461f      	mov	r7, r3
 80090f8:	898b      	ldrh	r3, [r1, #12]
 80090fa:	05db      	lsls	r3, r3, #23
 80090fc:	4605      	mov	r5, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	4616      	mov	r6, r2
 8009102:	d505      	bpl.n	8009110 <__swrite+0x1e>
 8009104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009108:	2302      	movs	r3, #2
 800910a:	2200      	movs	r2, #0
 800910c:	f000 f898 	bl	8009240 <_lseek_r>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	4632      	mov	r2, r6
 800911e:	463b      	mov	r3, r7
 8009120:	4628      	mov	r0, r5
 8009122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	f000 b817 	b.w	8009158 <_write_r>

0800912a <__sseek>:
 800912a:	b510      	push	{r4, lr}
 800912c:	460c      	mov	r4, r1
 800912e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009132:	f000 f885 	bl	8009240 <_lseek_r>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	bf15      	itete	ne
 800913c:	6560      	strne	r0, [r4, #84]	; 0x54
 800913e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009146:	81a3      	strheq	r3, [r4, #12]
 8009148:	bf18      	it	ne
 800914a:	81a3      	strhne	r3, [r4, #12]
 800914c:	bd10      	pop	{r4, pc}

0800914e <__sclose>:
 800914e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009152:	f000 b831 	b.w	80091b8 <_close_r>
	...

08009158 <_write_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	; (8009178 <_write_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7fa f829 	bl	80031be <_write>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_write_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_write_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000394 	.word	0x20000394

0800917c <__assert_func>:
 800917c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800917e:	4614      	mov	r4, r2
 8009180:	461a      	mov	r2, r3
 8009182:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <__assert_func+0x2c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4605      	mov	r5, r0
 8009188:	68d8      	ldr	r0, [r3, #12]
 800918a:	b14c      	cbz	r4, 80091a0 <__assert_func+0x24>
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <__assert_func+0x30>)
 800918e:	9100      	str	r1, [sp, #0]
 8009190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009194:	4906      	ldr	r1, [pc, #24]	; (80091b0 <__assert_func+0x34>)
 8009196:	462b      	mov	r3, r5
 8009198:	f000 f81e 	bl	80091d8 <fiprintf>
 800919c:	f000 f89f 	bl	80092de <abort>
 80091a0:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <__assert_func+0x38>)
 80091a2:	461c      	mov	r4, r3
 80091a4:	e7f3      	b.n	800918e <__assert_func+0x12>
 80091a6:	bf00      	nop
 80091a8:	2000000c 	.word	0x2000000c
 80091ac:	0800ab25 	.word	0x0800ab25
 80091b0:	0800ab32 	.word	0x0800ab32
 80091b4:	0800ab60 	.word	0x0800ab60

080091b8 <_close_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_close_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7fa f817 	bl	80031f6 <_close>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_close_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_close_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20000394 	.word	0x20000394

080091d8 <fiprintf>:
 80091d8:	b40e      	push	{r1, r2, r3}
 80091da:	b503      	push	{r0, r1, lr}
 80091dc:	4601      	mov	r1, r0
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	4805      	ldr	r0, [pc, #20]	; (80091f8 <fiprintf+0x20>)
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	6800      	ldr	r0, [r0, #0]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	f7ff fe31 	bl	8008e50 <_vfiprintf_r>
 80091ee:	b002      	add	sp, #8
 80091f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f4:	b003      	add	sp, #12
 80091f6:	4770      	bx	lr
 80091f8:	2000000c 	.word	0x2000000c

080091fc <_fstat_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	; (800921c <_fstat_r+0x20>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	f7fa f800 	bl	800320e <_fstat>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d102      	bne.n	8009218 <_fstat_r+0x1c>
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	b103      	cbz	r3, 8009218 <_fstat_r+0x1c>
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	20000394 	.word	0x20000394

08009220 <_isatty_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	; (800923c <_isatty_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f9 ffff 	bl	800322e <_isatty>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_isatty_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_isatty_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000394 	.word	0x20000394

08009240 <_lseek_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	; (8009260 <_lseek_r+0x20>)
 8009244:	4604      	mov	r4, r0
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f9 fff8 	bl	8003244 <_lseek>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_lseek_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_lseek_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000394 	.word	0x20000394

08009264 <__ascii_mbtowc>:
 8009264:	b082      	sub	sp, #8
 8009266:	b901      	cbnz	r1, 800926a <__ascii_mbtowc+0x6>
 8009268:	a901      	add	r1, sp, #4
 800926a:	b142      	cbz	r2, 800927e <__ascii_mbtowc+0x1a>
 800926c:	b14b      	cbz	r3, 8009282 <__ascii_mbtowc+0x1e>
 800926e:	7813      	ldrb	r3, [r2, #0]
 8009270:	600b      	str	r3, [r1, #0]
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	1e10      	subs	r0, r2, #0
 8009276:	bf18      	it	ne
 8009278:	2001      	movne	r0, #1
 800927a:	b002      	add	sp, #8
 800927c:	4770      	bx	lr
 800927e:	4610      	mov	r0, r2
 8009280:	e7fb      	b.n	800927a <__ascii_mbtowc+0x16>
 8009282:	f06f 0001 	mvn.w	r0, #1
 8009286:	e7f8      	b.n	800927a <__ascii_mbtowc+0x16>

08009288 <__malloc_lock>:
 8009288:	4801      	ldr	r0, [pc, #4]	; (8009290 <__malloc_lock+0x8>)
 800928a:	f7ff b8c0 	b.w	800840e <__retarget_lock_acquire_recursive>
 800928e:	bf00      	nop
 8009290:	20000388 	.word	0x20000388

08009294 <__malloc_unlock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_unlock+0x8>)
 8009296:	f7ff b8bb 	b.w	8008410 <__retarget_lock_release_recursive>
 800929a:	bf00      	nop
 800929c:	20000388 	.word	0x20000388

080092a0 <_read_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	; (80092c0 <_read_r+0x20>)
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f7f9 ff68 	bl	8003184 <_read>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_read_r+0x1e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_read_r+0x1e>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	20000394 	.word	0x20000394

080092c4 <__ascii_wctomb>:
 80092c4:	b149      	cbz	r1, 80092da <__ascii_wctomb+0x16>
 80092c6:	2aff      	cmp	r2, #255	; 0xff
 80092c8:	bf85      	ittet	hi
 80092ca:	238a      	movhi	r3, #138	; 0x8a
 80092cc:	6003      	strhi	r3, [r0, #0]
 80092ce:	700a      	strbls	r2, [r1, #0]
 80092d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80092d4:	bf98      	it	ls
 80092d6:	2001      	movls	r0, #1
 80092d8:	4770      	bx	lr
 80092da:	4608      	mov	r0, r1
 80092dc:	4770      	bx	lr

080092de <abort>:
 80092de:	b508      	push	{r3, lr}
 80092e0:	2006      	movs	r0, #6
 80092e2:	f000 f82b 	bl	800933c <raise>
 80092e6:	2001      	movs	r0, #1
 80092e8:	f7f9 ff42 	bl	8003170 <_exit>

080092ec <_raise_r>:
 80092ec:	291f      	cmp	r1, #31
 80092ee:	b538      	push	{r3, r4, r5, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	d904      	bls.n	8009300 <_raise_r+0x14>
 80092f6:	2316      	movs	r3, #22
 80092f8:	6003      	str	r3, [r0, #0]
 80092fa:	f04f 30ff 	mov.w	r0, #4294967295
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009302:	b112      	cbz	r2, 800930a <_raise_r+0x1e>
 8009304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009308:	b94b      	cbnz	r3, 800931e <_raise_r+0x32>
 800930a:	4620      	mov	r0, r4
 800930c:	f000 f830 	bl	8009370 <_getpid_r>
 8009310:	462a      	mov	r2, r5
 8009312:	4601      	mov	r1, r0
 8009314:	4620      	mov	r0, r4
 8009316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931a:	f000 b817 	b.w	800934c <_kill_r>
 800931e:	2b01      	cmp	r3, #1
 8009320:	d00a      	beq.n	8009338 <_raise_r+0x4c>
 8009322:	1c59      	adds	r1, r3, #1
 8009324:	d103      	bne.n	800932e <_raise_r+0x42>
 8009326:	2316      	movs	r3, #22
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	2001      	movs	r0, #1
 800932c:	e7e7      	b.n	80092fe <_raise_r+0x12>
 800932e:	2400      	movs	r4, #0
 8009330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009334:	4628      	mov	r0, r5
 8009336:	4798      	blx	r3
 8009338:	2000      	movs	r0, #0
 800933a:	e7e0      	b.n	80092fe <_raise_r+0x12>

0800933c <raise>:
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <raise+0xc>)
 800933e:	4601      	mov	r1, r0
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f7ff bfd3 	b.w	80092ec <_raise_r>
 8009346:	bf00      	nop
 8009348:	2000000c 	.word	0x2000000c

0800934c <_kill_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4d07      	ldr	r5, [pc, #28]	; (800936c <_kill_r+0x20>)
 8009350:	2300      	movs	r3, #0
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f7f9 fef9 	bl	8003150 <_kill>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	d102      	bne.n	8009368 <_kill_r+0x1c>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b103      	cbz	r3, 8009368 <_kill_r+0x1c>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd38      	pop	{r3, r4, r5, pc}
 800936a:	bf00      	nop
 800936c:	20000394 	.word	0x20000394

08009370 <_getpid_r>:
 8009370:	f7f9 bee6 	b.w	8003140 <_getpid>

08009374 <pow>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	ed2d 8b02 	vpush	{d8}
 800937a:	eeb0 8a40 	vmov.f32	s16, s0
 800937e:	eef0 8a60 	vmov.f32	s17, s1
 8009382:	ec55 4b11 	vmov	r4, r5, d1
 8009386:	f000 f867 	bl	8009458 <__ieee754_pow>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	ec57 6b10 	vmov	r6, r7, d0
 8009396:	f7f7 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800939a:	2800      	cmp	r0, #0
 800939c:	d13b      	bne.n	8009416 <pow+0xa2>
 800939e:	ec51 0b18 	vmov	r0, r1, d8
 80093a2:	2200      	movs	r2, #0
 80093a4:	2300      	movs	r3, #0
 80093a6:	f7f7 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80093aa:	b1b8      	cbz	r0, 80093dc <pow+0x68>
 80093ac:	2200      	movs	r2, #0
 80093ae:	2300      	movs	r3, #0
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f7 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d146      	bne.n	800944a <pow+0xd6>
 80093bc:	ec45 4b10 	vmov	d0, r4, r5
 80093c0:	f000 fe63 	bl	800a08a <finite>
 80093c4:	b338      	cbz	r0, 8009416 <pow+0xa2>
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f7 fb85 	bl	8000adc <__aeabi_dcmplt>
 80093d2:	b300      	cbz	r0, 8009416 <pow+0xa2>
 80093d4:	f7fd f9f8 	bl	80067c8 <__errno>
 80093d8:	2322      	movs	r3, #34	; 0x22
 80093da:	e01b      	b.n	8009414 <pow+0xa0>
 80093dc:	ec47 6b10 	vmov	d0, r6, r7
 80093e0:	f000 fe53 	bl	800a08a <finite>
 80093e4:	b9e0      	cbnz	r0, 8009420 <pow+0xac>
 80093e6:	eeb0 0a48 	vmov.f32	s0, s16
 80093ea:	eef0 0a68 	vmov.f32	s1, s17
 80093ee:	f000 fe4c 	bl	800a08a <finite>
 80093f2:	b1a8      	cbz	r0, 8009420 <pow+0xac>
 80093f4:	ec45 4b10 	vmov	d0, r4, r5
 80093f8:	f000 fe47 	bl	800a08a <finite>
 80093fc:	b180      	cbz	r0, 8009420 <pow+0xac>
 80093fe:	4632      	mov	r2, r6
 8009400:	463b      	mov	r3, r7
 8009402:	4630      	mov	r0, r6
 8009404:	4639      	mov	r1, r7
 8009406:	f7f7 fb91 	bl	8000b2c <__aeabi_dcmpun>
 800940a:	2800      	cmp	r0, #0
 800940c:	d0e2      	beq.n	80093d4 <pow+0x60>
 800940e:	f7fd f9db 	bl	80067c8 <__errno>
 8009412:	2321      	movs	r3, #33	; 0x21
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	ecbd 8b02 	vpop	{d8}
 800941a:	ec47 6b10 	vmov	d0, r6, r7
 800941e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009420:	2200      	movs	r2, #0
 8009422:	2300      	movs	r3, #0
 8009424:	4630      	mov	r0, r6
 8009426:	4639      	mov	r1, r7
 8009428:	f7f7 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800942c:	2800      	cmp	r0, #0
 800942e:	d0f2      	beq.n	8009416 <pow+0xa2>
 8009430:	eeb0 0a48 	vmov.f32	s0, s16
 8009434:	eef0 0a68 	vmov.f32	s1, s17
 8009438:	f000 fe27 	bl	800a08a <finite>
 800943c:	2800      	cmp	r0, #0
 800943e:	d0ea      	beq.n	8009416 <pow+0xa2>
 8009440:	ec45 4b10 	vmov	d0, r4, r5
 8009444:	f000 fe21 	bl	800a08a <finite>
 8009448:	e7c3      	b.n	80093d2 <pow+0x5e>
 800944a:	4f01      	ldr	r7, [pc, #4]	; (8009450 <pow+0xdc>)
 800944c:	2600      	movs	r6, #0
 800944e:	e7e2      	b.n	8009416 <pow+0xa2>
 8009450:	3ff00000 	.word	0x3ff00000
 8009454:	00000000 	.word	0x00000000

08009458 <__ieee754_pow>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	ed2d 8b06 	vpush	{d8-d10}
 8009460:	b089      	sub	sp, #36	; 0x24
 8009462:	ed8d 1b00 	vstr	d1, [sp]
 8009466:	e9dd 2900 	ldrd	r2, r9, [sp]
 800946a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800946e:	ea58 0102 	orrs.w	r1, r8, r2
 8009472:	ec57 6b10 	vmov	r6, r7, d0
 8009476:	d115      	bne.n	80094a4 <__ieee754_pow+0x4c>
 8009478:	19b3      	adds	r3, r6, r6
 800947a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800947e:	4152      	adcs	r2, r2
 8009480:	4299      	cmp	r1, r3
 8009482:	4b89      	ldr	r3, [pc, #548]	; (80096a8 <__ieee754_pow+0x250>)
 8009484:	4193      	sbcs	r3, r2
 8009486:	f080 84d2 	bcs.w	8009e2e <__ieee754_pow+0x9d6>
 800948a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f6 fefb 	bl	800028c <__adddf3>
 8009496:	ec41 0b10 	vmov	d0, r0, r1
 800949a:	b009      	add	sp, #36	; 0x24
 800949c:	ecbd 8b06 	vpop	{d8-d10}
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	4b81      	ldr	r3, [pc, #516]	; (80096ac <__ieee754_pow+0x254>)
 80094a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80094aa:	429c      	cmp	r4, r3
 80094ac:	ee10 aa10 	vmov	sl, s0
 80094b0:	463d      	mov	r5, r7
 80094b2:	dc06      	bgt.n	80094c2 <__ieee754_pow+0x6a>
 80094b4:	d101      	bne.n	80094ba <__ieee754_pow+0x62>
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	d1e7      	bne.n	800948a <__ieee754_pow+0x32>
 80094ba:	4598      	cmp	r8, r3
 80094bc:	dc01      	bgt.n	80094c2 <__ieee754_pow+0x6a>
 80094be:	d10f      	bne.n	80094e0 <__ieee754_pow+0x88>
 80094c0:	b172      	cbz	r2, 80094e0 <__ieee754_pow+0x88>
 80094c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80094c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80094ca:	ea55 050a 	orrs.w	r5, r5, sl
 80094ce:	d1dc      	bne.n	800948a <__ieee754_pow+0x32>
 80094d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094d4:	18db      	adds	r3, r3, r3
 80094d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80094da:	4152      	adcs	r2, r2
 80094dc:	429d      	cmp	r5, r3
 80094de:	e7d0      	b.n	8009482 <__ieee754_pow+0x2a>
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	da3b      	bge.n	800955c <__ieee754_pow+0x104>
 80094e4:	4b72      	ldr	r3, [pc, #456]	; (80096b0 <__ieee754_pow+0x258>)
 80094e6:	4598      	cmp	r8, r3
 80094e8:	dc51      	bgt.n	800958e <__ieee754_pow+0x136>
 80094ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80094ee:	4598      	cmp	r8, r3
 80094f0:	f340 84ac 	ble.w	8009e4c <__ieee754_pow+0x9f4>
 80094f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80094f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094fc:	2b14      	cmp	r3, #20
 80094fe:	dd0f      	ble.n	8009520 <__ieee754_pow+0xc8>
 8009500:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009504:	fa22 f103 	lsr.w	r1, r2, r3
 8009508:	fa01 f303 	lsl.w	r3, r1, r3
 800950c:	4293      	cmp	r3, r2
 800950e:	f040 849d 	bne.w	8009e4c <__ieee754_pow+0x9f4>
 8009512:	f001 0101 	and.w	r1, r1, #1
 8009516:	f1c1 0302 	rsb	r3, r1, #2
 800951a:	9304      	str	r3, [sp, #16]
 800951c:	b182      	cbz	r2, 8009540 <__ieee754_pow+0xe8>
 800951e:	e05f      	b.n	80095e0 <__ieee754_pow+0x188>
 8009520:	2a00      	cmp	r2, #0
 8009522:	d15b      	bne.n	80095dc <__ieee754_pow+0x184>
 8009524:	f1c3 0314 	rsb	r3, r3, #20
 8009528:	fa48 f103 	asr.w	r1, r8, r3
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	4543      	cmp	r3, r8
 8009532:	f040 8488 	bne.w	8009e46 <__ieee754_pow+0x9ee>
 8009536:	f001 0101 	and.w	r1, r1, #1
 800953a:	f1c1 0302 	rsb	r3, r1, #2
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	4b5c      	ldr	r3, [pc, #368]	; (80096b4 <__ieee754_pow+0x25c>)
 8009542:	4598      	cmp	r8, r3
 8009544:	d132      	bne.n	80095ac <__ieee754_pow+0x154>
 8009546:	f1b9 0f00 	cmp.w	r9, #0
 800954a:	f280 8478 	bge.w	8009e3e <__ieee754_pow+0x9e6>
 800954e:	4959      	ldr	r1, [pc, #356]	; (80096b4 <__ieee754_pow+0x25c>)
 8009550:	4632      	mov	r2, r6
 8009552:	463b      	mov	r3, r7
 8009554:	2000      	movs	r0, #0
 8009556:	f7f7 f979 	bl	800084c <__aeabi_ddiv>
 800955a:	e79c      	b.n	8009496 <__ieee754_pow+0x3e>
 800955c:	2300      	movs	r3, #0
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	2a00      	cmp	r2, #0
 8009562:	d13d      	bne.n	80095e0 <__ieee754_pow+0x188>
 8009564:	4b51      	ldr	r3, [pc, #324]	; (80096ac <__ieee754_pow+0x254>)
 8009566:	4598      	cmp	r8, r3
 8009568:	d1ea      	bne.n	8009540 <__ieee754_pow+0xe8>
 800956a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800956e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009572:	ea53 030a 	orrs.w	r3, r3, sl
 8009576:	f000 845a 	beq.w	8009e2e <__ieee754_pow+0x9d6>
 800957a:	4b4f      	ldr	r3, [pc, #316]	; (80096b8 <__ieee754_pow+0x260>)
 800957c:	429c      	cmp	r4, r3
 800957e:	dd08      	ble.n	8009592 <__ieee754_pow+0x13a>
 8009580:	f1b9 0f00 	cmp.w	r9, #0
 8009584:	f2c0 8457 	blt.w	8009e36 <__ieee754_pow+0x9de>
 8009588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800958c:	e783      	b.n	8009496 <__ieee754_pow+0x3e>
 800958e:	2302      	movs	r3, #2
 8009590:	e7e5      	b.n	800955e <__ieee754_pow+0x106>
 8009592:	f1b9 0f00 	cmp.w	r9, #0
 8009596:	f04f 0000 	mov.w	r0, #0
 800959a:	f04f 0100 	mov.w	r1, #0
 800959e:	f6bf af7a 	bge.w	8009496 <__ieee754_pow+0x3e>
 80095a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80095a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095aa:	e774      	b.n	8009496 <__ieee754_pow+0x3e>
 80095ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80095b0:	d106      	bne.n	80095c0 <__ieee754_pow+0x168>
 80095b2:	4632      	mov	r2, r6
 80095b4:	463b      	mov	r3, r7
 80095b6:	4630      	mov	r0, r6
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	e76a      	b.n	8009496 <__ieee754_pow+0x3e>
 80095c0:	4b3e      	ldr	r3, [pc, #248]	; (80096bc <__ieee754_pow+0x264>)
 80095c2:	4599      	cmp	r9, r3
 80095c4:	d10c      	bne.n	80095e0 <__ieee754_pow+0x188>
 80095c6:	2d00      	cmp	r5, #0
 80095c8:	db0a      	blt.n	80095e0 <__ieee754_pow+0x188>
 80095ca:	ec47 6b10 	vmov	d0, r6, r7
 80095ce:	b009      	add	sp, #36	; 0x24
 80095d0:	ecbd 8b06 	vpop	{d8-d10}
 80095d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	f000 bc6c 	b.w	8009eb4 <__ieee754_sqrt>
 80095dc:	2300      	movs	r3, #0
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	ec47 6b10 	vmov	d0, r6, r7
 80095e4:	f000 fd48 	bl	800a078 <fabs>
 80095e8:	ec51 0b10 	vmov	r0, r1, d0
 80095ec:	f1ba 0f00 	cmp.w	sl, #0
 80095f0:	d129      	bne.n	8009646 <__ieee754_pow+0x1ee>
 80095f2:	b124      	cbz	r4, 80095fe <__ieee754_pow+0x1a6>
 80095f4:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <__ieee754_pow+0x25c>)
 80095f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d123      	bne.n	8009646 <__ieee754_pow+0x1ee>
 80095fe:	f1b9 0f00 	cmp.w	r9, #0
 8009602:	da05      	bge.n	8009610 <__ieee754_pow+0x1b8>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	2000      	movs	r0, #0
 800960a:	492a      	ldr	r1, [pc, #168]	; (80096b4 <__ieee754_pow+0x25c>)
 800960c:	f7f7 f91e 	bl	800084c <__aeabi_ddiv>
 8009610:	2d00      	cmp	r5, #0
 8009612:	f6bf af40 	bge.w	8009496 <__ieee754_pow+0x3e>
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800961c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009620:	4323      	orrs	r3, r4
 8009622:	d108      	bne.n	8009636 <__ieee754_pow+0x1de>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4610      	mov	r0, r2
 800962a:	4619      	mov	r1, r3
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e78f      	b.n	8009556 <__ieee754_pow+0xfe>
 8009636:	9b04      	ldr	r3, [sp, #16]
 8009638:	2b01      	cmp	r3, #1
 800963a:	f47f af2c 	bne.w	8009496 <__ieee754_pow+0x3e>
 800963e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009642:	4619      	mov	r1, r3
 8009644:	e727      	b.n	8009496 <__ieee754_pow+0x3e>
 8009646:	0feb      	lsrs	r3, r5, #31
 8009648:	3b01      	subs	r3, #1
 800964a:	9306      	str	r3, [sp, #24]
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	d102      	bne.n	800965a <__ieee754_pow+0x202>
 8009654:	4632      	mov	r2, r6
 8009656:	463b      	mov	r3, r7
 8009658:	e7e6      	b.n	8009628 <__ieee754_pow+0x1d0>
 800965a:	4b19      	ldr	r3, [pc, #100]	; (80096c0 <__ieee754_pow+0x268>)
 800965c:	4598      	cmp	r8, r3
 800965e:	f340 80fb 	ble.w	8009858 <__ieee754_pow+0x400>
 8009662:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009666:	4598      	cmp	r8, r3
 8009668:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <__ieee754_pow+0x260>)
 800966a:	dd0c      	ble.n	8009686 <__ieee754_pow+0x22e>
 800966c:	429c      	cmp	r4, r3
 800966e:	dc0f      	bgt.n	8009690 <__ieee754_pow+0x238>
 8009670:	f1b9 0f00 	cmp.w	r9, #0
 8009674:	da0f      	bge.n	8009696 <__ieee754_pow+0x23e>
 8009676:	2000      	movs	r0, #0
 8009678:	b009      	add	sp, #36	; 0x24
 800967a:	ecbd 8b06 	vpop	{d8-d10}
 800967e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009682:	f000 bcf0 	b.w	800a066 <__math_oflow>
 8009686:	429c      	cmp	r4, r3
 8009688:	dbf2      	blt.n	8009670 <__ieee754_pow+0x218>
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <__ieee754_pow+0x25c>)
 800968c:	429c      	cmp	r4, r3
 800968e:	dd19      	ble.n	80096c4 <__ieee754_pow+0x26c>
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	dcef      	bgt.n	8009676 <__ieee754_pow+0x21e>
 8009696:	2000      	movs	r0, #0
 8009698:	b009      	add	sp, #36	; 0x24
 800969a:	ecbd 8b06 	vpop	{d8-d10}
 800969e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a2:	f000 bcd7 	b.w	800a054 <__math_uflow>
 80096a6:	bf00      	nop
 80096a8:	fff00000 	.word	0xfff00000
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	433fffff 	.word	0x433fffff
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	3fefffff 	.word	0x3fefffff
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	41e00000 	.word	0x41e00000
 80096c4:	4b60      	ldr	r3, [pc, #384]	; (8009848 <__ieee754_pow+0x3f0>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	f7f6 fdde 	bl	8000288 <__aeabi_dsub>
 80096cc:	a354      	add	r3, pc, #336	; (adr r3, 8009820 <__ieee754_pow+0x3c8>)
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	4604      	mov	r4, r0
 80096d4:	460d      	mov	r5, r1
 80096d6:	f7f6 ff8f 	bl	80005f8 <__aeabi_dmul>
 80096da:	a353      	add	r3, pc, #332	; (adr r3, 8009828 <__ieee754_pow+0x3d0>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	4606      	mov	r6, r0
 80096e2:	460f      	mov	r7, r1
 80096e4:	4620      	mov	r0, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	4b57      	ldr	r3, [pc, #348]	; (800984c <__ieee754_pow+0x3f4>)
 80096ee:	4682      	mov	sl, r0
 80096f0:	468b      	mov	fp, r1
 80096f2:	2200      	movs	r2, #0
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 ff7e 	bl	80005f8 <__aeabi_dmul>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	a14b      	add	r1, pc, #300	; (adr r1, 8009830 <__ieee754_pow+0x3d8>)
 8009702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	4622      	mov	r2, r4
 800970c:	462b      	mov	r3, r5
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	2000      	movs	r0, #0
 8009718:	494d      	ldr	r1, [pc, #308]	; (8009850 <__ieee754_pow+0x3f8>)
 800971a:	f7f6 fdb5 	bl	8000288 <__aeabi_dsub>
 800971e:	4622      	mov	r2, r4
 8009720:	4680      	mov	r8, r0
 8009722:	4689      	mov	r9, r1
 8009724:	462b      	mov	r3, r5
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f6 ff5f 	bl	80005f8 <__aeabi_dmul>
 800973a:	a33f      	add	r3, pc, #252	; (adr r3, 8009838 <__ieee754_pow+0x3e0>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4650      	mov	r0, sl
 800974a:	4659      	mov	r1, fp
 800974c:	f7f6 fd9c 	bl	8000288 <__aeabi_dsub>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4680      	mov	r8, r0
 8009756:	4689      	mov	r9, r1
 8009758:	4630      	mov	r0, r6
 800975a:	4639      	mov	r1, r7
 800975c:	f7f6 fd96 	bl	800028c <__adddf3>
 8009760:	2000      	movs	r0, #0
 8009762:	4632      	mov	r2, r6
 8009764:	463b      	mov	r3, r7
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	f7f6 fd8d 	bl	8000288 <__aeabi_dsub>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f7f6 fd87 	bl	8000288 <__aeabi_dsub>
 800977a:	9b04      	ldr	r3, [sp, #16]
 800977c:	9a06      	ldr	r2, [sp, #24]
 800977e:	3b01      	subs	r3, #1
 8009780:	4313      	orrs	r3, r2
 8009782:	4682      	mov	sl, r0
 8009784:	468b      	mov	fp, r1
 8009786:	f040 81e7 	bne.w	8009b58 <__ieee754_pow+0x700>
 800978a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009840 <__ieee754_pow+0x3e8>
 800978e:	eeb0 8a47 	vmov.f32	s16, s14
 8009792:	eef0 8a67 	vmov.f32	s17, s15
 8009796:	e9dd 6700 	ldrd	r6, r7, [sp]
 800979a:	2600      	movs	r6, #0
 800979c:	4632      	mov	r2, r6
 800979e:	463b      	mov	r3, r7
 80097a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097a4:	f7f6 fd70 	bl	8000288 <__aeabi_dsub>
 80097a8:	4622      	mov	r2, r4
 80097aa:	462b      	mov	r3, r5
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b4:	4680      	mov	r8, r0
 80097b6:	4689      	mov	r9, r1
 80097b8:	4650      	mov	r0, sl
 80097ba:	4659      	mov	r1, fp
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4640      	mov	r0, r8
 80097c6:	4649      	mov	r1, r9
 80097c8:	f7f6 fd60 	bl	800028c <__adddf3>
 80097cc:	4632      	mov	r2, r6
 80097ce:	463b      	mov	r3, r7
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	460b      	mov	r3, r1
 80097de:	4604      	mov	r4, r0
 80097e0:	460d      	mov	r5, r1
 80097e2:	4602      	mov	r2, r0
 80097e4:	4649      	mov	r1, r9
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7f6 fd50 	bl	800028c <__adddf3>
 80097ec:	4b19      	ldr	r3, [pc, #100]	; (8009854 <__ieee754_pow+0x3fc>)
 80097ee:	4299      	cmp	r1, r3
 80097f0:	ec45 4b19 	vmov	d9, r4, r5
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	468b      	mov	fp, r1
 80097fa:	f340 82f1 	ble.w	8009de0 <__ieee754_pow+0x988>
 80097fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009802:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009806:	4303      	orrs	r3, r0
 8009808:	f000 81e4 	beq.w	8009bd4 <__ieee754_pow+0x77c>
 800980c:	ec51 0b18 	vmov	r0, r1, d8
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	f7f7 f962 	bl	8000adc <__aeabi_dcmplt>
 8009818:	3800      	subs	r0, #0
 800981a:	bf18      	it	ne
 800981c:	2001      	movne	r0, #1
 800981e:	e72b      	b.n	8009678 <__ieee754_pow+0x220>
 8009820:	60000000 	.word	0x60000000
 8009824:	3ff71547 	.word	0x3ff71547
 8009828:	f85ddf44 	.word	0xf85ddf44
 800982c:	3e54ae0b 	.word	0x3e54ae0b
 8009830:	55555555 	.word	0x55555555
 8009834:	3fd55555 	.word	0x3fd55555
 8009838:	652b82fe 	.word	0x652b82fe
 800983c:	3ff71547 	.word	0x3ff71547
 8009840:	00000000 	.word	0x00000000
 8009844:	bff00000 	.word	0xbff00000
 8009848:	3ff00000 	.word	0x3ff00000
 800984c:	3fd00000 	.word	0x3fd00000
 8009850:	3fe00000 	.word	0x3fe00000
 8009854:	408fffff 	.word	0x408fffff
 8009858:	4bd5      	ldr	r3, [pc, #852]	; (8009bb0 <__ieee754_pow+0x758>)
 800985a:	402b      	ands	r3, r5
 800985c:	2200      	movs	r2, #0
 800985e:	b92b      	cbnz	r3, 800986c <__ieee754_pow+0x414>
 8009860:	4bd4      	ldr	r3, [pc, #848]	; (8009bb4 <__ieee754_pow+0x75c>)
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800986a:	460c      	mov	r4, r1
 800986c:	1523      	asrs	r3, r4, #20
 800986e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009872:	4413      	add	r3, r2
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	4bd0      	ldr	r3, [pc, #832]	; (8009bb8 <__ieee754_pow+0x760>)
 8009878:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800987c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009880:	429c      	cmp	r4, r3
 8009882:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009886:	dd08      	ble.n	800989a <__ieee754_pow+0x442>
 8009888:	4bcc      	ldr	r3, [pc, #816]	; (8009bbc <__ieee754_pow+0x764>)
 800988a:	429c      	cmp	r4, r3
 800988c:	f340 8162 	ble.w	8009b54 <__ieee754_pow+0x6fc>
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	3301      	adds	r3, #1
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800989a:	2400      	movs	r4, #0
 800989c:	00e3      	lsls	r3, r4, #3
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	4bc7      	ldr	r3, [pc, #796]	; (8009bc0 <__ieee754_pow+0x768>)
 80098a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098a6:	ed93 7b00 	vldr	d7, [r3]
 80098aa:	4629      	mov	r1, r5
 80098ac:	ec53 2b17 	vmov	r2, r3, d7
 80098b0:	eeb0 9a47 	vmov.f32	s18, s14
 80098b4:	eef0 9a67 	vmov.f32	s19, s15
 80098b8:	4682      	mov	sl, r0
 80098ba:	f7f6 fce5 	bl	8000288 <__aeabi_dsub>
 80098be:	4652      	mov	r2, sl
 80098c0:	4606      	mov	r6, r0
 80098c2:	460f      	mov	r7, r1
 80098c4:	462b      	mov	r3, r5
 80098c6:	ec51 0b19 	vmov	r0, r1, d9
 80098ca:	f7f6 fcdf 	bl	800028c <__adddf3>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	2000      	movs	r0, #0
 80098d4:	49bb      	ldr	r1, [pc, #748]	; (8009bc4 <__ieee754_pow+0x76c>)
 80098d6:	f7f6 ffb9 	bl	800084c <__aeabi_ddiv>
 80098da:	ec41 0b1a 	vmov	d10, r0, r1
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	2300      	movs	r3, #0
 80098ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098f6:	46ab      	mov	fp, r5
 80098f8:	106d      	asrs	r5, r5, #1
 80098fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80098fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009902:	ec41 0b18 	vmov	d8, r0, r1
 8009906:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800990a:	2200      	movs	r2, #0
 800990c:	4640      	mov	r0, r8
 800990e:	4649      	mov	r1, r9
 8009910:	4614      	mov	r4, r2
 8009912:	461d      	mov	r5, r3
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4630      	mov	r0, r6
 800991e:	4639      	mov	r1, r7
 8009920:	f7f6 fcb2 	bl	8000288 <__aeabi_dsub>
 8009924:	ec53 2b19 	vmov	r2, r3, d9
 8009928:	4606      	mov	r6, r0
 800992a:	460f      	mov	r7, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fcaa 	bl	8000288 <__aeabi_dsub>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4650      	mov	r0, sl
 800993a:	4659      	mov	r1, fp
 800993c:	f7f6 fca4 	bl	8000288 <__aeabi_dsub>
 8009940:	4642      	mov	r2, r8
 8009942:	464b      	mov	r3, r9
 8009944:	f7f6 fe58 	bl	80005f8 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f6 fc9a 	bl	8000288 <__aeabi_dsub>
 8009954:	ec53 2b1a 	vmov	r2, r3, d10
 8009958:	f7f6 fe4e 	bl	80005f8 <__aeabi_dmul>
 800995c:	ec53 2b18 	vmov	r2, r3, d8
 8009960:	ec41 0b19 	vmov	d9, r0, r1
 8009964:	ec51 0b18 	vmov	r0, r1, d8
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	a37c      	add	r3, pc, #496	; (adr r3, 8009b60 <__ieee754_pow+0x708>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	4604      	mov	r4, r0
 8009974:	460d      	mov	r5, r1
 8009976:	f7f6 fe3f 	bl	80005f8 <__aeabi_dmul>
 800997a:	a37b      	add	r3, pc, #492	; (adr r3, 8009b68 <__ieee754_pow+0x710>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc84 	bl	800028c <__adddf3>
 8009984:	4622      	mov	r2, r4
 8009986:	462b      	mov	r3, r5
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	a378      	add	r3, pc, #480	; (adr r3, 8009b70 <__ieee754_pow+0x718>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc7b 	bl	800028c <__adddf3>
 8009996:	4622      	mov	r2, r4
 8009998:	462b      	mov	r3, r5
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	a376      	add	r3, pc, #472	; (adr r3, 8009b78 <__ieee754_pow+0x720>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f6 fc72 	bl	800028c <__adddf3>
 80099a8:	4622      	mov	r2, r4
 80099aa:	462b      	mov	r3, r5
 80099ac:	f7f6 fe24 	bl	80005f8 <__aeabi_dmul>
 80099b0:	a373      	add	r3, pc, #460	; (adr r3, 8009b80 <__ieee754_pow+0x728>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fc69 	bl	800028c <__adddf3>
 80099ba:	4622      	mov	r2, r4
 80099bc:	462b      	mov	r3, r5
 80099be:	f7f6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80099c2:	a371      	add	r3, pc, #452	; (adr r3, 8009b88 <__ieee754_pow+0x730>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fc60 	bl	800028c <__adddf3>
 80099cc:	4622      	mov	r2, r4
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	462b      	mov	r3, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f6 fe08 	bl	80005f8 <__aeabi_dmul>
 80099e8:	4642      	mov	r2, r8
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	464b      	mov	r3, r9
 80099f0:	ec51 0b18 	vmov	r0, r1, d8
 80099f4:	f7f6 fc4a 	bl	800028c <__adddf3>
 80099f8:	ec53 2b19 	vmov	r2, r3, d9
 80099fc:	f7f6 fdfc 	bl	80005f8 <__aeabi_dmul>
 8009a00:	4622      	mov	r2, r4
 8009a02:	462b      	mov	r3, r5
 8009a04:	f7f6 fc42 	bl	800028c <__adddf3>
 8009a08:	4642      	mov	r2, r8
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	464b      	mov	r3, r9
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	4b6b      	ldr	r3, [pc, #428]	; (8009bc8 <__ieee754_pow+0x770>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	460f      	mov	r7, r1
 8009a20:	f7f6 fc34 	bl	800028c <__adddf3>
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	f7f6 fc30 	bl	800028c <__adddf3>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	460d      	mov	r5, r1
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4640      	mov	r0, r8
 8009a38:	4649      	mov	r1, r9
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	4b62      	ldr	r3, [pc, #392]	; (8009bc8 <__ieee754_pow+0x770>)
 8009a40:	4680      	mov	r8, r0
 8009a42:	4689      	mov	r9, r1
 8009a44:	2200      	movs	r2, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	4632      	mov	r2, r6
 8009a50:	463b      	mov	r3, r7
 8009a52:	f7f6 fc19 	bl	8000288 <__aeabi_dsub>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	f7f6 fc13 	bl	8000288 <__aeabi_dsub>
 8009a62:	ec53 2b18 	vmov	r2, r3, d8
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	462b      	mov	r3, r5
 8009a72:	ec51 0b19 	vmov	r0, r1, d9
 8009a76:	f7f6 fdbf 	bl	80005f8 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fc03 	bl	800028c <__adddf3>
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4649      	mov	r1, r9
 8009a92:	f7f6 fbfb 	bl	800028c <__adddf3>
 8009a96:	a33e      	add	r3, pc, #248	; (adr r3, 8009b90 <__ieee754_pow+0x738>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	f7f6 fda9 	bl	80005f8 <__aeabi_dmul>
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	ec41 0b18 	vmov	d8, r0, r1
 8009aac:	464b      	mov	r3, r9
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fbe3 	bl	8000288 <__aeabi_dsub>
 8009ac2:	a335      	add	r3, pc, #212	; (adr r3, 8009b98 <__ieee754_pow+0x740>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fd96 	bl	80005f8 <__aeabi_dmul>
 8009acc:	a334      	add	r3, pc, #208	; (adr r3, 8009ba0 <__ieee754_pow+0x748>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fd8d 	bl	80005f8 <__aeabi_dmul>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 fbd1 	bl	800028c <__adddf3>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <__ieee754_pow+0x774>)
 8009aee:	4413      	add	r3, r2
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbca 	bl	800028c <__adddf3>
 8009af8:	4682      	mov	sl, r0
 8009afa:	9805      	ldr	r0, [sp, #20]
 8009afc:	468b      	mov	fp, r1
 8009afe:	f7f6 fd11 	bl	8000524 <__aeabi_i2d>
 8009b02:	9a07      	ldr	r2, [sp, #28]
 8009b04:	4b32      	ldr	r3, [pc, #200]	; (8009bd0 <__ieee754_pow+0x778>)
 8009b06:	4413      	add	r3, r2
 8009b08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	4652      	mov	r2, sl
 8009b12:	465b      	mov	r3, fp
 8009b14:	ec51 0b18 	vmov	r0, r1, d8
 8009b18:	f7f6 fbb8 	bl	800028c <__adddf3>
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	f7f6 fbb4 	bl	800028c <__adddf3>
 8009b24:	4632      	mov	r2, r6
 8009b26:	463b      	mov	r3, r7
 8009b28:	f7f6 fbb0 	bl	800028c <__adddf3>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4632      	mov	r2, r6
 8009b30:	463b      	mov	r3, r7
 8009b32:	4604      	mov	r4, r0
 8009b34:	460d      	mov	r5, r1
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	f7f6 fba3 	bl	8000288 <__aeabi_dsub>
 8009b42:	ec53 2b18 	vmov	r2, r3, d8
 8009b46:	f7f6 fb9f 	bl	8000288 <__aeabi_dsub>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4650      	mov	r0, sl
 8009b50:	4659      	mov	r1, fp
 8009b52:	e610      	b.n	8009776 <__ieee754_pow+0x31e>
 8009b54:	2401      	movs	r4, #1
 8009b56:	e6a1      	b.n	800989c <__ieee754_pow+0x444>
 8009b58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009ba8 <__ieee754_pow+0x750>
 8009b5c:	e617      	b.n	800978e <__ieee754_pow+0x336>
 8009b5e:	bf00      	nop
 8009b60:	4a454eef 	.word	0x4a454eef
 8009b64:	3fca7e28 	.word	0x3fca7e28
 8009b68:	93c9db65 	.word	0x93c9db65
 8009b6c:	3fcd864a 	.word	0x3fcd864a
 8009b70:	a91d4101 	.word	0xa91d4101
 8009b74:	3fd17460 	.word	0x3fd17460
 8009b78:	518f264d 	.word	0x518f264d
 8009b7c:	3fd55555 	.word	0x3fd55555
 8009b80:	db6fabff 	.word	0xdb6fabff
 8009b84:	3fdb6db6 	.word	0x3fdb6db6
 8009b88:	33333303 	.word	0x33333303
 8009b8c:	3fe33333 	.word	0x3fe33333
 8009b90:	e0000000 	.word	0xe0000000
 8009b94:	3feec709 	.word	0x3feec709
 8009b98:	dc3a03fd 	.word	0xdc3a03fd
 8009b9c:	3feec709 	.word	0x3feec709
 8009ba0:	145b01f5 	.word	0x145b01f5
 8009ba4:	be3e2fe0 	.word	0xbe3e2fe0
 8009ba8:	00000000 	.word	0x00000000
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	43400000 	.word	0x43400000
 8009bb8:	0003988e 	.word	0x0003988e
 8009bbc:	000bb679 	.word	0x000bb679
 8009bc0:	0800ac70 	.word	0x0800ac70
 8009bc4:	3ff00000 	.word	0x3ff00000
 8009bc8:	40080000 	.word	0x40080000
 8009bcc:	0800ac90 	.word	0x0800ac90
 8009bd0:	0800ac80 	.word	0x0800ac80
 8009bd4:	a3b5      	add	r3, pc, #724	; (adr r3, 8009eac <__ieee754_pow+0xa54>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	4640      	mov	r0, r8
 8009bdc:	4649      	mov	r1, r9
 8009bde:	f7f6 fb55 	bl	800028c <__adddf3>
 8009be2:	4622      	mov	r2, r4
 8009be4:	ec41 0b1a 	vmov	d10, r0, r1
 8009be8:	462b      	mov	r3, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 fb4b 	bl	8000288 <__aeabi_dsub>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	ec51 0b1a 	vmov	r0, r1, d10
 8009bfa:	f7f6 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f47f ae04 	bne.w	800980c <__ieee754_pow+0x3b4>
 8009c04:	4aa4      	ldr	r2, [pc, #656]	; (8009e98 <__ieee754_pow+0xa40>)
 8009c06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	f340 8108 	ble.w	8009e20 <__ieee754_pow+0x9c8>
 8009c10:	151b      	asrs	r3, r3, #20
 8009c12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c1a:	fa4a f303 	asr.w	r3, sl, r3
 8009c1e:	445b      	add	r3, fp
 8009c20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c24:	4e9d      	ldr	r6, [pc, #628]	; (8009e9c <__ieee754_pow+0xa44>)
 8009c26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c2a:	4116      	asrs	r6, r2
 8009c2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c30:	2000      	movs	r0, #0
 8009c32:	ea23 0106 	bic.w	r1, r3, r6
 8009c36:	f1c2 0214 	rsb	r2, r2, #20
 8009c3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c3e:	fa4a fa02 	asr.w	sl, sl, r2
 8009c42:	f1bb 0f00 	cmp.w	fp, #0
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	bfb8      	it	lt
 8009c50:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c54:	f7f6 fb18 	bl	8000288 <__aeabi_dsub>
 8009c58:	ec41 0b19 	vmov	d9, r0, r1
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	ec51 0b19 	vmov	r0, r1, d9
 8009c64:	f7f6 fb12 	bl	800028c <__adddf3>
 8009c68:	a37b      	add	r3, pc, #492	; (adr r3, 8009e58 <__ieee754_pow+0xa00>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	2000      	movs	r0, #0
 8009c70:	4604      	mov	r4, r0
 8009c72:	460d      	mov	r5, r1
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	ec53 2b19 	vmov	r2, r3, d9
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	460f      	mov	r7, r1
 8009c80:	4620      	mov	r0, r4
 8009c82:	4629      	mov	r1, r5
 8009c84:	f7f6 fb00 	bl	8000288 <__aeabi_dsub>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f7f6 fafa 	bl	8000288 <__aeabi_dsub>
 8009c94:	a372      	add	r3, pc, #456	; (adr r3, 8009e60 <__ieee754_pow+0xa08>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 fcad 	bl	80005f8 <__aeabi_dmul>
 8009c9e:	a372      	add	r3, pc, #456	; (adr r3, 8009e68 <__ieee754_pow+0xa10>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	4689      	mov	r9, r1
 8009ca8:	4620      	mov	r0, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 fae8 	bl	800028c <__adddf3>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	460d      	mov	r5, r1
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fae0 	bl	800028c <__adddf3>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	4689      	mov	r9, r1
 8009cd4:	f7f6 fad8 	bl	8000288 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fad2 	bl	8000288 <__aeabi_dsub>
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	464b      	mov	r3, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	4649      	mov	r1, r9
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	a35e      	add	r3, pc, #376	; (adr r3, 8009e70 <__ieee754_pow+0xa18>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	a35d      	add	r3, pc, #372	; (adr r3, 8009e78 <__ieee754_pow+0xa20>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fabe 	bl	8000288 <__aeabi_dsub>
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	462b      	mov	r3, r5
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	a35a      	add	r3, pc, #360	; (adr r3, 8009e80 <__ieee754_pow+0xa28>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fab7 	bl	800028c <__adddf3>
 8009d1e:	4622      	mov	r2, r4
 8009d20:	462b      	mov	r3, r5
 8009d22:	f7f6 fc69 	bl	80005f8 <__aeabi_dmul>
 8009d26:	a358      	add	r3, pc, #352	; (adr r3, 8009e88 <__ieee754_pow+0xa30>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f7f6 faac 	bl	8000288 <__aeabi_dsub>
 8009d30:	4622      	mov	r2, r4
 8009d32:	462b      	mov	r3, r5
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	a355      	add	r3, pc, #340	; (adr r3, 8009e90 <__ieee754_pow+0xa38>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 faa5 	bl	800028c <__adddf3>
 8009d42:	4622      	mov	r2, r4
 8009d44:	462b      	mov	r3, r5
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4640      	mov	r0, r8
 8009d50:	4649      	mov	r1, r9
 8009d52:	f7f6 fa99 	bl	8000288 <__aeabi_dsub>
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fc49 	bl	80005f8 <__aeabi_dmul>
 8009d66:	2200      	movs	r2, #0
 8009d68:	ec41 0b19 	vmov	d9, r0, r1
 8009d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d70:	4620      	mov	r0, r4
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	ec51 0b19 	vmov	r0, r1, d9
 8009d80:	f7f6 fd64 	bl	800084c <__aeabi_ddiv>
 8009d84:	4632      	mov	r2, r6
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	4632      	mov	r2, r6
 8009d96:	463b      	mov	r3, r7
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	f7f6 fa6c 	bl	8000288 <__aeabi_dsub>
 8009db0:	460b      	mov	r3, r1
 8009db2:	4602      	mov	r2, r0
 8009db4:	493a      	ldr	r1, [pc, #232]	; (8009ea0 <__ieee754_pow+0xa48>)
 8009db6:	2000      	movs	r0, #0
 8009db8:	f7f6 fa66 	bl	8000288 <__aeabi_dsub>
 8009dbc:	ec41 0b10 	vmov	d0, r0, r1
 8009dc0:	ee10 3a90 	vmov	r3, s1
 8009dc4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dcc:	da2b      	bge.n	8009e26 <__ieee754_pow+0x9ce>
 8009dce:	4650      	mov	r0, sl
 8009dd0:	f000 f966 	bl	800a0a0 <scalbn>
 8009dd4:	ec51 0b10 	vmov	r0, r1, d0
 8009dd8:	ec53 2b18 	vmov	r2, r3, d8
 8009ddc:	f7ff bbed 	b.w	80095ba <__ieee754_pow+0x162>
 8009de0:	4b30      	ldr	r3, [pc, #192]	; (8009ea4 <__ieee754_pow+0xa4c>)
 8009de2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009de6:	429e      	cmp	r6, r3
 8009de8:	f77f af0c 	ble.w	8009c04 <__ieee754_pow+0x7ac>
 8009dec:	4b2e      	ldr	r3, [pc, #184]	; (8009ea8 <__ieee754_pow+0xa50>)
 8009dee:	440b      	add	r3, r1
 8009df0:	4303      	orrs	r3, r0
 8009df2:	d009      	beq.n	8009e08 <__ieee754_pow+0x9b0>
 8009df4:	ec51 0b18 	vmov	r0, r1, d8
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f7f6 fe6e 	bl	8000adc <__aeabi_dcmplt>
 8009e00:	3800      	subs	r0, #0
 8009e02:	bf18      	it	ne
 8009e04:	2001      	movne	r0, #1
 8009e06:	e447      	b.n	8009698 <__ieee754_pow+0x240>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	f7f6 fa3c 	bl	8000288 <__aeabi_dsub>
 8009e10:	4642      	mov	r2, r8
 8009e12:	464b      	mov	r3, r9
 8009e14:	f7f6 fe76 	bl	8000b04 <__aeabi_dcmpge>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f43f aef3 	beq.w	8009c04 <__ieee754_pow+0x7ac>
 8009e1e:	e7e9      	b.n	8009df4 <__ieee754_pow+0x99c>
 8009e20:	f04f 0a00 	mov.w	sl, #0
 8009e24:	e71a      	b.n	8009c5c <__ieee754_pow+0x804>
 8009e26:	ec51 0b10 	vmov	r0, r1, d0
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	e7d4      	b.n	8009dd8 <__ieee754_pow+0x980>
 8009e2e:	491c      	ldr	r1, [pc, #112]	; (8009ea0 <__ieee754_pow+0xa48>)
 8009e30:	2000      	movs	r0, #0
 8009e32:	f7ff bb30 	b.w	8009496 <__ieee754_pow+0x3e>
 8009e36:	2000      	movs	r0, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	f7ff bb2c 	b.w	8009496 <__ieee754_pow+0x3e>
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7ff bb28 	b.w	8009496 <__ieee754_pow+0x3e>
 8009e46:	9204      	str	r2, [sp, #16]
 8009e48:	f7ff bb7a 	b.w	8009540 <__ieee754_pow+0xe8>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f7ff bb64 	b.w	800951a <__ieee754_pow+0xc2>
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	3fe62e43 	.word	0x3fe62e43
 8009e60:	fefa39ef 	.word	0xfefa39ef
 8009e64:	3fe62e42 	.word	0x3fe62e42
 8009e68:	0ca86c39 	.word	0x0ca86c39
 8009e6c:	be205c61 	.word	0xbe205c61
 8009e70:	72bea4d0 	.word	0x72bea4d0
 8009e74:	3e663769 	.word	0x3e663769
 8009e78:	c5d26bf1 	.word	0xc5d26bf1
 8009e7c:	3ebbbd41 	.word	0x3ebbbd41
 8009e80:	af25de2c 	.word	0xaf25de2c
 8009e84:	3f11566a 	.word	0x3f11566a
 8009e88:	16bebd93 	.word	0x16bebd93
 8009e8c:	3f66c16c 	.word	0x3f66c16c
 8009e90:	5555553e 	.word	0x5555553e
 8009e94:	3fc55555 	.word	0x3fc55555
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	000fffff 	.word	0x000fffff
 8009ea0:	3ff00000 	.word	0x3ff00000
 8009ea4:	4090cbff 	.word	0x4090cbff
 8009ea8:	3f6f3400 	.word	0x3f6f3400
 8009eac:	652b82fe 	.word	0x652b82fe
 8009eb0:	3c971547 	.word	0x3c971547

08009eb4 <__ieee754_sqrt>:
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	ec55 4b10 	vmov	r4, r5, d0
 8009ebc:	4e55      	ldr	r6, [pc, #340]	; (800a014 <__ieee754_sqrt+0x160>)
 8009ebe:	43ae      	bics	r6, r5
 8009ec0:	ee10 0a10 	vmov	r0, s0
 8009ec4:	ee10 3a10 	vmov	r3, s0
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4629      	mov	r1, r5
 8009ecc:	d110      	bne.n	8009ef0 <__ieee754_sqrt+0x3c>
 8009ece:	ee10 2a10 	vmov	r2, s0
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	f7f6 fb90 	bl	80005f8 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4620      	mov	r0, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f7f6 f9d4 	bl	800028c <__adddf3>
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	ec45 4b10 	vmov	d0, r4, r5
 8009eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef0:	2d00      	cmp	r5, #0
 8009ef2:	dc10      	bgt.n	8009f16 <__ieee754_sqrt+0x62>
 8009ef4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ef8:	4330      	orrs	r0, r6
 8009efa:	d0f5      	beq.n	8009ee8 <__ieee754_sqrt+0x34>
 8009efc:	b15d      	cbz	r5, 8009f16 <__ieee754_sqrt+0x62>
 8009efe:	ee10 2a10 	vmov	r2, s0
 8009f02:	462b      	mov	r3, r5
 8009f04:	ee10 0a10 	vmov	r0, s0
 8009f08:	f7f6 f9be 	bl	8000288 <__aeabi_dsub>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	f7f6 fc9c 	bl	800084c <__aeabi_ddiv>
 8009f14:	e7e6      	b.n	8009ee4 <__ieee754_sqrt+0x30>
 8009f16:	1512      	asrs	r2, r2, #20
 8009f18:	d074      	beq.n	800a004 <__ieee754_sqrt+0x150>
 8009f1a:	07d4      	lsls	r4, r2, #31
 8009f1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f20:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f28:	bf5e      	ittt	pl
 8009f2a:	0fda      	lsrpl	r2, r3, #31
 8009f2c:	005b      	lslpl	r3, r3, #1
 8009f2e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009f32:	2400      	movs	r4, #0
 8009f34:	0fda      	lsrs	r2, r3, #31
 8009f36:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009f3a:	107f      	asrs	r7, r7, #1
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	2516      	movs	r5, #22
 8009f40:	4620      	mov	r0, r4
 8009f42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009f46:	1886      	adds	r6, r0, r2
 8009f48:	428e      	cmp	r6, r1
 8009f4a:	bfde      	ittt	le
 8009f4c:	1b89      	suble	r1, r1, r6
 8009f4e:	18b0      	addle	r0, r6, r2
 8009f50:	18a4      	addle	r4, r4, r2
 8009f52:	0049      	lsls	r1, r1, #1
 8009f54:	3d01      	subs	r5, #1
 8009f56:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009f5a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009f5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f62:	d1f0      	bne.n	8009f46 <__ieee754_sqrt+0x92>
 8009f64:	462a      	mov	r2, r5
 8009f66:	f04f 0e20 	mov.w	lr, #32
 8009f6a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f6e:	4281      	cmp	r1, r0
 8009f70:	eb06 0c05 	add.w	ip, r6, r5
 8009f74:	dc02      	bgt.n	8009f7c <__ieee754_sqrt+0xc8>
 8009f76:	d113      	bne.n	8009fa0 <__ieee754_sqrt+0xec>
 8009f78:	459c      	cmp	ip, r3
 8009f7a:	d811      	bhi.n	8009fa0 <__ieee754_sqrt+0xec>
 8009f7c:	f1bc 0f00 	cmp.w	ip, #0
 8009f80:	eb0c 0506 	add.w	r5, ip, r6
 8009f84:	da43      	bge.n	800a00e <__ieee754_sqrt+0x15a>
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	db41      	blt.n	800a00e <__ieee754_sqrt+0x15a>
 8009f8a:	f100 0801 	add.w	r8, r0, #1
 8009f8e:	1a09      	subs	r1, r1, r0
 8009f90:	459c      	cmp	ip, r3
 8009f92:	bf88      	it	hi
 8009f94:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009f98:	eba3 030c 	sub.w	r3, r3, ip
 8009f9c:	4432      	add	r2, r6
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009fa4:	f1be 0e01 	subs.w	lr, lr, #1
 8009fa8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009fac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009fb4:	d1db      	bne.n	8009f6e <__ieee754_sqrt+0xba>
 8009fb6:	430b      	orrs	r3, r1
 8009fb8:	d006      	beq.n	8009fc8 <__ieee754_sqrt+0x114>
 8009fba:	1c50      	adds	r0, r2, #1
 8009fbc:	bf13      	iteet	ne
 8009fbe:	3201      	addne	r2, #1
 8009fc0:	3401      	addeq	r4, #1
 8009fc2:	4672      	moveq	r2, lr
 8009fc4:	f022 0201 	bicne.w	r2, r2, #1
 8009fc8:	1063      	asrs	r3, r4, #1
 8009fca:	0852      	lsrs	r2, r2, #1
 8009fcc:	07e1      	lsls	r1, r4, #31
 8009fce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009fd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009fd6:	bf48      	it	mi
 8009fd8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009fdc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	e781      	b.n	8009ee8 <__ieee754_sqrt+0x34>
 8009fe4:	0ad9      	lsrs	r1, r3, #11
 8009fe6:	3815      	subs	r0, #21
 8009fe8:	055b      	lsls	r3, r3, #21
 8009fea:	2900      	cmp	r1, #0
 8009fec:	d0fa      	beq.n	8009fe4 <__ieee754_sqrt+0x130>
 8009fee:	02cd      	lsls	r5, r1, #11
 8009ff0:	d50a      	bpl.n	800a008 <__ieee754_sqrt+0x154>
 8009ff2:	f1c2 0420 	rsb	r4, r2, #32
 8009ff6:	fa23 f404 	lsr.w	r4, r3, r4
 8009ffa:	1e55      	subs	r5, r2, #1
 8009ffc:	4093      	lsls	r3, r2
 8009ffe:	4321      	orrs	r1, r4
 800a000:	1b42      	subs	r2, r0, r5
 800a002:	e78a      	b.n	8009f1a <__ieee754_sqrt+0x66>
 800a004:	4610      	mov	r0, r2
 800a006:	e7f0      	b.n	8009fea <__ieee754_sqrt+0x136>
 800a008:	0049      	lsls	r1, r1, #1
 800a00a:	3201      	adds	r2, #1
 800a00c:	e7ef      	b.n	8009fee <__ieee754_sqrt+0x13a>
 800a00e:	4680      	mov	r8, r0
 800a010:	e7bd      	b.n	8009f8e <__ieee754_sqrt+0xda>
 800a012:	bf00      	nop
 800a014:	7ff00000 	.word	0x7ff00000

0800a018 <with_errno>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	4604      	mov	r4, r0
 800a01c:	460d      	mov	r5, r1
 800a01e:	4616      	mov	r6, r2
 800a020:	f7fc fbd2 	bl	80067c8 <__errno>
 800a024:	4629      	mov	r1, r5
 800a026:	6006      	str	r6, [r0, #0]
 800a028:	4620      	mov	r0, r4
 800a02a:	bd70      	pop	{r4, r5, r6, pc}

0800a02c <xflow>:
 800a02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a02e:	4614      	mov	r4, r2
 800a030:	461d      	mov	r5, r3
 800a032:	b108      	cbz	r0, 800a038 <xflow+0xc>
 800a034:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a038:	e9cd 2300 	strd	r2, r3, [sp]
 800a03c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a040:	4620      	mov	r0, r4
 800a042:	4629      	mov	r1, r5
 800a044:	f7f6 fad8 	bl	80005f8 <__aeabi_dmul>
 800a048:	2222      	movs	r2, #34	; 0x22
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a050:	f7ff bfe2 	b.w	800a018 <with_errno>

0800a054 <__math_uflow>:
 800a054:	b508      	push	{r3, lr}
 800a056:	2200      	movs	r2, #0
 800a058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a05c:	f7ff ffe6 	bl	800a02c <xflow>
 800a060:	ec41 0b10 	vmov	d0, r0, r1
 800a064:	bd08      	pop	{r3, pc}

0800a066 <__math_oflow>:
 800a066:	b508      	push	{r3, lr}
 800a068:	2200      	movs	r2, #0
 800a06a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a06e:	f7ff ffdd 	bl	800a02c <xflow>
 800a072:	ec41 0b10 	vmov	d0, r0, r1
 800a076:	bd08      	pop	{r3, pc}

0800a078 <fabs>:
 800a078:	ec51 0b10 	vmov	r0, r1, d0
 800a07c:	ee10 2a10 	vmov	r2, s0
 800a080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a084:	ec43 2b10 	vmov	d0, r2, r3
 800a088:	4770      	bx	lr

0800a08a <finite>:
 800a08a:	b082      	sub	sp, #8
 800a08c:	ed8d 0b00 	vstr	d0, [sp]
 800a090:	9801      	ldr	r0, [sp, #4]
 800a092:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a096:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a09a:	0fc0      	lsrs	r0, r0, #31
 800a09c:	b002      	add	sp, #8
 800a09e:	4770      	bx	lr

0800a0a0 <scalbn>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	ec55 4b10 	vmov	r4, r5, d0
 800a0a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	b99a      	cbnz	r2, 800a0d8 <scalbn+0x38>
 800a0b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0b4:	4323      	orrs	r3, r4
 800a0b6:	d036      	beq.n	800a126 <scalbn+0x86>
 800a0b8:	4b39      	ldr	r3, [pc, #228]	; (800a1a0 <scalbn+0x100>)
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	ee10 0a10 	vmov	r0, s0
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f7f6 fa99 	bl	80005f8 <__aeabi_dmul>
 800a0c6:	4b37      	ldr	r3, [pc, #220]	; (800a1a4 <scalbn+0x104>)
 800a0c8:	429e      	cmp	r6, r3
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	da10      	bge.n	800a0f2 <scalbn+0x52>
 800a0d0:	a32b      	add	r3, pc, #172	; (adr r3, 800a180 <scalbn+0xe0>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	e03a      	b.n	800a14e <scalbn+0xae>
 800a0d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a0dc:	428a      	cmp	r2, r1
 800a0de:	d10c      	bne.n	800a0fa <scalbn+0x5a>
 800a0e0:	ee10 2a10 	vmov	r2, s0
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f8d0 	bl	800028c <__adddf3>
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	e019      	b.n	800a126 <scalbn+0x86>
 800a0f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	3a36      	subs	r2, #54	; 0x36
 800a0fa:	4432      	add	r2, r6
 800a0fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a100:	428a      	cmp	r2, r1
 800a102:	dd08      	ble.n	800a116 <scalbn+0x76>
 800a104:	2d00      	cmp	r5, #0
 800a106:	a120      	add	r1, pc, #128	; (adr r1, 800a188 <scalbn+0xe8>)
 800a108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10c:	da1c      	bge.n	800a148 <scalbn+0xa8>
 800a10e:	a120      	add	r1, pc, #128	; (adr r1, 800a190 <scalbn+0xf0>)
 800a110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a114:	e018      	b.n	800a148 <scalbn+0xa8>
 800a116:	2a00      	cmp	r2, #0
 800a118:	dd08      	ble.n	800a12c <scalbn+0x8c>
 800a11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a11e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a126:	ec45 4b10 	vmov	d0, r4, r5
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a130:	da19      	bge.n	800a166 <scalbn+0xc6>
 800a132:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a136:	429e      	cmp	r6, r3
 800a138:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a13c:	dd0a      	ble.n	800a154 <scalbn+0xb4>
 800a13e:	a112      	add	r1, pc, #72	; (adr r1, 800a188 <scalbn+0xe8>)
 800a140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e2      	bne.n	800a10e <scalbn+0x6e>
 800a148:	a30f      	add	r3, pc, #60	; (adr r3, 800a188 <scalbn+0xe8>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 fa53 	bl	80005f8 <__aeabi_dmul>
 800a152:	e7cb      	b.n	800a0ec <scalbn+0x4c>
 800a154:	a10a      	add	r1, pc, #40	; (adr r1, 800a180 <scalbn+0xe0>)
 800a156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0b8      	beq.n	800a0d0 <scalbn+0x30>
 800a15e:	a10e      	add	r1, pc, #56	; (adr r1, 800a198 <scalbn+0xf8>)
 800a160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a164:	e7b4      	b.n	800a0d0 <scalbn+0x30>
 800a166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a16a:	3236      	adds	r2, #54	; 0x36
 800a16c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a174:	4620      	mov	r0, r4
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <scalbn+0x108>)
 800a178:	2200      	movs	r2, #0
 800a17a:	e7e8      	b.n	800a14e <scalbn+0xae>
 800a17c:	f3af 8000 	nop.w
 800a180:	c2f8f359 	.word	0xc2f8f359
 800a184:	01a56e1f 	.word	0x01a56e1f
 800a188:	8800759c 	.word	0x8800759c
 800a18c:	7e37e43c 	.word	0x7e37e43c
 800a190:	8800759c 	.word	0x8800759c
 800a194:	fe37e43c 	.word	0xfe37e43c
 800a198:	c2f8f359 	.word	0xc2f8f359
 800a19c:	81a56e1f 	.word	0x81a56e1f
 800a1a0:	43500000 	.word	0x43500000
 800a1a4:	ffff3cb0 	.word	0xffff3cb0
 800a1a8:	3c900000 	.word	0x3c900000

0800a1ac <_init>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr

0800a1b8 <_fini>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	bf00      	nop
 800a1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1be:	bc08      	pop	{r3}
 800a1c0:	469e      	mov	lr, r3
 800a1c2:	4770      	bx	lr
