
SensorStick_integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d8  08018d88  08018d88  00028d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f60  08019f60  00030364  2**0
                  CONTENTS
  4 .ARM          00000008  08019f60  08019f60  00029f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f68  08019f68  00030364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f68  08019f68  00029f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f6c  08019f6c  00029f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08019f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000206c  20000364  0801a2d4  00030364  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200023d0  0801a2d4  000323d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 12 .debug_info   000293f6  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f75  00000000  00000000  0005978a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  0005e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb8  00000000  00000000  000608d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dc0  00000000  00000000  00062888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002775c  00000000  00000000  00083648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bad49  00000000  00000000  000aada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165aed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a94c  00000000  00000000  00165b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018d6c 	.word	0x08018d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	08018d6c 	.word	0x08018d6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->lon = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e057      	b.n	8001148 <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	3308      	adds	r3, #8
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2bb5      	cmp	r3, #181	; 0xb5
 80010a4:	d14d      	bne.n	8001142 <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3301      	adds	r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	7a1b      	ldrb	r3, [r3, #8]
 80010b0:	2b62      	cmp	r3, #98	; 0x62
 80010b2:	d146      	bne.n	8001142 <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3302      	adds	r3, #2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	7a1b      	ldrb	r3, [r3, #8]
 80010be:	2b27      	cmp	r3, #39	; 0x27
 80010c0:	d10a      	bne.n	80010d8 <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3303      	adds	r3, #3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	7a1b      	ldrb	r3, [r3, #8]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d103      	bne.n	80010d8 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f875 	bl	80011c0 <GNSS_ParseUniqID>
 80010d6:	e034      	b.n	8001142 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3302      	adds	r3, #2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10a      	bne.n	80010fc <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3303      	adds	r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	7a1b      	ldrb	r3, [r3, #8]
 80010f0:	2b21      	cmp	r3, #33	; 0x21
 80010f2:	d103      	bne.n	80010fc <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fa79 	bl	80015ec <GNSS_ParseNavigatorData>
 80010fa:	e022      	b.n	8001142 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3302      	adds	r3, #2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	7a1b      	ldrb	r3, [r3, #8]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d10a      	bne.n	8001120 <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3303      	adds	r3, #3
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	7a1b      	ldrb	r3, [r3, #8]
 8001114:	2b07      	cmp	r3, #7
 8001116:	d103      	bne.n	8001120 <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f905 	bl	8001328 <GNSS_ParsePVTData>
 800111e:	e010      	b.n	8001142 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3302      	adds	r3, #2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d109      	bne.n	8001142 <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3303      	adds	r3, #3
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	7a1b      	ldrb	r3, [r3, #8]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d102      	bne.n	8001142 <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fa89 	bl	8001654 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	dda4      	ble.n	8001098 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getDeviceID,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2208      	movs	r2, #8
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <GNSS_GetUniqID+0x30>)
 8001168:	4618      	mov	r0, r3
 800116a:	f00b fe31 	bl	800cdd0 <HAL_UART_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS->uartWorkingBuffer, 17);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3308      	adds	r3, #8
 8001176:	2211      	movs	r2, #17
 8001178:	4619      	mov	r1, r3
 800117a:	f00b fdd3 	bl	800cd24 <HAL_UART_Receive_IT>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08019204 	.word	0x08019204

0800118c <GNSS_GetPOSLLHData>:

/*!
 * Make request for geodetic position solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPOSLLHData(GNSS_StateHandle *GNSS) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPOSLLHData,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2208      	movs	r2, #8
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <GNSS_GetPOSLLHData+0x30>)
 800119c:	4618      	mov	r0, r3
 800119e:	f00b fe17 	bl	800cdd0 <HAL_UART_Transmit_DMA>
			sizeof(getPOSLLHData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS->uartWorkingBuffer, 36);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3308      	adds	r3, #8
 80011aa:	2224      	movs	r2, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	f00b fdb9 	bl	800cd24 <HAL_UART_Receive_IT>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0801920c 	.word	0x0801920c

080011c0 <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e00d      	b.n	80011ea <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS->uartWorkingBuffer[10 + var];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	330a      	adds	r3, #10
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	7a19      	ldrb	r1, [r3, #8]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	ddee      	ble.n	80011ce <GNSS_ParseUniqID+0xe>
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 800120c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	222c      	movs	r2, #44	; 0x2c
 800121a:	493a      	ldr	r1, [pc, #232]	; (8001304 <GNSS_SetMode+0x104>)
 800121c:	4618      	mov	r0, r3
 800121e:	f00b fdd7 	bl	800cdd0 <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 8001222:	e06a      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 8001224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d107      	bne.n	800123c <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	222c      	movs	r2, #44	; 0x2c
 8001232:	4935      	ldr	r1, [pc, #212]	; (8001308 <GNSS_SetMode+0x108>)
 8001234:	4618      	mov	r0, r3
 8001236:	f00b fdcb 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 800123a:	e05e      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 800123c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d107      	bne.n	8001254 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	222c      	movs	r2, #44	; 0x2c
 800124a:	4930      	ldr	r1, [pc, #192]	; (800130c <GNSS_SetMode+0x10c>)
 800124c:	4618      	mov	r0, r3
 800124e:	f00b fdbf 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 8001252:	e052      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 8001254:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d107      	bne.n	800126c <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	222c      	movs	r2, #44	; 0x2c
 8001262:	492b      	ldr	r1, [pc, #172]	; (8001310 <GNSS_SetMode+0x110>)
 8001264:	4618      	mov	r0, r3
 8001266:	f00b fdb3 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 800126a:	e046      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 800126c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d107      	bne.n	8001284 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	222c      	movs	r2, #44	; 0x2c
 800127a:	4925      	ldr	r1, [pc, #148]	; (8001310 <GNSS_SetMode+0x110>)
 800127c:	4618      	mov	r0, r3
 800127e:	f00b fda7 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 8001282:	e03a      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 8001284:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001288:	2b05      	cmp	r3, #5
 800128a:	d107      	bne.n	800129c <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	222c      	movs	r2, #44	; 0x2c
 8001292:	4920      	ldr	r1, [pc, #128]	; (8001314 <GNSS_SetMode+0x114>)
 8001294:	4618      	mov	r0, r3
 8001296:	f00b fd9b 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 800129a:	e02e      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 800129c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d107      	bne.n	80012b4 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	222c      	movs	r2, #44	; 0x2c
 80012aa:	491b      	ldr	r1, [pc, #108]	; (8001318 <GNSS_SetMode+0x118>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00b fd8f 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 80012b2:	e022      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 80012b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d107      	bne.n	80012cc <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	222c      	movs	r2, #44	; 0x2c
 80012c2:	4916      	ldr	r1, [pc, #88]	; (800131c <GNSS_SetMode+0x11c>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00b fd83 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 80012ca:	e016      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 80012cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d107      	bne.n	80012e4 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	222c      	movs	r2, #44	; 0x2c
 80012da:	4911      	ldr	r1, [pc, #68]	; (8001320 <GNSS_SetMode+0x120>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f00b fd77 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 80012e2:	e00a      	b.n	80012fa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 80012e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d106      	bne.n	80012fa <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	222c      	movs	r2, #44	; 0x2c
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <GNSS_SetMode+0x124>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00b fd6b 	bl	800cdd0 <HAL_UART_Transmit_DMA>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08019214 	.word	0x08019214
 8001308:	08019240 	.word	0x08019240
 800130c:	0801926c 	.word	0x0801926c
 8001310:	08019298 	.word	0x08019298
 8001314:	080192c4 	.word	0x080192c4
 8001318:	080192f0 	.word	0x080192f0
 800131c:	0801931c 	.word	0x0801931c
 8001320:	08019348 	.word	0x08019348
 8001324:	08019374 	.word	0x08019374

08001328 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7c9a      	ldrb	r2, [r3, #18]
 8001334:	4b91      	ldr	r3, [pc, #580]	; (800157c <GNSS_ParsePVTData+0x254>)
 8001336:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7c9a      	ldrb	r2, [r3, #18]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7cda      	ldrb	r2, [r3, #19]
 8001346:	4b8d      	ldr	r3, [pc, #564]	; (800157c <GNSS_ParsePVTData+0x254>)
 8001348:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7cda      	ldrb	r2, [r3, #19]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 8001354:	4b89      	ldr	r3, [pc, #548]	; (800157c <GNSS_ParsePVTData+0x254>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7d1a      	ldrb	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7d5a      	ldrb	r2, [r3, #21]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7d9a      	ldrb	r2, [r3, #22]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7dda      	ldrb	r2, [r3, #23]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e1a      	ldrb	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	for (int var = 0; var < 4; ++var) {
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	e017      	b.n	80013d2 <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	331e      	adds	r3, #30
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	7a19      	ldrb	r1, [r3, #8]
 80013ac:	4a74      	ldr	r2, [pc, #464]	; (8001580 <GNSS_ParsePVTData+0x258>)
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	4413      	add	r3, r2
 80013b2:	460a      	mov	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	331e      	adds	r3, #30
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	7a19      	ldrb	r1, [r3, #8]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	4413      	add	r3, r2
 80013c6:	337c      	adds	r3, #124	; 0x7c
 80013c8:	460a      	mov	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	3301      	adds	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	dde4      	ble.n	80013a2 <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <GNSS_ParsePVTData+0x258>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <GNSS_ParsePVTData+0x258>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ec:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001584 <GNSS_ParsePVTData+0x25c>
 80013f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	for (int var = 0; var < 4; ++var) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e017      	b.n	8001430 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3322      	adds	r3, #34	; 0x22
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	7a19      	ldrb	r1, [r3, #8]
 800140a:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <GNSS_ParsePVTData+0x258>)
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	3322      	adds	r3, #34	; 0x22
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	7a19      	ldrb	r1, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	4413      	add	r3, r2
 8001424:	3384      	adds	r3, #132	; 0x84
 8001426:	460a      	mov	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	3301      	adds	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b03      	cmp	r3, #3
 8001434:	dde4      	ble.n	8001400 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 8001436:	4b52      	ldr	r3, [pc, #328]	; (8001580 <GNSS_ParsePVTData+0x258>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <GNSS_ParsePVTData+0x258>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001584 <GNSS_ParsePVTData+0x25c>
 8001450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e00c      	b.n	800147a <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3326      	adds	r3, #38	; 0x26
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	7a19      	ldrb	r1, [r3, #8]
 800146a:	4a45      	ldr	r2, [pc, #276]	; (8001580 <GNSS_ParsePVTData+0x258>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	460a      	mov	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	3301      	adds	r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b03      	cmp	r3, #3
 800147e:	ddef      	ble.n	8001460 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <GNSS_ParsePVTData+0x258>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	e017      	b.n	80014c0 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	332a      	adds	r3, #42	; 0x2a
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	7a19      	ldrb	r1, [r3, #8]
 800149a:	4a39      	ldr	r2, [pc, #228]	; (8001580 <GNSS_ParsePVTData+0x258>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	332a      	adds	r3, #42	; 0x2a
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	7a19      	ldrb	r1, [r3, #8]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4413      	add	r3, r2
 80014b4:	3398      	adds	r3, #152	; 0x98
 80014b6:	460a      	mov	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	dde4      	ble.n	8001490 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <GNSS_ParsePVTData+0x258>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00c      	b.n	80014f0 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	332e      	adds	r3, #46	; 0x2e
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	7a19      	ldrb	r1, [r3, #8]
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <GNSS_ParsePVTData+0x260>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	ddef      	ble.n	80014d6 <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <GNSS_ParsePVTData+0x260>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	e00c      	b.n	8001520 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3332      	adds	r3, #50	; 0x32
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	7a19      	ldrb	r1, [r3, #8]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <GNSS_ParsePVTData+0x260>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4413      	add	r3, r2
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	3301      	adds	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b03      	cmp	r3, #3
 8001524:	ddef      	ble.n	8001506 <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <GNSS_ParsePVTData+0x260>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e017      	b.n	8001566 <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3342      	adds	r3, #66	; 0x42
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	7a19      	ldrb	r1, [r3, #8]
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <GNSS_ParsePVTData+0x258>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	460a      	mov	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3342      	adds	r3, #66	; 0x42
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	7a19      	ldrb	r1, [r3, #8]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	33a8      	adds	r3, #168	; 0xa8
 800155c:	460a      	mov	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b03      	cmp	r3, #3
 800156a:	dde4      	ble.n	8001536 <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <GNSS_ParsePVTData+0x258>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	e014      	b.n	80015a6 <GNSS_ParsePVTData+0x27e>
 800157c:	20000380 	.word	0x20000380
 8001580:	20000388 	.word	0x20000388
 8001584:	4b189680 	.word	0x4b189680
 8001588:	20000384 	.word	0x20000384
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3346      	adds	r3, #70	; 0x46
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	7a19      	ldrb	r1, [r3, #8]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <GNSS_ParsePVTData+0x2c0>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4413      	add	r3, r2
 800159c:	460a      	mov	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	ddef      	ble.n	800158c <GNSS_ParsePVTData+0x264>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <GNSS_ParsePVTData+0x2c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffb7 	bl	8000524 <__aeabi_i2d>
 80015b6:	a30a      	add	r3, pc, #40	; (adr r3, 80015e0 <GNSS_ParsePVTData+0x2b8>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff f81c 	bl	80005f8 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fac6 	bl	8000b58 <__aeabi_d2iz>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	f3af 8000 	nop.w
 80015e0:	88e368f1 	.word	0x88e368f1
 80015e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80015e8:	20000388 	.word	0x20000388

080015ec <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[18];
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e9a      	ldrb	r2, [r3, #26]
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <GNSS_ParseNavigatorData+0x64>)
 80015fa:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS->uartWorkingBuffer[19];
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7eda      	ldrb	r2, [r3, #27]
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <GNSS_ParseNavigatorData+0x64>)
 8001602:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <GNSS_ParseNavigatorData+0x64>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[20];
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f1a      	ldrb	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS->uartWorkingBuffer[21];
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f5a      	ldrb	r2, [r3, #29]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[22];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7f9a      	ldrb	r2, [r3, #30]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS->uartWorkingBuffer[23];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7fda      	ldrb	r2, [r3, #31]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[24];
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 2020 	ldrb.w	r2, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000380 	.word	0x20000380

08001654 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	e00c      	b.n	800167c <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 10];
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	330a      	adds	r3, #10
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	7a19      	ldrb	r1, [r3, #8]
 800166c:	4a53      	ldr	r2, [pc, #332]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	460a      	mov	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b03      	cmp	r3, #3
 8001680:	ddef      	ble.n	8001662 <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001696:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80017c0 <GNSS_ParsePOSLLHData+0x16c>
 800169a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	for (int var = 0; var < 4; ++var) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	e00c      	b.n	80016c4 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 14];
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	330e      	adds	r3, #14
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	7a19      	ldrb	r1, [r3, #8]
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4413      	add	r3, r2
 80016ba:	460a      	mov	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	ddef      	ble.n	80016aa <GNSS_ParsePOSLLHData+0x56>
	}

	GNSS->lat = iLong.iLong;
 80016ca:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80017c0 <GNSS_ParsePOSLLHData+0x16c>
 80016e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e00c      	b.n	800170e <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 18];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3312      	adds	r3, #18
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	7a19      	ldrb	r1, [r3, #8]
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b03      	cmp	r3, #3
 8001712:	ddef      	ble.n	80016f4 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e00c      	b.n	800173e <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 22];
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3316      	adds	r3, #22
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	7a19      	ldrb	r1, [r3, #8]
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4413      	add	r3, r2
 8001734:	460a      	mov	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3301      	adds	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b03      	cmp	r3, #3
 8001742:	ddef      	ble.n	8001724 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <GNSS_ParsePOSLLHData+0x168>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e00c      	b.n	800176e <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 26];
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	331a      	adds	r3, #26
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	7a19      	ldrb	r1, [r3, #8]
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <GNSS_ParsePOSLLHData+0x170>)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	460a      	mov	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3301      	adds	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b03      	cmp	r3, #3
 8001772:	ddef      	ble.n	8001754 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <GNSS_ParsePOSLLHData+0x170>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	e00c      	b.n	800179e <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	331e      	adds	r3, #30
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	7a19      	ldrb	r1, [r3, #8]
 800178e:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <GNSS_ParsePOSLLHData+0x170>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	460a      	mov	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3301      	adds	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	ddef      	ble.n	8001784 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <GNSS_ParsePOSLLHData+0x170>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000388 	.word	0x20000388
 80017c0:	4b189680 	.word	0x4b189680
 80017c4:	20000384 	.word	0x20000384

080017c8 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	221c      	movs	r2, #28
 80017d6:	490f      	ldr	r1, [pc, #60]	; (8001814 <GNSS_LoadConfig+0x4c>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f00b faf9 	bl	800cdd0 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 80017de:	20fa      	movs	r0, #250	; 0xfa
 80017e0:	f004 f9e0 	bl	8005ba4 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	221c      	movs	r2, #28
 80017ea:	490b      	ldr	r1, [pc, #44]	; (8001818 <GNSS_LoadConfig+0x50>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00b faef 	bl	800cdd0 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 80017f2:	20fa      	movs	r0, #250	; 0xfa
 80017f4:	f004 f9d6 	bl	8005ba4 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	4907      	ldr	r1, [pc, #28]	; (800181c <GNSS_LoadConfig+0x54>)
 8001800:	4618      	mov	r0, r3
 8001802:	f00b fae5 	bl	800cdd0 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 8001806:	20fa      	movs	r0, #250	; 0xfa
 8001808:	f004 f9cc 	bl	8005ba4 <HAL_Delay>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	080191a0 	.word	0x080191a0
 8001818:	080191bc 	.word	0x080191bc
 800181c:	080191d8 	.word	0x080191d8

08001820 <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fa4d 	bl	8001ccc <null_ptr_check>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d13c      	bne.n	80018b8 <bmi08a_init+0x98>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7b1b      	ldrb	r3, [r3, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10c      	bne.n	8001860 <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	739a      	strb	r2, [r3, #14]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 800184c:	f107 010e 	add.w	r1, r7, #14
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	2000      	movs	r0, #0
 8001856:	f000 fa5d 	bl	8001d14 <get_regs>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e002      	b.n	8001866 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d124      	bne.n	80018b8 <bmi08a_init+0x98>
        {
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 800186e:	f107 010e 	add.w	r1, r7, #14
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	2000      	movs	r0, #0
 8001878:	f000 fa4c 	bl	8001d14 <get_regs>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d117      	bne.n	80018b8 <bmi08a_init+0x98>
            {
                /* Check for chip id validity */
            	//printf("%d: Chip id\r\n", chip_id);
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7b5b      	ldrb	r3, [r3, #13]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <bmi08a_init+0x7e>
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	2b1f      	cmp	r3, #31
 8001894:	d103      	bne.n	800189e <bmi08a_init+0x7e>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8001896:	7bba      	ldrb	r2, [r7, #14]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e00c      	b.n	80018b8 <bmi08a_init+0x98>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <bmi08a_init+0x94>
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	2b1e      	cmp	r3, #30
 80018aa:	d103      	bne.n	80018b4 <bmi08a_init+0x94>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 80018ac:	7bba      	ldrb	r2, [r7, #14]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e001      	b.n	80018b8 <bmi08a_init+0x98>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 80018b4:	23fd      	movs	r3, #253	; 0xfd
 80018b6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f000 f9f9 	bl	8001ccc <null_ptr_check>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 80018de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d111      	bne.n	800190a <bmi08a_get_regs+0x46>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 80018f2:	7bf8      	ldrb	r0, [r7, #15]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	f000 fa0b 	bl	8001d14 <get_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001902:	e004      	b.n	800190e <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001904:	23f9      	movs	r3, #249	; 0xf9
 8001906:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001908:	e001      	b.n	800190e <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800190a:	23ff      	movs	r3, #255	; 0xff
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800190e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f000 f9ce 	bl	8001ccc <null_ptr_check>
 8001930:	4603      	mov	r3, r0
 8001932:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d12c      	bne.n	8001996 <bmi08a_set_regs+0x7c>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d029      	beq.n	8001996 <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001948:	7bf8      	ldrb	r0, [r7, #15]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	f000 fa30 	bl	8001db4 <set_regs>
 8001954:	4603      	mov	r3, r0
 8001956:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	7bdb      	ldrb	r3, [r3, #15]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d108      	bne.n	8001972 <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	6852      	ldr	r2, [r2, #4]
 8001968:	4611      	mov	r1, r2
 800196a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800196e:	4798      	blx	r3
        if (len > 0)
 8001970:	e013      	b.n	800199a <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	7bdb      	ldrb	r3, [r3, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d107      	bne.n	800198a <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	6852      	ldr	r2, [r2, #4]
 8001982:	4611      	mov	r1, r2
 8001984:	2002      	movs	r0, #2
 8001986:	4798      	blx	r3
        if (len > 0)
 8001988:	e007      	b.n	800199a <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 800198a:	23fb      	movs	r3, #251	; 0xfb
 800198c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800198e:	e004      	b.n	800199a <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001990:	23f9      	movs	r3, #249	; 0xf9
 8001992:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001994:	e001      	b.n	800199a <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800199a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80019ae:	2300      	movs	r3, #0
 80019b0:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75bb      	strb	r3, [r7, #22]
 80019b6:	2300      	movs	r3, #0
 80019b8:	757b      	strb	r3, [r7, #21]
 80019ba:	2300      	movs	r3, #0
 80019bc:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f984 	bl	8001ccc <null_ptr_check>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80019c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d171      	bne.n	8001ab4 <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7c9b      	ldrb	r3, [r3, #18]
 80019d4:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7c5b      	ldrb	r3, [r3, #17]
 80019da:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7c1b      	ldrb	r3, [r3, #16]
 80019e0:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 80019e2:	7cfb      	ldrb	r3, [r7, #19]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d902      	bls.n	80019ee <bmi08a_set_meas_conf+0x48>
 80019e8:	7cfb      	ldrb	r3, [r7, #19]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d901      	bls.n	80019f2 <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 80019f2:	7cbb      	ldrb	r3, [r7, #18]
 80019f4:	2b0a      	cmp	r3, #10
 80019f6:	d901      	bls.n	80019fc <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b5b      	ldrb	r3, [r3, #13]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 8001a04:	7c7b      	ldrb	r3, [r7, #17]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d901      	bls.n	8001a0e <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d104      	bne.n	8001a20 <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 8001a16:	7c7b      	ldrb	r3, [r7, #17]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d901      	bls.n	8001a20 <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 8001a20:	7dbb      	ldrb	r3, [r7, #22]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d144      	bne.n	8001ab0 <bmi08a_set_meas_conf+0x10a>
 8001a26:	7d7b      	ldrb	r3, [r7, #21]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d141      	bne.n	8001ab0 <bmi08a_set_meas_conf+0x10a>
 8001a2c:	7d3b      	ldrb	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d13e      	bne.n	8001ab0 <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8001a32:	f107 010c 	add.w	r1, r7, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	2040      	movs	r0, #64	; 0x40
 8001a3c:	f7ff ff42 	bl	80018c4 <bmi08a_get_regs>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001a44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d133      	bne.n	8001ab4 <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 8001a4c:	7b3b      	ldrb	r3, [r7, #12]
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	f023 030f 	bic.w	r3, r3, #15
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	7cbb      	ldrb	r3, [r7, #18]
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 8001a80:	7b7b      	ldrb	r3, [r7, #13]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	f023 0303 	bic.w	r3, r3, #3
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8001a9c:	f107 010c 	add.w	r1, r7, #12
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	2040      	movs	r0, #64	; 0x40
 8001aa6:	f000 f985 	bl	8001db4 <set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001aae:	e001      	b.n	8001ab4 <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001ab0:	23f8      	movs	r3, #248	; 0xf8
 8001ab2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8001ac8:	2300      	movs	r3, #0
 8001aca:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8fd 	bl	8001ccc <null_ptr_check>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d143      	bne.n	8001b66 <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7bdb      	ldrb	r3, [r3, #15]
 8001ae2:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 8001aee:	2304      	movs	r3, #4
 8001af0:	737b      	strb	r3, [r7, #13]
 8001af2:	e009      	b.n	8001b08 <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d104      	bne.n	8001b04 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 8001afa:	2303      	movs	r3, #3
 8001afc:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	737b      	strb	r3, [r7, #13]
 8001b02:	e001      	b.n	8001b08 <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 8001b04:	23fb      	movs	r3, #251	; 0xfb
 8001b06:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12a      	bne.n	8001b66 <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 8001b10:	f107 010c 	add.w	r1, r7, #12
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	207c      	movs	r0, #124	; 0x7c
 8001b1a:	f000 f94b 	bl	8001db4 <set_regs>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11d      	bne.n	8001b66 <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6852      	ldr	r2, [r2, #4]
 8001b32:	4611      	mov	r1, r2
 8001b34:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b38:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	207d      	movs	r0, #125	; 0x7d
 8001b46:	f000 f935 	bl	8001db4 <set_regs>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6852      	ldr	r2, [r2, #4]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b64:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b84:	6838      	ldr	r0, [r7, #0]
 8001b86:	f000 f8a1 	bl	8001ccc <null_ptr_check>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 8001b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d140      	bne.n	8001c18 <bmi08a_get_data+0xa6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03d      	beq.n	8001c18 <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 8001b9c:	f107 010c 	add.w	r1, r7, #12
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	2012      	movs	r0, #18
 8001ba6:	f7ff fe8d 	bl	80018c4 <bmi08a_get_regs>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d132      	bne.n	8001c1c <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001bba:	7b7b      	ldrb	r3, [r7, #13]
 8001bbc:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001bbe:	7d7b      	ldrb	r3, [r7, #21]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	7dbb      	ldrb	r3, [r7, #22]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 8001bce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001bde:	7d7b      	ldrb	r3, [r7, #21]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	7dbb      	ldrb	r3, [r7, #22]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 8001bee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001bf6:	7c3b      	ldrb	r3, [r7, #16]
 8001bf8:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001bfa:	7c7b      	ldrb	r3, [r7, #17]
 8001bfc:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001bfe:	7d7b      	ldrb	r3, [r7, #21]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 8001c0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001c16:	e001      	b.n	8001c1c <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001c18:	23ff      	movs	r3, #255	; 0xff
 8001c1a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f000 f84a 	bl	8001ccc <null_ptr_check>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13a      	bne.n	8001cba <bmi08a_set_int_config+0x92>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d037      	beq.n	8001cba <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d82f      	bhi.n	8001cb2 <bmi08a_set_int_config+0x8a>
 8001c52:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <bmi08a_set_int_config+0x30>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c6d 	.word	0x08001c6d
 8001c5c:	08001c7b 	.word	0x08001c7b
 8001c60:	08001c89 	.word	0x08001c89
 8001c64:	08001c97 	.word	0x08001c97
 8001c68:	08001ca5 	.word	0x08001ca5
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f95b 	bl	8001f2a <set_accel_data_ready_int>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
                break;
 8001c78:	e01e      	b.n	8001cb8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f9b2 	bl	8001fe6 <set_accel_sync_data_ready_int>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
                break;
 8001c86:	e017      	b.n	8001cb8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f9f0 	bl	8002070 <set_accel_sync_input>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
                break;
 8001c94:	e010      	b.n	8001cb8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fa03 	bl	80020a4 <set_fifo_wm_int>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]
                break;
 8001ca2:	e009      	b.n	8001cb8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa5a 	bl	8002160 <set_fifo_full_int>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
                break;
 8001cb0:	e002      	b.n	8001cb8 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001cb2:	23f8      	movs	r3, #248	; 0xf8
 8001cb4:	73fb      	strb	r3, [r7, #15]
                break;
 8001cb6:	bf00      	nop
        switch (int_config->int_type)
 8001cb8:	e001      	b.n	8001cbe <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001cba:	23ff      	movs	r3, #255	; 0xff
 8001cbc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop

08001ccc <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00f      	beq.n	8001cfa <null_ptr_check+0x2e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <null_ptr_check+0x2e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <null_ptr_check+0x2e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001cfa:	23ff      	movs	r3, #255	; 0xff
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e001      	b.n	8001d04 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b0a7      	sub	sp, #156	; 0x9c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7b1b      	ldrb	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d103      	bne.n	8001d3a <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d38:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6a1c      	ldr	r4, [r3, #32]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b9b      	ldrb	r3, [r3, #14]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	441a      	add	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f107 0114 	add.w	r1, r7, #20
 8001d50:	7bf8      	ldrb	r0, [r7, #15]
 8001d52:	47a0      	blx	r4
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d11c      	bne.n	8001da2 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001d6e:	e012      	b.n	8001d96 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001d70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	7b92      	ldrb	r2, [r2, #14]
 8001d78:	441a      	add	r2, r3
 8001d7a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	440b      	add	r3, r1
 8001d82:	3298      	adds	r2, #152	; 0x98
 8001d84:	443a      	add	r2, r7
 8001d86:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001d8a:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8001d8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001d90:	3301      	adds	r3, #1
 8001d92:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001d96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8e7      	bhi.n	8001d70 <get_regs+0x5c>
 8001da0:	e002      	b.n	8001da8 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8001da2:	23fe      	movs	r3, #254	; 0xfe
 8001da4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 8001da8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	379c      	adds	r7, #156	; 0x9c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}

08001db4 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	7b1b      	ldrb	r3, [r3, #12]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d103      	bne.n	8001dd8 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd6:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	7bf8      	ldrb	r0, [r7, #15]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	47a0      	blx	r4
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 8001dfc:	23fe      	movs	r3, #254	; 0xfe
 8001dfe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73bb      	strb	r3, [r7, #14]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <set_int_pin_config+0x20>
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d003      	beq.n	8001e32 <set_int_pin_config+0x26>
 8001e2a:	e005      	b.n	8001e38 <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 8001e2c:	2353      	movs	r3, #83	; 0x53
 8001e2e:	73bb      	strb	r3, [r7, #14]
            break;
 8001e30:	e005      	b.n	8001e3e <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 8001e32:	2354      	movs	r3, #84	; 0x54
 8001e34:	73bb      	strb	r3, [r7, #14]
            break;
 8001e36:	e002      	b.n	8001e3e <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	737b      	strb	r3, [r7, #13]
            break;
 8001e3c:	bf00      	nop
    }

    if (!is_channel_invalid)
 8001e3e:	7b7b      	ldrb	r3, [r7, #13]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d16a      	bne.n	8001f1a <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 8001e44:	f107 010c 	add.w	r1, r7, #12
 8001e48:	7bb8      	ldrb	r0, [r7, #14]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f7ff ff61 	bl	8001d14 <get_regs>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d15f      	bne.n	8001f1e <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	f023 0302 	bic.w	r3, r3, #2
 8001e66:	b25a      	sxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	789b      	ldrb	r3, [r3, #2]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001e7e:	7b3b      	ldrb	r3, [r7, #12]
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	b25a      	sxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	78db      	ldrb	r3, [r3, #3]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d11a      	bne.n	8001edc <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 8001eb0:	7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	f023 0310 	bic.w	r3, r3, #16
 8001eb8:	b25a      	sxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 8001ed0:	7b3b      	ldrb	r3, [r7, #12]
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	733b      	strb	r3, [r7, #12]
 8001eda:	e014      	b.n	8001f06 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	f023 0308 	bic.w	r3, r3, #8
 8001ee4:	b25a      	sxtb	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 8001efc:	7b3b      	ldrb	r3, [r7, #12]
 8001efe:	f023 0310 	bic.w	r3, r3, #16
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001f06:	f107 010c 	add.w	r1, r7, #12
 8001f0a:	7bb8      	ldrb	r0, [r7, #14]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f7ff fd03 	bl	800191a <bmi08a_set_regs>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e001      	b.n	8001f1e <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 8001f1a:	23fb      	movs	r3, #251	; 0xfb
 8001f1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001f34:	2300      	movs	r3, #0
 8001f36:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001f38:	f107 010d 	add.w	r1, r7, #13
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2058      	movs	r0, #88	; 0x58
 8001f42:	f7ff fee7 	bl	8001d14 <get_regs>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d143      	bne.n	8001fda <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	791b      	ldrb	r3, [r3, #4]
 8001f56:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <set_accel_data_ready_int+0x3c>
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d010      	beq.n	8001f86 <set_accel_data_ready_int+0x5c>
 8001f64:	e01f      	b.n	8001fa6 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 8001f66:	7b7b      	ldrb	r3, [r7, #13]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	737b      	strb	r3, [r7, #13]
                break;
 8001f84:	e012      	b.n	8001fac <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	7bbb      	ldrb	r3, [r7, #14]
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	737b      	strb	r3, [r7, #13]
                break;
 8001fa4:	e002      	b.n	8001fac <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001fa6:	23fb      	movs	r3, #251	; 0xfb
 8001fa8:	73fb      	strb	r3, [r7, #15]
                break;
 8001faa:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d112      	bne.n	8001fda <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff28 	bl	8001e0c <set_int_pin_config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d108      	bne.n	8001fda <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001fc8:	f107 010d 	add.w	r1, r7, #13
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2058      	movs	r0, #88	; 0x58
 8001fd2:	f7ff fca2 	bl	800191a <bmi08a_set_regs>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001ff4:	6838      	ldr	r0, [r7, #0]
 8001ff6:	f7ff fe69 	bl	8001ccc <null_ptr_check>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12e      	bne.n	8002064 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <set_accel_sync_data_ready_int+0x32>
 8002012:	2b01      	cmp	r3, #1
 8002014:	d003      	beq.n	800201e <set_accel_sync_data_ready_int+0x38>
 8002016:	e005      	b.n	8002024 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 8002018:	2356      	movs	r3, #86	; 0x56
 800201a:	73bb      	strb	r3, [r7, #14]
                break;
 800201c:	e005      	b.n	800202a <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 800201e:	2357      	movs	r3, #87	; 0x57
 8002020:	73bb      	strb	r3, [r7, #14]
                break;
 8002022:	e002      	b.n	800202a <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002024:	23fb      	movs	r3, #251	; 0xfb
 8002026:	73fb      	strb	r3, [r7, #15]
                break;
 8002028:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 800203e:	f107 010d 	add.w	r1, r7, #13
 8002042:	7bb8      	ldrb	r0, [r7, #14]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	f7ff fc67 	bl	800191a <bmi08a_set_regs>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fed6 	bl	8001e0c <set_int_pin_config>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800207a:	6838      	ldr	r0, [r7, #0]
 800207c:	f7ff fe26 	bl	8001ccc <null_ptr_check>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff febc 	bl	8001e0c <set_int_pin_config>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002098:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80020ae:	2300      	movs	r3, #0
 80020b0:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80020b2:	f107 010d 	add.w	r1, r7, #13
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	2058      	movs	r0, #88	; 0x58
 80020bc:	f7ff fe2a 	bl	8001d14 <get_regs>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80020c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d143      	bne.n	8002154 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	791b      	ldrb	r3, [r3, #4]
 80020d0:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <set_fifo_wm_int+0x3c>
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d010      	beq.n	8002100 <set_fifo_wm_int+0x5c>
 80020de:	e01f      	b.n	8002120 <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	737b      	strb	r3, [r7, #13]
                break;
 80020fe:	e012      	b.n	8002126 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 8002100:	7b7b      	ldrb	r3, [r7, #13]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f023 0320 	bic.w	r3, r3, #32
 8002108:	b25a      	sxtb	r2, r3
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	015b      	lsls	r3, r3, #5
 800210e:	b25b      	sxtb	r3, r3
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	b25b      	sxtb	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b25b      	sxtb	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	737b      	strb	r3, [r7, #13]
                break;
 800211e:	e002      	b.n	8002126 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002120:	23fb      	movs	r3, #251	; 0xfb
 8002122:	73fb      	strb	r3, [r7, #15]
                break;
 8002124:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d112      	bne.n	8002154 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe6b 	bl	8001e0c <set_int_pin_config>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8002142:	f107 010d 	add.w	r1, r7, #13
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	2058      	movs	r0, #88	; 0x58
 800214c:	f7ff fbe5 	bl	800191a <bmi08a_set_regs>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800216a:	2300      	movs	r3, #0
 800216c:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800216e:	f107 010d 	add.w	r1, r7, #13
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	2058      	movs	r0, #88	; 0x58
 8002178:	f7ff fdcc 	bl	8001d14 <get_regs>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d142      	bne.n	800220e <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	791b      	ldrb	r3, [r3, #4]
 800218c:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <set_fifo_full_int+0x3c>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d00f      	beq.n	80021ba <set_fifo_full_int+0x5a>
 800219a:	e01e      	b.n	80021da <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	b25a      	sxtb	r2, r3
 80021a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	737b      	strb	r3, [r7, #13]
                break;
 80021b8:	e012      	b.n	80021e0 <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 80021ba:	7b7b      	ldrb	r3, [r7, #13]
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	f023 0310 	bic.w	r3, r3, #16
 80021c2:	b25a      	sxtb	r2, r3
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	737b      	strb	r3, [r7, #13]
                break;
 80021d8:	e002      	b.n	80021e0 <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80021da:	23fb      	movs	r3, #251	; 0xfb
 80021dc:	73fb      	strb	r3, [r7, #15]
                break;
 80021de:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d112      	bne.n	800220e <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fe0e 	bl	8001e0c <set_int_pin_config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80021f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80021fc:	f107 010d 	add.w	r1, r7, #13
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	2058      	movs	r0, #88	; 0x58
 8002206:	f7ff fb88 	bl	800191a <bmi08a_set_regs>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa22 	bl	8002670 <null_ptr_check>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d115      	bne.n	8002264 <bmi08g_init+0x4a>
    {
        /* Read gyro chip id */
        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8002238:	f107 010e 	add.w	r1, r7, #14
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	2000      	movs	r0, #0
 8002242:	f000 fa39 	bl	80026b8 <get_regs>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <bmi08g_init+0x4a>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d103      	bne.n	8002260 <bmi08g_init+0x46>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8002258:	7bba      	ldrb	r2, [r7, #14]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e001      	b.n	8002264 <bmi08g_init+0x4a>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8002260:	23fd      	movs	r3, #253	; 0xfd
 8002262:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f000 f9f5 	bl	8002670 <null_ptr_check>
 8002286:	4603      	mov	r3, r0
 8002288:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800228a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d111      	bne.n	80022b6 <bmi08g_get_regs+0x46>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 800229e:	7bf8      	ldrb	r0, [r7, #15]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	f000 fa07 	bl	80026b8 <get_regs>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80022ae:	e004      	b.n	80022ba <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80022b0:	23f9      	movs	r3, #249	; 0xf9
 80022b2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80022b4:	e001      	b.n	80022ba <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80022b6:	23ff      	movs	r3, #255	; 0xff
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80022ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f000 f9ca 	bl	8002670 <null_ptr_check>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 80022e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d130      	bne.n	800234a <bmi08g_set_regs+0x84>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d02d      	beq.n	800234a <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d027      	beq.n	8002344 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 80022f4:	7bf8      	ldrb	r0, [r7, #15]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	f000 fa08 	bl	8002710 <set_regs>
 8002300:	4603      	mov	r3, r0
 8002302:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	7cdb      	ldrb	r3, [r3, #19]
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d003      	beq.n	8002314 <bmi08g_set_regs+0x4e>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7cdb      	ldrb	r3, [r3, #19]
 8002310:	2b20      	cmp	r3, #32
 8002312:	d108      	bne.n	8002326 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	4611      	mov	r1, r2
 800231e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002322:	4798      	blx	r3
        if (len > 0)
 8002324:	e013      	b.n	800234e <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	7cdb      	ldrb	r3, [r3, #19]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	6892      	ldr	r2, [r2, #8]
 8002336:	4611      	mov	r1, r2
 8002338:	2002      	movs	r0, #2
 800233a:	4798      	blx	r3
        if (len > 0)
 800233c:	e007      	b.n	800234e <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 800233e:	23fb      	movs	r3, #251	; 0xfb
 8002340:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002342:	e004      	b.n	800234e <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8002344:	23f9      	movs	r3, #249	; 0xf9
 8002346:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002348:	e001      	b.n	800234e <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800234a:	23ff      	movs	r3, #255	; 0xff
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800234e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <bmi08g_get_meas_conf>:
/*!
 * @brief This API reads the gyro odr and range from the sensor, store it in the bmi08x_dev
 * structure instance passed by the user.
 */
int8_t bmi08g_get_meas_conf(struct bmi08x_dev *dev)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f984 	bl	8002670 <null_ptr_check>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d119      	bne.n	80023a8 <bmi08g_get_meas_conf+0x4e>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, data, 2, dev);
 8002374:	f107 010c 	add.w	r1, r7, #12
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	200f      	movs	r0, #15
 800237e:	f7ff ff77 	bl	8002270 <bmi08g_get_regs>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <bmi08g_get_meas_conf+0x4e>
        {
            dev->gyro_cfg.range = data[0];
 800238e:	7b3a      	ldrb	r2, [r7, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	751a      	strb	r2, [r3, #20]
            dev->gyro_cfg.odr = (data[1] & BMI08X_GYRO_BW_MASK);
 8002394:	7b7b      	ldrb	r3, [r7, #13]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	b2da      	uxtb	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	759a      	strb	r2, [r3, #22]
            dev->gyro_cfg.bw = dev->gyro_cfg.odr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7d9a      	ldrb	r2, [r3, #22]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	755a      	strb	r2, [r3, #21]
        }
    }

    return rslt;
 80023a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 80023bc:	2300      	movs	r3, #0
 80023be:	73bb      	strb	r3, [r7, #14]
 80023c0:	2300      	movs	r3, #0
 80023c2:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f953 	bl	8002670 <null_ptr_check>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d166      	bne.n	80024a4 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7d9b      	ldrb	r3, [r3, #22]
 80023da:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7d1b      	ldrb	r3, [r3, #20]
 80023e0:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 80023e2:	7b3b      	ldrb	r3, [r7, #12]
 80023e4:	2b07      	cmp	r3, #7
 80023e6:	d901      	bls.n	80023ec <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d901      	bls.n	80023f6 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d14f      	bne.n	800249c <bmi08g_set_meas_conf+0xe8>
 80023fc:	7bbb      	ldrb	r3, [r7, #14]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d14c      	bne.n	800249c <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8002402:	f107 010a 	add.w	r1, r7, #10
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	2010      	movs	r0, #16
 800240c:	f7ff ff30 	bl	8002270 <bmi08g_get_regs>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d142      	bne.n	80024a2 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 800241c:	7abb      	ldrb	r3, [r7, #10]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	f023 030f 	bic.w	r3, r3, #15
 8002424:	b25a      	sxtb	r2, r3
 8002426:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	b25b      	sxtb	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b25b      	sxtb	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8002438:	f107 010a 	add.w	r1, r7, #10
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	2010      	movs	r0, #16
 8002442:	f7ff ff40 	bl	80022c6 <bmi08g_set_regs>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d127      	bne.n	80024a2 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8002452:	f107 010a 	add.w	r1, r7, #10
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	200f      	movs	r0, #15
 800245c:	f7ff ff08 	bl	8002270 <bmi08g_get_regs>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11a      	bne.n	80024a2 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 800246c:	7abb      	ldrb	r3, [r7, #10]
 800246e:	b25b      	sxtb	r3, r3
 8002470:	f023 0307 	bic.w	r3, r3, #7
 8002474:	b25a      	sxtb	r2, r3
 8002476:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	b25b      	sxtb	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b25b      	sxtb	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8002488:	f107 010a 	add.w	r1, r7, #10
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	200f      	movs	r0, #15
 8002492:	f7ff ff18 	bl	80022c6 <bmi08g_set_regs>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 800249a:	e002      	b.n	80024a2 <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 800249c:	23f8      	movs	r3, #248	; 0xf8
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e000      	b.n	80024a4 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 80024a2:	bf00      	nop
        }
    }

    return rslt;
 80024a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8d7 	bl	8002670 <null_ptr_check>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d13a      	bne.n	8002544 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 80024ce:	f107 010c 	add.w	r1, r7, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	2011      	movs	r0, #17
 80024d8:	f7ff feca 	bl	8002270 <bmi08g_get_regs>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 80024e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d12d      	bne.n	8002544 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7cdb      	ldrb	r3, [r3, #19]
 80024ec:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 80024ee:	7b7b      	ldrb	r3, [r7, #13]
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d104      	bne.n	80024fe <bmi08g_set_power_mode+0x4e>
 80024f4:	7b3b      	ldrb	r3, [r7, #12]
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d101      	bne.n	80024fe <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	2b20      	cmp	r3, #32
 8002502:	d104      	bne.n	800250e <bmi08g_set_power_mode+0x5e>
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d101      	bne.n	800250e <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 800250a:	2300      	movs	r3, #0
 800250c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 8002514:	f107 010d 	add.w	r1, r7, #13
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	2011      	movs	r0, #17
 800251e:	f7ff fed2 	bl	80022c6 <bmi08g_set_regs>
 8002522:	4603      	mov	r3, r0
 8002524:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	4611      	mov	r1, r2
 8002538:	f247 5030 	movw	r0, #30000	; 0x7530
 800253c:	4798      	blx	r3
 800253e:	e001      	b.n	8002544 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8002540:	23fb      	movs	r3, #251	; 0xfb
 8002542:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 800255a:	23c8      	movs	r3, #200	; 0xc8
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f000 f884 	bl	8002670 <null_ptr_check>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 800256c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d140      	bne.n	80025f6 <bmi08g_get_data+0xa6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03d      	beq.n	80025f6 <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 800257a:	f107 010c 	add.w	r1, r7, #12
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2206      	movs	r2, #6
 8002582:	2002      	movs	r0, #2
 8002584:	f7ff fe74 	bl	8002270 <bmi08g_get_regs>
 8002588:	4603      	mov	r3, r0
 800258a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 800258c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d132      	bne.n	80025fa <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8002594:	7b3b      	ldrb	r3, [r7, #12]
 8002596:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8002598:	7b7b      	ldrb	r3, [r7, #13]
 800259a:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800259c:	7d7b      	ldrb	r3, [r7, #21]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	7dbb      	ldrb	r3, [r7, #22]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 80025ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7dbb      	ldrb	r3, [r7, #22]
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 80025cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80025d4:	7c3b      	ldrb	r3, [r7, #16]
 80025d6:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80025dc:	7d7b      	ldrb	r3, [r7, #21]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	7dbb      	ldrb	r3, [r7, #22]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 80025ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80025f4:	e001      	b.n	80025fa <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80025f6:	23ff      	movs	r3, #255	; 0xff
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80025fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f000 f82d 	bl	8002670 <null_ptr_check>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11e      	bne.n	8002660 <bmi08g_set_int_config+0x5a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <bmi08g_set_int_config+0x36>
 8002630:	2b00      	cmp	r3, #0
 8002632:	db11      	blt.n	8002658 <bmi08g_set_int_config+0x52>
 8002634:	3b01      	subs	r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d80e      	bhi.n	8002658 <bmi08g_set_int_config+0x52>
 800263a:	e006      	b.n	800264a <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8be 	bl	80027c0 <set_gyro_data_ready_int>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
                break;
 8002648:	e009      	b.n	800265e <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f929 	bl	80028a4 <set_fifo_int>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
                break;
 8002656:	e002      	b.n	800265e <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8002658:	23f8      	movs	r3, #248	; 0xf8
 800265a:	73fb      	strb	r3, [r7, #15]
                break;
 800265c:	bf00      	nop
        switch (int_config->int_type)
 800265e:	e001      	b.n	8002664 <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002660:	23ff      	movs	r3, #255	; 0xff
 8002662:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00f      	beq.n	800269e <null_ptr_check+0x2e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <null_ptr_check+0x2e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <null_ptr_check+0x2e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 800269e:	23ff      	movs	r3, #255	; 0xff
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e001      	b.n	80026a8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7b1b      	ldrb	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d103      	bne.n	80026dc <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026da:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6a1c      	ldr	r4, [r3, #32]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	7bf8      	ldrb	r0, [r7, #15]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	47a0      	blx	r4
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8002700:	23fe      	movs	r3, #254	; 0xfe
 8002702:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}

08002710 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7b1b      	ldrb	r3, [r3, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d103      	bne.n	8002738 <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002736:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d113      	bne.n	8002766 <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	7bf8      	ldrb	r0, [r7, #15]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	47a0      	blx	r4
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8002762:	23fe      	movs	r3, #254	; 0xfe
 8002764:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d923      	bls.n	80027b4 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 800276c:	2300      	movs	r3, #0
 800276e:	75bb      	strb	r3, [r7, #22]
 8002770:	e01c      	b.n	80027ac <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002776:	7dbb      	ldrb	r3, [r7, #22]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	18d1      	adds	r1, r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	7bf8      	ldrb	r0, [r7, #15]
 8002782:	2201      	movs	r2, #1
 8002784:	47a0      	blx	r4
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 80027a0:	23fe      	movs	r3, #254	; 0xfe
 80027a2:	75fb      	strb	r3, [r7, #23]
                break;
 80027a4:	e006      	b.n	80027b4 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 80027a6:	7dbb      	ldrb	r3, [r7, #22]
 80027a8:	3301      	adds	r3, #1
 80027aa:	75bb      	strb	r3, [r7, #22]
 80027ac:	7dbb      	ldrb	r3, [r7, #22]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d8de      	bhi.n	8002772 <set_regs+0x62>
            }
        }
    }

    return rslt;
 80027b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd90      	pop	{r4, r7, pc}

080027c0 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 80027ca:	2300      	movs	r3, #0
 80027cc:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80027ce:	f107 010c 	add.w	r1, r7, #12
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	2018      	movs	r0, #24
 80027d8:	f7ff ff6e 	bl	80026b8 <get_regs>
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d157      	bne.n	8002898 <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <set_gyro_data_ready_int+0x3c>
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00f      	beq.n	800281a <set_gyro_data_ready_int+0x5a>
 80027fa:	e01b      	b.n	8002834 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 80027fc:	7b3b      	ldrb	r3, [r7, #12]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	b25a      	sxtb	r2, r3
 8002806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	b25b      	sxtb	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b25b      	sxtb	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	733b      	strb	r3, [r7, #12]
                break;
 8002818:	e00f      	b.n	800283a <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 800281a:	7b3b      	ldrb	r3, [r7, #12]
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002822:	b25a      	sxtb	r2, r3
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	b25b      	sxtb	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b25b      	sxtb	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	733b      	strb	r3, [r7, #12]
                break;
 8002832:	e002      	b.n	800283a <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002834:	23fb      	movs	r3, #251	; 0xfb
 8002836:	73fb      	strb	r3, [r7, #15]
                break;
 8002838:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d12a      	bne.n	8002898 <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 8002842:	7b3b      	ldrb	r3, [r7, #12]
 8002844:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	737b      	strb	r3, [r7, #13]
 8002850:	e001      	b.n	8002856 <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 8002852:	2300      	movs	r3, #0
 8002854:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002856:	f107 010c 	add.w	r1, r7, #12
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	2018      	movs	r0, #24
 8002860:	f7ff fd31 	bl	80022c6 <bmi08g_set_regs>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d113      	bne.n	8002898 <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f88c 	bl	8002990 <set_int_pin_config>
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800287c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	1c59      	adds	r1, r3, #1
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	2015      	movs	r0, #21
 8002890:	f7ff fd19 	bl	80022c6 <bmi08g_set_regs>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 80028ae:	2300      	movs	r3, #0
 80028b0:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80028b2:	f107 010c 	add.w	r1, r7, #12
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	2018      	movs	r0, #24
 80028bc:	f7ff fefc 	bl	80026b8 <get_regs>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80028c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d15b      	bne.n	8002984 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <set_fifo_int+0x3c>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d010      	beq.n	8002900 <set_fifo_int+0x5c>
 80028de:	e01f      	b.n	8002920 <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	b25a      	sxtb	r2, r3
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	733b      	strb	r3, [r7, #12]
                break;
 80028fe:	e012      	b.n	8002926 <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 8002900:	7b3b      	ldrb	r3, [r7, #12]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f023 0320 	bic.w	r3, r3, #32
 8002908:	b25a      	sxtb	r2, r3
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	015b      	lsls	r3, r3, #5
 800290e:	b25b      	sxtb	r3, r3
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	b25b      	sxtb	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b25b      	sxtb	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	733b      	strb	r3, [r7, #12]
                break;
 800291e:	e002      	b.n	8002926 <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002920:	23fb      	movs	r3, #251	; 0xfb
 8002922:	73fb      	strb	r3, [r7, #15]
                break;
 8002924:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d12a      	bne.n	8002984 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 800292e:	7b3b      	ldrb	r3, [r7, #12]
 8002930:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 8002938:	2340      	movs	r3, #64	; 0x40
 800293a:	737b      	strb	r3, [r7, #13]
 800293c:	e001      	b.n	8002942 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 800293e:	2300      	movs	r3, #0
 8002940:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002942:	f107 010c 	add.w	r1, r7, #12
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	2018      	movs	r0, #24
 800294c:	f7ff fcbb 	bl	80022c6 <bmi08g_set_regs>
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d113      	bne.n	8002984 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f816 	bl	8002990 <set_int_pin_config>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	1c59      	adds	r1, r3, #1
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	2015      	movs	r0, #21
 800297c:	f7ff fca3 	bl	80022c6 <bmi08g_set_regs>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 800299a:	f107 010e 	add.w	r1, r7, #14
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	2016      	movs	r0, #22
 80029a4:	f7ff fe88 	bl	80026b8 <get_regs>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80029ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d150      	bne.n	8002a56 <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <set_int_pin_config+0x32>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d020      	beq.n	8002a02 <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 80029c0:	e040      	b.n	8002a44 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	789b      	ldrb	r3, [r3, #2]
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 80029e0:	7bbb      	ldrb	r3, [r7, #14]
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f023 0302 	bic.w	r3, r3, #2
 80029e8:	b25a      	sxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	73bb      	strb	r3, [r7, #14]
                break;
 8002a00:	e020      	b.n	8002a44 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	b25a      	sxtb	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	789b      	ldrb	r3, [r3, #2]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	f023 0308 	bic.w	r3, r3, #8
 8002a2a:	b25a      	sxtb	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	73bb      	strb	r3, [r7, #14]
                break;
 8002a42:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002a44:	f107 010e 	add.w	r1, r7, #14
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	2016      	movs	r0, #22
 8002a4e:	f7ff fc3a 	bl	80022c6 <bmi08g_set_regs>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <getTwosComplement>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
}

void getTwosComplement(uint32_t *raw, uint8_t length)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
	if (*raw & ((uint32_t)1 << (length - 1)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <getTwosComplement+0x32>
	{
		*raw -= (uint32_t)1 << length;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
	}
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <read_callibration_data>:


void read_callibration_data (void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b094      	sub	sp, #80	; 0x50
 8002aa4:	af04      	add	r7, sp, #16
	//READ FROM reg 0x10 to 0x21
	uint8_t buffer[18]={0};
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	819a      	strh	r2, [r3, #12]
	HAL_I2C_Mem_Read(&hi2c2, DPS310_ADDR, 0x10, 1, buffer, 18, 1000);
 8002ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abc:	9302      	str	r3, [sp, #8]
 8002abe:	2312      	movs	r3, #18
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	2210      	movs	r2, #16
 8002acc:	21ee      	movs	r1, #238	; 0xee
 8002ace:	4865      	ldr	r0, [pc, #404]	; (8002c64 <read_callibration_data+0x1c4>)
 8002ad0:	f004 f858 	bl	8006b84 <HAL_I2C_Mem_Read>
	uint32_t c00 = ((uint32_t)buffer[3] << 12) | ((uint32_t)buffer[4] << 4) | (((uint32_t)buffer[5] >> 4) & 0x0F);
 8002ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ad8:	031a      	lsls	r2, r3, #12
 8002ada:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4313      	orrs	r3, r2
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
	getTwosComplement(&c00, 20);
 8002af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af6:	2114      	movs	r1, #20
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ffb2 	bl	8002a62 <getTwosComplement>
	dc00 = (int) c00;
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <read_callibration_data+0x1c8>)
 8002b04:	601a      	str	r2, [r3, #0]

	uint32_t c10 = (((uint32_t)buffer[5] & 0x0F) << 16) | ((uint32_t)buffer[6] << 8) | (uint32_t)buffer[7];
 8002b06:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002b10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
	getTwosComplement(&c10, 20);
 8002b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b24:	2114      	movs	r1, #20
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff9b 	bl	8002a62 <getTwosComplement>
	dc10 = (int) c10;
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <read_callibration_data+0x1cc>)
 8002b32:	601a      	str	r2, [r3, #0]

	uint32_t c01 = ((uint32_t)buffer[8] << 8) | (uint32_t)buffer[9];
 8002b34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	623b      	str	r3, [r7, #32]
	getTwosComplement(&c01, 16);
 8002b42:	f107 0320 	add.w	r3, r7, #32
 8002b46:	2110      	movs	r1, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff8a 	bl	8002a62 <getTwosComplement>
	dc01 = (int) c01;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <read_callibration_data+0x1d0>)
 8002b54:	601a      	str	r2, [r3, #0]

	uint32_t c11 = ((uint32_t)buffer[10] << 8) | (uint32_t)buffer[11];
 8002b56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
	getTwosComplement(&c11, 16);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	2110      	movs	r1, #16
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff79 	bl	8002a62 <getTwosComplement>
	dc11 = (int) c11;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <read_callibration_data+0x1d4>)
 8002b76:	601a      	str	r2, [r3, #0]


	uint32_t c20 = ((uint32_t)buffer[12] << 8) | (uint32_t)buffer[13];
 8002b78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
	getTwosComplement(&c20, 16);
 8002b86:	f107 0318 	add.w	r3, r7, #24
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff68 	bl	8002a62 <getTwosComplement>
	dc20 = (int) c20;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <read_callibration_data+0x1d8>)
 8002b98:	601a      	str	r2, [r3, #0]


	uint32_t c21 = ((uint32_t)buffer[14] << 8) | (uint32_t)buffer[15];
 8002b9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
	getTwosComplement(&c21, 16);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2110      	movs	r1, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff57 	bl	8002a62 <getTwosComplement>
	dc21 = (int) c21;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <read_callibration_data+0x1dc>)
 8002bba:	601a      	str	r2, [r3, #0]


	uint32_t c30 = ((uint32_t)buffer[16] << 8) | (uint32_t)buffer[17];
 8002bbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
	getTwosComplement(&c30, 16);
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	2110      	movs	r1, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff46 	bl	8002a62 <getTwosComplement>
	dc30 = (int) c30;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <read_callibration_data+0x1e0>)
 8002bdc:	601a      	str	r2, [r3, #0]

	//WRITE TO REG 0x06
	uint8_t prscfg[1];
	prscfg[0] = 0x04;
 8002bde:	2304      	movs	r3, #4
 8002be0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c2, 0x77 << 1, 0x06, 1, prscfg, 1, 1000);
 8002be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be6:	9302      	str	r3, [sp, #8]
 8002be8:	2301      	movs	r3, #1
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	21ee      	movs	r1, #238	; 0xee
 8002bf8:	481a      	ldr	r0, [pc, #104]	; (8002c64 <read_callibration_data+0x1c4>)
 8002bfa:	f003 feaf 	bl	800695c <HAL_I2C_Mem_Write>


	//WRITE TO REG 0x07
	uint8_t tmpcfg[1];
	tmpcfg[0] = 0x04;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write(&hi2c2, 0x77 << 1, 0x07, 1, tmpcfg, 1, 1000);
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	2207      	movs	r2, #7
 8002c16:	21ee      	movs	r1, #238	; 0xee
 8002c18:	4812      	ldr	r0, [pc, #72]	; (8002c64 <read_callibration_data+0x1c4>)
 8002c1a:	f003 fe9f 	bl	800695c <HAL_I2C_Mem_Write>


	//WRITE TO REG 0x09
	uint8_t cfgreg[1];
	cfgreg[0] = 0x0C;
 8002c1e:	230c      	movs	r3, #12
 8002c20:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, 0x77 << 1, 0x09, 1, cfgreg, 1, 1000);
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	2209      	movs	r2, #9
 8002c34:	21ee      	movs	r1, #238	; 0xee
 8002c36:	480b      	ldr	r0, [pc, #44]	; (8002c64 <read_callibration_data+0x1c4>)
 8002c38:	f003 fe90 	bl	800695c <HAL_I2C_Mem_Write>

	//WRITE 0x07 TO REG 0x08
	uint8_t meascfg[1];
	meascfg[0] = 0x07;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0x77 << 1, 0x08, 1, meascfg, 1, 1000);
 8002c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c44:	9302      	str	r3, [sp, #8]
 8002c46:	2301      	movs	r3, #1
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2301      	movs	r3, #1
 8002c50:	2208      	movs	r2, #8
 8002c52:	21ee      	movs	r1, #238	; 0xee
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <read_callibration_data+0x1c4>)
 8002c56:	f003 fe81 	bl	800695c <HAL_I2C_Mem_Write>

}
 8002c5a:	bf00      	nop
 8002c5c:	3740      	adds	r7, #64	; 0x40
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000041c 	.word	0x2000041c
 8002c68:	200003ac 	.word	0x200003ac
 8002c6c:	200003b0 	.word	0x200003b0
 8002c70:	200003b4 	.word	0x200003b4
 8002c74:	200003b8 	.word	0x200003b8
 8002c78:	200003bc 	.word	0x200003bc
 8002c7c:	200003c0 	.word	0x200003c0
 8002c80:	200003c4 	.word	0x200003c4
 8002c84:	00000000 	.word	0x00000000

08002c88 <DPS310_GetPress>:

float DPS310_GetPress (sens_pkt_flt* pkt)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08e      	sub	sp, #56	; 0x38
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	6078      	str	r0, [r7, #4]
	int val1, val2 = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

	//READ REG 0x03 TO REG 0x05
	uint8_t tmp[3]={0};
 8002c94:	4bb0      	ldr	r3, [pc, #704]	; (8002f58 <DPS310_GetPress+0x2d0>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	833b      	strh	r3, [r7, #24]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Mem_Read(&hi2c2, 0x77 << 1, 0x03, 1, tmp, 3, 1000);
 8002c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	f107 0318 	add.w	r3, r7, #24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	21ee      	movs	r1, #238	; 0xee
 8002cb4:	48a9      	ldr	r0, [pc, #676]	; (8002f5c <DPS310_GetPress+0x2d4>)
 8002cb6:	f003 ff65 	bl	8006b84 <HAL_I2C_Mem_Read>
	uint32_t tmpraw =((tmp[0] << 16) |(tmp[1] << 8) | (tmp[2]));
 8002cba:	7e3b      	ldrb	r3, [r7, #24]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	7e7b      	ldrb	r3, [r7, #25]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	7eba      	ldrb	r2, [r7, #26]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
	getTwosComplement(&tmpraw, 24);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	2118      	movs	r1, #24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fec6 	bl	8002a62 <getTwosComplement>
	int traw = (int) tmpraw;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	623b      	str	r3, [r7, #32]
	val=traw;
 8002cda:	4aa1      	ldr	r2, [pc, #644]	; (8002f60 <DPS310_GetPress+0x2d8>)
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	6013      	str	r3, [r2, #0]

	//READ REG 0x00 TO REG 0x02
	uint8_t prs[3]={0};
 8002ce0:	4b9d      	ldr	r3, [pc, #628]	; (8002f58 <DPS310_GetPress+0x2d0>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	823b      	strh	r3, [r7, #16]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Read(&hi2c2, 0x77 << 1, 0x00, 1, prs, 3, 1000);
 8002cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	21ee      	movs	r1, #238	; 0xee
 8002d00:	4896      	ldr	r0, [pc, #600]	; (8002f5c <DPS310_GetPress+0x2d4>)
 8002d02:	f003 ff3f 	bl	8006b84 <HAL_I2C_Mem_Read>
	uint32_t prsraw = prs[0] << 16 | prs[1] << 8 | prs[2];
 8002d06:	7c3b      	ldrb	r3, [r7, #16]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	7c7b      	ldrb	r3, [r7, #17]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	7cba      	ldrb	r2, [r7, #18]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
	getTwosComplement(&prsraw, 24);
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	2118      	movs	r1, #24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fea0 	bl	8002a62 <getTwosComplement>
	int praw = (int) prsraw;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	61fb      	str	r3, [r7, #28]
	val2=praw;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24

	//CALC PRESSURE
	prawsc = (float) val2/k;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d34:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8002f64 <DPS310_GetPress+0x2dc>
 8002d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d40:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]
	trawsc = (float) val/k;
 8002d46:	4b86      	ldr	r3, [pc, #536]	; (8002f60 <DPS310_GetPress+0x2d8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d52:	eddf 7a84 	vldr	s15, [pc, #528]	; 8002f64 <DPS310_GetPress+0x2dc>
 8002d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d5e:	4b83      	ldr	r3, [pc, #524]	; (8002f6c <DPS310_GetPress+0x2e4>)
 8002d60:	edc3 7a00 	vstr	s15, [r3]
	pcomp = dc00+prawsc*(dc10+prawsc*(dc20+prawsc*dc30))+trawsc*dc01+trawsc*prawsc*(dc11+prawsc*dc21);
 8002d64:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <DPS310_GetPress+0x2e8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d70:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <DPS310_GetPress+0x2ec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <DPS310_GetPress+0x2f0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002d88:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <DPS310_GetPress+0x2f4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002d94:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002da2:	4b71      	ldr	r3, [pc, #452]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <DPS310_GetPress+0x2f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dca:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <DPS310_GetPress+0x2e4>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <DPS310_GetPress+0x2e4>)
 8002dda:	edd3 6a00 	vldr	s13, [r3]
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de8:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <DPS310_GetPress+0x2fc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <DPS310_GetPress+0x300>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <DPS310_GetPress+0x2e0>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e0a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <DPS310_GetPress+0x304>)
 8002e18:	edc3 7a00 	vstr	s15, [r3]
	pcomp = pcomp/100;
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <DPS310_GetPress+0x304>)
 8002e1e:	ed93 7a00 	vldr	s14, [r3]
 8002e22:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002f90 <DPS310_GetPress+0x308>
 8002e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2a:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <DPS310_GetPress+0x304>)
 8002e2c:	edc3 7a00 	vstr	s15, [r3]
	altitude = (float) 44330 * (1-pow(pcomp/1015,1/5.255));
 8002e30:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <DPS310_GetPress+0x304>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002f94 <DPS310_GetPress+0x30c>
 8002e3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e3e:	ee16 0a90 	vmov	r0, s13
 8002e42:	f7fd fb81 	bl	8000548 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8002f38 <DPS310_GetPress+0x2b0>
 8002e4e:	ec43 2b10 	vmov	d0, r2, r3
 8002e52:	f015 f845 	bl	8017ee0 <pow>
 8002e56:	ec53 2b10 	vmov	r2, r3, d0
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	494e      	ldr	r1, [pc, #312]	; (8002f98 <DPS310_GetPress+0x310>)
 8002e60:	f7fd fa12 	bl	8000288 <__aeabi_dsub>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	a334      	add	r3, pc, #208	; (adr r3, 8002f40 <DPS310_GetPress+0x2b8>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fbc1 	bl	80005f8 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd feb3 	bl	8000be8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <DPS310_GetPress+0x314>)
 8002e86:	6013      	str	r3, [r2, #0]
	//is there a more robust way of doin this?
	//probably
	if (iter < 50)
 8002e88:	4b45      	ldr	r3, [pc, #276]	; (8002fa0 <DPS310_GetPress+0x318>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b31      	cmp	r3, #49	; 0x31
 8002e8e:	dc2c      	bgt.n	8002eea <DPS310_GetPress+0x262>
	{
		initial = 0.9 * altitude + 0.1 * initial;
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <DPS310_GetPress+0x314>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb57 	bl	8000548 <__aeabi_f2d>
 8002e9a:	a32b      	add	r3, pc, #172	; (adr r3, 8002f48 <DPS310_GetPress+0x2c0>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fbaa 	bl	80005f8 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <DPS310_GetPress+0x31c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb49 	bl	8000548 <__aeabi_f2d>
 8002eb6:	a326      	add	r3, pc, #152	; (adr r3, 8002f50 <DPS310_GetPress+0x2c8>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fb9c 	bl	80005f8 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd f9e0 	bl	800028c <__adddf3>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fe88 	bl	8000be8 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <DPS310_GetPress+0x31c>)
 8002edc:	6013      	str	r3, [r2, #0]
		//HAL_UART_Transmit(&huart2, "Starting altitude\n", strlen("Starting altitude\n"), HAL_MAX_DELAY);
		iter++;
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <DPS310_GetPress+0x318>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <DPS310_GetPress+0x318>)
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e00a      	b.n	8002f00 <DPS310_GetPress+0x278>
	}
	else
	{
		dif = altitude - initial;
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <DPS310_GetPress+0x314>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <DPS310_GetPress+0x31c>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <DPS310_GetPress+0x320>)
 8002efc:	edc3 7a00 	vstr	s15, [r3]
		//HAL_UART_Transmit(&huart2, "Diff from starting point\n", strlen("Diff from starting point\n"), HAL_MAX_DELAY);
	}


	pkt->stale_bits = pkt->stale_bits | 0b1<<1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	785b      	ldrb	r3, [r3, #1]
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	705a      	strb	r2, [r3, #1]
	pkt->bar_altitude = altitude;
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <DPS310_GetPress+0x314>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
	pkt->bar_press = pcomp;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <DPS310_GetPress+0x304>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
	pkt->bar_temp = trawsc;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <DPS310_GetPress+0x2e4>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

	return dif;
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <DPS310_GetPress+0x320>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	ee07 3a90 	vmov	s15, r3

}
 8002f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	ccd9456c 	.word	0xccd9456c
 8002f3c:	3fc85b95 	.word	0x3fc85b95
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40e5a540 	.word	0x40e5a540
 8002f48:	cccccccd 	.word	0xcccccccd
 8002f4c:	3feccccc 	.word	0x3feccccc
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	3fb99999 	.word	0x3fb99999
 8002f58:	08018d88 	.word	0x08018d88
 8002f5c:	2000041c 	.word	0x2000041c
 8002f60:	2000038c 	.word	0x2000038c
 8002f64:	0003e000 	.word	0x0003e000
 8002f68:	20000394 	.word	0x20000394
 8002f6c:	20000390 	.word	0x20000390
 8002f70:	200003ac 	.word	0x200003ac
 8002f74:	200003b0 	.word	0x200003b0
 8002f78:	200003bc 	.word	0x200003bc
 8002f7c:	200003c4 	.word	0x200003c4
 8002f80:	200003b4 	.word	0x200003b4
 8002f84:	200003b8 	.word	0x200003b8
 8002f88:	200003c0 	.word	0x200003c0
 8002f8c:	20000398 	.word	0x20000398
 8002f90:	42c80000 	.word	0x42c80000
 8002f94:	447dc000 	.word	0x447dc000
 8002f98:	3ff00000 	.word	0x3ff00000
 8002f9c:	200003a4 	.word	0x200003a4
 8002fa0:	2000039c 	.word	0x2000039c
 8002fa4:	200003a0 	.word	0x200003a0
 8002fa8:	200003a8 	.word	0x200003a8

08002fac <DPS310_Start>:

void DPS310_Start (void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	read_callibration_data();
 8002fb0:	f7ff fd76 	bl	8002aa0 <read_callibration_data>
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	72fb      	strb	r3, [r7, #11]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685c      	ldr	r4, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68d8      	ldr	r0, [r3, #12]
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	7af9      	ldrb	r1, [r7, #11]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	47a0      	blx	r4
 8002fdc:	6178      	str	r0, [r7, #20]

  return ret;
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	72fb      	strb	r3, [r7, #11]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681c      	ldr	r4, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68d8      	ldr	r0, [r3, #12]
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	7af9      	ldrb	r1, [r7, #11]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	47a0      	blx	r4
 800300c:	6178      	str	r0, [r7, #20]

  return ret;
 800300e:	697b      	ldr	r3, [r7, #20]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <iis2mdc_from_lsb_to_mgauss>:
  * @{
  *
  */

float_t iis2mdc_from_lsb_to_mgauss(int16_t lsb)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 1.5f;
 8003022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003032:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003036:	eeb0 0a67 	vmov.f32	s0, s15
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <iis2mdc_from_lsb_to_celsius>:

float_t iis2mdc_from_lsb_to_celsius(int16_t lsb)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 8.0f) + 25.0f);
 800304e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800305a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800305e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003062:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003066:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003084:	f107 0208 	add.w	r2, r7, #8
 8003088:	2301      	movs	r3, #1
 800308a:	2160      	movs	r1, #96	; 0x60
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff93 	bl	8002fb8 <iis2mdc_read_reg>
 8003092:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	7a3b      	ldrb	r3, [r7, #8]
 80030a4:	f362 0301 	bfi	r3, r2, #0, #2
 80030a8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80030aa:	f107 0208 	add.w	r2, r7, #8
 80030ae:	2301      	movs	r3, #1
 80030b0:	2160      	movs	r1, #96	; 0x60
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff98 	bl	8002fe8 <iis2mdc_write_reg>
 80030b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80030d0:	f107 0208 	add.w	r2, r7, #8
 80030d4:	2301      	movs	r3, #1
 80030d6:	2160      	movs	r1, #96	; 0x60
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff6d 	bl	8002fb8 <iis2mdc_read_reg>
 80030de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	7a3b      	ldrb	r3, [r7, #8]
 80030f0:	f362 0383 	bfi	r3, r2, #2, #2
 80030f4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80030f6:	f107 0208 	add.w	r2, r7, #8
 80030fa:	2301      	movs	r3, #1
 80030fc:	2160      	movs	r1, #96	; 0x60
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff72 	bl	8002fe8 <iis2mdc_write_reg>
 8003104:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <iis2mdc_offset_temp_comp_set>:
  * @param  val      change the values of comp_temp_en in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800311c:	f107 0208 	add.w	r2, r7, #8
 8003120:	2301      	movs	r3, #1
 8003122:	2160      	movs	r1, #96	; 0x60
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff47 	bl	8002fb8 <iis2mdc_read_reg>
 800312a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <iis2mdc_offset_temp_comp_set+0x42>
  {
    reg.comp_temp_en = val;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	7a3b      	ldrb	r3, [r7, #8]
 800313c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003140:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003142:	f107 0208 	add.w	r2, r7, #8
 8003146:	2301      	movs	r3, #1
 8003148:	2160      	movs	r1, #96	; 0x60
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <iis2mdc_write_reg>
 8003150:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <iis2mdc_set_rst_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_set_rst_mode_set(stmdev_ctx_t *ctx,
                                 iis2mdc_set_rst_t val)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_b_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_B, (uint8_t *) &reg, 1);
 8003168:	f107 0208 	add.w	r2, r7, #8
 800316c:	2301      	movs	r3, #1
 800316e:	2161      	movs	r1, #97	; 0x61
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff21 	bl	8002fb8 <iis2mdc_read_reg>
 8003176:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <iis2mdc_set_rst_mode_set+0x42>
  {
    reg.set_rst = (uint8_t)val;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	b2da      	uxtb	r2, r3
 8003186:	7a3b      	ldrb	r3, [r7, #8]
 8003188:	f362 0342 	bfi	r3, r2, #1, #2
 800318c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_B, (uint8_t *) &reg, 1);
 800318e:	f107 0208 	add.w	r2, r7, #8
 8003192:	2301      	movs	r3, #1
 8003194:	2161      	movs	r1, #97	; 0x61
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ff26 	bl	8002fe8 <iis2mdc_write_reg>
 800319c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80031b4:	f107 0208 	add.w	r2, r7, #8
 80031b8:	2301      	movs	r3, #1
 80031ba:	2162      	movs	r1, #98	; 0x62
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fefb 	bl	8002fb8 <iis2mdc_read_reg>
 80031c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	7a3b      	ldrb	r3, [r7, #8]
 80031d4:	f362 1304 	bfi	r3, r2, #4, #1
 80031d8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80031da:	f107 0208 	add.w	r2, r7, #8
 80031de:	2301      	movs	r3, #1
 80031e0:	2162      	movs	r1, #98	; 0x62
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff00 	bl	8002fe8 <iis2mdc_write_reg>
 80031e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <iis2mdc_mag_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_mag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  iis2mdc_status_reg_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_STATUS_REG, (uint8_t *) &reg, 1);
 80031fe:	f107 0208 	add.w	r2, r7, #8
 8003202:	2301      	movs	r3, #1
 8003204:	2167      	movs	r1, #103	; 0x67
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fed6 	bl	8002fb8 <iis2mdc_read_reg>
 800320c:	60f8      	str	r0, [r7, #12]
  *val = reg.zyxda;
 800320e:	7a3b      	ldrb	r3, [r7, #8]
 8003210:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	701a      	strb	r2, [r3, #0]

  return ret;
 800321c:	68fb      	ldr	r3, [r7, #12]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8003230:	f107 020c 	add.w	r2, r7, #12
 8003234:	2306      	movs	r3, #6
 8003236:	2168      	movs	r1, #104	; 0x68
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff febd 	bl	8002fb8 <iis2mdc_read_reg>
 800323e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003240:	7b7b      	ldrb	r3, [r7, #13]
 8003242:	b21a      	sxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324e:	b29b      	uxth	r3, r3
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	b29a      	uxth	r2, r3
 8003254:	7b3b      	ldrb	r3, [r7, #12]
 8003256:	b29b      	uxth	r3, r3
 8003258:	4413      	add	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	b21a      	sxth	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3302      	adds	r3, #2
 8003268:	b212      	sxth	r2, r2
 800326a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	3302      	adds	r3, #2
 8003270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003274:	b29b      	uxth	r3, r3
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	b29a      	uxth	r2, r3
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4413      	add	r3, r2
 8003280:	b29a      	uxth	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	3302      	adds	r3, #2
 8003286:	b212      	sxth	r2, r2
 8003288:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800328a:	7c7a      	ldrb	r2, [r7, #17]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3304      	adds	r3, #4
 8003290:	b212      	sxth	r2, r2
 8003292:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	3304      	adds	r3, #4
 8003298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329c:	b29b      	uxth	r3, r3
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	7c3b      	ldrb	r3, [r7, #16]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	3304      	adds	r3, #4
 80032ae:	b212      	sxth	r2, r2
 80032b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80032b2:	697b      	ldr	r3, [r7, #20]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <iis2mdc_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_TEMP_OUT_L_REG, buff, 2);
 80032c6:	f107 0208 	add.w	r2, r7, #8
 80032ca:	2302      	movs	r3, #2
 80032cc:	216e      	movs	r1, #110	; 0x6e
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fe72 	bl	8002fb8 <iis2mdc_read_reg>
 80032d4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80032d6:	7a7b      	ldrb	r3, [r7, #9]
 80032d8:	b21a      	sxth	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	7a3b      	ldrb	r3, [r7, #8]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 800330c:	2301      	movs	r3, #1
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	214f      	movs	r1, #79	; 0x4f
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff fe50 	bl	8002fb8 <iis2mdc_read_reg>
 8003318:	60f8      	str	r0, [r7, #12]

  return ret;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <iis2mdc_reset_set>:
  * @param  val      change the values of soft_rst in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003330:	f107 0208 	add.w	r2, r7, #8
 8003334:	2301      	movs	r3, #1
 8003336:	2160      	movs	r1, #96	; 0x60
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fe3d 	bl	8002fb8 <iis2mdc_read_reg>
 800333e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <iis2mdc_reset_set+0x42>
  {
    reg.soft_rst = val;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	7a3b      	ldrb	r3, [r7, #8]
 8003350:	f362 1345 	bfi	r3, r2, #5, #1
 8003354:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003356:	f107 0208 	add.w	r2, r7, #8
 800335a:	2301      	movs	r3, #1
 800335c:	2160      	movs	r1, #96	; 0x60
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fe42 	bl	8002fe8 <iis2mdc_write_reg>
 8003364:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <iis2mdc_reset_get>:
  * @param  val      change the values of soft_rst in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800337a:	f107 0208 	add.w	r2, r7, #8
 800337e:	2301      	movs	r3, #1
 8003380:	2160      	movs	r1, #96	; 0x60
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fe18 	bl	8002fb8 <iis2mdc_read_reg>
 8003388:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_rst;
 800338a:	7a3b      	ldrb	r3, [r7, #8]
 800338c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	701a      	strb	r2, [r3, #0]

  return ret;
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80033ae:	f107 0208 	add.w	r2, r7, #8
 80033b2:	2301      	movs	r3, #1
 80033b4:	2162      	movs	r1, #98	; 0x62
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fdfe 	bl	8002fb8 <iis2mdc_read_reg>
 80033bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	7a3b      	ldrb	r3, [r7, #8]
 80033ce:	f362 0341 	bfi	r3, r2, #1, #1
 80033d2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80033d4:	f107 0208 	add.w	r2, r7, #8
 80033d8:	2301      	movs	r3, #1
 80033da:	2162      	movs	r1, #98	; 0x62
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fe03 	bl	8002fe8 <iis2mdc_write_reg>
 80033e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80033f8:	1d39      	adds	r1, r7, #4
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	2201      	movs	r2, #1
 8003400:	4803      	ldr	r0, [pc, #12]	; (8003410 <__io_putchar+0x20>)
 8003402:	f009 fbfb 	bl	800cbfc <HAL_UART_Transmit>
	return ch;
 8003406:	687b      	ldr	r3, [r7, #4]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000770 	.word	0x20000770

08003414 <init_bmi08x>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 800341a:	483a      	ldr	r0, [pc, #232]	; (8003504 <init_bmi08x+0xf0>)
 800341c:	f7fe fa00 	bl	8001820 <bmi08a_init>
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4619      	mov	r1, r3
 800342a:	4837      	ldr	r0, [pc, #220]	; (8003508 <init_bmi08x+0xf4>)
 800342c:	f001 fbd8 	bl	8004be0 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <init_bmi08x+0x3a>
		rslt = bmi08g_init(&bmi08xdev);
 8003438:	4832      	ldr	r0, [pc, #200]	; (8003504 <init_bmi08x+0xf0>)
 800343a:	f7fe feee 	bl	800221a <bmi08g_init>
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	4619      	mov	r1, r3
 8003448:	4830      	ldr	r0, [pc, #192]	; (800350c <init_bmi08x+0xf8>)
 800344a:	f001 fbc9 	bl	8004be0 <bmi08x_error_codes_print_result>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d14f      	bne.n	80034f6 <init_bmi08x+0xe2>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <init_bmi08x+0xf0>)
 8003458:	220c      	movs	r2, #12
 800345a:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <init_bmi08x+0xf0>)
 800345e:	7b5b      	ldrb	r3, [r3, #13]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <init_bmi08x+0x58>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <init_bmi08x+0xf0>)
 8003466:	2203      	movs	r2, #3
 8003468:	741a      	strb	r2, [r3, #16]
 800346a:	e006      	b.n	800347a <init_bmi08x+0x66>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <init_bmi08x+0xf0>)
 800346e:	7b5b      	ldrb	r3, [r3, #13]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <init_bmi08x+0x66>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <init_bmi08x+0xf0>)
 8003476:	2203      	movs	r2, #3
 8003478:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <init_bmi08x+0xf0>)
 800347c:	2200      	movs	r2, #0
 800347e:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 8003480:	4b20      	ldr	r3, [pc, #128]	; (8003504 <init_bmi08x+0xf0>)
 8003482:	220a      	movs	r2, #10
 8003484:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 8003486:	481f      	ldr	r0, [pc, #124]	; (8003504 <init_bmi08x+0xf0>)
 8003488:	f7fe fb1a 	bl	8001ac0 <bmi08a_set_power_mode>
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	4619      	mov	r1, r3
 8003496:	481e      	ldr	r0, [pc, #120]	; (8003510 <init_bmi08x+0xfc>)
 8003498:	f001 fba2 	bl	8004be0 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 800349c:	4819      	ldr	r0, [pc, #100]	; (8003504 <init_bmi08x+0xf0>)
 800349e:	f7fe fa82 	bl	80019a6 <bmi08a_set_meas_conf>
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4819      	ldr	r0, [pc, #100]	; (8003514 <init_bmi08x+0x100>)
 80034ae:	f001 fb97 	bl	8004be0 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <init_bmi08x+0xf0>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_125_DPS;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <init_bmi08x+0xf0>)
 80034ba:	2204      	movs	r2, #4
 80034bc:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <init_bmi08x+0xf0>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <init_bmi08x+0xf0>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 80034ca:	480e      	ldr	r0, [pc, #56]	; (8003504 <init_bmi08x+0xf0>)
 80034cc:	f7fe fff0 	bl	80024b0 <bmi08g_set_power_mode>
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4619      	mov	r1, r3
 80034da:	480f      	ldr	r0, [pc, #60]	; (8003518 <init_bmi08x+0x104>)
 80034dc:	f001 fb80 	bl	8004be0 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <init_bmi08x+0xf0>)
 80034e2:	f7fe ff67 	bl	80023b4 <bmi08g_set_meas_conf>
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	4619      	mov	r1, r3
 80034f0:	480a      	ldr	r0, [pc, #40]	; (800351c <init_bmi08x+0x108>)
 80034f2:	f001 fb75 	bl	8004be0 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200009e0 	.word	0x200009e0
 8003508:	08018d8c 	.word	0x08018d8c
 800350c:	08018d98 	.word	0x08018d98
 8003510:	08018da4 	.word	0x08018da4
 8003514:	08018dbc 	.word	0x08018dbc
 8003518:	08018dd4 	.word	0x08018dd4
 800351c:	08018dec 	.word	0x08018dec

08003520 <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 8003532:	2200      	movs	r2, #0
 8003534:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 8003538:	2200      	movs	r2, #0
 800353a:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 800353e:	2201      	movs	r2, #1
 8003540:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 8003544:	2201      	movs	r2, #1
 8003546:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 8003548:	4920      	ldr	r1, [pc, #128]	; (80035cc <enable_bmi08x_interrupt+0xac>)
 800354a:	481f      	ldr	r0, [pc, #124]	; (80035c8 <enable_bmi08x_interrupt+0xa8>)
 800354c:	f7fe fb6c 	bl	8001c28 <bmi08a_set_int_config>
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	4619      	mov	r1, r3
 800355a:	481d      	ldr	r0, [pc, #116]	; (80035d0 <enable_bmi08x_interrupt+0xb0>)
 800355c:	f001 fb40 	bl	8004be0 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d128      	bne.n	80035ba <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 8003570:	2200      	movs	r2, #0
 8003572:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 8003576:	2200      	movs	r2, #0
 8003578:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 800357c:	2201      	movs	r2, #1
 800357e:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 8003582:	2201      	movs	r2, #1
 8003584:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 8003586:	4911      	ldr	r1, [pc, #68]	; (80035cc <enable_bmi08x_interrupt+0xac>)
 8003588:	4812      	ldr	r0, [pc, #72]	; (80035d4 <enable_bmi08x_interrupt+0xb4>)
 800358a:	f7ff f83c 	bl	8002606 <bmi08g_set_int_config>
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	4619      	mov	r1, r3
 8003598:	480f      	ldr	r0, [pc, #60]	; (80035d8 <enable_bmi08x_interrupt+0xb8>)
 800359a:	f001 fb21 	bl	8004be0 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 800359e:	1db9      	adds	r1, r7, #6
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <enable_bmi08x_interrupt+0xac>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	2018      	movs	r0, #24
 80035a6:	f7fe fe63 	bl	8002270 <bmi08g_get_regs>
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4809      	ldr	r0, [pc, #36]	; (80035dc <enable_bmi08x_interrupt+0xbc>)
 80035b6:	f001 fb13 	bl	8004be0 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000a10 	.word	0x20000a10
 80035cc:	200009e0 	.word	0x200009e0
 80035d0:	08018e04 	.word	0x08018e04
 80035d4:	20000a18 	.word	0x20000a18
 80035d8:	08018e1c 	.word	0x08018e1c
 80035dc:	08018e34 	.word	0x08018e34

080035e0 <ABSF>:

/* END of IMU ----------------------------------------------------------------*/


/*  Magnetometer -------------------------------------------------------------*/
static inline float ABSF(float _x){
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (_x < 0.0f) ? -(_x) : _x;
 80035ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d504      	bpl.n	8003602 <ABSF+0x22>
 80035f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035fc:	eef1 7a67 	vneg.f32	s15, s15
 8003600:	e001      	b.n	8003606 <ABSF+0x26>
 8003602:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <iis2mdc_flush_samples>:

static int iis2mdc_flush_samples(stmdev_ctx_t *dev_ctx){
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	axis3bit16_t dummy;
	int samples = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

	iis2mdc_mag_data_ready_get(dev_ctx, &reg);
 8003620:	f107 0313 	add.w	r3, r7, #19
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fde4 	bl	80031f4 <iis2mdc_mag_data_ready_get>

	if(reg){
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <iis2mdc_flush_samples+0x30>
		iis2mdc_magnetic_raw_get(dev_ctx, dummy.i16bit);
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fdf4 	bl	8003226 <iis2mdc_magnetic_raw_get>
		samples++;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
	}

	return samples;
 8003644:	697b      	ldr	r3, [r7, #20]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <test_self_test_iis2mdc>:

static int test_self_test_iis2mdc(stmdev_ctx_t *dev_ctx)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b096      	sub	sp, #88	; 0x58
 8003654:	af08      	add	r7, sp, #32
 8003656:	6078      	str	r0, [r7, #4]
  uint8_t reg;
  float media[3] = { 0.0f, 0.0f, 0.0f };
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  float mediast[3] = { 0.0f, 0.0f, 0.0f };
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
  uint8_t match[3] = { 0, 0, 0 };
 800367c:	4ac4      	ldr	r2, [pc, #784]	; (8003990 <test_self_test_iis2mdc+0x340>)
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	4611      	mov	r1, r2
 8003686:	8019      	strh	r1, [r3, #0]
 8003688:	3302      	adds	r3, #2
 800368a:	0c12      	lsrs	r2, r2, #16
 800368c:	701a      	strb	r2, [r3, #0]
  uint8_t j = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint16_t i = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint8_t k = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint8_t axis;
  int result = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Restore default configuration */
  iis2mdc_reset_set(dev_ctx, PROPERTY_ENABLE);
 80036a2:	2101      	movs	r1, #1
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fe3d 	bl	8003324 <iis2mdc_reset_set>

  do {
    iis2mdc_reset_get(dev_ctx, &rst);
 80036aa:	49ba      	ldr	r1, [pc, #744]	; (8003994 <test_self_test_iis2mdc+0x344>)
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fe5f 	bl	8003370 <iis2mdc_reset_get>
  } while (rst);
 80036b2:	4bb8      	ldr	r3, [pc, #736]	; (8003994 <test_self_test_iis2mdc+0x344>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f7      	bne.n	80036aa <test_self_test_iis2mdc+0x5a>

  iis2mdc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 80036ba:	2101      	movs	r1, #1
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fd73 	bl	80031a8 <iis2mdc_block_data_update_set>
  /* Set / Reset sensor mode */
  iis2mdc_set_rst_mode_set(dev_ctx, IIS2MDC_SENS_OFF_CANC_EVERY_ODR);
 80036c2:	2101      	movs	r1, #1
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fd49 	bl	800315c <iis2mdc_set_rst_mode_set>
  /* Enable temperature compensation */
  iis2mdc_offset_temp_comp_set(dev_ctx, PROPERTY_ENABLE);
 80036ca:	2101      	movs	r1, #1
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fd1f 	bl	8003110 <iis2mdc_offset_temp_comp_set>
  /* Set device in continuous mode */
  iis2mdc_operating_mode_set(dev_ctx, IIS2MDC_CONTINUOUS_MODE);
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fccf 	bl	8003078 <iis2mdc_operating_mode_set>
  /* Set Output Data Rate to 100 Hz */
  iis2mdc_data_rate_set(dev_ctx, IIS2MDC_ODR_100Hz);
 80036da:	2103      	movs	r1, #3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fcf1 	bl	80030c4 <iis2mdc_data_rate_set>
  /* Power up and wait for 20 ms for stable output */
  platform_delay(20);
 80036e2:	2014      	movs	r0, #20
 80036e4:	f001 fb72 	bl	8004dcc <platform_delay>
  /* Flush old samples */
  iis2mdc_flush_samples(dev_ctx);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff93 	bl	8003614 <iis2mdc_flush_samples>

  do {
    iis2mdc_mag_data_ready_get(dev_ctx, &reg);
 80036ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fd7d 	bl	80031f4 <iis2mdc_mag_data_ready_get>

    if (reg) {
 80036fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d041      	beq.n	8003786 <test_self_test_iis2mdc+0x136>
      /* Read magnetic field data */
      memset(test_data_raw_magnetic[i].i16bit, 0x00, 3 * sizeof(int16_t));
 8003702:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4aa2      	ldr	r2, [pc, #648]	; (8003998 <test_self_test_iis2mdc+0x348>)
 800370e:	4413      	add	r3, r2
 8003710:	2206      	movs	r2, #6
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f00f fc13 	bl	8012f40 <memset>
      iis2mdc_magnetic_raw_get(dev_ctx, test_data_raw_magnetic[i].i16bit);
 800371a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4a9c      	ldr	r2, [pc, #624]	; (8003998 <test_self_test_iis2mdc+0x348>)
 8003726:	4413      	add	r3, r2
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fd7b 	bl	8003226 <iis2mdc_magnetic_raw_get>

      for (axis = 0; axis < 3; axis++)
 8003730:	2300      	movs	r3, #0
 8003732:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003736:	e01f      	b.n	8003778 <test_self_test_iis2mdc+0x128>
        test_magnetic_mG[i][axis] =
          iis2mdc_from_lsb_to_mgauss(test_data_raw_magnetic[i].i16bit[axis]);
 8003738:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800373a:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800373e:	4896      	ldr	r0, [pc, #600]	; (8003998 <test_self_test_iis2mdc+0x348>)
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	440b      	add	r3, r1
 8003748:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
        test_magnetic_mG[i][axis] =
 800374c:	8ebc      	ldrh	r4, [r7, #52]	; 0x34
 800374e:	f897 5032 	ldrb.w	r5, [r7, #50]	; 0x32
          iis2mdc_from_lsb_to_mgauss(test_data_raw_magnetic[i].i16bit[axis]);
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fc60 	bl	8003018 <iis2mdc_from_lsb_to_mgauss>
 8003758:	eef0 7a40 	vmov.f32	s15, s0
        test_magnetic_mG[i][axis] =
 800375c:	4a8f      	ldr	r2, [pc, #572]	; (800399c <test_self_test_iis2mdc+0x34c>)
 800375e:	4623      	mov	r3, r4
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4423      	add	r3, r4
 8003764:	442b      	add	r3, r5
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	edc3 7a00 	vstr	s15, [r3]
      for (axis = 0; axis < 3; axis++)
 800376e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003772:	3301      	adds	r3, #1
 8003774:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003778:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800377c:	2b02      	cmp	r3, #2
 800377e:	d9db      	bls.n	8003738 <test_self_test_iis2mdc+0xe8>

      i++;
 8003780:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003782:	3301      	adds	r3, #1
 8003784:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
  } while (i < SELF_TEST_SAMPLES);
 8003786:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003788:	2b31      	cmp	r3, #49	; 0x31
 800378a:	d9b0      	bls.n	80036ee <test_self_test_iis2mdc+0x9e>

  for (k = 0; k < 3; k++) {
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003792:	e048      	b.n	8003826 <test_self_test_iis2mdc+0x1d6>
    for (j = 0; j < SELF_TEST_SAMPLES; j++) {
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800379a:	e023      	b.n	80037e4 <test_self_test_iis2mdc+0x194>
      media[k] += test_magnetic_mG[j][k];
 800379c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3338      	adds	r3, #56	; 0x38
 80037a4:	443b      	add	r3, r7
 80037a6:	3b1c      	subs	r3, #28
 80037a8:	ed93 7a00 	vldr	s14, [r3]
 80037ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80037b0:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 80037b4:	4879      	ldr	r0, [pc, #484]	; (800399c <test_self_test_iis2mdc+0x34c>)
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	440b      	add	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3338      	adds	r3, #56	; 0x38
 80037d2:	443b      	add	r3, r7
 80037d4:	3b1c      	subs	r3, #28
 80037d6:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < SELF_TEST_SAMPLES; j++) {
 80037da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037de:	3301      	adds	r3, #1
 80037e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80037e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037e8:	2b31      	cmp	r3, #49	; 0x31
 80037ea:	d9d7      	bls.n	800379c <test_self_test_iis2mdc+0x14c>
    }

    media[k] = (media[k] / j);
 80037ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	3338      	adds	r3, #56	; 0x38
 80037f4:	443b      	add	r3, r7
 80037f6:	3b1c      	subs	r3, #28
 80037f8:	edd3 6a00 	vldr	s13, [r3]
 80037fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800380c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3338      	adds	r3, #56	; 0x38
 8003814:	443b      	add	r3, r7
 8003816:	3b1c      	subs	r3, #28
 8003818:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 3; k++) {
 800381c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003820:	3301      	adds	r3, #1
 8003822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800382a:	2b02      	cmp	r3, #2
 800382c:	d9b2      	bls.n	8003794 <test_self_test_iis2mdc+0x144>
  }

  /* Enable self test mode */
  iis2mdc_self_test_set(dev_ctx, PROPERTY_ENABLE);
 800382e:	2101      	movs	r1, #1
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fdb6 	bl	80033a2 <iis2mdc_self_test_set>
  platform_delay(60);
 8003836:	203c      	movs	r0, #60	; 0x3c
 8003838:	f001 fac8 	bl	8004dcc <platform_delay>
  i = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	86bb      	strh	r3, [r7, #52]	; 0x34
  /* Flush old samples */
  iis2mdc_flush_samples(dev_ctx);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fee7 	bl	8003614 <iis2mdc_flush_samples>

  do {
    iis2mdc_mag_data_ready_get(dev_ctx, &reg);
 8003846:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fcd1 	bl	80031f4 <iis2mdc_mag_data_ready_get>

    if (reg) {
 8003852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003856:	2b00      	cmp	r3, #0
 8003858:	d041      	beq.n	80038de <test_self_test_iis2mdc+0x28e>
      /* Read accelerometer data */
      memset(test_data_raw_magnetic[i].i16bit, 0x00, 3 * sizeof(int16_t));
 800385a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4a4c      	ldr	r2, [pc, #304]	; (8003998 <test_self_test_iis2mdc+0x348>)
 8003866:	4413      	add	r3, r2
 8003868:	2206      	movs	r2, #6
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f00f fb67 	bl	8012f40 <memset>
      iis2mdc_magnetic_raw_get(dev_ctx, test_data_raw_magnetic[i].i16bit);
 8003872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4a46      	ldr	r2, [pc, #280]	; (8003998 <test_self_test_iis2mdc+0x348>)
 800387e:	4413      	add	r3, r2
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fccf 	bl	8003226 <iis2mdc_magnetic_raw_get>

      for (axis = 0; axis < 3; axis++)
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800388e:	e01f      	b.n	80038d0 <test_self_test_iis2mdc+0x280>
        test_magnetic_mG[i][axis] =
          iis2mdc_from_lsb_to_mgauss(test_data_raw_magnetic[i].i16bit[axis]);
 8003890:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003892:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003896:	4840      	ldr	r0, [pc, #256]	; (8003998 <test_self_test_iis2mdc+0x348>)
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	440b      	add	r3, r1
 80038a0:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
        test_magnetic_mG[i][axis] =
 80038a4:	8ebc      	ldrh	r4, [r7, #52]	; 0x34
 80038a6:	f897 5032 	ldrb.w	r5, [r7, #50]	; 0x32
          iis2mdc_from_lsb_to_mgauss(test_data_raw_magnetic[i].i16bit[axis]);
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fbb4 	bl	8003018 <iis2mdc_from_lsb_to_mgauss>
 80038b0:	eef0 7a40 	vmov.f32	s15, s0
        test_magnetic_mG[i][axis] =
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <test_self_test_iis2mdc+0x34c>)
 80038b6:	4623      	mov	r3, r4
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4423      	add	r3, r4
 80038bc:	442b      	add	r3, r5
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	edc3 7a00 	vstr	s15, [r3]
      for (axis = 0; axis < 3; axis++)
 80038c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038ca:	3301      	adds	r3, #1
 80038cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80038d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9db      	bls.n	8003890 <test_self_test_iis2mdc+0x240>

      i++;
 80038d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038da:	3301      	adds	r3, #1
 80038dc:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
  } while (i < SELF_TEST_SAMPLES);
 80038de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038e0:	2b31      	cmp	r3, #49	; 0x31
 80038e2:	d9b0      	bls.n	8003846 <test_self_test_iis2mdc+0x1f6>

  for (k = 0; k < 3; k++) {
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80038ea:	e048      	b.n	800397e <test_self_test_iis2mdc+0x32e>
    for (j = 0; j < SELF_TEST_SAMPLES; j++) {
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80038f2:	e023      	b.n	800393c <test_self_test_iis2mdc+0x2ec>
      mediast[k] += test_magnetic_mG[j][k];
 80038f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3338      	adds	r3, #56	; 0x38
 80038fc:	443b      	add	r3, r7
 80038fe:	3b28      	subs	r3, #40	; 0x28
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003908:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800390c:	4823      	ldr	r0, [pc, #140]	; (800399c <test_self_test_iis2mdc+0x34c>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	440b      	add	r3, r1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4403      	add	r3, r0
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	443b      	add	r3, r7
 800392c:	3b28      	subs	r3, #40	; 0x28
 800392e:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < SELF_TEST_SAMPLES; j++) {
 8003932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003936:	3301      	adds	r3, #1
 8003938:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800393c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003940:	2b31      	cmp	r3, #49	; 0x31
 8003942:	d9d7      	bls.n	80038f4 <test_self_test_iis2mdc+0x2a4>
    }

    mediast[k] = (mediast[k] / j);
 8003944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	443b      	add	r3, r7
 800394e:	3b28      	subs	r3, #40	; 0x28
 8003950:	edd3 6a00 	vldr	s13, [r3]
 8003954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	443b      	add	r3, r7
 800396e:	3b28      	subs	r3, #40	; 0x28
 8003970:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 3; k++) {
 8003974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003978:	3301      	adds	r3, #1
 800397a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800397e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003982:	2b02      	cmp	r3, #2
 8003984:	d9b2      	bls.n	80038ec <test_self_test_iis2mdc+0x29c>
  }

  /* Check for all axis self test value range */
  for (k = 0; k < 3; k++) {
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800398c:	e09c      	b.n	8003ac8 <test_self_test_iis2mdc+0x478>
 800398e:	bf00      	nop
 8003990:	08018e74 	.word	0x08018e74
 8003994:	20000db9 	.word	0x20000db9
 8003998:	20000a34 	.word	0x20000a34
 800399c:	20000b60 	.word	0x20000b60
 80039a0:	43fa0000 	.word	0x43fa0000
    if ((ABSF(mediast[k] - media[k]) >= ST_MIN_POS) &&
 80039a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	3338      	adds	r3, #56	; 0x38
 80039ac:	443b      	add	r3, r7
 80039ae:	3b28      	subs	r3, #40	; 0x28
 80039b0:	ed93 7a00 	vldr	s14, [r3]
 80039b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3338      	adds	r3, #56	; 0x38
 80039bc:	443b      	add	r3, r7
 80039be:	3b1c      	subs	r3, #28
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	f7ff fe08 	bl	80035e0 <ABSF>
 80039d0:	eef0 7a40 	vmov.f32	s15, s0
 80039d4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80039d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	db28      	blt.n	8003a34 <test_self_test_iis2mdc+0x3e4>
        (ABSF(mediast[k] - media[k]) <= ST_MAX_POS)) {
 80039e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3338      	adds	r3, #56	; 0x38
 80039ea:	443b      	add	r3, r7
 80039ec:	3b28      	subs	r3, #40	; 0x28
 80039ee:	ed93 7a00 	vldr	s14, [r3]
 80039f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	3338      	adds	r3, #56	; 0x38
 80039fa:	443b      	add	r3, r7
 80039fc:	3b1c      	subs	r3, #28
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a06:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0a:	f7ff fde9 	bl	80035e0 <ABSF>
 8003a0e:	eef0 7a40 	vmov.f32	s15, s0
    if ((ABSF(mediast[k] - media[k]) >= ST_MIN_POS) &&
 8003a12:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 80039a0 <test_self_test_iis2mdc+0x350>
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d809      	bhi.n	8003a34 <test_self_test_iis2mdc+0x3e4>
      match[k] = 1;
 8003a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a24:	3338      	adds	r3, #56	; 0x38
 8003a26:	443b      	add	r3, r7
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f803 2c2c 	strb.w	r2, [r3, #-44]
      result += 1;
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	3301      	adds	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    sprintf((char *)tx_buffer, "%d: |%f| <= |%f| <= |%f| %s\r\n", k, ST_MIN_POS, ABSF(mediast[k] - media[k]), ST_MAX_POS, match[k] == 1 ? "PASSED" : "FAILED");
 8003a34:	f897 4033 	ldrb.w	r4, [r7, #51]	; 0x33
 8003a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	443b      	add	r3, r7
 8003a42:	3b28      	subs	r3, #40	; 0x28
 8003a44:	ed93 7a00 	vldr	s14, [r3]
 8003a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3338      	adds	r3, #56	; 0x38
 8003a50:	443b      	add	r3, r7
 8003a52:	3b1c      	subs	r3, #28
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a60:	f7ff fdbe 	bl	80035e0 <ABSF>
 8003a64:	ee10 3a10 	vmov	r3, s0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fd6d 	bl	8000548 <__aeabi_f2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8003a76:	3138      	adds	r1, #56	; 0x38
 8003a78:	4439      	add	r1, r7
 8003a7a:	f811 1c2c 	ldrb.w	r1, [r1, #-44]
 8003a7e:	2901      	cmp	r1, #1
 8003a80:	d101      	bne.n	8003a86 <test_self_test_iis2mdc+0x436>
 8003a82:	491d      	ldr	r1, [pc, #116]	; (8003af8 <test_self_test_iis2mdc+0x4a8>)
 8003a84:	e000      	b.n	8003a88 <test_self_test_iis2mdc+0x438>
 8003a86:	491d      	ldr	r1, [pc, #116]	; (8003afc <test_self_test_iis2mdc+0x4ac>)
 8003a88:	9106      	str	r1, [sp, #24]
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	491c      	ldr	r1, [pc, #112]	; (8003b00 <test_self_test_iis2mdc+0x4b0>)
 8003a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <test_self_test_iis2mdc+0x4b4>)
 8003a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	4918      	ldr	r1, [pc, #96]	; (8003b08 <test_self_test_iis2mdc+0x4b8>)
 8003aa6:	4819      	ldr	r0, [pc, #100]	; (8003b0c <test_self_test_iis2mdc+0x4bc>)
 8003aa8:	f010 fa02 	bl	8013eb0 <siprintf>
    tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 8003aac:	4817      	ldr	r0, [pc, #92]	; (8003b0c <test_self_test_iis2mdc+0x4bc>)
 8003aae:	f7fc fb8f 	bl	80001d0 <strlen>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4814      	ldr	r0, [pc, #80]	; (8003b0c <test_self_test_iis2mdc+0x4bc>)
 8003aba:	f001 f973 	bl	8004da4 <tx_com>
  for (k = 0; k < 3; k++) {
 8003abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	f67f af69 	bls.w	80039a4 <test_self_test_iis2mdc+0x354>
  }

  /* Disable self test mode */
  iis2mdc_operating_mode_set(dev_ctx, IIS2MDC_POWER_DOWN);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff facf 	bl	8003078 <iis2mdc_operating_mode_set>
  iis2mdc_self_test_set(dev_ctx, PROPERTY_DISABLE);
 8003ada:	2100      	movs	r1, #0
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fc60 	bl	80033a2 <iis2mdc_self_test_set>
  return result == 3 ? 0 : -1;
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d101      	bne.n	8003aec <test_self_test_iis2mdc+0x49c>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e001      	b.n	8003af0 <test_self_test_iis2mdc+0x4a0>
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3738      	adds	r7, #56	; 0x38
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdb0      	pop	{r4, r5, r7, pc}
 8003af8:	08018e44 	.word	0x08018e44
 8003afc:	08018e4c 	.word	0x08018e4c
 8003b00:	407f4000 	.word	0x407f4000
 8003b04:	402e0000 	.word	0x402e0000
 8003b08:	08018e54 	.word	0x08018e54
 8003b0c:	20000dbc 	.word	0x20000dbc

08003b10 <mag_init_routine>:

static int mag_init_routine(stmdev_ctx_t *dev_ctx){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
		platform_delay(BOOT_TIME);
 8003b18:	2014      	movs	r0, #20
 8003b1a:	f001 f957 	bl	8004dcc <platform_delay>

	  /* Check device id */

	  iis2mdc_device_id_get(dev_ctx, &whoamI);
 8003b1e:	4924      	ldr	r1, [pc, #144]	; (8003bb0 <mag_init_routine+0xa0>)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fbee 	bl	8003302 <iis2mdc_device_id_get>
	  sprintf((char*) tx_buffer, "whoamI: %d\r\n", whoamI);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <mag_init_routine+0xa0>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4921      	ldr	r1, [pc, #132]	; (8003bb4 <mag_init_routine+0xa4>)
 8003b2e:	4822      	ldr	r0, [pc, #136]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b30:	f010 f9be 	bl	8013eb0 <siprintf>
	  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8003b34:	4820      	ldr	r0, [pc, #128]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b36:	f7fc fb4b 	bl	80001d0 <strlen>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	4619      	mov	r1, r3
 8003b40:	481d      	ldr	r0, [pc, #116]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b42:	f001 f92f 	bl	8004da4 <tx_com>

	  if (whoamI != IIS2MDC_ID) {
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <mag_init_routine+0xa0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d00c      	beq.n	8003b68 <mag_init_routine+0x58>
		  sprintf((char*) tx_buffer, "whoamI failed\r\n");
 8003b4e:	491b      	ldr	r1, [pc, #108]	; (8003bbc <mag_init_routine+0xac>)
 8003b50:	4819      	ldr	r0, [pc, #100]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b52:	f010 f9ad 	bl	8013eb0 <siprintf>
		  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8003b56:	4818      	ldr	r0, [pc, #96]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b58:	f7fc fb3a 	bl	80001d0 <strlen>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	4815      	ldr	r0, [pc, #84]	; (8003bb8 <mag_init_routine+0xa8>)
 8003b64:	f001 f91e 	bl	8004da4 <tx_com>
	  }

	  test_self_test_iis2mdc(dev_ctx); ///Magnetometer
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fd71 	bl	8003650 <test_self_test_iis2mdc>


	  do { //reset sensor state
		  iis2mdc_reset_get(dev_ctx, &rst);
 8003b6e:	4914      	ldr	r1, [pc, #80]	; (8003bc0 <mag_init_routine+0xb0>)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fbfd 	bl	8003370 <iis2mdc_reset_get>
	  } while (rst);
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <mag_init_routine+0xb0>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f7      	bne.n	8003b6e <mag_init_routine+0x5e>

		/* Enable Block Data Update */
		iis2mdc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 8003b7e:	2101      	movs	r1, #1
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fb11 	bl	80031a8 <iis2mdc_block_data_update_set>
		/* Set Output Data Rate */
		iis2mdc_data_rate_set(dev_ctx, IIS2MDC_ODR_10Hz); //can change this as needed
 8003b86:	2100      	movs	r1, #0
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fa9b 	bl	80030c4 <iis2mdc_data_rate_set>
		/* Set / Reset sensor mode */
		iis2mdc_set_rst_mode_set(dev_ctx, IIS2MDC_SENS_OFF_CANC_EVERY_ODR);
 8003b8e:	2101      	movs	r1, #1
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fae3 	bl	800315c <iis2mdc_set_rst_mode_set>
		/* Enable temperature compensation */
		iis2mdc_offset_temp_comp_set(dev_ctx, PROPERTY_ENABLE);
 8003b96:	2101      	movs	r1, #1
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fab9 	bl	8003110 <iis2mdc_offset_temp_comp_set>
		/* Set device in continuous mode */
		iis2mdc_operating_mode_set(dev_ctx, IIS2MDC_CONTINUOUS_MODE);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fa69 	bl	8003078 <iis2mdc_operating_mode_set>

	return 0;
 8003ba6:	2300      	movs	r3, #0

}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000db8 	.word	0x20000db8
 8003bb4:	08018e78 	.word	0x08018e78
 8003bb8:	20000dbc 	.word	0x20000dbc
 8003bbc:	08018e88 	.word	0x08018e88
 8003bc0:	20000db9 	.word	0x20000db9
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b0ba      	sub	sp, #232	; 0xe8
 8003bcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bce:	f001 ff74 	bl	8005aba <HAL_Init>

  /* USER CODE BEGIN Init */

  gpkt.dev_id = 0b1000101;
 8003bd2:	4ba8      	ldr	r3, [pc, #672]	; (8003e74 <main+0x2ac>)
 8003bd4:	2245      	movs	r2, #69	; 0x45
 8003bd6:	701a      	strb	r2, [r3, #0]
  gpkt.stale_bits = 0;
 8003bd8:	4ba6      	ldr	r3, [pc, #664]	; (8003e74 <main+0x2ac>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	705a      	strb	r2, [r3, #1]

  //packet data init
  gpkt.timestamp = 0;
 8003bde:	4ba5      	ldr	r3, [pc, #660]	; (8003e74 <main+0x2ac>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
  //  for(int i = 0; i < 3; i++){
  //	  pkt.imu_acc.i16bit[i] = 0;
  //	  pkt.imu_gyr.i16bit[i] = 0;
  //	  pkt.mag.i16bit[i] = 0;
  //  }
  gpkt.imu_acc_x = 0;
 8003be4:	4ba3      	ldr	r3, [pc, #652]	; (8003e74 <main+0x2ac>)
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  gpkt.imu_acc_y = 0;
 8003bec:	4ba1      	ldr	r3, [pc, #644]	; (8003e74 <main+0x2ac>)
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	60da      	str	r2, [r3, #12]
  gpkt.imu_acc_z = 0;
 8003bf4:	4b9f      	ldr	r3, [pc, #636]	; (8003e74 <main+0x2ac>)
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
  gpkt.imu_gyr_x = 0;
 8003bfc:	4b9d      	ldr	r3, [pc, #628]	; (8003e74 <main+0x2ac>)
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	615a      	str	r2, [r3, #20]
  gpkt.imu_gyr_y = 0;
 8003c04:	4b9b      	ldr	r3, [pc, #620]	; (8003e74 <main+0x2ac>)
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
  gpkt.imu_gyr_z = 0;
 8003c0c:	4b99      	ldr	r3, [pc, #612]	; (8003e74 <main+0x2ac>)
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
  gpkt.mag_x = 0;
 8003c14:	4b97      	ldr	r3, [pc, #604]	; (8003e74 <main+0x2ac>)
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
  gpkt.mag_y = 0;
 8003c1c:	4b95      	ldr	r3, [pc, #596]	; (8003e74 <main+0x2ac>)
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
  gpkt.mag_z = 0;
 8003c24:	4b93      	ldr	r3, [pc, #588]	; (8003e74 <main+0x2ac>)
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
  gpkt.airspeed = 0;
 8003c2c:	4b91      	ldr	r3, [pc, #580]	; (8003e74 <main+0x2ac>)
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
  gpkt.differential_pressure = 0;
 8003c34:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <main+0x2ac>)
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
  gpkt.bar_press = 0;
 8003c3c:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <main+0x2ac>)
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
  gpkt.bar_temp = 0;
 8003c44:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <main+0x2ac>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  gpkt.gps_lat = 0;
 8003c4c:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <main+0x2ac>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
  gpkt.gps_long = 0;
 8003c54:	4b87      	ldr	r3, [pc, #540]	; (8003e74 <main+0x2ac>)
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
  GNSS_StateHandle GNSS_Handle;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c5c:	f000 fa9e 	bl	800419c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //mag device handlers
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8003c60:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <main+0x2b0>)
 8003c62:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8003c64:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <main+0x2b4>)
 8003c66:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &MAG_BUS;
 8003c68:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <main+0x2b8>)
 8003c6a:	617b      	str	r3, [r7, #20]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c6c:	f000 fd7c 	bl	8004768 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c70:	f000 fd18 	bl	80046a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8003c74:	f000 fba8 	bl	80043c8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8003c78:	f000 fae6 	bl	8004248 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003c7c:	f000 fce2 	bl	8004644 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8003c80:	f000 fb62 	bl	8004348 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003c84:	f000 fcae 	bl	80045e4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003c88:	f000 fb1e 	bl	80042c8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003c8c:	f000 fbda 	bl	8004444 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003c90:	f00e fb58 	bl	8012344 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8003c94:	f000 fc76 	bl	8004584 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8003c98:	f000 fc22 	bl	80044e0 <MX_TIM15_Init>



  /* IMU main variables ----------------------------------------------------*/
  	int8_t rslt;
  	float x = 0.0, y = 0.0, z = 0.0;
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  	uint8_t imu_status = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		 * Sensor variant given as parameter
		 *          For BMI085 : BMI085_VARIANT
		 *          For BMI088 : BMI088_VARIANT
		 */

	HAL_TIM_Base_Start(&htim2);
 8003cba:	4872      	ldr	r0, [pc, #456]	; (8003e84 <main+0x2bc>)
 8003cbc:	f008 fb1e 	bl	800c2fc <HAL_TIM_Base_Start>
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI088_VARIANT);
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4870      	ldr	r0, [pc, #448]	; (8003e88 <main+0x2c0>)
 8003cc6:	f000 ff45 	bl	8004b54 <bmi08x_interface_init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 8003cd0:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	486d      	ldr	r0, [pc, #436]	; (8003e8c <main+0x2c4>)
 8003cd8:	f000 ff82 	bl	8004be0 <bmi08x_error_codes_print_result>


	if (rslt == BMI08X_OK) {
 8003cdc:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d142      	bne.n	8003d6a <main+0x1a2>

		rslt = init_bmi08x();
 8003ce4:	f7ff fb96 	bl	8003414 <init_bmi08x>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		bmi08x_error_codes_print_result("init_bmi08x", rslt);
 8003cee:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4866      	ldr	r0, [pc, #408]	; (8003e90 <main+0x2c8>)
 8003cf6:	f000 ff73 	bl	8004be0 <bmi08x_error_codes_print_result>
		printf("Initialized :3 \r\n");
 8003cfa:	4866      	ldr	r0, [pc, #408]	; (8003e94 <main+0x2cc>)
 8003cfc:	f010 f8ca 	bl	8013e94 <puts>

//		/* Enable data ready interrupts */
		if (rslt == BMI08X_OK) {
 8003d00:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <main+0x156>
			rslt = enable_bmi08x_interrupt();
 8003d08:	f7ff fc0a 	bl	8003520 <enable_bmi08x_interrupt>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 8003d12:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003d16:	4619      	mov	r1, r3
 8003d18:	485f      	ldr	r0, [pc, #380]	; (8003e98 <main+0x2d0>)
 8003d1a:	f000 ff61 	bl	8004be0 <bmi08x_error_codes_print_result>
		}

		if (rslt == BMI08X_OK) {
 8003d1e:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d121      	bne.n	8003d6a <main+0x1a2>
			printf(
					"ODR : %d  BW : %d   RANGE : %d \r\n",
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d26:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <main+0x2c0>)
 8003d28:	7c9b      	ldrb	r3, [r3, #18]
			printf(
 8003d2a:	4619      	mov	r1, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d2c:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <main+0x2c0>)
 8003d2e:	7c5b      	ldrb	r3, [r3, #17]
			printf(
 8003d30:	461a      	mov	r2, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d32:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <main+0x2c0>)
 8003d34:	7c1b      	ldrb	r3, [r3, #16]
			printf(
 8003d36:	4859      	ldr	r0, [pc, #356]	; (8003e9c <main+0x2d4>)
 8003d38:	f010 f826 	bl	8013d88 <iprintf>
			rslt = bmi08g_get_meas_conf(&bmi08xdev);
 8003d3c:	4852      	ldr	r0, [pc, #328]	; (8003e88 <main+0x2c0>)
 8003d3e:	f7fe fb0c 	bl	800235a <bmi08g_get_meas_conf>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			bmi08x_error_codes_print_result("bmi08g_get_meas_conf", rslt);
 8003d48:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4854      	ldr	r0, [pc, #336]	; (8003ea0 <main+0x2d8>)
 8003d50:	f000 ff46 	bl	8004be0 <bmi08x_error_codes_print_result>
			printf(
					"ODR : %d  BW : %d   RANGE : %d \r\n",
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <main+0x2c0>)
 8003d56:	7c9b      	ldrb	r3, [r3, #18]
			printf(
 8003d58:	4619      	mov	r1, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <main+0x2c0>)
 8003d5c:	7c5b      	ldrb	r3, [r3, #17]
			printf(
 8003d5e:	461a      	mov	r2, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8003d60:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <main+0x2c0>)
 8003d62:	7c1b      	ldrb	r3, [r3, #16]
			printf(
 8003d64:	484d      	ldr	r0, [pc, #308]	; (8003e9c <main+0x2d4>)
 8003d66:	f010 f80f 	bl	8013d88 <iprintf>
	}
  /* END OF IMU ----------------------------------------------------*/

  /*  Magnetometer -------------------------------------------------------*/

	mag_init_routine(&dev_ctx);
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fece 	bl	8003b10 <mag_init_routine>

  /*  End of Magnetometer -------------------------------------------------------------*/

  /*  Barometer -------------------------------------------------------*/

  DPS310_Start();
 8003d74:	f7ff f91a 	bl	8002fac <DPS310_Start>

  /*  End of Barometer -------------------------------------------------------------*/

  /* GPS -------------------------------------------------------------*/

  GNSS_Init(&GNSS_Handle, &huart3);
 8003d78:	f107 0318 	add.w	r3, r7, #24
 8003d7c:	4949      	ldr	r1, [pc, #292]	; (8003ea4 <main+0x2dc>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f93a 	bl	8000ff8 <GNSS_Init>
  GNSS_LoadConfig(&GNSS_Handle);
 8003d84:	f107 0318 	add.w	r3, r7, #24
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd fd1d 	bl	80017c8 <GNSS_LoadConfig>
  HAL_Delay(250);
 8003d8e:	20fa      	movs	r0, #250	; 0xfa
 8003d90:	f001 ff08 	bl	8005ba4 <HAL_Delay>
  GNSS_SetMode(&GNSS_Handle, 5); //Airborne 1g mode
 8003d94:	f107 0318 	add.w	r3, r7, #24
 8003d98:	2105      	movs	r1, #5
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fa30 	bl	8001200 <GNSS_SetMode>
  GNSS_GetUniqID(&GNSS_Handle);
 8003da0:	f107 0318 	add.w	r3, r7, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fd f9d7 	bl	8001158 <GNSS_GetUniqID>
  GNSS_ParseBuffer(&GNSS_Handle);
 8003daa:	f107 0318 	add.w	r3, r7, #24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f96b 	bl	800108a <GNSS_ParseBuffer>
	printf("Unique ID: %04X %04X %04X %04X %04X %04X \n\r",
			GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
 8003db4:	7f3b      	ldrb	r3, [r7, #28]
	printf("Unique ID: %04X %04X %04X %04X %04X %04X \n\r",
 8003db6:	4618      	mov	r0, r3
			GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
 8003db8:	7f7b      	ldrb	r3, [r7, #29]
	printf("Unique ID: %04X %04X %04X %04X %04X %04X \n\r",
 8003dba:	461c      	mov	r4, r3
			GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
 8003dbc:	7fbb      	ldrb	r3, [r7, #30]
	printf("Unique ID: %04X %04X %04X %04X %04X %04X \n\r",
 8003dbe:	461d      	mov	r5, r3
			GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
			GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
 8003dc2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003dc6:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	printf("Unique ID: %04X %04X %04X %04X %04X %04X \n\r",
 8003dca:	9102      	str	r1, [sp, #8]
 8003dcc:	9201      	str	r2, [sp, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	4834      	ldr	r0, [pc, #208]	; (8003ea8 <main+0x2e0>)
 8003dd8:	f00f ffd6 	bl	8013d88 <iprintf>
  /*  DP Sensor -------------------------------------------------------*/


  /*  End of DP Sensor -------------------------------------------------------*/

  init_done = true;
 8003ddc:	4b33      	ldr	r3, [pc, #204]	; (8003eac <main+0x2e4>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim15);
 8003de2:	4833      	ldr	r0, [pc, #204]	; (8003eb0 <main+0x2e8>)
 8003de4:	f008 fad6 	bl	800c394 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	gpkt.timestamp = HAL_GetTick();
 8003de8:	f001 fed0 	bl	8005b8c <HAL_GetTick>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <main+0x2ac>)
 8003df0:	6053      	str	r3, [r2, #4]
	//printf("Time: %d ms \r\n", (int) HAL_GetTick());

	/* IMU while loop -------------------needs to be functionalized-----------------------------------------*/

	if (accel_rdy) {
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <main+0x2ec>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 808f 	beq.w	8003f1c <main+0x354>
		rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <main+0x2c0>)
 8003e00:	482d      	ldr	r0, [pc, #180]	; (8003eb8 <main+0x2f0>)
 8003e02:	f7fd feb6 	bl	8001b72 <bmi08a_get_data>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 8003e0c:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003e10:	4619      	mov	r1, r3
 8003e12:	482a      	ldr	r0, [pc, #168]	; (8003ebc <main+0x2f4>)
 8003e14:	f000 fee4 	bl	8004be0 <bmi08x_error_codes_print_result>
		accel_rdy = 0;
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <main+0x2ec>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
			printf(
					"ACCEL Acc_Raw_X : %d  Acc_Raw_Y : %d   Acc_Raw_Z : %d ",
					 bmi08x_accel.x, bmi08x_accel.y,
					bmi08x_accel.z);
		}
		gpkt.stale_bits = gpkt.stale_bits | IMU_ACC_NEW;
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <main+0x2ac>)
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	f043 0320 	orr.w	r3, r3, #32
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <main+0x2ac>)
 8003e2a:	705a      	strb	r2, [r3, #1]
//		pkt.imu_acc_x= bmi08x_accel.x;
//		pkt.imu_acc_y = bmi08x_accel.y;
//		pkt.imu_acc_z = bmi08x_accel.z;


		if (bmi08xdev.variant == BMI085_VARIANT) {
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <main+0x2c0>)
 8003e2e:	7b5b      	ldrb	r3, [r3, #13]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d145      	bne.n	8003ec0 <main+0x2f8>
			/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
			x = lsb_to_mps2(bmi08x_accel.x, 16, 16);
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <main+0x2f0>)
 8003e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fd68 	bl	8004914 <lsb_to_mps2>
 8003e44:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
			y = lsb_to_mps2(bmi08x_accel.y, 16, 16);
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <main+0x2f0>)
 8003e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	2110      	movs	r1, #16
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fd5e 	bl	8004914 <lsb_to_mps2>
 8003e58:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
			z = lsb_to_mps2(bmi08x_accel.z, 16, 16);
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <main+0x2f0>)
 8003e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e62:	2210      	movs	r2, #16
 8003e64:	2110      	movs	r1, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fd54 	bl	8004914 <lsb_to_mps2>
 8003e6c:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
 8003e70:	e048      	b.n	8003f04 <main+0x33c>
 8003e72:	bf00      	nop
 8003e74:	20000990 	.word	0x20000990
 8003e78:	08004d31 	.word	0x08004d31
 8003e7c:	08004d6b 	.word	0x08004d6b
 8003e80:	200003c8 	.word	0x200003c8
 8003e84:	200006d8 	.word	0x200006d8
 8003e88:	200009e0 	.word	0x200009e0
 8003e8c:	08018e98 	.word	0x08018e98
 8003e90:	08018eb0 	.word	0x08018eb0
 8003e94:	08018ebc 	.word	0x08018ebc
 8003e98:	08018ed0 	.word	0x08018ed0
 8003e9c:	08018ee8 	.word	0x08018ee8
 8003ea0:	08018f0c 	.word	0x08018f0c
 8003ea4:	20000878 	.word	0x20000878
 8003ea8:	08018f24 	.word	0x08018f24
 8003eac:	2000098e 	.word	0x2000098e
 8003eb0:	20000724 	.word	0x20000724
 8003eb4:	200009dc 	.word	0x200009dc
 8003eb8:	20000a20 	.word	0x20000a20
 8003ebc:	08018f50 	.word	0x08018f50
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8003ec0:	4ba7      	ldr	r3, [pc, #668]	; (8004160 <main+0x598>)
 8003ec2:	7b5b      	ldrb	r3, [r3, #13]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d11d      	bne.n	8003f04 <main+0x33c>
			/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
			x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 8003ec8:	4ba6      	ldr	r3, [pc, #664]	; (8004164 <main+0x59c>)
 8003eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	2118      	movs	r1, #24
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fd1e 	bl	8004914 <lsb_to_mps2>
 8003ed8:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
			y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 8003edc:	4ba1      	ldr	r3, [pc, #644]	; (8004164 <main+0x59c>)
 8003ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	2118      	movs	r1, #24
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fd14 	bl	8004914 <lsb_to_mps2>
 8003eec:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
			z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 8003ef0:	4b9c      	ldr	r3, [pc, #624]	; (8004164 <main+0x59c>)
 8003ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	2118      	movs	r1, #24
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd0a 	bl	8004914 <lsb_to_mps2>
 8003f00:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
		/* Print the data in m/s2. */
			printf(
					"\t  Acc_ms2_X = %4.2f,  Acc_ms2_Y = %4.2f,  Acc_ms2_Z = %4.2f\n\r",
					x, y, z);
		}
		gpkt.imu_acc_x= x;
 8003f04:	4a98      	ldr	r2, [pc, #608]	; (8004168 <main+0x5a0>)
 8003f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f0a:	6093      	str	r3, [r2, #8]
		gpkt.imu_acc_y = y;
 8003f0c:	4a96      	ldr	r2, [pc, #600]	; (8004168 <main+0x5a0>)
 8003f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f12:	60d3      	str	r3, [r2, #12]
		gpkt.imu_acc_z = z;
 8003f14:	4a94      	ldr	r2, [pc, #592]	; (8004168 <main+0x5a0>)
 8003f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f1a:	6113      	str	r3, [r2, #16]
	}

	if (gyro_rdy) {
 8003f1c:	4b93      	ldr	r3, [pc, #588]	; (800416c <main+0x5a4>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d055      	beq.n	8003fd2 <main+0x40a>
		rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 8003f26:	498e      	ldr	r1, [pc, #568]	; (8004160 <main+0x598>)
 8003f28:	4891      	ldr	r0, [pc, #580]	; (8004170 <main+0x5a8>)
 8003f2a:	f7fe fb11 	bl	8002550 <bmi08g_get_data>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		bmi08x_error_codes_print_result("bmi08g_get_data",
 8003f34:	f997 30cb 	ldrsb.w	r3, [r7, #203]	; 0xcb
 8003f38:	4619      	mov	r1, r3
 8003f3a:	488e      	ldr	r0, [pc, #568]	; (8004174 <main+0x5ac>)
 8003f3c:	f000 fe50 	bl	8004be0 <bmi08x_error_codes_print_result>
				rslt);
		gyro_rdy = 0;
 8003f40:	4b8a      	ldr	r3, [pc, #552]	; (800416c <main+0x5a4>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		gpkt.stale_bits = gpkt.stale_bits | IMU_GYR_NEW;
 8003f46:	4b88      	ldr	r3, [pc, #544]	; (8004168 <main+0x5a0>)
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	f043 0310 	orr.w	r3, r3, #16
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b85      	ldr	r3, [pc, #532]	; (8004168 <main+0x5a0>)
 8003f52:	705a      	strb	r2, [r3, #1]
					"GYRO  Gyr_Raw_X : %d   Gyr_Raw_Y : %d   Gyr_Raw_Z : %d   ",
					 bmi08x_gyro.x, bmi08x_gyro.y,
					bmi08x_gyro.z);
		}
		/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
		x = lsb_to_dps(bmi08x_gyro.x, 250, 16) * DPS_TO_RPS;
 8003f54:	4b86      	ldr	r3, [pc, #536]	; (8004170 <main+0x5a8>)
 8003f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004178 <main+0x5b0>
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd21 	bl	80049a8 <lsb_to_dps>
 8003f66:	eef0 7a40 	vmov.f32	s15, s0
 8003f6a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800417c <main+0x5b4>
 8003f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f72:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		y = lsb_to_dps(bmi08x_gyro.y, 250, 16) * DPS_TO_RPS;
 8003f76:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <main+0x5a8>)
 8003f78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8004178 <main+0x5b0>
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd10 	bl	80049a8 <lsb_to_dps>
 8003f88:	eef0 7a40 	vmov.f32	s15, s0
 8003f8c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800417c <main+0x5b4>
 8003f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f94:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		z = lsb_to_dps(bmi08x_gyro.z, 250, 16) * DPS_TO_RPS;
 8003f98:	4b75      	ldr	r3, [pc, #468]	; (8004170 <main+0x5a8>)
 8003f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f9e:	2110      	movs	r1, #16
 8003fa0:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8004178 <main+0x5b0>
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fcff 	bl	80049a8 <lsb_to_dps>
 8003faa:	eef0 7a40 	vmov.f32	s15, s0
 8003fae:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800417c <main+0x5b4>
 8003fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		if(DEBUG_MODE){
		/* Print the data in rps. */
			printf("\t  Gyr_DPS_X = %4.2f  , Gyr_DPS_Y = %4.2f  , Gyr_DPS_Z = %4.2f\n\r",
					x, y, z);
		}
		gpkt.imu_gyr_x = x;
 8003fba:	4a6b      	ldr	r2, [pc, #428]	; (8004168 <main+0x5a0>)
 8003fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fc0:	6153      	str	r3, [r2, #20]
		gpkt.imu_gyr_y = y;
 8003fc2:	4a69      	ldr	r2, [pc, #420]	; (8004168 <main+0x5a0>)
 8003fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc8:	6193      	str	r3, [r2, #24]
		gpkt.imu_gyr_z = z;
 8003fca:	4a67      	ldr	r2, [pc, #412]	; (8004168 <main+0x5a0>)
 8003fcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003fd0:	61d3      	str	r3, [r2, #28]

	/* IMU while loop -------------------------------------------------------------------------*/

	/*  Magnetometer -------------------------------------------------------------*/
	  /* Read output only if new value is available */
	iis2mdc_mag_data_ready_get(&dev_ctx, &mag_drdy);
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	496a      	ldr	r1, [pc, #424]	; (8004180 <main+0x5b8>)
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f90b 	bl	80031f4 <iis2mdc_mag_data_ready_get>

	if (mag_drdy) {
 8003fde:	4b68      	ldr	r3, [pc, #416]	; (8004180 <main+0x5b8>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8081 	beq.w	80040ea <main+0x522>
		/* Read magnetic field data */
		memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8003fe8:	2206      	movs	r2, #6
 8003fea:	2100      	movs	r1, #0
 8003fec:	4865      	ldr	r0, [pc, #404]	; (8004184 <main+0x5bc>)
 8003fee:	f00e ffa7 	bl	8012f40 <memset>
		iis2mdc_magnetic_raw_get(&dev_ctx, data_raw_magnetic);
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4963      	ldr	r1, [pc, #396]	; (8004184 <main+0x5bc>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff f914 	bl	8003226 <iis2mdc_magnetic_raw_get>
		magnetic_mG[0] = iis2mdc_from_lsb_to_mgauss( data_raw_magnetic[0]);
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <main+0x5bc>)
 8004000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f807 	bl	8003018 <iis2mdc_from_lsb_to_mgauss>
 800400a:	eef0 7a40 	vmov.f32	s15, s0
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <main+0x5c0>)
 8004010:	edc3 7a00 	vstr	s15, [r3]
		magnetic_mG[1] = iis2mdc_from_lsb_to_mgauss( data_raw_magnetic[1]);
 8004014:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <main+0x5bc>)
 8004016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fffc 	bl	8003018 <iis2mdc_from_lsb_to_mgauss>
 8004020:	eef0 7a40 	vmov.f32	s15, s0
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <main+0x5c0>)
 8004026:	edc3 7a01 	vstr	s15, [r3, #4]
		magnetic_mG[2] = iis2mdc_from_lsb_to_mgauss( data_raw_magnetic[2]);
 800402a:	4b56      	ldr	r3, [pc, #344]	; (8004184 <main+0x5bc>)
 800402c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fff1 	bl	8003018 <iis2mdc_from_lsb_to_mgauss>
 8004036:	eef0 7a40 	vmov.f32	s15, s0
 800403a:	4b53      	ldr	r3, [pc, #332]	; (8004188 <main+0x5c0>)
 800403c:	edc3 7a02 	vstr	s15, [r3, #8]

		gpkt.stale_bits = gpkt.stale_bits | MAG_NEW;
 8004040:	4b49      	ldr	r3, [pc, #292]	; (8004168 <main+0x5a0>)
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <main+0x5a0>)
 800404c:	705a      	strb	r2, [r3, #1]
//		pkt.mag_x = data_raw_magnetic[0]; //not sure if this is gonna work how i want it to but maybe
//		pkt.mag_y = data_raw_magnetic[1];
//		pkt.mag_z = data_raw_magnetic[2];
		gpkt.mag_x = magnetic_mG[0] * 0.0000001; //convert mGauss to Tesla by multiplyng by 10^-7
 800404e:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <main+0x5c0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fa78 	bl	8000548 <__aeabi_f2d>
 8004058:	a33f      	add	r3, pc, #252	; (adr r3, 8004158 <main+0x590>)
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f7fc facb 	bl	80005f8 <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f7fc fdbd 	bl	8000be8 <__aeabi_d2f>
 800406e:	4603      	mov	r3, r0
 8004070:	4a3d      	ldr	r2, [pc, #244]	; (8004168 <main+0x5a0>)
 8004072:	6213      	str	r3, [r2, #32]
		gpkt.mag_y = magnetic_mG[1] * 0.0000001;
 8004074:	4b44      	ldr	r3, [pc, #272]	; (8004188 <main+0x5c0>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fa65 	bl	8000548 <__aeabi_f2d>
 800407e:	a336      	add	r3, pc, #216	; (adr r3, 8004158 <main+0x590>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fab8 	bl	80005f8 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f7fc fdaa 	bl	8000be8 <__aeabi_d2f>
 8004094:	4603      	mov	r3, r0
 8004096:	4a34      	ldr	r2, [pc, #208]	; (8004168 <main+0x5a0>)
 8004098:	6253      	str	r3, [r2, #36]	; 0x24
		gpkt.mag_z = magnetic_mG[2] * 0.0000001;
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <main+0x5c0>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fa52 	bl	8000548 <__aeabi_f2d>
 80040a4:	a32c      	add	r3, pc, #176	; (adr r3, 8004158 <main+0x590>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc faa5 	bl	80005f8 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	f7fc fd97 	bl	8000be8 <__aeabi_d2f>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <main+0x5a0>)
 80040be:	6293      	str	r3, [r2, #40]	; 0x28
 80040c0:	4b32      	ldr	r3, [pc, #200]	; (800418c <main+0x5c4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	801a      	strh	r2, [r3, #0]
					magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
			tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
		}
		/* Read temperature data */
		memset( &data_raw_temperature, 0x00, sizeof(int16_t) );
		iis2mdc_temperature_raw_get( &dev_ctx, &data_raw_temperature );
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4930      	ldr	r1, [pc, #192]	; (800418c <main+0x5c4>)
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff f8f5 	bl	80032bc <iis2mdc_temperature_raw_get>
		temperature_degC = iis2mdc_from_lsb_to_celsius (
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <main+0x5c4>)
 80040d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe ffb3 	bl	8003044 <iis2mdc_from_lsb_to_celsius>
 80040de:	eef0 7a40 	vmov.f32	s15, s0
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <main+0x5c8>)
 80040e4:	edc3 7a00 	vstr	s15, [r3]
 80040e8:	e006      	b.n	80040f8 <main+0x530>
			sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n",
					temperature_degC );
			tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
		}
	} else {
		gpkt.stale_bits = gpkt.stale_bits & ~MAG_NEW;
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <main+0x5a0>)
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	f023 030f 	bic.w	r3, r3, #15
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <main+0x5a0>)
 80040f6:	705a      	strb	r2, [r3, #1]

	/*  End of Magnetometer -------------------------------------------------------------*/

	/*  GPS -------------------------------------------------------------*/

	if(gps_read == true){
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <main+0x5cc>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11b      	bne.n	8004138 <main+0x570>
		gps_read = false;
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <main+0x5cc>)
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]

		gpkt.stale_bits = gpkt.stale_bits | GPS_NEW;
 8004106:	4b18      	ldr	r3, [pc, #96]	; (8004168 <main+0x5a0>)
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <main+0x5a0>)
 8004112:	705a      	strb	r2, [r3, #1]

		//GNSS_GetPVTData(&GNSS_Handle);
		GNSS_GetPOSLLHData(&GNSS_Handle);
 8004114:	f107 0318 	add.w	r3, r7, #24
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd f837 	bl	800118c <GNSS_GetPOSLLHData>
		GNSS_ParseBuffer(&GNSS_Handle);
 800411e:	f107 0318 	add.w	r3, r7, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ffb1 	bl	800108a <GNSS_ParseBuffer>

		gpkt.gps_lat = GNSS_Handle.fLat;
 8004128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800412c:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <main+0x5a0>)
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
		gpkt.gps_long = GNSS_Handle.fLon;
 8004130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <main+0x5a0>)
 8004136:	6453      	str	r3, [r2, #68]	; 0x44
	}

	/*  End of GPS -------------------------------------------------------------*/

	/*  Differential Pressure -------------------------------------------------------------*/
	if(dp_read){
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <main+0x5d0>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <main+0x584>
		DPMeasurement(&gpkt); ///Dp sensor
 8004140:	4809      	ldr	r0, [pc, #36]	; (8004168 <main+0x5a0>)
 8004142:	f000 fe61 	bl	8004e08 <DPMeasurement>
		dp_read = false;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <main+0x5d0>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
	}
	/*  End of Differential Pressure -------------------------------------------------------------*/
	/*  Barometer -------------------------------------------------------------*/

	DPS310_GetPress(&gpkt); ///barometer
 800414c:	4806      	ldr	r0, [pc, #24]	; (8004168 <main+0x5a0>)
 800414e:	f7fe fd9b 	bl	8002c88 <DPS310_GetPress>
	gpkt.timestamp = HAL_GetTick();
 8004152:	e649      	b.n	8003de8 <main+0x220>
 8004154:	f3af 8000 	nop.w
 8004158:	9abcaf48 	.word	0x9abcaf48
 800415c:	3e7ad7f2 	.word	0x3e7ad7f2
 8004160:	200009e0 	.word	0x200009e0
 8004164:	20000a20 	.word	0x20000a20
 8004168:	20000990 	.word	0x20000990
 800416c:	200009dd 	.word	0x200009dd
 8004170:	20000a28 	.word	0x20000a28
 8004174:	08018f60 	.word	0x08018f60
 8004178:	437a0000 	.word	0x437a0000
 800417c:	3c8efa35 	.word	0x3c8efa35
 8004180:	20000dba 	.word	0x20000dba
 8004184:	200011a8 	.word	0x200011a8
 8004188:	200011b4 	.word	0x200011b4
 800418c:	200011a4 	.word	0x200011a4
 8004190:	200011b0 	.word	0x200011b0
 8004194:	2000098d 	.word	0x2000098d
 8004198:	2000098c 	.word	0x2000098c

0800419c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b096      	sub	sp, #88	; 0x58
 80041a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	2244      	movs	r2, #68	; 0x44
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f00e fec8 	bl	8012f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041b0:	463b      	mov	r3, r7
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	609a      	str	r2, [r3, #8]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80041be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041c2:	f006 f8c1 	bl	800a348 <HAL_PWREx_ControlVoltageScaling>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80041cc:	f000 fef2 	bl	8004fb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80041d0:	2312      	movs	r3, #18
 80041d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80041de:	2301      	movs	r3, #1
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80041e6:	23b0      	movs	r3, #176	; 0xb0
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041ea:	2302      	movs	r3, #2
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041ee:	2302      	movs	r3, #2
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 80041f6:	230a      	movs	r3, #10
 80041f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041fa:	2302      	movs	r3, #2
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041fe:	2302      	movs	r3, #2
 8004200:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	4618      	mov	r0, r3
 8004208:	f006 f904 	bl	800a414 <HAL_RCC_OscConfig>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004212:	f000 fecf 	bl	8004fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004216:	230f      	movs	r3, #15
 8004218:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800421a:	2303      	movs	r3, #3
 800421c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800422a:	463b      	mov	r3, r7
 800422c:	2104      	movs	r1, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f006 fd52 	bl	800acd8 <HAL_RCC_ClockConfig>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800423a:	f000 febb 	bl	8004fb4 <Error_Handler>
  }
}
 800423e:	bf00      	nop
 8004240:	3758      	adds	r7, #88	; 0x58
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <MX_I2C1_Init+0x74>)
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <MX_I2C1_Init+0x78>)
 8004250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <MX_I2C1_Init+0x74>)
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <MX_I2C1_Init+0x7c>)
 8004256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <MX_I2C1_Init+0x74>)
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <MX_I2C1_Init+0x74>)
 8004260:	2201      	movs	r2, #1
 8004262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <MX_I2C1_Init+0x74>)
 8004266:	2200      	movs	r2, #0
 8004268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <MX_I2C1_Init+0x74>)
 800426c:	2200      	movs	r2, #0
 800426e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <MX_I2C1_Init+0x74>)
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <MX_I2C1_Init+0x74>)
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <MX_I2C1_Init+0x74>)
 800427e:	2200      	movs	r2, #0
 8004280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004282:	480e      	ldr	r0, [pc, #56]	; (80042bc <MX_I2C1_Init+0x74>)
 8004284:	f002 f9ea 	bl	800665c <HAL_I2C_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800428e:	f000 fe91 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004292:	2100      	movs	r1, #0
 8004294:	4809      	ldr	r0, [pc, #36]	; (80042bc <MX_I2C1_Init+0x74>)
 8004296:	f004 fa25 	bl	80086e4 <HAL_I2CEx_ConfigAnalogFilter>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80042a0:	f000 fe88 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042a4:	2100      	movs	r1, #0
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_I2C1_Init+0x74>)
 80042a8:	f004 fa67 	bl	800877a <HAL_I2CEx_ConfigDigitalFilter>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80042b2:	f000 fe7f 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200003c8 	.word	0x200003c8
 80042c0:	40005400 	.word	0x40005400
 80042c4:	10909cec 	.word	0x10909cec

080042c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <MX_I2C2_Init+0x74>)
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <MX_I2C2_Init+0x78>)
 80042d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <MX_I2C2_Init+0x74>)
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <MX_I2C2_Init+0x7c>)
 80042d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80042d8:	4b18      	ldr	r3, [pc, #96]	; (800433c <MX_I2C2_Init+0x74>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042de:	4b17      	ldr	r3, [pc, #92]	; (800433c <MX_I2C2_Init+0x74>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <MX_I2C2_Init+0x74>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <MX_I2C2_Init+0x74>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <MX_I2C2_Init+0x74>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_I2C2_Init+0x74>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <MX_I2C2_Init+0x74>)
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <MX_I2C2_Init+0x74>)
 8004304:	f002 f9aa 	bl	800665c <HAL_I2C_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800430e:	f000 fe51 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004312:	2100      	movs	r1, #0
 8004314:	4809      	ldr	r0, [pc, #36]	; (800433c <MX_I2C2_Init+0x74>)
 8004316:	f004 f9e5 	bl	80086e4 <HAL_I2CEx_ConfigAnalogFilter>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004320:	f000 fe48 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004324:	2100      	movs	r1, #0
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_I2C2_Init+0x74>)
 8004328:	f004 fa27 	bl	800877a <HAL_I2CEx_ConfigDigitalFilter>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004332:	f000 fe3f 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	2000041c 	.word	0x2000041c
 8004340:	40005800 	.word	0x40005800
 8004344:	10909cec 	.word	0x10909cec

08004348 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <MX_I2C3_Init+0x74>)
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <MX_I2C3_Init+0x78>)
 8004350:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <MX_I2C3_Init+0x74>)
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <MX_I2C3_Init+0x7c>)
 8004356:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004358:	4b18      	ldr	r3, [pc, #96]	; (80043bc <MX_I2C3_Init+0x74>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <MX_I2C3_Init+0x74>)
 8004360:	2201      	movs	r2, #1
 8004362:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <MX_I2C3_Init+0x74>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <MX_I2C3_Init+0x74>)
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <MX_I2C3_Init+0x74>)
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <MX_I2C3_Init+0x74>)
 8004378:	2200      	movs	r2, #0
 800437a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <MX_I2C3_Init+0x74>)
 800437e:	2200      	movs	r2, #0
 8004380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004382:	480e      	ldr	r0, [pc, #56]	; (80043bc <MX_I2C3_Init+0x74>)
 8004384:	f002 f96a 	bl	800665c <HAL_I2C_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800438e:	f000 fe11 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004392:	2100      	movs	r1, #0
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <MX_I2C3_Init+0x74>)
 8004396:	f004 f9a5 	bl	80086e4 <HAL_I2CEx_ConfigAnalogFilter>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80043a0:	f000 fe08 	bl	8004fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80043a4:	2100      	movs	r1, #0
 80043a6:	4805      	ldr	r0, [pc, #20]	; (80043bc <MX_I2C3_Init+0x74>)
 80043a8:	f004 f9e7 	bl	800877a <HAL_I2CEx_ConfigDigitalFilter>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80043b2:	f000 fdff 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000470 	.word	0x20000470
 80043c0:	40005c00 	.word	0x40005c00
 80043c4:	10909cec 	.word	0x10909cec

080043c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <MX_SPI1_Init+0x74>)
 80043ce:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <MX_SPI1_Init+0x78>)
 80043d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_SPI1_Init+0x74>)
 80043d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <MX_SPI1_Init+0x74>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043e0:	4b16      	ldr	r3, [pc, #88]	; (800443c <MX_SPI1_Init+0x74>)
 80043e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <MX_SPI1_Init+0x74>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <MX_SPI1_Init+0x74>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <MX_SPI1_Init+0x74>)
 80043f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <MX_SPI1_Init+0x74>)
 80043fe:	2238      	movs	r2, #56	; 0x38
 8004400:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <MX_SPI1_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <MX_SPI1_Init+0x74>)
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <MX_SPI1_Init+0x74>)
 8004410:	2200      	movs	r2, #0
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <MX_SPI1_Init+0x74>)
 8004416:	2207      	movs	r2, #7
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <MX_SPI1_Init+0x74>)
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <MX_SPI1_Init+0x74>)
 8004422:	2208      	movs	r2, #8
 8004424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004426:	4805      	ldr	r0, [pc, #20]	; (800443c <MX_SPI1_Init+0x74>)
 8004428:	f007 f800 	bl	800b42c <HAL_SPI_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004432:	f000 fdbf 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200005e4 	.word	0x200005e4
 8004440:	40013000 	.word	0x40013000

08004444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800444a:	f107 0310 	add.w	r3, r7, #16
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <MX_TIM2_Init+0x98>)
 8004464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <MX_TIM2_Init+0x98>)
 800446c:	224f      	movs	r2, #79	; 0x4f
 800446e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <MX_TIM2_Init+0x98>)
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <MX_TIM2_Init+0x98>)
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <MX_TIM2_Init+0x98>)
 8004480:	2200      	movs	r2, #0
 8004482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <MX_TIM2_Init+0x98>)
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800448a:	4814      	ldr	r0, [pc, #80]	; (80044dc <MX_TIM2_Init+0x98>)
 800448c:	f007 fede 	bl	800c24c <HAL_TIM_Base_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004496:	f000 fd8d 	bl	8004fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800449a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	4619      	mov	r1, r3
 80044a6:	480d      	ldr	r0, [pc, #52]	; (80044dc <MX_TIM2_Init+0x98>)
 80044a8:	f008 f8e7 	bl	800c67a <HAL_TIM_ConfigClockSource>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80044b2:	f000 fd7f 	bl	8004fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4806      	ldr	r0, [pc, #24]	; (80044dc <MX_TIM2_Init+0x98>)
 80044c4:	f008 fac8 	bl	800ca58 <HAL_TIMEx_MasterConfigSynchronization>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80044ce:	f000 fd71 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044d2:	bf00      	nop
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200006d8 	.word	0x200006d8

080044e0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044e6:	f107 0310 	add.w	r3, r7, #16
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <MX_TIM15_Init+0x9c>)
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <MX_TIM15_Init+0xa0>)
 8004502:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 59999;
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <MX_TIM15_Init+0x9c>)
 8004506:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800450a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <MX_TIM15_Init+0x9c>)
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 29;
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <MX_TIM15_Init+0x9c>)
 8004514:	221d      	movs	r2, #29
 8004516:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <MX_TIM15_Init+0x9c>)
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <MX_TIM15_Init+0x9c>)
 8004520:	2200      	movs	r2, #0
 8004522:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004524:	4b15      	ldr	r3, [pc, #84]	; (800457c <MX_TIM15_Init+0x9c>)
 8004526:	2200      	movs	r2, #0
 8004528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800452a:	4814      	ldr	r0, [pc, #80]	; (800457c <MX_TIM15_Init+0x9c>)
 800452c:	f007 fe8e 	bl	800c24c <HAL_TIM_Base_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004536:	f000 fd3d 	bl	8004fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800453a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	4619      	mov	r1, r3
 8004546:	480d      	ldr	r0, [pc, #52]	; (800457c <MX_TIM15_Init+0x9c>)
 8004548:	f008 f897 	bl	800c67a <HAL_TIM_ConfigClockSource>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004552:	f000 fd2f 	bl	8004fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4806      	ldr	r0, [pc, #24]	; (800457c <MX_TIM15_Init+0x9c>)
 8004564:	f008 fa78 	bl	800ca58 <HAL_TIMEx_MasterConfigSynchronization>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800456e:	f000 fd21 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004572:	bf00      	nop
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000724 	.word	0x20000724
 8004580:	40014000 	.word	0x40014000

08004584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <MX_USART1_UART_Init+0x58>)
 800458a:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <MX_USART1_UART_Init+0x5c>)
 800458c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <MX_USART1_UART_Init+0x58>)
 8004590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <MX_USART1_UART_Init+0x58>)
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <MX_USART1_UART_Init+0x58>)
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045aa:	220c      	movs	r2, #12
 80045ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045bc:	2200      	movs	r2, #0
 80045be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c6:	4805      	ldr	r0, [pc, #20]	; (80045dc <MX_USART1_UART_Init+0x58>)
 80045c8:	f008 faca 	bl	800cb60 <HAL_UART_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80045d2:	f000 fcef 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000770 	.word	0x20000770
 80045e0:	40013800 	.word	0x40013800

080045e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <MX_USART2_UART_Init+0x58>)
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <MX_USART2_UART_Init+0x5c>)
 80045ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <MX_USART2_UART_Init+0x58>)
 80045f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <MX_USART2_UART_Init+0x58>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <MX_USART2_UART_Init+0x58>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <MX_USART2_UART_Init+0x58>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <MX_USART2_UART_Init+0x58>)
 800460a:	220c      	movs	r2, #12
 800460c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <MX_USART2_UART_Init+0x58>)
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <MX_USART2_UART_Init+0x58>)
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <MX_USART2_UART_Init+0x58>)
 800461c:	2200      	movs	r2, #0
 800461e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <MX_USART2_UART_Init+0x58>)
 8004622:	2200      	movs	r2, #0
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <MX_USART2_UART_Init+0x58>)
 8004628:	f008 fa9a 	bl	800cb60 <HAL_UART_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004632:	f000 fcbf 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200007f4 	.word	0x200007f4
 8004640:	40004400 	.word	0x40004400

08004644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004648:	4b14      	ldr	r3, [pc, #80]	; (800469c <MX_USART3_UART_Init+0x58>)
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <MX_USART3_UART_Init+0x5c>)
 800464c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <MX_USART3_UART_Init+0x58>)
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <MX_USART3_UART_Init+0x58>)
 800466a:	220c      	movs	r2, #12
 800466c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004676:	2200      	movs	r2, #0
 8004678:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <MX_USART3_UART_Init+0x58>)
 800467c:	2200      	movs	r2, #0
 800467e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004682:	2200      	movs	r2, #0
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004686:	4805      	ldr	r0, [pc, #20]	; (800469c <MX_USART3_UART_Init+0x58>)
 8004688:	f008 fa6a 	bl	800cb60 <HAL_UART_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004692:	f000 fc8f 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000878 	.word	0x20000878
 80046a0:	40004800 	.word	0x40004800

080046a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <MX_DMA_Init+0xc0>)
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <MX_DMA_Init+0xc0>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6493      	str	r3, [r2, #72]	; 0x48
 80046b6:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <MX_DMA_Init+0xc0>)
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80046c2:	4b28      	ldr	r3, [pc, #160]	; (8004764 <MX_DMA_Init+0xc0>)
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	4a27      	ldr	r2, [pc, #156]	; (8004764 <MX_DMA_Init+0xc0>)
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	6493      	str	r3, [r2, #72]	; 0x48
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <MX_DMA_Init+0xc0>)
 80046d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	200c      	movs	r0, #12
 80046e0:	f001 fb5f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80046e4:	200c      	movs	r0, #12
 80046e6:	f001 fb78 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	200d      	movs	r0, #13
 80046f0:	f001 fb57 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80046f4:	200d      	movs	r0, #13
 80046f6:	f001 fb70 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80046fa:	2200      	movs	r2, #0
 80046fc:	2100      	movs	r1, #0
 80046fe:	200e      	movs	r0, #14
 8004700:	f001 fb4f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004704:	200e      	movs	r0, #14
 8004706:	f001 fb68 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	200f      	movs	r0, #15
 8004710:	f001 fb47 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004714:	200f      	movs	r0, #15
 8004716:	f001 fb60 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	203a      	movs	r0, #58	; 0x3a
 8004720:	f001 fb3f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8004724:	203a      	movs	r0, #58	; 0x3a
 8004726:	f001 fb58 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	203b      	movs	r0, #59	; 0x3b
 8004730:	f001 fb37 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004734:	203b      	movs	r0, #59	; 0x3b
 8004736:	f001 fb50 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	2044      	movs	r0, #68	; 0x44
 8004740:	f001 fb2f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8004744:	2044      	movs	r0, #68	; 0x44
 8004746:	f001 fb48 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	2045      	movs	r0, #69	; 0x45
 8004750:	f001 fb27 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8004754:	2045      	movs	r0, #69	; 0x45
 8004756:	f001 fb40 	bl	8005dda <HAL_NVIC_EnableIRQ>

}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800477e:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <MX_GPIO_Init+0x13c>)
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	4a48      	ldr	r2, [pc, #288]	; (80048a4 <MX_GPIO_Init+0x13c>)
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800478a:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <MX_GPIO_Init+0x13c>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <MX_GPIO_Init+0x13c>)
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <MX_GPIO_Init+0x13c>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	4a3c      	ldr	r2, [pc, #240]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	4a36      	ldr	r2, [pc, #216]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047d2:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <MX_GPIO_Init+0x13c>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 80047de:	2201      	movs	r2, #1
 80047e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80047e4:	4830      	ldr	r0, [pc, #192]	; (80048a8 <MX_GPIO_Init+0x140>)
 80047e6:	f001 ff09 	bl	80065fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AIRSPEED_DRDY_Pin */
  GPIO_InitStruct.Pin = AIRSPEED_DRDY_Pin;
 80047ea:	2308      	movs	r3, #8
 80047ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80047f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AIRSPEED_DRDY_GPIO_Port, &GPIO_InitStruct);
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4619      	mov	r1, r3
 80047fe:	482a      	ldr	r0, [pc, #168]	; (80048a8 <MX_GPIO_Init+0x140>)
 8004800:	f001 fd8a 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004804:	2313      	movs	r3, #19
 8004806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800480c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	4619      	mov	r1, r3
 8004818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800481c:	f001 fd7c 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 8004820:	f242 0304 	movw	r3, #8196	; 0x2004
 8004824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800482a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4619      	mov	r1, r3
 8004836:	481d      	ldr	r0, [pc, #116]	; (80048ac <MX_GPIO_Init+0x144>)
 8004838:	f001 fd6e 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 800483c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	4619      	mov	r1, r3
 8004854:	4814      	ldr	r0, [pc, #80]	; (80048a8 <MX_GPIO_Init+0x140>)
 8004856:	f001 fd5f 	bl	8006318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2100      	movs	r1, #0
 800485e:	2006      	movs	r0, #6
 8004860:	f001 fa9f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004864:	2006      	movs	r0, #6
 8004866:	f001 fab8 	bl	8005dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	2008      	movs	r0, #8
 8004870:	f001 fa97 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004874:	2008      	movs	r0, #8
 8004876:	f001 fab0 	bl	8005dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	2009      	movs	r0, #9
 8004880:	f001 fa8f 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004884:	2009      	movs	r0, #9
 8004886:	f001 faa8 	bl	8005dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	2028      	movs	r0, #40	; 0x28
 8004890:	f001 fa87 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004894:	2028      	movs	r0, #40	; 0x28
 8004896:	f001 faa0 	bl	8005dda <HAL_NVIC_EnableIRQ>

}
 800489a:	bf00      	nop
 800489c:	3728      	adds	r7, #40	; 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	48000800 	.word	0x48000800
 80048ac:	48000400 	.word	0x48000400

080048b0 <packet_transmit>:

/* USER CODE BEGIN 4 */

static int packet_transmit(sens_pkt_flt* pkt){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

	CDC_Transmit_FS((uint8_t *)pkt, sizeof(sens_pkt_flt));
 80048b8:	2148      	movs	r1, #72	; 0x48
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f00d fe00 	bl	80124c0 <CDC_Transmit_FS>
//	//not sure yet how to convert u32 to hex
//	sprintf(packet + strlen(packet), "%08lx%08lx", data->bar_press, data->bar_temp);
//	sprintf(packet + strlen(packet), "%08lx%08lx", data->gps_lat, data->gps_long);
//

	return 0;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_TIM_PeriodElapsedCallback>:
		rx_rdy = 1;
	}
}

//could maybe trigger a gps read every 100 of these? AKA 1Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	gpkt.stale_bits = packet_transmit(&gpkt);
 80048d4:	480c      	ldr	r0, [pc, #48]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048d6:	f7ff ffeb 	bl	80048b0 <packet_transmit>
 80048da:	4603      	mov	r3, r0
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048e0:	705a      	strb	r2, [r3, #1]

	gps_counter++;
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80048ea:	6013      	str	r3, [r2, #0]
	if(gps_counter > 99){
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b63      	cmp	r3, #99	; 0x63
 80048f2:	dd05      	ble.n	8004900 <HAL_TIM_PeriodElapsedCallback+0x34>
		gps_counter = 0;
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
		//trigger gps read here
		gps_read = true; ///GPS
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
	}
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000990 	.word	0x20000990
 800490c:	200009d8 	.word	0x200009d8
 8004910:	2000098d 	.word	0x2000098d

08004914 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	80fb      	strh	r3, [r7, #6]
 800491e:	460b      	mov	r3, r1
 8004920:	717b      	strb	r3, [r7, #5]
 8004922:	4613      	mov	r3, r2
 8004924:	713b      	strb	r3, [r7, #4]
    double power = 2;
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800492e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8004932:	793b      	ldrb	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fb fde5 	bl	8000504 <__aeabi_ui2d>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	ec43 2b11 	vmov	d1, r2, r3
 8004942:	ed97 0b04 	vldr	d0, [r7, #16]
 8004946:	f013 facb 	bl	8017ee0 <pow>
 800494a:	ec51 0b10 	vmov	r0, r1, d0
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004956:	f7fb ff79 	bl	800084c <__aeabi_ddiv>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	f7fc f941 	bl	8000be8 <__aeabi_d2f>
 8004966:	4603      	mov	r3, r0
 8004968:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 800496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80049a4 <lsb_to_mps2+0x90>
 800497a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800497e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800498e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004996:	eef0 7a66 	vmov.f32	s15, s13
}
 800499a:	eeb0 0a67 	vmov.f32	s0, s15
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	411ce80a 	.word	0x411ce80a

080049a8 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	ed87 0a00 	vstr	s0, [r7]
 80049b4:	460a      	mov	r2, r1
 80049b6:	80fb      	strh	r3, [r7, #6]
 80049b8:	4613      	mov	r3, r2
 80049ba:	717b      	strb	r3, [r7, #5]
    double power = 2;
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80049c8:	797b      	ldrb	r3, [r7, #5]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fd9a 	bl	8000504 <__aeabi_ui2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	ec43 2b11 	vmov	d1, r2, r3
 80049d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80049dc:	f013 fa80 	bl	8017ee0 <pow>
 80049e0:	ec51 0b10 	vmov	r0, r1, d0
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049ec:	f7fb ff2e 	bl	800084c <__aeabi_ddiv>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	f7fc f8f6 	bl	8000be8 <__aeabi_d2f>
 80049fc:	4603      	mov	r3, r0
 80049fe:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8004a00:	edd7 6a00 	vldr	s13, [r7]
 8004a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8004a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <bmi08x_spi_read>:

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8004a3e:	8afb      	ldrh	r3, [r7, #22]
 8004a40:	2200      	movs	r2, #0
 8004a42:	4619      	mov	r1, r3
 8004a44:	4814      	ldr	r0, [pc, #80]	; (8004a98 <bmi08x_spi_read+0x70>)
 8004a46:	f001 fdd9 	bl	80065fc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, (uint8_t*) &reg_addr, 1, 100) != HAL_OK) {
 8004a4a:	f107 010f 	add.w	r1, r7, #15
 8004a4e:	2364      	movs	r3, #100	; 0x64
 8004a50:	2201      	movs	r2, #1
 8004a52:	4812      	ldr	r0, [pc, #72]	; (8004a9c <bmi08x_spi_read+0x74>)
 8004a54:	f006 fd8d 	bl	800b572 <HAL_SPI_Transmit>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <bmi08x_spi_read+0x3a>
		return 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e016      	b.n	8004a90 <bmi08x_spi_read+0x68>
	}
	if (HAL_SPI_Receive(&hspi1, reg_data, len, 100) != HAL_OK) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	2364      	movs	r3, #100	; 0x64
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	480c      	ldr	r0, [pc, #48]	; (8004a9c <bmi08x_spi_read+0x74>)
 8004a6c:	f006 feef 	bl	800b84e <HAL_SPI_Receive>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <bmi08x_spi_read+0x52>
		return 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00a      	b.n	8004a90 <bmi08x_spi_read+0x68>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4805      	ldr	r0, [pc, #20]	; (8004a98 <bmi08x_spi_read+0x70>)
 8004a82:	f001 fdbb 	bl	80065fc <HAL_GPIO_WritePin>
	bmi08x_delay_us(100, 0);
 8004a86:	2100      	movs	r1, #0
 8004a88:	2064      	movs	r0, #100	; 0x64
 8004a8a:	f000 f845 	bl	8004b18 <bmi08x_delay_us>
	return 0;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	48000800 	.word	0x48000800
 8004a9c:	200005e4 	.word	0x200005e4

08004aa0 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4619      	mov	r1, r3
 8004abc:	4814      	ldr	r0, [pc, #80]	; (8004b10 <bmi08x_spi_write+0x70>)
 8004abe:	f001 fd9d 	bl	80065fc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 100) != HAL_OK) {
 8004ac2:	f107 010f 	add.w	r1, r7, #15
 8004ac6:	2364      	movs	r3, #100	; 0x64
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4812      	ldr	r0, [pc, #72]	; (8004b14 <bmi08x_spi_write+0x74>)
 8004acc:	f006 fd51 	bl	800b572 <HAL_SPI_Transmit>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <bmi08x_spi_write+0x3a>
		return 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e016      	b.n	8004b08 <bmi08x_spi_write+0x68>
	}
	if (HAL_SPI_Transmit(&hspi1, reg_data, len, 50) != HAL_OK) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	2332      	movs	r3, #50	; 0x32
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <bmi08x_spi_write+0x74>)
 8004ae4:	f006 fd45 	bl	800b572 <HAL_SPI_Transmit>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <bmi08x_spi_write+0x52>
		return 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00a      	b.n	8004b08 <bmi08x_spi_write+0x68>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4619      	mov	r1, r3
 8004af8:	4805      	ldr	r0, [pc, #20]	; (8004b10 <bmi08x_spi_write+0x70>)
 8004afa:	f001 fd7f 	bl	80065fc <HAL_GPIO_WritePin>

	bmi08x_delay_us(100, 0);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2064      	movs	r0, #100	; 0x64
 8004b02:	f000 f809 	bl	8004b18 <bmi08x_delay_us>
	return 0;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	48000800 	.word	0x48000800
 8004b14:	200005e4 	.word	0x200005e4

08004b18 <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <bmi08x_delay_us+0x38>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period * 10)
 8004b2a:	bf00      	nop
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <bmi08x_delay_us+0x38>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d3f5      	bcc.n	8004b2c <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	200006d8 	.word	0x200006d8

08004b54 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
 8004b60:	4613      	mov	r3, r2
 8004b62:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <bmi08x_interface_init+0x62>
//        }
//
//        result = coines_get_board_info(&board_info);
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		if (intf == BMI08X_SPI_INTF) {
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d110      	bne.n	8004b96 <bmi08x_interface_init+0x42>
//            printf("SPI Interface \n");

			/* To initialize the user SPI function */
			bmi08x->intf = BMI08X_SPI_INTF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <bmi08x_interface_init+0x78>)
 8004b7e:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <bmi08x_interface_init+0x7c>)
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = ACCEL_CS_Pin;
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <bmi08x_interface_init+0x80>)
 8004b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8c:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = GYRO_CS_Pin;
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <bmi08x_interface_init+0x84>)
 8004b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b94:	801a      	strh	r2, [r3, #0]

		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	78ba      	ldrb	r2, [r7, #2]
 8004b9a:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <bmi08x_interface_init+0x80>)
 8004ba0:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <bmi08x_interface_init+0x84>)
 8004ba6:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <bmi08x_interface_init+0x88>)
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = 32;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	771a      	strb	r2, [r3, #28]
 8004bb4:	e001      	b.n	8004bba <bmi08x_interface_init+0x66>


	} else {
		rslt = BMI08X_E_NULL_PTR;
 8004bb6:	23ff      	movs	r3, #255	; 0xff
 8004bb8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	08004a29 	.word	0x08004a29
 8004bd0:	08004aa1 	.word	0x08004aa1
 8004bd4:	20000a2e 	.word	0x20000a2e
 8004bd8:	20000a30 	.word	0x20000a30
 8004bdc:	08004b19 	.word	0x08004b19

08004be0 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8004bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8081 	beq.w	8004cf8 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4841      	ldr	r0, [pc, #260]	; (8004d00 <bmi08x_error_codes_print_result+0x120>)
 8004bfa:	f00f f8c5 	bl	8013d88 <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8004bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d106      	bne.n	8004c16 <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8004c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	483d      	ldr	r0, [pc, #244]	; (8004d04 <bmi08x_error_codes_print_result+0x124>)
 8004c10:	f00f f8ba 	bl	8013d88 <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8004c14:	e070      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8004c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c1a:	f113 0f02 	cmn.w	r3, #2
 8004c1e:	d106      	bne.n	8004c2e <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8004c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4838      	ldr	r0, [pc, #224]	; (8004d08 <bmi08x_error_codes_print_result+0x128>)
 8004c28:	f00f f8ae 	bl	8013d88 <iprintf>
}
 8004c2c:	e064      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8004c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c32:	f113 0f03 	cmn.w	r3, #3
 8004c36:	d106      	bne.n	8004c46 <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8004c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4833      	ldr	r0, [pc, #204]	; (8004d0c <bmi08x_error_codes_print_result+0x12c>)
 8004c40:	f00f f8a2 	bl	8013d88 <iprintf>
}
 8004c44:	e058      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8004c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c4a:	f113 0f04 	cmn.w	r3, #4
 8004c4e:	d106      	bne.n	8004c5e <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8004c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c54:	4619      	mov	r1, r3
 8004c56:	482e      	ldr	r0, [pc, #184]	; (8004d10 <bmi08x_error_codes_print_result+0x130>)
 8004c58:	f00f f896 	bl	8013d88 <iprintf>
}
 8004c5c:	e04c      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8004c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c62:	f113 0f05 	cmn.w	r3, #5
 8004c66:	d106      	bne.n	8004c76 <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8004c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4829      	ldr	r0, [pc, #164]	; (8004d14 <bmi08x_error_codes_print_result+0x134>)
 8004c70:	f00f f88a 	bl	8013d88 <iprintf>
}
 8004c74:	e040      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8004c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c7a:	f113 0f06 	cmn.w	r3, #6
 8004c7e:	d106      	bne.n	8004c8e <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8004c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4824      	ldr	r0, [pc, #144]	; (8004d18 <bmi08x_error_codes_print_result+0x138>)
 8004c88:	f00f f87e 	bl	8013d88 <iprintf>
}
 8004c8c:	e034      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8004c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c92:	f113 0f07 	cmn.w	r3, #7
 8004c96:	d106      	bne.n	8004ca6 <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8004c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	481f      	ldr	r0, [pc, #124]	; (8004d1c <bmi08x_error_codes_print_result+0x13c>)
 8004ca0:	f00f f872 	bl	8013d88 <iprintf>
}
 8004ca4:	e028      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8004ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004caa:	f113 0f08 	cmn.w	r3, #8
 8004cae:	d106      	bne.n	8004cbe <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8004cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	481a      	ldr	r0, [pc, #104]	; (8004d20 <bmi08x_error_codes_print_result+0x140>)
 8004cb8:	f00f f866 	bl	8013d88 <iprintf>
}
 8004cbc:	e01c      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8004cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc2:	f113 0f09 	cmn.w	r3, #9
 8004cc6:	d106      	bne.n	8004cd6 <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8004cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4815      	ldr	r0, [pc, #84]	; (8004d24 <bmi08x_error_codes_print_result+0x144>)
 8004cd0:	f00f f85a 	bl	8013d88 <iprintf>
}
 8004cd4:	e010      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8004cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d106      	bne.n	8004cec <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8004cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4810      	ldr	r0, [pc, #64]	; (8004d28 <bmi08x_error_codes_print_result+0x148>)
 8004ce6:	f00f f84f 	bl	8013d88 <iprintf>
}
 8004cea:	e005      	b.n	8004cf8 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8004cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	480e      	ldr	r0, [pc, #56]	; (8004d2c <bmi08x_error_codes_print_result+0x14c>)
 8004cf4:	f00f f848 	bl	8013d88 <iprintf>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	08018f70 	.word	0x08018f70
 8004d04:	08018f74 	.word	0x08018f74
 8004d08:	08018f90 	.word	0x08018f90
 8004d0c:	08018fb8 	.word	0x08018fb8
 8004d10:	08018fd8 	.word	0x08018fd8
 8004d14:	08018ff4 	.word	0x08018ff4
 8004d18:	08019014 	.word	0x08019014
 8004d1c:	08019038 	.word	0x08019038
 8004d20:	08019064 	.word	0x08019064
 8004d24:	08019084 	.word	0x08019084
 8004d28:	080190ac 	.word	0x080190ac
 8004d2c:	080190c8 	.word	0x080190c8

08004d30 <platform_write>:


/* Magnetometer ---------------------------------------------*/
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af04      	add	r7, sp, #16
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	72fb      	strb	r3, [r7, #11]
 8004d40:	4613      	mov	r3, r2
 8004d42:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, IIS2MDC_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d4c:	9302      	str	r3, [sp, #8]
 8004d4e:	893b      	ldrh	r3, [r7, #8]
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	213d      	movs	r1, #61	; 0x3d
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f001 fdfe 	bl	800695c <HAL_I2C_Mem_Write>

  return 0;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af04      	add	r7, sp, #16
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	461a      	mov	r2, r3
 8004d76:	460b      	mov	r3, r1
 8004d78:	72fb      	strb	r3, [r7, #11]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, IIS2MDC_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d86:	9302      	str	r3, [sp, #8]
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2301      	movs	r3, #1
 8004d92:	213d      	movs	r1, #61	; 0x3d
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f001 fef5 	bl	8006b84 <HAL_I2C_Mem_Read>

  return 0;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <tx_com>:

static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <tx_com+0x24>)
 8004dba:	f007 ff1f 	bl	800cbfc <HAL_UART_Transmit>

}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000770 	.word	0x20000770

08004dcc <platform_delay>:

static void platform_delay(uint32_t ms){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fee5 	bl	8005ba4 <HAL_Delay>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_UART_RxCpltCallback>:
/*End of Magnetometer ------------------------------------------------*/



/* GPS -------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	Flag = 1;
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <HAL_UART_RxCpltCallback+0x1c>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	701a      	strb	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	200011c0 	.word	0x200011c0
 8004e04:	00000000 	.word	0x00000000

08004e08 <DPMeasurement>:
}

/* END of GPS -----------------------------------*/

/* DP Sensor ---------------------------*/
void DPMeasurement(sens_pkt_flt* pkt){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	for(int i = 0; i < 4; i++){
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e008      	b.n	8004e28 <DPMeasurement+0x20>
		buf[i] = 0;
 8004e16:	4b4a      	ldr	r3, [pc, #296]	; (8004f40 <DPMeasurement+0x138>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	ddf3      	ble.n	8004e16 <DPMeasurement+0xe>
	}
	ret = HAL_I2C_Master_Receive_DMA(&hi2c3, DP_ADDR, buf, 4);
 8004e2e:	2350      	movs	r3, #80	; 0x50
 8004e30:	b299      	uxth	r1, r3
 8004e32:	4b43      	ldr	r3, [pc, #268]	; (8004f40 <DPMeasurement+0x138>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2304      	movs	r3, #4
 8004e38:	4842      	ldr	r0, [pc, #264]	; (8004f44 <DPMeasurement+0x13c>)
 8004e3a:	f001 fc9f 	bl	800677c <HAL_I2C_Master_Receive_DMA>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	76fb      	strb	r3, [r7, #27]
	int16_t val = (((int16_t)(buf[0]) << 8) & 0x3F00) | buf[1]; //getting value from sensor
 8004e42:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <DPMeasurement+0x138>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004e50:	b21a      	sxth	r2, r3
 8004e52:	4b3b      	ldr	r3, [pc, #236]	; (8004f40 <DPMeasurement+0x138>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b21b      	sxth	r3, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	833b      	strh	r3, [r7, #24]
	int16_t temp = (((int16_t)(buf[2]) << 3) & 0x7F8) | buf[3]>>5;
 8004e60:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <DPMeasurement+0x138>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3302      	adds	r3, #2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004e70:	b21a      	sxth	r2, r3
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <DPMeasurement+0x138>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3303      	adds	r3, #3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	82fb      	strh	r3, [r7, #22]
	if(ret != HAL_OK){
 8004e84:	7efb      	ldrb	r3, [r7, #27]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <DPMeasurement+0x88>
		perror( "how did i get here");
 8004e8a:	482f      	ldr	r0, [pc, #188]	; (8004f48 <DPMeasurement+0x140>)
 8004e8c:	f00e ff74 	bl	8013d78 <perror>
	}
	val = val - 0x2000;
 8004e90:	8b3b      	ldrh	r3, [r7, #24]
 8004e92:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	833b      	strh	r3, [r7, #24]
	val = abs(val);
 8004e9a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bfb8      	it	lt
 8004ea2:	425b      	neglt	r3, r3
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	833b      	strh	r3, [r7, #24]

	pkt->stale_bits = pkt->stale_bits | AIR_NEW;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	705a      	strb	r2, [r3, #1]
//	pkt->airspeed = val;

	float diffP = (float)(val * 20)/6554;
 8004eb6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eca:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004f4c <DPMeasurement+0x144>
 8004ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed2:	edc7 7a04 	vstr	s15, [r7, #16]
	float vel = (diffP * 2)/1.225;
 8004ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004ede:	ee17 0a90 	vmov	r0, s15
 8004ee2:	f7fb fb31 	bl	8000548 <__aeabi_f2d>
 8004ee6:	a314      	add	r3, pc, #80	; (adr r3, 8004f38 <DPMeasurement+0x130>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fcae 	bl	800084c <__aeabi_ddiv>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f7fb fe76 	bl	8000be8 <__aeabi_d2f>
 8004efc:	4603      	mov	r3, r0
 8004efe:	60fb      	str	r3, [r7, #12]
	vel = sqrt(vel);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7fb fb21 	bl	8000548 <__aeabi_f2d>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	ec43 2b10 	vmov	d0, r2, r3
 8004f0e:	f013 f857 	bl	8017fc0 <sqrt>
 8004f12:	ec53 2b10 	vmov	r2, r3, d0
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fb fe65 	bl	8000be8 <__aeabi_d2f>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	60fb      	str	r3, [r7, #12]
	if(DEBUG_MODE){
		printf("%f \r\n", vel);
		printf("%i \r\n", temp);
	}
	pkt->airspeed = vel;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c
	pkt->differential_pressure = diffP;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f2e:	bf00      	nop
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	9999999a 	.word	0x9999999a
 8004f3c:	3ff39999 	.word	0x3ff39999
 8004f40:	200011c4 	.word	0x200011c4
 8004f44:	20000470 	.word	0x20000470
 8004f48:	08019144 	.word	0x08019144
 8004f4c:	45ccd000 	.word	0x45ccd000

08004f50 <HAL_GPIO_EXTI_Callback>:

/* End DP Sensor -----------------------------------------*/



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d00f      	beq.n	8004f82 <HAL_GPIO_EXTI_Callback+0x32>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	dc18      	bgt.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d006      	beq.n	8004f7a <HAL_GPIO_EXTI_Callback+0x2a>
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	dc14      	bgt.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d00a      	beq.n	8004f8a <HAL_GPIO_EXTI_Callback+0x3a>
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00c      	beq.n	8004f92 <HAL_GPIO_EXTI_Callback+0x42>
		break;
	case GPIO_PIN_2:
		gyro_rdy = 1;
		break;
	}
}
 8004f78:	e00f      	b.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
		dp_read = true;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0x58>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
		break;
 8004f80:	e00b      	b.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
		dp_read = true;
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0x58>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
		break;
 8004f88:	e007      	b.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
		accel_rdy = 1;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <HAL_GPIO_EXTI_Callback+0x5c>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
		break;
 8004f90:	e003      	b.n	8004f9a <HAL_GPIO_EXTI_Callback+0x4a>
		gyro_rdy = 1;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <HAL_GPIO_EXTI_Callback+0x60>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
		break;
 8004f98:	bf00      	nop
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	2000098c 	.word	0x2000098c
 8004fac:	200009dc 	.word	0x200009dc
 8004fb0:	200009dd 	.word	0x200009dd

08004fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb8:	b672      	cpsid	i
}
 8004fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fbc:	e7fe      	b.n	8004fbc <Error_Handler+0x8>
	...

08004fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_MspInit+0x44>)
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fca:	4a0e      	ldr	r2, [pc, #56]	; (8005004 <HAL_MspInit+0x44>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <HAL_MspInit+0x44>)
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_MspInit+0x44>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	4a08      	ldr	r2, [pc, #32]	; (8005004 <HAL_MspInit+0x44>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_MspInit+0x44>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b09a      	sub	sp, #104	; 0x68
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005010:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005020:	f107 0320 	add.w	r3, r7, #32
 8005024:	2234      	movs	r2, #52	; 0x34
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f00d ff89 	bl	8012f40 <memset>
  if(hi2c->Instance==I2C1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a8f      	ldr	r2, [pc, #572]	; (8005270 <HAL_I2C_MspInit+0x268>)
 8005034:	4293      	cmp	r3, r2
 8005036:	f040 808a 	bne.w	800514e <HAL_I2C_MspInit+0x146>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800503a:	2340      	movs	r3, #64	; 0x40
 800503c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800503e:	2300      	movs	r3, #0
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005042:	f107 0320 	add.w	r3, r7, #32
 8005046:	4618      	mov	r0, r3
 8005048:	f006 f86a 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005052:	f7ff ffaf 	bl	8004fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	4b87      	ldr	r3, [pc, #540]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a86      	ldr	r2, [pc, #536]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b84      	ldr	r3, [pc, #528]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800506e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005074:	2312      	movs	r3, #18
 8005076:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	2303      	movs	r3, #3
 800507e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005080:	2304      	movs	r3, #4
 8005082:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005088:	4619      	mov	r1, r3
 800508a:	487b      	ldr	r0, [pc, #492]	; (8005278 <HAL_I2C_MspInit+0x270>)
 800508c:	f001 f944 	bl	8006318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005090:	4b78      	ldr	r3, [pc, #480]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	4a77      	ldr	r2, [pc, #476]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800509a:	6593      	str	r3, [r2, #88]	; 0x58
 800509c:	4b75      	ldr	r3, [pc, #468]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80050a8:	4b74      	ldr	r3, [pc, #464]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050aa:	4a75      	ldr	r2, [pc, #468]	; (8005280 <HAL_I2C_MspInit+0x278>)
 80050ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80050ae:	4b73      	ldr	r3, [pc, #460]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050b0:	2205      	movs	r2, #5
 80050b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050b4:	4b71      	ldr	r3, [pc, #452]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ba:	4b70      	ldr	r3, [pc, #448]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050bc:	2200      	movs	r2, #0
 80050be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050c0:	4b6e      	ldr	r3, [pc, #440]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050c6:	4b6d      	ldr	r3, [pc, #436]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050cc:	4b6b      	ldr	r3, [pc, #428]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80050d2:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050d8:	4b68      	ldr	r3, [pc, #416]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050da:	2200      	movs	r2, #0
 80050dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80050de:	4867      	ldr	r0, [pc, #412]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050e0:	f000 fe96 	bl	8005e10 <HAL_DMA_Init>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 80050ea:	f7ff ff63 	bl	8004fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a62      	ldr	r2, [pc, #392]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80050f4:	4a61      	ldr	r2, [pc, #388]	; (800527c <HAL_I2C_MspInit+0x274>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 80050fa:	4b62      	ldr	r3, [pc, #392]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 80050fc:	4a62      	ldr	r2, [pc, #392]	; (8005288 <HAL_I2C_MspInit+0x280>)
 80050fe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 8005100:	4b60      	ldr	r3, [pc, #384]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005102:	2205      	movs	r2, #5
 8005104:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005106:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005108:	2210      	movs	r2, #16
 800510a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800510c:	4b5d      	ldr	r3, [pc, #372]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 800510e:	2200      	movs	r2, #0
 8005110:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005118:	4b5a      	ldr	r3, [pc, #360]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 800511a:	2200      	movs	r2, #0
 800511c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005124:	4b57      	ldr	r3, [pc, #348]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005126:	2200      	movs	r2, #0
 8005128:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800512a:	4b56      	ldr	r3, [pc, #344]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 800512c:	2200      	movs	r2, #0
 800512e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005130:	4854      	ldr	r0, [pc, #336]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005132:	f000 fe6d 	bl	8005e10 <HAL_DMA_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 800513c:	f7ff ff3a 	bl	8004fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a50      	ldr	r2, [pc, #320]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
 8005146:	4a4f      	ldr	r2, [pc, #316]	; (8005284 <HAL_I2C_MspInit+0x27c>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800514c:	e0e4      	b.n	8005318 <HAL_I2C_MspInit+0x310>
  else if(hi2c->Instance==I2C2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <HAL_I2C_MspInit+0x284>)
 8005154:	4293      	cmp	r3, r2
 8005156:	f040 80a3 	bne.w	80052a0 <HAL_I2C_MspInit+0x298>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800515e:	2300      	movs	r3, #0
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005162:	f107 0320 	add.w	r3, r7, #32
 8005166:	4618      	mov	r0, r3
 8005168:	f005 ffda 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_MspInit+0x16e>
      Error_Handler();
 8005172:	f7ff ff1f 	bl	8004fb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	4a3e      	ldr	r2, [pc, #248]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005182:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800518e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005194:	2312      	movs	r3, #18
 8005196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2300      	movs	r3, #0
 800519a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519c:	2303      	movs	r3, #3
 800519e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80051a0:	2304      	movs	r3, #4
 80051a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051a8:	4619      	mov	r1, r3
 80051aa:	4833      	ldr	r0, [pc, #204]	; (8005278 <HAL_I2C_MspInit+0x270>)
 80051ac:	f001 f8b4 	bl	8006318 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80051b0:	4b30      	ldr	r3, [pc, #192]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 80051b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
 80051bc:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_I2C_MspInit+0x26c>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80051c8:	4b31      	ldr	r3, [pc, #196]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051ca:	4a32      	ldr	r2, [pc, #200]	; (8005294 <HAL_I2C_MspInit+0x28c>)
 80051cc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 80051ce:	4b30      	ldr	r3, [pc, #192]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051d0:	2203      	movs	r2, #3
 80051d2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051d4:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051da:	4b2d      	ldr	r3, [pc, #180]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051dc:	2200      	movs	r2, #0
 80051de:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051e6:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051ec:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_I2C_MspInit+0x288>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80051fe:	4824      	ldr	r0, [pc, #144]	; (8005290 <HAL_I2C_MspInit+0x288>)
 8005200:	f000 fe06 	bl	8005e10 <HAL_DMA_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_MspInit+0x206>
      Error_Handler();
 800520a:	f7ff fed3 	bl	8004fb4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_I2C_MspInit+0x288>)
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_I2C_MspInit+0x288>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800521a:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <HAL_I2C_MspInit+0x290>)
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_I2C_MspInit+0x294>)
 800521e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005222:	2203      	movs	r2, #3
 8005224:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005228:	2210      	movs	r2, #16
 800522a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <HAL_I2C_MspInit+0x290>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005238:	4b17      	ldr	r3, [pc, #92]	; (8005298 <HAL_I2C_MspInit+0x290>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_I2C_MspInit+0x290>)
 800524c:	2200      	movs	r2, #0
 800524e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8005250:	4811      	ldr	r0, [pc, #68]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005252:	f000 fddd 	bl	8005e10 <HAL_DMA_Init>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_MspInit+0x258>
      Error_Handler();
 800525c:	f7ff feaa 	bl	8004fb4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
 8005266:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <HAL_I2C_MspInit+0x290>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800526c:	e054      	b.n	8005318 <HAL_I2C_MspInit+0x310>
 800526e:	bf00      	nop
 8005270:	40005400 	.word	0x40005400
 8005274:	40021000 	.word	0x40021000
 8005278:	48000400 	.word	0x48000400
 800527c:	200004c4 	.word	0x200004c4
 8005280:	4002046c 	.word	0x4002046c
 8005284:	2000050c 	.word	0x2000050c
 8005288:	40020480 	.word	0x40020480
 800528c:	40005800 	.word	0x40005800
 8005290:	20000554 	.word	0x20000554
 8005294:	40020058 	.word	0x40020058
 8005298:	2000059c 	.word	0x2000059c
 800529c:	40020044 	.word	0x40020044
  else if(hi2c->Instance==I2C3)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_I2C_MspInit+0x318>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d136      	bne.n	8005318 <HAL_I2C_MspInit+0x310>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80052aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80052b0:	2300      	movs	r3, #0
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052b4:	f107 0320 	add.w	r3, r7, #32
 80052b8:	4618      	mov	r0, r3
 80052ba:	f005 ff31 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_MspInit+0x2c0>
      Error_Handler();
 80052c4:	f7ff fe76 	bl	8004fb4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 80052ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 80052d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052e0:	2303      	movs	r3, #3
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052e4:	2312      	movs	r3, #18
 80052e6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80052f0:	2304      	movs	r3, #4
 80052f2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052f8:	4619      	mov	r1, r3
 80052fa:	480b      	ldr	r0, [pc, #44]	; (8005328 <HAL_I2C_MspInit+0x320>)
 80052fc:	f001 f80c 	bl	8006318 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	4a07      	ldr	r2, [pc, #28]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 8005306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800530a:	6593      	str	r3, [r2, #88]	; 0x58
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_I2C_MspInit+0x31c>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
}
 8005318:	bf00      	nop
 800531a:	3768      	adds	r7, #104	; 0x68
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40005c00 	.word	0x40005c00
 8005324:	40021000 	.word	0x40021000
 8005328:	48000800 	.word	0x48000800

0800532c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a40      	ldr	r2, [pc, #256]	; (800544c <HAL_SPI_MspInit+0x120>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d17a      	bne.n	8005444 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <HAL_SPI_MspInit+0x124>)
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	4a3f      	ldr	r2, [pc, #252]	; (8005450 <HAL_SPI_MspInit+0x124>)
 8005354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005358:	6613      	str	r3, [r2, #96]	; 0x60
 800535a:	4b3d      	ldr	r3, [pc, #244]	; (8005450 <HAL_SPI_MspInit+0x124>)
 800535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005366:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <HAL_SPI_MspInit+0x124>)
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_SPI_MspInit+0x124>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005372:	4b37      	ldr	r3, [pc, #220]	; (8005450 <HAL_SPI_MspInit+0x124>)
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800537e:	23e0      	movs	r3, #224	; 0xe0
 8005380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005382:	2302      	movs	r3, #2
 8005384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538a:	2303      	movs	r3, #3
 800538c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800538e:	2305      	movs	r3, #5
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005392:	f107 0314 	add.w	r3, r7, #20
 8005396:	4619      	mov	r1, r3
 8005398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800539c:	f000 ffbc 	bl	8006318 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel3;
 80053a0:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053a2:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <HAL_SPI_MspInit+0x12c>)
 80053a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_4;
 80053a6:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053a8:	2204      	movs	r2, #4
 80053aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053ac:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b2:	4b28      	ldr	r3, [pc, #160]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053b8:	4b26      	ldr	r3, [pc, #152]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053be:	4b25      	ldr	r3, [pc, #148]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80053d6:	481f      	ldr	r0, [pc, #124]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053d8:	f000 fd1a 	bl	8005e10 <HAL_DMA_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80053e2:	f7ff fde7 	bl	8004fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_SPI_MspInit+0x128>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_SPI_MspInit+0x130>)
 80053f4:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_SPI_MspInit+0x134>)
 80053f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 80053f8:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_SPI_MspInit+0x130>)
 80053fa:	2204      	movs	r2, #4
 80053fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005400:	2210      	movs	r2, #16
 8005402:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005404:	4b15      	ldr	r3, [pc, #84]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005406:	2200      	movs	r2, #0
 8005408:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_SPI_MspInit+0x130>)
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005412:	2200      	movs	r2, #0
 8005414:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_SPI_MspInit+0x130>)
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005424:	2200      	movs	r2, #0
 8005426:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005428:	480c      	ldr	r0, [pc, #48]	; (800545c <HAL_SPI_MspInit+0x130>)
 800542a:	f000 fcf1 	bl	8005e10 <HAL_DMA_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8005434:	f7ff fdbe 	bl	8004fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_SPI_MspInit+0x130>)
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
 800543e:	4a07      	ldr	r2, [pc, #28]	; (800545c <HAL_SPI_MspInit+0x130>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005444:	bf00      	nop
 8005446:	3728      	adds	r7, #40	; 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40013000 	.word	0x40013000
 8005450:	40021000 	.word	0x40021000
 8005454:	20000648 	.word	0x20000648
 8005458:	40020430 	.word	0x40020430
 800545c:	20000690 	.word	0x20000690
 8005460:	40020444 	.word	0x40020444

08005464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d10c      	bne.n	8005490 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6593      	str	r3, [r2, #88]	; 0x58
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800548e:	e018      	b.n	80054c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <HAL_TIM_Base_MspInit+0x6c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d113      	bne.n	80054c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 800549c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549e:	4a0b      	ldr	r2, [pc, #44]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	6613      	str	r3, [r2, #96]	; 0x60
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_TIM_Base_MspInit+0x68>)
 80054a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	2100      	movs	r1, #0
 80054b6:	2018      	movs	r0, #24
 80054b8:	f000 fc73 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80054bc:	2018      	movs	r0, #24
 80054be:	f000 fc8c 	bl	8005dda <HAL_NVIC_EnableIRQ>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b09a      	sub	sp, #104	; 0x68
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054ec:	f107 0320 	add.w	r3, r7, #32
 80054f0:	2234      	movs	r2, #52	; 0x34
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f00d fd23 	bl	8012f40 <memset>
  if(huart->Instance==USART1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a89      	ldr	r2, [pc, #548]	; (8005724 <HAL_UART_MspInit+0x250>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d136      	bne.n	8005572 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005504:	2301      	movs	r3, #1
 8005506:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005508:	2300      	movs	r3, #0
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800550c:	f107 0320 	add.w	r3, r7, #32
 8005510:	4618      	mov	r0, r3
 8005512:	f005 fe05 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800551c:	f7ff fd4a 	bl	8004fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005520:	4b81      	ldr	r3, [pc, #516]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005524:	4a80      	ldr	r2, [pc, #512]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800552a:	6613      	str	r3, [r2, #96]	; 0x60
 800552c:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <HAL_UART_MspInit+0x254>)
 800552e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005538:	4b7b      	ldr	r3, [pc, #492]	; (8005728 <HAL_UART_MspInit+0x254>)
 800553a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553c:	4a7a      	ldr	r2, [pc, #488]	; (8005728 <HAL_UART_MspInit+0x254>)
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005544:	4b78      	ldr	r3, [pc, #480]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005550:	23c0      	movs	r3, #192	; 0xc0
 8005552:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005560:	2307      	movs	r3, #7
 8005562:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005568:	4619      	mov	r1, r3
 800556a:	4870      	ldr	r0, [pc, #448]	; (800572c <HAL_UART_MspInit+0x258>)
 800556c:	f000 fed4 	bl	8006318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005570:	e0d3      	b.n	800571a <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6e      	ldr	r2, [pc, #440]	; (8005730 <HAL_UART_MspInit+0x25c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d137      	bne.n	80055ec <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800557c:	2302      	movs	r3, #2
 800557e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005580:	2300      	movs	r3, #0
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005584:	f107 0320 	add.w	r3, r7, #32
 8005588:	4618      	mov	r0, r3
 800558a:	f005 fdc9 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8005594:	f7ff fd0e 	bl	8004fb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005598:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_UART_MspInit+0x254>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a62      	ldr	r2, [pc, #392]	; (8005728 <HAL_UART_MspInit+0x254>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b60      	ldr	r3, [pc, #384]	; (8005728 <HAL_UART_MspInit+0x254>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b0:	4b5d      	ldr	r3, [pc, #372]	; (8005728 <HAL_UART_MspInit+0x254>)
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b4:	4a5c      	ldr	r2, [pc, #368]	; (8005728 <HAL_UART_MspInit+0x254>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055bc:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <HAL_UART_MspInit+0x254>)
 80055be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055c8:	230c      	movs	r3, #12
 80055ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d4:	2303      	movs	r3, #3
 80055d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055d8:	2307      	movs	r3, #7
 80055da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055e0:	4619      	mov	r1, r3
 80055e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055e6:	f000 fe97 	bl	8006318 <HAL_GPIO_Init>
}
 80055ea:	e096      	b.n	800571a <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART3)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a50      	ldr	r2, [pc, #320]	; (8005734 <HAL_UART_MspInit+0x260>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	f040 8091 	bne.w	800571a <HAL_UART_MspInit+0x246>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055f8:	2304      	movs	r3, #4
 80055fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005600:	f107 0320 	add.w	r3, r7, #32
 8005604:	4618      	mov	r0, r3
 8005606:	f005 fd8b 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8005610:	f7ff fcd0 	bl	8004fb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005614:	4b44      	ldr	r3, [pc, #272]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	4a43      	ldr	r2, [pc, #268]	; (8005728 <HAL_UART_MspInit+0x254>)
 800561a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800561e:	6593      	str	r3, [r2, #88]	; 0x58
 8005620:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800562c:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <HAL_UART_MspInit+0x254>)
 800562e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005630:	4a3d      	ldr	r2, [pc, #244]	; (8005728 <HAL_UART_MspInit+0x254>)
 8005632:	f043 0304 	orr.w	r3, r3, #4
 8005636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_UART_MspInit+0x254>)
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005644:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005648:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564a:	2302      	movs	r3, #2
 800564c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564e:	2300      	movs	r3, #0
 8005650:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005652:	2303      	movs	r3, #3
 8005654:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005656:	2307      	movs	r3, #7
 8005658:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800565a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800565e:	4619      	mov	r1, r3
 8005660:	4835      	ldr	r0, [pc, #212]	; (8005738 <HAL_UART_MspInit+0x264>)
 8005662:	f000 fe59 	bl	8006318 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005666:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_UART_MspInit+0x268>)
 8005668:	4a35      	ldr	r2, [pc, #212]	; (8005740 <HAL_UART_MspInit+0x26c>)
 800566a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <HAL_UART_MspInit+0x268>)
 800566e:	2202      	movs	r2, #2
 8005670:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005672:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_UART_MspInit+0x268>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005678:	4b30      	ldr	r3, [pc, #192]	; (800573c <HAL_UART_MspInit+0x268>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800567e:	4b2f      	ldr	r3, [pc, #188]	; (800573c <HAL_UART_MspInit+0x268>)
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005684:	4b2d      	ldr	r3, [pc, #180]	; (800573c <HAL_UART_MspInit+0x268>)
 8005686:	2200      	movs	r2, #0
 8005688:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800568a:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_UART_MspInit+0x268>)
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005690:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_UART_MspInit+0x268>)
 8005692:	2200      	movs	r2, #0
 8005694:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <HAL_UART_MspInit+0x268>)
 8005698:	2200      	movs	r2, #0
 800569a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800569c:	4827      	ldr	r0, [pc, #156]	; (800573c <HAL_UART_MspInit+0x268>)
 800569e:	f000 fbb7 	bl	8005e10 <HAL_DMA_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 80056a8:	f7ff fc84 	bl	8004fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a23      	ldr	r2, [pc, #140]	; (800573c <HAL_UART_MspInit+0x268>)
 80056b0:	671a      	str	r2, [r3, #112]	; 0x70
 80056b2:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_UART_MspInit+0x268>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80056b8:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056ba:	4a23      	ldr	r2, [pc, #140]	; (8005748 <HAL_UART_MspInit+0x274>)
 80056bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056c0:	2202      	movs	r2, #2
 80056c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056c4:	4b1f      	ldr	r3, [pc, #124]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056c6:	2210      	movs	r2, #16
 80056c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ca:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056d8:	2200      	movs	r2, #0
 80056da:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056ee:	4815      	ldr	r0, [pc, #84]	; (8005744 <HAL_UART_MspInit+0x270>)
 80056f0:	f000 fb8e 	bl	8005e10 <HAL_DMA_Init>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_UART_MspInit+0x22a>
      Error_Handler();
 80056fa:	f7ff fc5b 	bl	8004fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_UART_MspInit+0x270>)
 8005702:	66da      	str	r2, [r3, #108]	; 0x6c
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <HAL_UART_MspInit+0x270>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	2027      	movs	r0, #39	; 0x27
 8005710:	f000 fb47 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005714:	2027      	movs	r0, #39	; 0x27
 8005716:	f000 fb60 	bl	8005dda <HAL_NVIC_EnableIRQ>
}
 800571a:	bf00      	nop
 800571c:	3768      	adds	r7, #104	; 0x68
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40013800 	.word	0x40013800
 8005728:	40021000 	.word	0x40021000
 800572c:	48000400 	.word	0x48000400
 8005730:	40004400 	.word	0x40004400
 8005734:	40004800 	.word	0x40004800
 8005738:	48000800 	.word	0x48000800
 800573c:	200008fc 	.word	0x200008fc
 8005740:	40020030 	.word	0x40020030
 8005744:	20000944 	.word	0x20000944
 8005748:	4002001c 	.word	0x4002001c

0800574c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005750:	e7fe      	b.n	8005750 <NMI_Handler+0x4>

08005752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005752:	b480      	push	{r7}
 8005754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005756:	e7fe      	b.n	8005756 <HardFault_Handler+0x4>

08005758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800575c:	e7fe      	b.n	800575c <MemManage_Handler+0x4>

0800575e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005762:	e7fe      	b.n	8005762 <BusFault_Handler+0x4>

08005764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005768:	e7fe      	b.n	8005768 <UsageFault_Handler+0x4>

0800576a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005798:	f000 f9e4 	bl	8005b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800579c:	bf00      	nop
 800579e:	bd80      	pop	{r7, pc}

080057a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f000 ff41 	bl	800662c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}

080057ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057b2:	2004      	movs	r0, #4
 80057b4:	f000 ff3a 	bl	800662c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}

080057bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIRSPEED_DRDY_Pin);
 80057c0:	2008      	movs	r0, #8
 80057c2:	f000 ff33 	bl	800662c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057d0:	4802      	ldr	r0, [pc, #8]	; (80057dc <DMA1_Channel2_IRQHandler+0x10>)
 80057d2:	f000 fcb4 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000944 	.word	0x20000944

080057e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80057e4:	4802      	ldr	r0, [pc, #8]	; (80057f0 <DMA1_Channel3_IRQHandler+0x10>)
 80057e6:	f000 fcaa 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200008fc 	.word	0x200008fc

080057f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80057f8:	4802      	ldr	r0, [pc, #8]	; (8005804 <DMA1_Channel4_IRQHandler+0x10>)
 80057fa:	f000 fca0 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	2000059c 	.word	0x2000059c

08005808 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <DMA1_Channel5_IRQHandler+0x10>)
 800580e:	f000 fc96 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000554 	.word	0x20000554

0800581c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005822:	f006 fe0b 	bl	800c43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000724 	.word	0x20000724

08005830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <USART3_IRQHandler+0x10>)
 8005836:	f007 fb5b 	bl	800cef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000878 	.word	0x20000878

08005844 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005848:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800584c:	f000 feee 	bl	800662c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}

08005854 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <DMA2_Channel3_IRQHandler+0x10>)
 800585a:	f000 fc70 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000648 	.word	0x20000648

08005868 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <DMA2_Channel4_IRQHandler+0x10>)
 800586e:	f000 fc66 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000690 	.word	0x20000690

0800587c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <USB_IRQHandler+0x10>)
 8005882:	f003 f8ff 	bl	8008a84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001ea4 	.word	0x20001ea4

08005890 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <DMA2_Channel6_IRQHandler+0x10>)
 8005896:	f000 fc52 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200004c4 	.word	0x200004c4

080058a4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <DMA2_Channel7_IRQHandler+0x10>)
 80058aa:	f000 fc48 	bl	800613e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000050c 	.word	0x2000050c

080058b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return 1;
 80058bc:	2301      	movs	r3, #1
}
 80058be:	4618      	mov	r0, r3
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <_kill>:

int _kill(int pid, int sig)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058d2:	f00d fb0b 	bl	8012eec <__errno>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2216      	movs	r2, #22
 80058da:	601a      	str	r2, [r3, #0]
  return -1;
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <_exit>:

void _exit (int status)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ffe7 	bl	80058c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80058fa:	e7fe      	b.n	80058fa <_exit+0x12>

080058fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e00a      	b.n	8005924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800590e:	f3af 8000 	nop.w
 8005912:	4601      	mov	r1, r0
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	60ba      	str	r2, [r7, #8]
 800591a:	b2ca      	uxtb	r2, r1
 800591c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	dbf0      	blt.n	800590e <_read+0x12>
  }

  return len;
 800592c:	687b      	ldr	r3, [r7, #4]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e009      	b.n	800595c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	60ba      	str	r2, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f7fd fd4d 	bl	80033f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	dbf1      	blt.n	8005948 <_write+0x12>
  }
  return len;
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_close>:

int _close(int file)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005996:	605a      	str	r2, [r3, #4]
  return 0;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <_isatty>:

int _isatty(int file)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <_sbrk+0x5c>)
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <_sbrk+0x60>)
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059ec:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <_sbrk+0x64>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <_sbrk+0x64>)
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <_sbrk+0x68>)
 80059f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <_sbrk+0x64>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d207      	bcs.n	8005a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a08:	f00d fa70 	bl	8012eec <__errno>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	220c      	movs	r2, #12
 8005a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e009      	b.n	8005a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <_sbrk+0x64>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <_sbrk+0x64>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <_sbrk+0x64>)
 8005a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2000a000 	.word	0x2000a000
 8005a38:	00004000 	.word	0x00004000
 8005a3c:	200011c8 	.word	0x200011c8
 8005a40:	200023d0 	.word	0x200023d0

08005a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <SystemInit+0x20>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <SystemInit+0x20>)
 8005a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005a6c:	f7ff ffea 	bl	8005a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a70:	480c      	ldr	r0, [pc, #48]	; (8005aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a72:	490d      	ldr	r1, [pc, #52]	; (8005aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <LoopForever+0xe>)
  movs r3, #0
 8005a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a78:	e002      	b.n	8005a80 <LoopCopyDataInit>

08005a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7e:	3304      	adds	r3, #4

08005a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a84:	d3f9      	bcc.n	8005a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a88:	4c0a      	ldr	r4, [pc, #40]	; (8005ab4 <LoopForever+0x16>)
  movs r3, #0
 8005a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a8c:	e001      	b.n	8005a92 <LoopFillZerobss>

08005a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a90:	3204      	adds	r2, #4

08005a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a94:	d3fb      	bcc.n	8005a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a96:	f00d fa2f 	bl	8012ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a9a:	f7fe f895 	bl	8003bc8 <main>

08005a9e <LoopForever>:

LoopForever:
    b LoopForever
 8005a9e:	e7fe      	b.n	8005a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005aa0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa8:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8005aac:	08019f70 	.word	0x08019f70
  ldr r2, =_sbss
 8005ab0:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8005ab4:	200023d0 	.word	0x200023d0

08005ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ab8:	e7fe      	b.n	8005ab8 <ADC1_2_IRQHandler>

08005aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ac4:	2003      	movs	r0, #3
 8005ac6:	f000 f961 	bl	8005d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aca:	200f      	movs	r0, #15
 8005acc:	f000 f80e 	bl	8005aec <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	71fb      	strb	r3, [r7, #7]
 8005ada:	e001      	b.n	8005ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005adc:	f7ff fa70 	bl	8004fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005af8:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <HAL_InitTick+0x6c>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d023      	beq.n	8005b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005b00:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <HAL_InitTick+0x70>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <HAL_InitTick+0x6c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f96d 	bl	8005df6 <HAL_SYSTICK_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b0f      	cmp	r3, #15
 8005b26:	d809      	bhi.n	8005b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	f000 f937 	bl	8005da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b34:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <HAL_InitTick+0x74>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e007      	b.n	8005b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e004      	b.n	8005b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e001      	b.n	8005b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000008 	.word	0x20000008
 8005b5c:	20000000 	.word	0x20000000
 8005b60:	20000004 	.word	0x20000004

08005b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_IncTick+0x20>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_IncTick+0x24>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4413      	add	r3, r2
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <HAL_IncTick+0x24>)
 8005b76:	6013      	str	r3, [r2, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000008 	.word	0x20000008
 8005b88:	200011cc 	.word	0x200011cc

08005b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_GetTick+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	200011cc 	.word	0x200011cc

08005ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7ff ffee 	bl	8005b8c <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d005      	beq.n	8005bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_Delay+0x44>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bca:	bf00      	nop
 8005bcc:	f7ff ffde 	bl	8005b8c <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d8f7      	bhi.n	8005bcc <HAL_Delay+0x28>
  {
  }
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000008 	.word	0x20000008

08005bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <__NVIC_SetPriorityGrouping+0x44>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c1e:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <__NVIC_SetPriorityGrouping+0x44>)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	60d3      	str	r3, [r2, #12]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <__NVIC_GetPriorityGrouping+0x18>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	0a1b      	lsrs	r3, r3, #8
 8005c3e:	f003 0307 	and.w	r3, r3, #7
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000ed00 	.word	0xe000ed00

08005c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db0b      	blt.n	8005c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	f003 021f 	and.w	r2, r3, #31
 8005c68:	4907      	ldr	r1, [pc, #28]	; (8005c88 <__NVIC_EnableIRQ+0x38>)
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2001      	movs	r0, #1
 8005c72:	fa00 f202 	lsl.w	r2, r0, r2
 8005c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	e000e100 	.word	0xe000e100

08005c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	6039      	str	r1, [r7, #0]
 8005c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db0a      	blt.n	8005cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	490c      	ldr	r1, [pc, #48]	; (8005cd8 <__NVIC_SetPriority+0x4c>)
 8005ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005caa:	0112      	lsls	r2, r2, #4
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	440b      	add	r3, r1
 8005cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cb4:	e00a      	b.n	8005ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4908      	ldr	r1, [pc, #32]	; (8005cdc <__NVIC_SetPriority+0x50>)
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	3b04      	subs	r3, #4
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	440b      	add	r3, r1
 8005cca:	761a      	strb	r2, [r3, #24]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000e100 	.word	0xe000e100
 8005cdc:	e000ed00 	.word	0xe000ed00

08005ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f1c3 0307 	rsb	r3, r3, #7
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf28      	it	cs
 8005cfe:	2304      	movcs	r3, #4
 8005d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3304      	adds	r3, #4
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d902      	bls.n	8005d10 <NVIC_EncodePriority+0x30>
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3b03      	subs	r3, #3
 8005d0e:	e000      	b.n	8005d12 <NVIC_EncodePriority+0x32>
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	401a      	ands	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d28:	f04f 31ff 	mov.w	r1, #4294967295
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	43d9      	mvns	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d38:	4313      	orrs	r3, r2
         );
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3724      	adds	r7, #36	; 0x24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d58:	d301      	bcc.n	8005d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00f      	b.n	8005d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <SysTick_Config+0x40>)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d66:	210f      	movs	r1, #15
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	f7ff ff8e 	bl	8005c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <SysTick_Config+0x40>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <SysTick_Config+0x40>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000e010 	.word	0xe000e010

08005d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ff29 	bl	8005bec <__NVIC_SetPriorityGrouping>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	4603      	mov	r3, r0
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005db4:	f7ff ff3e 	bl	8005c34 <__NVIC_GetPriorityGrouping>
 8005db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	f7ff ff8e 	bl	8005ce0 <NVIC_EncodePriority>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff5d 	bl	8005c8c <__NVIC_SetPriority>
}
 8005dd2:	bf00      	nop
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	4603      	mov	r3, r0
 8005de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff ff31 	bl	8005c50 <__NVIC_EnableIRQ>
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffa2 	bl	8005d48 <SysTick_Config>
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e098      	b.n	8005f54 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b4d      	ldr	r3, [pc, #308]	; (8005f60 <HAL_DMA_Init+0x150>)
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d80f      	bhi.n	8005e4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <HAL_DMA_Init+0x154>)
 8005e36:	4413      	add	r3, r2
 8005e38:	4a4b      	ldr	r2, [pc, #300]	; (8005f68 <HAL_DMA_Init+0x158>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	009a      	lsls	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a48      	ldr	r2, [pc, #288]	; (8005f6c <HAL_DMA_Init+0x15c>)
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8005e4c:	e00e      	b.n	8005e6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <HAL_DMA_Init+0x160>)
 8005e56:	4413      	add	r3, r2
 8005e58:	4a43      	ldr	r2, [pc, #268]	; (8005f68 <HAL_DMA_Init+0x158>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	091b      	lsrs	r3, r3, #4
 8005e60:	009a      	lsls	r2, r3, #2
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a42      	ldr	r2, [pc, #264]	; (8005f74 <HAL_DMA_Init+0x164>)
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec6:	d039      	beq.n	8005f3c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <HAL_DMA_Init+0x15c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d11a      	bne.n	8005f08 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <HAL_DMA_Init+0x168>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f003 031c 	and.w	r3, r3, #28
 8005ede:	210f      	movs	r1, #15
 8005ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	4924      	ldr	r1, [pc, #144]	; (8005f78 <HAL_DMA_Init+0x168>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005eec:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <HAL_DMA_Init+0x168>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef8:	f003 031c 	and.w	r3, r3, #28
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	491d      	ldr	r1, [pc, #116]	; (8005f78 <HAL_DMA_Init+0x168>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
 8005f06:	e019      	b.n	8005f3c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <HAL_DMA_Init+0x16c>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f10:	f003 031c 	and.w	r3, r3, #28
 8005f14:	210f      	movs	r1, #15
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	4917      	ldr	r1, [pc, #92]	; (8005f7c <HAL_DMA_Init+0x16c>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <HAL_DMA_Init+0x16c>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f003 031c 	and.w	r3, r3, #28
 8005f32:	fa01 f303 	lsl.w	r3, r1, r3
 8005f36:	4911      	ldr	r1, [pc, #68]	; (8005f7c <HAL_DMA_Init+0x16c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40020407 	.word	0x40020407
 8005f64:	bffdfff8 	.word	0xbffdfff8
 8005f68:	cccccccd 	.word	0xcccccccd
 8005f6c:	40020000 	.word	0x40020000
 8005f70:	bffdfbf8 	.word	0xbffdfbf8
 8005f74:	40020400 	.word	0x40020400
 8005f78:	400200a8 	.word	0x400200a8
 8005f7c:	400204a8 	.word	0x400204a8

08005f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_DMA_Start_IT+0x20>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e04b      	b.n	8006038 <HAL_DMA_Start_IT+0xb8>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d13a      	bne.n	800602a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f96d 	bl	80062b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 020e 	orr.w	r2, r2, #14
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e00f      	b.n	8006018 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0204 	bic.w	r2, r2, #4
 8006006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 020a 	orr.w	r2, r2, #10
 8006016:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e005      	b.n	8006036 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006032:	2302      	movs	r3, #2
 8006034:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d008      	beq.n	800606a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2204      	movs	r2, #4
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e022      	b.n	80060b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 020e 	bic.w	r2, r2, #14
 8006078:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	f003 021c 	and.w	r2, r3, #28
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2101      	movs	r1, #1
 8006098:	fa01 f202 	lsl.w	r2, r1, r2
 800609c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d005      	beq.n	80060e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e029      	b.n	8006134 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020e 	bic.w	r2, r2, #14
 80060ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	f003 021c 	and.w	r2, r3, #28
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f202 	lsl.w	r2, r1, r2
 8006112:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
    }
  }
  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	f003 031c 	and.w	r3, r3, #28
 800615e:	2204      	movs	r2, #4
 8006160:	409a      	lsls	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d026      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x7a>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d021      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	f003 021c 	and.w	r2, r3, #28
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2104      	movs	r1, #4
 80061a0:	fa01 f202 	lsl.w	r2, r1, r2
 80061a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d071      	beq.n	8006292 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	e06c      	b.n	8006292 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f003 031c 	and.w	r3, r3, #28
 80061c0:	2202      	movs	r2, #2
 80061c2:	409a      	lsls	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02e      	beq.n	800622a <HAL_DMA_IRQHandler+0xec>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d029      	beq.n	800622a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 020a 	bic.w	r2, r2, #10
 80061f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	f003 021c 	and.w	r2, r3, #28
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	2102      	movs	r1, #2
 800620a:	fa01 f202 	lsl.w	r2, r1, r2
 800620e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d038      	beq.n	8006292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006228:	e033      	b.n	8006292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	f003 031c 	and.w	r3, r3, #28
 8006232:	2208      	movs	r2, #8
 8006234:	409a      	lsls	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02a      	beq.n	8006294 <HAL_DMA_IRQHandler+0x156>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d025      	beq.n	8006294 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 020e 	bic.w	r2, r2, #14
 8006256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625c:	f003 021c 	and.w	r2, r3, #28
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	2101      	movs	r1, #1
 8006266:	fa01 f202 	lsl.w	r2, r1, r2
 800626a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006292:	bf00      	nop
 8006294:	bf00      	nop
}
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062aa:	b2db      	uxtb	r3, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f003 021c 	and.w	r2, r3, #28
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f202 	lsl.w	r2, r1, r2
 80062d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d108      	bne.n	80062fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062fa:	e007      	b.n	800630c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006326:	e14e      	b.n	80065c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	2101      	movs	r1, #1
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 8140 	beq.w	80065c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d005      	beq.n	8006358 <HAL_GPIO_Init+0x40>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d130      	bne.n	80063ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	2203      	movs	r2, #3
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4013      	ands	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800638e:	2201      	movs	r2, #1
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4013      	ands	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 0201 	and.w	r2, r3, #1
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d017      	beq.n	80063f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	2203      	movs	r2, #3
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d123      	bne.n	800644a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	08da      	lsrs	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3208      	adds	r2, #8
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	220f      	movs	r2, #15
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43db      	mvns	r3, r3
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4013      	ands	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	08da      	lsrs	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3208      	adds	r2, #8
 8006444:	6939      	ldr	r1, [r7, #16]
 8006446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	2203      	movs	r2, #3
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4013      	ands	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 0203 	and.w	r2, r3, #3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 809a 	beq.w	80065c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800648c:	4b55      	ldr	r3, [pc, #340]	; (80065e4 <HAL_GPIO_Init+0x2cc>)
 800648e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <HAL_GPIO_Init+0x2cc>)
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	6613      	str	r3, [r2, #96]	; 0x60
 8006498:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <HAL_GPIO_Init+0x2cc>)
 800649a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064a4:	4a50      	ldr	r2, [pc, #320]	; (80065e8 <HAL_GPIO_Init+0x2d0>)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	3302      	adds	r3, #2
 80064ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	220f      	movs	r2, #15
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	43db      	mvns	r3, r3
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4013      	ands	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064ce:	d013      	beq.n	80064f8 <HAL_GPIO_Init+0x1e0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a46      	ldr	r2, [pc, #280]	; (80065ec <HAL_GPIO_Init+0x2d4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00d      	beq.n	80064f4 <HAL_GPIO_Init+0x1dc>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a45      	ldr	r2, [pc, #276]	; (80065f0 <HAL_GPIO_Init+0x2d8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <HAL_GPIO_Init+0x1d8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a44      	ldr	r2, [pc, #272]	; (80065f4 <HAL_GPIO_Init+0x2dc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d101      	bne.n	80064ec <HAL_GPIO_Init+0x1d4>
 80064e8:	2303      	movs	r3, #3
 80064ea:	e006      	b.n	80064fa <HAL_GPIO_Init+0x1e2>
 80064ec:	2307      	movs	r3, #7
 80064ee:	e004      	b.n	80064fa <HAL_GPIO_Init+0x1e2>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e002      	b.n	80064fa <HAL_GPIO_Init+0x1e2>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_GPIO_Init+0x1e2>
 80064f8:	2300      	movs	r3, #0
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	f002 0203 	and.w	r2, r2, #3
 8006500:	0092      	lsls	r2, r2, #2
 8006502:	4093      	lsls	r3, r2
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800650a:	4937      	ldr	r1, [pc, #220]	; (80065e8 <HAL_GPIO_Init+0x2d0>)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	3302      	adds	r3, #2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006518:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	43db      	mvns	r3, r3
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4013      	ands	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006542:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43db      	mvns	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006566:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	43db      	mvns	r3, r3
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006596:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43db      	mvns	r3, r3
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4013      	ands	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065ba:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <HAL_GPIO_Init+0x2e0>)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3301      	adds	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f47f aea9 	bne.w	8006328 <HAL_GPIO_Init+0x10>
  }
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40021000 	.word	0x40021000
 80065e8:	40010000 	.word	0x40010000
 80065ec:	48000400 	.word	0x48000400
 80065f0:	48000800 	.word	0x48000800
 80065f4:	48000c00 	.word	0x48000c00
 80065f8:	40010400 	.word	0x40010400

080065fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
 8006608:	4613      	mov	r3, r2
 800660a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800660c:	787b      	ldrb	r3, [r7, #1]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006612:	887a      	ldrh	r2, [r7, #2]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006618:	e002      	b.n	8006620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	4013      	ands	r3, r2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d006      	beq.n	8006650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006642:	4a05      	ldr	r2, [pc, #20]	; (8006658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006644:	88fb      	ldrh	r3, [r7, #6]
 8006646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fc80 	bl	8004f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40010400 	.word	0x40010400

0800665c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e081      	b.n	8006772 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe fcc0 	bl	8005008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2224      	movs	r2, #36	; 0x24
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d107      	bne.n	80066d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	e006      	b.n	80066e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d104      	bne.n	80066f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69d9      	ldr	r1, [r3, #28]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	461a      	mov	r2, r3
 8006788:	460b      	mov	r3, r1
 800678a:	817b      	strh	r3, [r7, #10]
 800678c:	4613      	mov	r3, r2
 800678e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b20      	cmp	r3, #32
 800679a:	f040 80cd 	bne.w	8006938 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d101      	bne.n	80067b2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0c3      	b.n	800693a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_I2C_Master_Receive_DMA+0x44>
 80067bc:	2302      	movs	r3, #2
 80067be:	e0bc      	b.n	800693a <HAL_I2C_Master_Receive_DMA+0x1be>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2222      	movs	r2, #34	; 0x22
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2210      	movs	r2, #16
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	893a      	ldrh	r2, [r7, #8]
 80067e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a55      	ldr	r2, [pc, #340]	; (8006944 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a55      	ldr	r2, [pc, #340]	; (8006948 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80067f4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2bff      	cmp	r3, #255	; 0xff
 80067fe:	d906      	bls.n	800680e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	22ff      	movs	r2, #255	; 0xff
 8006804:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e007      	b.n	800681e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800681c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d070      	beq.n	8006908 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d020      	beq.n	8006870 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	4a46      	ldr	r2, [pc, #280]	; (800694c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	4a45      	ldr	r2, [pc, #276]	; (8006950 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	2200      	movs	r2, #0
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	2200      	movs	r2, #0
 800684c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3324      	adds	r3, #36	; 0x24
 8006858:	4619      	mov	r1, r3
 800685a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006860:	f7ff fb8e 	bl	8005f80 <HAL_DMA_Start_IT>
 8006864:	4603      	mov	r3, r0
 8006866:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006868:	7cfb      	ldrb	r3, [r7, #19]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d138      	bne.n	80068e0 <HAL_I2C_Master_Receive_DMA+0x164>
 800686e:	e013      	b.n	8006898 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e050      	b.n	800693a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	b2da      	uxtb	r2, r3
 800689e:	8979      	ldrh	r1, [r7, #10]
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f001 fe22 	bl	80084f0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80068c6:	2110      	movs	r1, #16
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f001 fe43 	bl	8008554 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e029      	b.n	8006934 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f043 0210 	orr.w	r2, r3, #16
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e018      	b.n	800693a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a13      	ldr	r2, [pc, #76]	; (8006958 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800690c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	b2da      	uxtb	r2, r3
 8006914:	8979      	ldrh	r1, [r7, #10]
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 fde6 	bl	80084f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800692c:	2101      	movs	r1, #1
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fe10 	bl	8008554 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e000      	b.n	800693a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8006938:	2302      	movs	r3, #2
  }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	ffff0000 	.word	0xffff0000
 8006948:	080072df 	.word	0x080072df
 800694c:	0800809f 	.word	0x0800809f
 8006950:	08008135 	.word	0x08008135
 8006954:	80002400 	.word	0x80002400
 8006958:	08006e89 	.word	0x08006e89

0800695c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	4603      	mov	r3, r0
 800696c:	817b      	strh	r3, [r7, #10]
 800696e:	460b      	mov	r3, r1
 8006970:	813b      	strh	r3, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b20      	cmp	r3, #32
 8006980:	f040 80f9 	bne.w	8006b76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_I2C_Mem_Write+0x34>
 800698a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006996:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0ed      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_I2C_Mem_Write+0x4e>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0e6      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069b2:	f7ff f8eb 	bl	8005b8c <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	2319      	movs	r3, #25
 80069be:	2201      	movs	r2, #1
 80069c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fbea 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0d1      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2221      	movs	r2, #33	; 0x21
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2240      	movs	r2, #64	; 0x40
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069fc:	88f8      	ldrh	r0, [r7, #6]
 80069fe:	893a      	ldrh	r2, [r7, #8]
 8006a00:	8979      	ldrh	r1, [r7, #10]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fe39 	bl	8007684 <I2C_RequestMemoryWrite>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e0a9      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2bff      	cmp	r3, #255	; 0xff
 8006a2c:	d90e      	bls.n	8006a4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	8979      	ldrh	r1, [r7, #10]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f001 fd53 	bl	80084f0 <I2C_TransferConfig>
 8006a4a:	e00f      	b.n	8006a6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	8979      	ldrh	r1, [r7, #10]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 fd42 	bl	80084f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f001 fbd4 	bl	800821e <I2C_WaitOnTXISFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e07b      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d034      	beq.n	8006b24 <HAL_I2C_Mem_Write+0x1c8>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d130      	bne.n	8006b24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2180      	movs	r1, #128	; 0x80
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 fb66 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e04d      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2bff      	cmp	r3, #255	; 0xff
 8006ae4:	d90e      	bls.n	8006b04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	8979      	ldrh	r1, [r7, #10]
 8006af4:	2300      	movs	r3, #0
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 fcf7 	bl	80084f0 <I2C_TransferConfig>
 8006b02:	e00f      	b.n	8006b24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	8979      	ldrh	r1, [r7, #10]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 fce6 	bl	80084f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d19e      	bne.n	8006a6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 fbb3 	bl	800829e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e01a      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2220      	movs	r2, #32
 8006b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <HAL_I2C_Mem_Write+0x224>)
 8006b56:	400b      	ands	r3, r1
 8006b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	fe00e800 	.word	0xfe00e800

08006b84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	817b      	strh	r3, [r7, #10]
 8006b96:	460b      	mov	r3, r1
 8006b98:	813b      	strh	r3, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	f040 80fd 	bne.w	8006da6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_I2C_Mem_Read+0x34>
 8006bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0f1      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2C_Mem_Read+0x4e>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e0ea      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bda:	f7fe ffd7 	bl	8005b8c <HAL_GetTick>
 8006bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2319      	movs	r3, #25
 8006be6:	2201      	movs	r2, #1
 8006be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f001 fad6 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0d5      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2222      	movs	r2, #34	; 0x22
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2240      	movs	r2, #64	; 0x40
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c24:	88f8      	ldrh	r0, [r7, #6]
 8006c26:	893a      	ldrh	r2, [r7, #8]
 8006c28:	8979      	ldrh	r1, [r7, #10]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4603      	mov	r3, r0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fd79 	bl	800772c <I2C_RequestMemoryRead>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0ad      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2bff      	cmp	r3, #255	; 0xff
 8006c54:	d90e      	bls.n	8006c74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	8979      	ldrh	r1, [r7, #10]
 8006c64:	4b52      	ldr	r3, [pc, #328]	; (8006db0 <HAL_I2C_Mem_Read+0x22c>)
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f001 fc3f 	bl	80084f0 <I2C_TransferConfig>
 8006c72:	e00f      	b.n	8006c94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	8979      	ldrh	r1, [r7, #10]
 8006c86:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <HAL_I2C_Mem_Read+0x22c>)
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 fc2e 	bl	80084f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f001 fa7d 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e07c      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d034      	beq.n	8006d54 <HAL_I2C_Mem_Read+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d130      	bne.n	8006d54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f001 fa4e 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e04d      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2bff      	cmp	r3, #255	; 0xff
 8006d14:	d90e      	bls.n	8006d34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	8979      	ldrh	r1, [r7, #10]
 8006d24:	2300      	movs	r3, #0
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fbdf 	bl	80084f0 <I2C_TransferConfig>
 8006d32:	e00f      	b.n	8006d54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	8979      	ldrh	r1, [r7, #10]
 8006d46:	2300      	movs	r3, #0
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fbce 	bl	80084f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d19a      	bne.n	8006c94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f001 fa9b 	bl	800829e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e01a      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2220      	movs	r2, #32
 8006d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6859      	ldr	r1, [r3, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_I2C_Mem_Read+0x230>)
 8006d86:	400b      	ands	r3, r1
 8006d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
  }
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	80002400 	.word	0x80002400
 8006db4:	fe00e800 	.word	0xfe00e800

08006db8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
 8006e14:	4613      	mov	r3, r2
 8006e16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <I2C_Master_ISR_IT+0x1e>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e114      	b.n	80070d0 <I2C_Master_ISR_IT+0x248>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d013      	beq.n	8006ee2 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00d      	beq.n	8006ee2 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	f043 0204 	orr.w	r2, r3, #4
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f001 f8bb 	bl	8008056 <I2C_Flush_TXDR>
 8006ee0:	e0e1      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	089b      	lsrs	r3, r3, #2
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d023      	beq.n	8006f36 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	089b      	lsrs	r3, r3, #2
 8006ef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01d      	beq.n	8006f36 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0304 	bic.w	r3, r3, #4
 8006f00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f34:	e0b7      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	085b      	lsrs	r3, r3, #1
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01e      	beq.n	8006f80 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f7e:	e092      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	09db      	lsrs	r3, r3, #7
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05d      	beq.n	8007048 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	099b      	lsrs	r3, r3, #6
 8006f90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d057      	beq.n	8007048 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d040      	beq.n	8007024 <I2C_Master_ISR_IT+0x19c>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d13c      	bne.n	8007024 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d90e      	bls.n	8006fe0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	8a79      	ldrh	r1, [r7, #18]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fa89 	bl	80084f0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fde:	e032      	b.n	8007046 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ff2:	d00b      	beq.n	800700c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	8a79      	ldrh	r1, [r7, #18]
 8007000:	2000      	movs	r0, #0
 8007002:	9000      	str	r0, [sp, #0]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f001 fa73 	bl	80084f0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800700a:	e01c      	b.n	8007046 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007010:	b2da      	uxtb	r2, r3
 8007012:	8a79      	ldrh	r1, [r7, #18]
 8007014:	2300      	movs	r3, #0
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fa67 	bl	80084f0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007022:	e010      	b.n	8007046 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007032:	d003      	beq.n	800703c <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fc51 	bl	80078dc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800703a:	e034      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800703c:	2140      	movs	r1, #64	; 0x40
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 ff12 	bl	8007e68 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007044:	e02f      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
 8007046:	e02e      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	099b      	lsrs	r3, r3, #6
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d028      	beq.n	80070a6 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800705c:	2b00      	cmp	r3, #0
 800705e:	d022      	beq.n	80070a6 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007078:	d015      	beq.n	80070a6 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007082:	d108      	bne.n	8007096 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007092:	605a      	str	r2, [r3, #4]
 8007094:	e007      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fc20 	bl	80078dc <I2C_ITMasterSeqCplt>
 800709c:	e003      	b.n	80070a6 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800709e:	2140      	movs	r1, #64	; 0x40
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fee1 	bl	8007e68 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80070be:	6979      	ldr	r1, [r7, #20]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fca7 	bl	8007a14 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <I2C_Slave_ISR_IT+0x24>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e0ec      	b.n	80072d6 <I2C_Slave_ISR_IT+0x1fe>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800711c:	6939      	ldr	r1, [r7, #16]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fd42 	bl	8007ba8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	091b      	lsrs	r3, r3, #4
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d04d      	beq.n	80071cc <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007138:	2b00      	cmp	r3, #0
 800713a:	d047      	beq.n	80071cc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d128      	bne.n	8007198 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b28      	cmp	r3, #40	; 0x28
 8007150:	d108      	bne.n	8007164 <I2C_Slave_ISR_IT+0x8c>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007158:	d104      	bne.n	8007164 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800715a:	6939      	ldr	r1, [r7, #16]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fe2d 	bl	8007dbc <I2C_ITListenCplt>
 8007162:	e032      	b.n	80071ca <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b29      	cmp	r3, #41	; 0x29
 800716e:	d10e      	bne.n	800718e <I2C_Slave_ISR_IT+0xb6>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007176:	d00a      	beq.n	800718e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 ff68 	bl	8008056 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fbe5 	bl	8007956 <I2C_ITSlaveSeqCplt>
 800718c:	e01d      	b.n	80071ca <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2210      	movs	r2, #16
 8007194:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007196:	e096      	b.n	80072c6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2210      	movs	r2, #16
 800719e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	f043 0204 	orr.w	r2, r3, #4
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <I2C_Slave_ISR_IT+0xe4>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071b8:	f040 8085 	bne.w	80072c6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	4619      	mov	r1, r3
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fe50 	bl	8007e68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80071c8:	e07d      	b.n	80072c6 <I2C_Slave_ISR_IT+0x1ee>
 80071ca:	e07c      	b.n	80072c6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d030      	beq.n	800723a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02a      	beq.n	800723a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d018      	beq.n	8007220 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d14f      	bne.n	80072ca <I2C_Slave_ISR_IT+0x1f2>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007230:	d04b      	beq.n	80072ca <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fb8f 	bl	8007956 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007238:	e047      	b.n	80072ca <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007252:	6939      	ldr	r1, [r7, #16]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fabd 	bl	80077d4 <I2C_ITAddrCplt>
 800725a:	e037      	b.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d031      	beq.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007270:	2b00      	cmp	r3, #0
 8007272:	d02b      	beq.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80072ae:	e00d      	b.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b6:	d002      	beq.n	80072be <I2C_Slave_ISR_IT+0x1e6>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb49 	bl	8007956 <I2C_ITSlaveSeqCplt>
 80072c4:	e002      	b.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80072c6:	bf00      	nop
 80072c8:	e000      	b.n	80072cc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80072ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b088      	sub	sp, #32
 80072e2:	af02      	add	r7, sp, #8
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <I2C_Master_ISR_DMA+0x1a>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e0e1      	b.n	80074bc <I2C_Master_ISR_DMA+0x1de>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d017      	beq.n	800733c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	091b      	lsrs	r3, r3, #4
 8007310:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007314:	2b00      	cmp	r3, #0
 8007316:	d011      	beq.n	800733c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2210      	movs	r2, #16
 800731e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007324:	f043 0204 	orr.w	r2, r3, #4
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800732c:	2120      	movs	r1, #32
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f001 f910 	bl	8008554 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fe8e 	bl	8008056 <I2C_Flush_TXDR>
 800733a:	e0ba      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	09db      	lsrs	r3, r3, #7
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d072      	beq.n	800742e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	099b      	lsrs	r3, r3, #6
 800734c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007350:	2b00      	cmp	r3, #0
 8007352:	d06c      	beq.n	800742e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007362:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d04e      	beq.n	800740c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800737a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007380:	b29b      	uxth	r3, r3
 8007382:	2bff      	cmp	r3, #255	; 0xff
 8007384:	d906      	bls.n	8007394 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800738c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e010      	b.n	80073b6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073a6:	d003      	beq.n	80073b0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e002      	b.n	80073b6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80073b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	8a79      	ldrh	r1, [r7, #18]
 80073be:	2300      	movs	r3, #0
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f001 f893 	bl	80084f0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	d108      	bne.n	80073fa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80073f8:	e05b      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007408:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800740a:	e052      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800741a:	d003      	beq.n	8007424 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fa5d 	bl	80078dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007422:	e046      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fd1e 	bl	8007e68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800742c:	e041      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	099b      	lsrs	r3, r3, #6
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d029      	beq.n	800748e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	099b      	lsrs	r3, r3, #6
 800743e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007442:	2b00      	cmp	r3, #0
 8007444:	d023      	beq.n	800748e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d119      	bne.n	8007484 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800745e:	d027      	beq.n	80074b0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007468:	d108      	bne.n	800747c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007478:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800747a:	e019      	b.n	80074b0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fa2d 	bl	80078dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007482:	e015      	b.n	80074b0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fcee 	bl	8007e68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800748c:	e010      	b.n	80074b0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fab3 	bl	8007a14 <I2C_ITMasterCplt>
 80074ae:	e000      	b.n	80074b2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80074b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <I2C_Slave_ISR_DMA+0x24>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e0c9      	b.n	800767c <I2C_Slave_ISR_DMA+0x1b8>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d009      	beq.n	8007510 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fb4c 	bl	8007ba8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	091b      	lsrs	r3, r3, #4
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 809a 	beq.w	8007652 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	091b      	lsrs	r3, r3, #4
 8007522:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8093 	beq.w	8007652 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0b9b      	lsrs	r3, r3, #14
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0bdb      	lsrs	r3, r3, #15
 800753c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d07f      	beq.n	8007644 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0bdb      	lsrs	r3, r3, #15
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8007564:	2301      	movs	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00d      	beq.n	800758c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	0b9b      	lsrs	r3, r3, #14
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8007588:	2301      	movs	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d128      	bne.n	80075e4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b28      	cmp	r3, #40	; 0x28
 800759c:	d108      	bne.n	80075b0 <I2C_Slave_ISR_DMA+0xec>
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a4:	d104      	bne.n	80075b0 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fc07 	bl	8007dbc <I2C_ITListenCplt>
 80075ae:	e048      	b.n	8007642 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b29      	cmp	r3, #41	; 0x29
 80075ba:	d10e      	bne.n	80075da <I2C_Slave_ISR_DMA+0x116>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075c2:	d00a      	beq.n	80075da <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2210      	movs	r2, #16
 80075ca:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fd42 	bl	8008056 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f9bf 	bl	8007956 <I2C_ITSlaveSeqCplt>
 80075d8:	e033      	b.n	8007642 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2210      	movs	r2, #16
 80075e0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80075e2:	e034      	b.n	800764e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2210      	movs	r2, #16
 80075ea:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	f043 0204 	orr.w	r2, r3, #4
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fe:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <I2C_Slave_ISR_DMA+0x14a>
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800760c:	d11f      	bne.n	800764e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b21      	cmp	r3, #33	; 0x21
 8007612:	d002      	beq.n	800761a <I2C_Slave_ISR_DMA+0x156>
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b29      	cmp	r3, #41	; 0x29
 8007618:	d103      	bne.n	8007622 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2221      	movs	r2, #33	; 0x21
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
 8007620:	e008      	b.n	8007634 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b22      	cmp	r3, #34	; 0x22
 8007626:	d002      	beq.n	800762e <I2C_Slave_ISR_DMA+0x16a>
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	2b2a      	cmp	r3, #42	; 0x2a
 800762c:	d102      	bne.n	8007634 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2222      	movs	r2, #34	; 0x22
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007638:	4619      	mov	r1, r3
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fc14 	bl	8007e68 <I2C_ITError>
      if (treatdmanack == 1U)
 8007640:	e005      	b.n	800764e <I2C_Slave_ISR_DMA+0x18a>
 8007642:	e004      	b.n	800764e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2210      	movs	r2, #16
 800764a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800764c:	e011      	b.n	8007672 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800764e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007650:	e00f      	b.n	8007672 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f8b1 	bl	80077d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	4603      	mov	r3, r0
 8007694:	817b      	strh	r3, [r7, #10]
 8007696:	460b      	mov	r3, r1
 8007698:	813b      	strh	r3, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	8979      	ldrh	r1, [r7, #10]
 80076a4:	4b20      	ldr	r3, [pc, #128]	; (8007728 <I2C_RequestMemoryWrite+0xa4>)
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 ff1f 	bl	80084f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fdb1 	bl	800821e <I2C_WaitOnTXISFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e02c      	b.n	8007720 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d105      	bne.n	80076d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076cc:	893b      	ldrh	r3, [r7, #8]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	629a      	str	r2, [r3, #40]	; 0x28
 80076d6:	e015      	b.n	8007704 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fd97 	bl	800821e <I2C_WaitOnTXISFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e012      	b.n	8007720 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	2200      	movs	r2, #0
 800770c:	2180      	movs	r1, #128	; 0x80
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fd45 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	80002000 	.word	0x80002000

0800772c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	461a      	mov	r2, r3
 800773a:	4603      	mov	r3, r0
 800773c:	817b      	strh	r3, [r7, #10]
 800773e:	460b      	mov	r3, r1
 8007740:	813b      	strh	r3, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	8979      	ldrh	r1, [r7, #10]
 800774c:	4b20      	ldr	r3, [pc, #128]	; (80077d0 <I2C_RequestMemoryRead+0xa4>)
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fecc 	bl	80084f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	69b9      	ldr	r1, [r7, #24]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fd5e 	bl	800821e <I2C_WaitOnTXISFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e02c      	b.n	80077c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d105      	bne.n	800777e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007772:	893b      	ldrh	r3, [r7, #8]
 8007774:	b2da      	uxtb	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
 800777c:	e015      	b.n	80077aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	b29b      	uxth	r3, r3
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fd44 	bl	800821e <I2C_WaitOnTXISFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e012      	b.n	80077c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077a0:	893b      	ldrh	r3, [r7, #8]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2200      	movs	r2, #0
 80077b2:	2140      	movs	r1, #64	; 0x40
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fcf2 	bl	800819e <I2C_WaitOnFlagUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	80002000 	.word	0x80002000

080077d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077ea:	2b28      	cmp	r3, #40	; 0x28
 80077ec:	d16a      	bne.n	80078c4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	b29b      	uxth	r3, r3
 8007808:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800780c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007828:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d138      	bne.n	80078a4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	09db      	lsrs	r3, r3, #7
 8007836:	b29a      	uxth	r2, r3
 8007838:	89bb      	ldrh	r3, [r7, #12]
 800783a:	4053      	eors	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	f003 0306 	and.w	r3, r3, #6
 8007842:	2b00      	cmp	r3, #0
 8007844:	d11c      	bne.n	8007880 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007846:	897b      	ldrh	r3, [r7, #10]
 8007848:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007858:	2b02      	cmp	r3, #2
 800785a:	d13b      	bne.n	80078d4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2208      	movs	r2, #8
 8007868:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007872:	89ba      	ldrh	r2, [r7, #12]
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fac5 	bl	8006e08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800787e:	e029      	b.n	80078d4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007880:	893b      	ldrh	r3, [r7, #8]
 8007882:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fecd 	bl	8008628 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007896:	89ba      	ldrh	r2, [r7, #12]
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fab3 	bl	8006e08 <HAL_I2C_AddrCallback>
}
 80078a2:	e017      	b.n	80078d4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80078a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 febd 	bl	8008628 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078b6:	89ba      	ldrh	r2, [r7, #12]
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff faa3 	bl	8006e08 <HAL_I2C_AddrCallback>
}
 80078c2:	e007      	b.n	80078d4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2208      	movs	r2, #8
 80078ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b21      	cmp	r3, #33	; 0x21
 80078f6:	d115      	bne.n	8007924 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2211      	movs	r2, #17
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800790c:	2101      	movs	r1, #1
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fe8a 	bl	8008628 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fa4b 	bl	8006db8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007922:	e014      	b.n	800794e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2212      	movs	r2, #18
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007938:	2102      	movs	r1, #2
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fe74 	bl	8008628 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fa3f 	bl	8006dcc <HAL_I2C_MasterRxCpltCallback>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	0b9b      	lsrs	r3, r3, #14
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e00d      	b.n	80079a8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0bdb      	lsrs	r3, r3, #15
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079a6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b29      	cmp	r3, #41	; 0x29
 80079b2:	d112      	bne.n	80079da <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2228      	movs	r2, #40	; 0x28
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2221      	movs	r2, #33	; 0x21
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80079c2:	2101      	movs	r1, #1
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fe2f 	bl	8008628 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fa04 	bl	8006de0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80079d8:	e017      	b.n	8007a0a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b2a      	cmp	r3, #42	; 0x2a
 80079e4:	d111      	bne.n	8007a0a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2228      	movs	r2, #40	; 0x28
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2222      	movs	r2, #34	; 0x22
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80079f4:	2102      	movs	r1, #2
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fe16 	bl	8008628 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff f9f5 	bl	8006df4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2220      	movs	r2, #32
 8007a28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b21      	cmp	r3, #33	; 0x21
 8007a34:	d107      	bne.n	8007a46 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a36:	2101      	movs	r1, #1
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fdf5 	bl	8008628 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2211      	movs	r2, #17
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30
 8007a44:	e00c      	b.n	8007a60 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b22      	cmp	r3, #34	; 0x22
 8007a50:	d106      	bne.n	8007a60 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007a52:	2102      	movs	r1, #2
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fde7 	bl	8008628 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2212      	movs	r2, #18
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ba0 <I2C_ITMasterCplt+0x18c>)
 8007a6c:	400b      	ands	r3, r1
 8007a6e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a4a      	ldr	r2, [pc, #296]	; (8007ba4 <I2C_ITMasterCplt+0x190>)
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a94:	f043 0204 	orr.w	r2, r3, #4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b60      	cmp	r3, #96	; 0x60
 8007aa6:	d10b      	bne.n	8007ac0 <I2C_ITMasterCplt+0xac>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007abe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fac8 	bl	8008056 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b60      	cmp	r3, #96	; 0x60
 8007ad6:	d002      	beq.n	8007ade <I2C_ITMasterCplt+0xca>
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d006      	beq.n	8007aec <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9bf 	bl	8007e68 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007aea:	e054      	b.n	8007b96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b21      	cmp	r3, #33	; 0x21
 8007af6:	d124      	bne.n	8007b42 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d10b      	bne.n	8007b2a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff f988 	bl	8006e38 <HAL_I2C_MemTxCpltCallback>
}
 8007b28:	e035      	b.n	8007b96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff f93c 	bl	8006db8 <HAL_I2C_MasterTxCpltCallback>
}
 8007b40:	e029      	b.n	8007b96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b22      	cmp	r3, #34	; 0x22
 8007b4c:	d123      	bne.n	8007b96 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d10b      	bne.n	8007b80 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff f967 	bl	8006e4c <HAL_I2C_MemRxCpltCallback>
}
 8007b7e:	e00a      	b.n	8007b96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff f91b 	bl	8006dcc <HAL_I2C_MasterRxCpltCallback>
}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	fe00e800 	.word	0xfe00e800
 8007ba4:	ffff0000 	.word	0xffff0000

08007ba8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b21      	cmp	r3, #33	; 0x21
 8007bd2:	d002      	beq.n	8007bda <I2C_ITSlaveCplt+0x32>
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b29      	cmp	r3, #41	; 0x29
 8007bd8:	d108      	bne.n	8007bec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007bda:	f248 0101 	movw	r1, #32769	; 0x8001
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fd22 	bl	8008628 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2221      	movs	r2, #33	; 0x21
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
 8007bea:	e00d      	b.n	8007c08 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b22      	cmp	r3, #34	; 0x22
 8007bf0:	d002      	beq.n	8007bf8 <I2C_ITSlaveCplt+0x50>
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf6:	d107      	bne.n	8007c08 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007bf8:	f248 0102 	movw	r1, #32770	; 0x8002
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd13 	bl	8008628 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2222      	movs	r2, #34	; 0x22
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c16:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6859      	ldr	r1, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b64      	ldr	r3, [pc, #400]	; (8007db4 <I2C_ITSlaveCplt+0x20c>)
 8007c24:	400b      	ands	r3, r1
 8007c26:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa14 	bl	8008056 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	0b9b      	lsrs	r3, r3, #14
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d013      	beq.n	8007c62 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d020      	beq.n	8007c94 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c60:	e018      	b.n	8007c94 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	0bdb      	lsrs	r3, r3, #15
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	089b      	lsrs	r3, r3, #2
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d020      	beq.n	8007ce2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0304 	bic.w	r3, r3, #4
 8007ca6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00c      	beq.n	8007ce2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	f043 0204 	orr.w	r2, r3, #4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d010      	beq.n	8007d30 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f8a7 	bl	8007e68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b28      	cmp	r3, #40	; 0x28
 8007d24:	d141      	bne.n	8007daa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d26:	6979      	ldr	r1, [r7, #20]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f847 	bl	8007dbc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d2e:	e03c      	b.n	8007daa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d38:	d014      	beq.n	8007d64 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fe0b 	bl	8007956 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a1d      	ldr	r2, [pc, #116]	; (8007db8 <I2C_ITSlaveCplt+0x210>)
 8007d44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff f861 	bl	8006e24 <HAL_I2C_ListenCpltCallback>
}
 8007d62:	e022      	b.n	8007daa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b22      	cmp	r3, #34	; 0x22
 8007d6e:	d10e      	bne.n	8007d8e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff f834 	bl	8006df4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d8c:	e00d      	b.n	8007daa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f81b 	bl	8006de0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	fe00e800 	.word	0xfe00e800
 8007db8:	ffff0000 	.word	0xffff0000

08007dbc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a26      	ldr	r2, [pc, #152]	; (8007e64 <I2C_ITListenCplt+0xa8>)
 8007dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d022      	beq.n	8007e3a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d012      	beq.n	8007e3a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e32:	f043 0204 	orr.w	r2, r3, #4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007e3a:	f248 0103 	movw	r1, #32771	; 0x8003
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fbf2 	bl	8008628 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fe ffe5 	bl	8006e24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	ffff0000 	.word	0xffff0000

08007e68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a5d      	ldr	r2, [pc, #372]	; (8007ffc <I2C_ITError+0x194>)
 8007e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b28      	cmp	r3, #40	; 0x28
 8007e9e:	d005      	beq.n	8007eac <I2C_ITError+0x44>
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b29      	cmp	r3, #41	; 0x29
 8007ea4:	d002      	beq.n	8007eac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d10b      	bne.n	8007ec4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007eac:	2103      	movs	r1, #3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fbba 	bl	8008628 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2228      	movs	r2, #40	; 0x28
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a50      	ldr	r2, [pc, #320]	; (8008000 <I2C_ITError+0x198>)
 8007ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8007ec2:	e011      	b.n	8007ee8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ec4:	f248 0103 	movw	r1, #32771	; 0x8003
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbad 	bl	8008628 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b60      	cmp	r3, #96	; 0x60
 8007ed8:	d003      	beq.n	8007ee2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d039      	beq.n	8007f6a <I2C_ITError+0x102>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b11      	cmp	r3, #17
 8007efa:	d002      	beq.n	8007f02 <I2C_ITError+0x9a>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b21      	cmp	r3, #33	; 0x21
 8007f00:	d133      	bne.n	8007f6a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f10:	d107      	bne.n	8007f22 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f20:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe f9b8 	bl	800629c <HAL_DMA_GetState>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d017      	beq.n	8007f62 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	4a33      	ldr	r2, [pc, #204]	; (8008004 <I2C_ITError+0x19c>)
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe f8b8 	bl	80060bc <HAL_DMA_Abort_IT>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f60:	e045      	b.n	8007fee <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f850 	bl	8008008 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f68:	e041      	b.n	8007fee <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d039      	beq.n	8007fe6 <I2C_ITError+0x17e>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b12      	cmp	r3, #18
 8007f76:	d002      	beq.n	8007f7e <I2C_ITError+0x116>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b22      	cmp	r3, #34	; 0x22
 8007f7c:	d133      	bne.n	8007fe6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8c:	d107      	bne.n	8007f9e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe f97a 	bl	800629c <HAL_DMA_GetState>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d017      	beq.n	8007fde <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	4a14      	ldr	r2, [pc, #80]	; (8008004 <I2C_ITError+0x19c>)
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe f87a 	bl	80060bc <HAL_DMA_Abort_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d011      	beq.n	8007ff2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fdc:	e009      	b.n	8007ff2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f812 	bl	8008008 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fe4:	e005      	b.n	8007ff2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f80e 	bl	8008008 <I2C_TreatErrorCallback>
  }
}
 8007fec:	e002      	b.n	8007ff4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007fee:	bf00      	nop
 8007ff0:	e000      	b.n	8007ff4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ff2:	bf00      	nop
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	ffff0000 	.word	0xffff0000
 8008000:	080070d9 	.word	0x080070d9
 8008004:	08008163 	.word	0x08008163

08008008 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b60      	cmp	r3, #96	; 0x60
 800801a:	d10e      	bne.n	800803a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fe ff1e 	bl	8006e74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008038:	e009      	b.n	800804e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fe ff09 	bl	8006e60 <HAL_I2C_ErrorCallback>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b02      	cmp	r3, #2
 800806a:	d103      	bne.n	8008074 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2200      	movs	r2, #0
 8008072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d007      	beq.n	8008092 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0201 	orr.w	r2, r2, #1
 8008090:	619a      	str	r2, [r3, #24]
  }
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ba:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80080c6:	2120      	movs	r1, #32
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fa43 	bl	8008554 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80080ce:	e02d      	b.n	800812c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80080d8:	441a      	add	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2bff      	cmp	r3, #255	; 0xff
 80080e6:	d903      	bls.n	80080f0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	22ff      	movs	r2, #255	; 0xff
 80080ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80080ee:	e004      	b.n	80080fa <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3324      	adds	r3, #36	; 0x24
 8008104:	4619      	mov	r1, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008110:	f7fd ff36 	bl	8005f80 <HAL_DMA_Start_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800811a:	2110      	movs	r1, #16
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fea3 	bl	8007e68 <I2C_ITError>
}
 8008122:	e003      	b.n	800812c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa14 	bl	8008554 <I2C_Enable_IRQ>
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008150:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008152:	2110      	movs	r1, #16
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fe87 	bl	8007e68 <I2C_ITError>
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	2200      	movs	r2, #0
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818c:	2200      	movs	r2, #0
 800818e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ff39 	bl	8008008 <I2C_TreatErrorCallback>
}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081ae:	e022      	b.n	80081f6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d01e      	beq.n	80081f6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b8:	f7fd fce8 	bl	8005b8c <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d302      	bcc.n	80081ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d113      	bne.n	80081f6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	f043 0220 	orr.w	r2, r3, #32
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e00f      	b.n	8008216 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4013      	ands	r3, r2
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	bf0c      	ite	eq
 8008206:	2301      	moveq	r3, #1
 8008208:	2300      	movne	r3, #0
 800820a:	b2db      	uxtb	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	429a      	cmp	r2, r3
 8008212:	d0cd      	beq.n	80081b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800822a:	e02c      	b.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f871 	bl	8008318 <I2C_IsErrorOccurred>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e02a      	b.n	8008296 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008246:	d01e      	beq.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008248:	f7fd fca0 	bl	8005b8c <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	d302      	bcc.n	800825e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d113      	bne.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008262:	f043 0220 	orr.w	r2, r3, #32
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e007      	b.n	8008296 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d1cb      	bne.n	800822c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082aa:	e028      	b.n	80082fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f831 	bl	8008318 <I2C_IsErrorOccurred>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e026      	b.n	800830e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c0:	f7fd fc64 	bl	8005b8c <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d302      	bcc.n	80082d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d113      	bne.n	80082fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e007      	b.n	800830e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b20      	cmp	r3, #32
 800830a:	d1cf      	bne.n	80082ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d075      	beq.n	8008430 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2210      	movs	r2, #16
 800834a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800834c:	e056      	b.n	80083fc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d052      	beq.n	80083fc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008356:	f7fd fc19 	bl	8005b8c <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	429a      	cmp	r2, r3
 8008364:	d302      	bcc.n	800836c <I2C_IsErrorOccurred+0x54>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d147      	bne.n	80083fc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008376:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800837e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800838a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838e:	d12e      	bne.n	80083ee <I2C_IsErrorOccurred+0xd6>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008396:	d02a      	beq.n	80083ee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008398:	7cfb      	ldrb	r3, [r7, #19]
 800839a:	2b20      	cmp	r3, #32
 800839c:	d027      	beq.n	80083ee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80083ae:	f7fd fbed 	bl	8005b8c <HAL_GetTick>
 80083b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083b4:	e01b      	b.n	80083ee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80083b6:	f7fd fbe9 	bl	8005b8c <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b19      	cmp	r3, #25
 80083c2:	d914      	bls.n	80083ee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d1dc      	bne.n	80083b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b20      	cmp	r3, #32
 8008408:	d003      	beq.n	8008412 <I2C_IsErrorOccurred+0xfa>
 800840a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840e:	2b00      	cmp	r3, #0
 8008410:	d09d      	beq.n	800834e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008416:	2b00      	cmp	r3, #0
 8008418:	d103      	bne.n	8008422 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2220      	movs	r2, #32
 8008420:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f043 0304 	orr.w	r3, r3, #4
 8008428:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008452:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	f043 0308 	orr.w	r3, r3, #8
 800846a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008474:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008496:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800849e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01c      	beq.n	80084e0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff fdd5 	bl	8008056 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6859      	ldr	r1, [r3, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <I2C_IsErrorOccurred+0x1d4>)
 80084b8:	400b      	ands	r3, r1
 80084ba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80084e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3728      	adds	r7, #40	; 0x28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	fe00e800 	.word	0xfe00e800

080084f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	607b      	str	r3, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	817b      	strh	r3, [r7, #10]
 80084fe:	4613      	mov	r3, r2
 8008500:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008502:	897b      	ldrh	r3, [r7, #10]
 8008504:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008508:	7a7b      	ldrb	r3, [r7, #9]
 800850a:	041b      	lsls	r3, r3, #16
 800850c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008510:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	4313      	orrs	r3, r2
 800851a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800851e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	0d5b      	lsrs	r3, r3, #21
 800852a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800852e:	4b08      	ldr	r3, [pc, #32]	; (8008550 <I2C_TransferConfig+0x60>)
 8008530:	430b      	orrs	r3, r1
 8008532:	43db      	mvns	r3, r3
 8008534:	ea02 0103 	and.w	r1, r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	430a      	orrs	r2, r1
 8008540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	03ff63ff 	.word	0x03ff63ff

08008554 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008568:	4a2d      	ldr	r2, [pc, #180]	; (8008620 <I2C_Enable_IRQ+0xcc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008572:	4a2c      	ldr	r2, [pc, #176]	; (8008624 <I2C_Enable_IRQ+0xd0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d11d      	bne.n	80085b4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da03      	bge.n	8008588 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008586:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	2b10      	cmp	r3, #16
 800858c:	d103      	bne.n	8008596 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008594:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008596:	887b      	ldrh	r3, [r7, #2]
 8008598:	2b20      	cmp	r3, #32
 800859a:	d103      	bne.n	80085a4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80085a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d12c      	bne.n	8008604 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80085b2:	e027      	b.n	8008604 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80085b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da03      	bge.n	80085c4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80085c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80085c4:	887b      	ldrh	r3, [r7, #2]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80085d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80085d6:	887b      	ldrh	r3, [r7, #2]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80085e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80085e8:	887b      	ldrh	r3, [r7, #2]
 80085ea:	2b10      	cmp	r3, #16
 80085ec:	d103      	bne.n	80085f6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80085f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80085f6:	887b      	ldrh	r3, [r7, #2]
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d103      	bne.n	8008604 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f043 0320 	orr.w	r3, r3, #32
 8008602:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	430a      	orrs	r2, r1
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	080072df 	.word	0x080072df
 8008624:	080074c5 	.word	0x080074c5

08008628 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008638:	887b      	ldrh	r3, [r7, #2]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00f      	beq.n	8008662 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008648:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008656:	2b28      	cmp	r3, #40	; 0x28
 8008658:	d003      	beq.n	8008662 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008660:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00f      	beq.n	800868c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008672:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008680:	2b28      	cmp	r3, #40	; 0x28
 8008682:	d003      	beq.n	800868c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800868a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800868c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da03      	bge.n	800869c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800869a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800869c:	887b      	ldrh	r3, [r7, #2]
 800869e:	2b10      	cmp	r3, #16
 80086a0:	d103      	bne.n	80086aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80086aa:	887b      	ldrh	r3, [r7, #2]
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d103      	bne.n	80086b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f043 0320 	orr.w	r3, r3, #32
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d103      	bne.n	80086c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6819      	ldr	r1, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	43da      	mvns	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	400a      	ands	r2, r1
 80086d6:	601a      	str	r2, [r3, #0]
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d138      	bne.n	800876c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008704:	2302      	movs	r3, #2
 8008706:	e032      	b.n	800876e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2224      	movs	r2, #36	; 0x24
 8008714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0201 	bic.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008736:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6819      	ldr	r1, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0201 	orr.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e000      	b.n	800876e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800876c:	2302      	movs	r3, #2
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b20      	cmp	r3, #32
 800878e:	d139      	bne.n	8008804 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800879a:	2302      	movs	r3, #2
 800879c:	e033      	b.n	8008806 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2224      	movs	r2, #36	; 0x24
 80087aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e000      	b.n	8008806 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008804:	2302      	movs	r3, #2
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008814:	b08b      	sub	sp, #44	; 0x2c
 8008816:	af06      	add	r7, sp, #24
 8008818:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e109      	b.n	8008a38 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f009 ff9b 	bl	8012774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2203      	movs	r2, #3
 8008842:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f005 fe24 	bl	800e498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	687e      	ldr	r6, [r7, #4]
 8008858:	466d      	mov	r5, sp
 800885a:	f106 0410 	add.w	r4, r6, #16
 800885e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008866:	e885 0003 	stmia.w	r5, {r0, r1}
 800886a:	1d33      	adds	r3, r6, #4
 800886c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800886e:	6838      	ldr	r0, [r7, #0]
 8008870:	f005 fdea 	bl	800e448 <USB_CoreInit>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e0d8      	b.n	8008a38 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2100      	movs	r1, #0
 800888c:	4618      	mov	r0, r3
 800888e:	f005 fe1e 	bl	800e4ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
 8008896:	e04d      	b.n	8008934 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	440b      	add	r3, r1
 80088a8:	3305      	adds	r3, #5
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	440b      	add	r3, r1
 80088be:	3304      	adds	r3, #4
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088c4:	7bfa      	ldrb	r2, [r7, #15]
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	b298      	uxth	r0, r3
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	440b      	add	r3, r1
 80088d6:	333a      	adds	r3, #58	; 0x3a
 80088d8:	4602      	mov	r2, r0
 80088da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	440b      	add	r3, r1
 80088ec:	3307      	adds	r3, #7
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	440b      	add	r3, r1
 8008900:	333c      	adds	r3, #60	; 0x3c
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008906:	7bfa      	ldrb	r2, [r7, #15]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	440b      	add	r3, r1
 8008914:	3340      	adds	r3, #64	; 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800891a:	7bfa      	ldrb	r2, [r7, #15]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	3344      	adds	r3, #68	; 0x44
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3301      	adds	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d3ac      	bcc.n	8008898 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
 8008942:	e044      	b.n	80089ce <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008944:	7bfa      	ldrb	r2, [r7, #15]
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	440b      	add	r3, r1
 8008952:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800895a:	7bfa      	ldrb	r2, [r7, #15]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800896c:	7bfa      	ldrb	r2, [r7, #15]
 800896e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	440b      	add	r3, r1
 800897e:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008986:	7bfa      	ldrb	r2, [r7, #15]
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	440b      	add	r3, r1
 8008994:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800899c:	7bfa      	ldrb	r2, [r7, #15]
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	440b      	add	r3, r1
 80089aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089b2:	7bfa      	ldrb	r2, [r7, #15]
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	3301      	adds	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3b5      	bcc.n	8008944 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	687e      	ldr	r6, [r7, #4]
 80089e0:	466d      	mov	r5, sp
 80089e2:	f106 0410 	add.w	r4, r6, #16
 80089e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80089f2:	1d33      	adds	r3, r6, #4
 80089f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089f6:	6838      	ldr	r0, [r7, #0]
 80089f8:	f005 fd76 	bl	800e4e8 <USB_DevInit>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e014      	b.n	8008a38 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d102      	bne.n	8008a2c <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fc55 	bl	800a2d6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f007 ff82 	bl	801093a <USB_DevDisconnect>

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_PCD_Start+0x16>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e012      	b.n	8008a7c <HAL_PCD_Start+0x3c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f005 fd01 	bl	800e46a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f007 ff4d 	bl	801090c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f007 ff67 	bl	8010964 <USB_ReadInterrupts>
 8008a96:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fb3e 	bl	8009124 <PCD_EP_ISR_Handler>

    return;
 8008aa8:	e110      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d013      	beq.n	8008adc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac6:	b292      	uxth	r2, r2
 8008ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f009 ff08 	bl	80128e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8fc 	bl	8008cd2 <HAL_PCD_SetAddress>

    return;
 8008ada:	e0f7      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00c      	beq.n	8008b00 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008af8:	b292      	uxth	r2, r2
 8008afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008afe:	e0e5      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00c      	beq.n	8008b24 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b1c:	b292      	uxth	r2, r2
 8008b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008b22:	e0d3      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d034      	beq.n	8008b98 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0204 	bic.w	r2, r2, #4
 8008b40:	b292      	uxth	r2, r2
 8008b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 0208 	bic.w	r2, r2, #8
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d107      	bne.n	8008b78 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f00a f966 	bl	8012e44 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f009 feeb 	bl	8012954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b90:	b292      	uxth	r2, r2
 8008b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008b96:	e099      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d027      	beq.n	8008bf2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0208 	orr.w	r2, r2, #8
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bcc:	b292      	uxth	r2, r2
 8008bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f042 0204 	orr.w	r2, r2, #4
 8008be4:	b292      	uxth	r2, r2
 8008be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f009 fe98 	bl	8012920 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008bf0:	e06c      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d040      	beq.n	8008c7e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c0e:	b292      	uxth	r2, r2
 8008c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d12b      	bne.n	8008c76 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0204 	orr.w	r2, r2, #4
 8008c30:	b292      	uxth	r2, r2
 8008c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0208 	orr.w	r2, r2, #8
 8008c48:	b292      	uxth	r2, r2
 8008c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f00a f8e8 	bl	8012e44 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008c74:	e02a      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f009 fe52 	bl	8012920 <HAL_PCD_SuspendCallback>
    return;
 8008c7c:	e026      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f009 fe10 	bl	80128c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008ca6:	e011      	b.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008cca:	bf00      	nop
  }
}
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d101      	bne.n	8008cec <HAL_PCD_SetAddress+0x1a>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e013      	b.n	8008d14 <HAL_PCD_SetAddress+0x42>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	78fa      	ldrb	r2, [r7, #3]
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f007 fded 	bl	80108e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	4608      	mov	r0, r1
 8008d26:	4611      	mov	r1, r2
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	70fb      	strb	r3, [r7, #3]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	803b      	strh	r3, [r7, #0]
 8008d32:	4613      	mov	r3, r2
 8008d34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da0f      	bge.n	8008d62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	3304      	adds	r3, #4
 8008d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	705a      	strb	r2, [r3, #1]
 8008d60:	e00f      	b.n	8008d82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	f003 0207 	and.w	r2, r3, #7
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	3304      	adds	r3, #4
 8008d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008d8e:	883a      	ldrh	r2, [r7, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	78ba      	ldrb	r2, [r7, #2]
 8008d98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008dac:	78bb      	ldrb	r3, [r7, #2]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d102      	bne.n	8008db8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_PCD_EP_Open+0xaa>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e00e      	b.n	8008de4 <HAL_PCD_EP_Open+0xc8>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f005 fba9 	bl	800e52c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da0f      	bge.n	8008e20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	3304      	adds	r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	705a      	strb	r2, [r3, #1]
 8008e1e:	e00f      	b.n	8008e40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 0207 	and.w	r2, r3, #7
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	3304      	adds	r3, #4
 8008e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_PCD_EP_Close+0x6e>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e00e      	b.n	8008e78 <HAL_PCD_EP_Close+0x8c>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f005 ff19 	bl	800eca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e90:	7afb      	ldrb	r3, [r7, #11]
 8008e92:	f003 0207 	and.w	r2, r3, #7
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d106      	bne.n	8008ee6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6979      	ldr	r1, [r7, #20]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f006 f8cb 	bl	800f07a <USB_EPStartXfer>
 8008ee4:	e005      	b.n	8008ef2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f006 f8c4 	bl	800f07a <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	f003 0207 	and.w	r2, r3, #7
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	440b      	add	r3, r1
 8008f1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	3304      	adds	r3, #4
 8008f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2201      	movs	r2, #1
 8008f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f7a:	7afb      	ldrb	r3, [r7, #11]
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f86:	7afb      	ldrb	r3, [r7, #11]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6979      	ldr	r1, [r7, #20]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f006 f86f 	bl	800f07a <USB_EPStartXfer>
 8008f9c:	e005      	b.n	8008faa <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6979      	ldr	r1, [r7, #20]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f006 f868 	bl	800f07a <USB_EPStartXfer>
  }

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	f003 0207 	and.w	r2, r3, #7
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d901      	bls.n	8008fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e04e      	b.n	8009070 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da0f      	bge.n	8008ffa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	3304      	adds	r3, #4
 8008ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	705a      	strb	r2, [r3, #1]
 8008ff8:	e00d      	b.n	8009016 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	3304      	adds	r3, #4
 800900e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_PCD_EP_SetStall+0x82>
 8009032:	2302      	movs	r3, #2
 8009034:	e01c      	b.n	8009070 <HAL_PCD_EP_SetStall+0xbc>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	4618      	mov	r0, r3
 8009046:	f007 fb4e 	bl	80106e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	2b00      	cmp	r3, #0
 8009052:	d108      	bne.n	8009066 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800905e:	4619      	mov	r1, r3
 8009060:	4610      	mov	r0, r2
 8009062:	f007 fc8f 	bl	8010984 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	f003 020f 	and.w	r2, r3, #15
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	429a      	cmp	r2, r3
 8009090:	d901      	bls.n	8009096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e042      	b.n	800911c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800909a:	2b00      	cmp	r3, #0
 800909c:	da0f      	bge.n	80090be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	4413      	add	r3, r2
 80090b2:	3304      	adds	r3, #4
 80090b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	705a      	strb	r2, [r3, #1]
 80090bc:	e00f      	b.n	80090de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	f003 0207 	and.w	r2, r3, #7
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_PCD_EP_ClrStall+0x86>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e00e      	b.n	800911c <HAL_PCD_EP_ClrStall+0xa4>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	4618      	mov	r0, r3
 800910e:	f007 fb3b 	bl	8010788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b096      	sub	sp, #88	; 0x58
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800912c:	e3a9      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009136:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800913a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8009148:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8169 	bne.w	8009424 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009152:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b00      	cmp	r3, #0
 800915c:	d150      	bne.n	8009200 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	81fb      	strh	r3, [r7, #14]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917e:	b29b      	uxth	r3, r3
 8009180:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	332c      	adds	r3, #44	; 0x2c
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009190:	b29b      	uxth	r3, r3
 8009192:	461a      	mov	r2, r3
 8009194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	4413      	add	r3, r2
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	4413      	add	r3, r2
 80091a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80091ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80091b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	441a      	add	r2, r3
 80091ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f009 fb66 	bl	8012892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 8357 	beq.w	8009882 <PCD_EP_ISR_Handler+0x75e>
 80091d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 8352 	bne.w	8009882 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	b292      	uxth	r2, r2
 80091f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80091fe:	e340      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009206:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800921a:	2b00      	cmp	r3, #0
 800921c:	d032      	beq.n	8009284 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009226:	b29b      	uxth	r3, r3
 8009228:	461a      	mov	r2, r3
 800922a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4413      	add	r3, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	4413      	add	r3, r2
 8009238:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009244:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8009250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009252:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009256:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009258:	b29b      	uxth	r3, r3
 800925a:	f007 fbe1 	bl	8010a20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29a      	uxth	r2, r3
 8009266:	f640 738f 	movw	r3, #3983	; 0xf8f
 800926a:	4013      	ands	r3, r2
 800926c:	823b      	strh	r3, [r7, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	8a3a      	ldrh	r2, [r7, #16]
 8009274:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009278:	b292      	uxth	r2, r2
 800927a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f009 fadb 	bl	8012838 <HAL_PCD_SetupStageCallback>
 8009282:	e2fe      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009284:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8009288:	2b00      	cmp	r3, #0
 800928a:	f280 82fa 	bge.w	8009882 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29a      	uxth	r2, r3
 8009296:	f640 738f 	movw	r3, #3983	; 0xf8f
 800929a:	4013      	ands	r3, r2
 800929c:	83fb      	strh	r3, [r7, #30]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	8bfa      	ldrh	r2, [r7, #30]
 80092a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092a8:	b292      	uxth	r2, r2
 80092aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	4413      	add	r3, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	4413      	add	r3, r2
 80092c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80092d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80092d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d019      	beq.n	8009310 <PCD_EP_ISR_Handler+0x1ec>
 80092dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d015      	beq.n	8009310 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ea:	6959      	ldr	r1, [r3, #20]
 80092ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80092f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f007 fb93 	bl	8010a20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80092fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	441a      	add	r2, r3
 8009304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009306:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009308:	2100      	movs	r1, #0
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f009 faa6 	bl	801285c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800931a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800931e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 82ad 	bne.w	8009882 <PCD_EP_ISR_Handler+0x75e>
 8009328:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800932c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009334:	f000 82a5 	beq.w	8009882 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009346:	b29b      	uxth	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	4413      	add	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b3e      	cmp	r3, #62	; 0x3e
 800935e:	d918      	bls.n	8009392 <PCD_EP_ISR_Handler+0x26e>
 8009360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	095b      	lsrs	r3, r3, #5
 8009366:	647b      	str	r3, [r7, #68]	; 0x44
 8009368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	f003 031f 	and.w	r3, r3, #31
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <PCD_EP_ISR_Handler+0x256>
 8009374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009376:	3b01      	subs	r3, #1
 8009378:	647b      	str	r3, [r7, #68]	; 0x44
 800937a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937c:	b29b      	uxth	r3, r3
 800937e:	029b      	lsls	r3, r3, #10
 8009380:	b29b      	uxth	r3, r3
 8009382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938a:	b29a      	uxth	r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	801a      	strh	r2, [r3, #0]
 8009390:	e029      	b.n	80093e6 <PCD_EP_ISR_Handler+0x2c2>
 8009392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d112      	bne.n	80093c0 <PCD_EP_ISR_Handler+0x29c>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	801a      	strh	r2, [r3, #0]
 80093be:	e012      	b.n	80093e6 <PCD_EP_ISR_Handler+0x2c2>
 80093c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	085b      	lsrs	r3, r3, #1
 80093c6:	647b      	str	r3, [r7, #68]	; 0x44
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <PCD_EP_ISR_Handler+0x2b6>
 80093d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d6:	3301      	adds	r3, #1
 80093d8:	647b      	str	r3, [r7, #68]	; 0x44
 80093da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093dc:	b29b      	uxth	r3, r3
 80093de:	029b      	lsls	r3, r3, #10
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	827b      	strh	r3, [r7, #18]
 80093f8:	8a7b      	ldrh	r3, [r7, #18]
 80093fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093fe:	827b      	strh	r3, [r7, #18]
 8009400:	8a7b      	ldrh	r3, [r7, #18]
 8009402:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009406:	827b      	strh	r3, [r7, #18]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	8a7b      	ldrh	r3, [r7, #18]
 800940e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800941a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941e:	b29b      	uxth	r3, r3
 8009420:	8013      	strh	r3, [r2, #0]
 8009422:	e22e      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009438:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800943c:	2b00      	cmp	r3, #0
 800943e:	f280 80f7 	bge.w	8009630 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29a      	uxth	r2, r3
 8009454:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009458:	4013      	ands	r3, r2
 800945a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009474:	b292      	uxth	r2, r2
 8009476:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009478:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	3304      	adds	r3, #4
 800948e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009492:	7b1b      	ldrb	r3, [r3, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d123      	bne.n	80094e0 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	4413      	add	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	4413      	add	r3, r2
 80094b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80094c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 808e 	beq.w	80095e6 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	6959      	ldr	r1, [r3, #20]
 80094d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d4:	88da      	ldrh	r2, [r3, #6]
 80094d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094da:	f007 faa1 	bl	8010a20 <USB_ReadPMA>
 80094de:	e082      	b.n	80095e6 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80094e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e2:	78db      	ldrb	r3, [r3, #3]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d10a      	bne.n	80094fe <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80094e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80094ec:	461a      	mov	r2, r3
 80094ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f9d4 	bl	800989e <HAL_PCD_EP_DB_Receive>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80094fc:	e073      	b.n	80095e6 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009518:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	441a      	add	r2, r3
 800952a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800952e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800953e:	b29b      	uxth	r3, r3
 8009540:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d022      	beq.n	80095a2 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009564:	b29b      	uxth	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	4413      	add	r3, r2
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	4413      	add	r3, r2
 8009576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009580:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8009584:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009588:	2b00      	cmp	r3, #0
 800958a:	d02c      	beq.n	80095e6 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009596:	891a      	ldrh	r2, [r3, #8]
 8009598:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800959c:	f007 fa40 	bl	8010a20 <USB_ReadPMA>
 80095a0:	e021      	b.n	80095e6 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4413      	add	r3, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	4413      	add	r3, r2
 80095bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80095ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d8:	6959      	ldr	r1, [r3, #20]
 80095da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095dc:	895a      	ldrh	r2, [r3, #10]
 80095de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095e2:	f007 fa1d 	bl	8010a20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80095e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e8:	69da      	ldr	r2, [r3, #28]
 80095ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095ee:	441a      	add	r2, r3
 80095f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	695a      	ldr	r2, [r3, #20]
 80095f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095fc:	441a      	add	r2, r3
 80095fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009600:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d005      	beq.n	8009616 <PCD_EP_ISR_Handler+0x4f2>
 800960a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800960e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	d206      	bcs.n	8009624 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f009 f91d 	bl	801285c <HAL_PCD_DataOutStageCallback>
 8009622:	e005      	b.n	8009630 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800962a:	4618      	mov	r0, r3
 800962c:	f005 fd25 	bl	800f07a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009630:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8122 	beq.w	8009882 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800963e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800966a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	441a      	add	r2, r3
 8009680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968c:	b29b      	uxth	r3, r3
 800968e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009692:	78db      	ldrb	r3, [r3, #3]
 8009694:	2b01      	cmp	r3, #1
 8009696:	f040 80a2 	bne.w	80097de <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 800969a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969c:	2200      	movs	r2, #0
 800969e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80096a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a2:	7b1b      	ldrb	r3, [r3, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8093 	beq.w	80097d0 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80096aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80096ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d046      	beq.n	8009744 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d126      	bne.n	800970c <PCD_EP_ISR_Handler+0x5e8>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	4413      	add	r3, r2
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
 80096d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	00da      	lsls	r2, r3, #3
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	4413      	add	r3, r2
 80096e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096e4:	623b      	str	r3, [r7, #32]
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	801a      	strh	r2, [r3, #0]
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009704:	b29a      	uxth	r2, r3
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	e061      	b.n	80097d0 <PCD_EP_ISR_Handler+0x6ac>
 800970c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d15d      	bne.n	80097d0 <PCD_EP_ISR_Handler+0x6ac>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009722:	b29b      	uxth	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	4413      	add	r3, r2
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800972c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	00da      	lsls	r2, r3, #3
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	4413      	add	r3, r2
 8009736:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	2200      	movs	r2, #0
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	e045      	b.n	80097d0 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800974a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d126      	bne.n	80097a0 <PCD_EP_ISR_Handler+0x67c>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	637b      	str	r3, [r7, #52]	; 0x34
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009760:	b29b      	uxth	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009766:	4413      	add	r3, r2
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
 800976a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	00da      	lsls	r2, r3, #3
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	4413      	add	r3, r2
 8009774:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009778:	633b      	str	r3, [r7, #48]	; 0x30
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009784:	b29a      	uxth	r2, r3
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e017      	b.n	80097d0 <PCD_EP_ISR_Handler+0x6ac>
 80097a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d113      	bne.n	80097d0 <PCD_EP_ISR_Handler+0x6ac>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b6:	4413      	add	r3, r2
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	00da      	lsls	r2, r3, #3
 80097c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c2:	4413      	add	r3, r2
 80097c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2200      	movs	r2, #0
 80097ce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80097d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f009 f85b 	bl	8012892 <HAL_PCD_DataInStageCallback>
 80097dc:	e051      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80097de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d144      	bne.n	8009874 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	461a      	mov	r2, r3
 80097f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4413      	add	r3, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	4413      	add	r3, r2
 8009804:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800980e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800981a:	429a      	cmp	r2, r3
 800981c:	d907      	bls.n	800982e <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 800981e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982a:	619a      	str	r2, [r3, #24]
 800982c:	e002      	b.n	8009834 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 800982e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009830:	2200      	movs	r2, #0
 8009832:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f009 f825 	bl	8012892 <HAL_PCD_DataInStageCallback>
 8009848:	e01b      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009852:	441a      	add	r2, r3
 8009854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009856:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009860:	441a      	add	r2, r3
 8009862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009864:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800986c:	4618      	mov	r0, r3
 800986e:	f005 fc04 	bl	800f07a <USB_EPStartXfer>
 8009872:	e006      	b.n	8009882 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009874:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009878:	461a      	mov	r2, r3
 800987a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f917 	bl	8009ab0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800988a:	b29b      	uxth	r3, r3
 800988c:	b21b      	sxth	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	f6ff ac4d 	blt.w	800912e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3758      	adds	r7, #88	; 0x58
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b088      	sub	sp, #32
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	4613      	mov	r3, r2
 80098aa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80098ac:	88fb      	ldrh	r3, [r7, #6]
 80098ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d07c      	beq.n	80099b0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098be:	b29b      	uxth	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4413      	add	r3, r2
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	4413      	add	r3, r2
 80098d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	8b7b      	ldrh	r3, [r7, #26]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d306      	bcc.n	80098f4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	8b7b      	ldrh	r3, [r7, #26]
 80098ec:	1ad2      	subs	r2, r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	619a      	str	r2, [r3, #24]
 80098f2:	e002      	b.n	80098fa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2200      	movs	r2, #0
 80098f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d123      	bne.n	800994a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	833b      	strh	r3, [r7, #24]
 800991e:	8b3b      	ldrh	r3, [r7, #24]
 8009920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009924:	833b      	strh	r3, [r7, #24]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	441a      	add	r2, r3
 8009934:	8b3b      	ldrh	r3, [r7, #24]
 8009936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800993a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009946:	b29b      	uxth	r3, r3
 8009948:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01f      	beq.n	8009994 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996e:	82fb      	strh	r3, [r7, #22]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	441a      	add	r2, r3
 800997e:	8afb      	ldrh	r3, [r7, #22]
 8009980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009990:	b29b      	uxth	r3, r3
 8009992:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009994:	8b7b      	ldrh	r3, [r7, #26]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 8085 	beq.w	8009aa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6959      	ldr	r1, [r3, #20]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	891a      	ldrh	r2, [r3, #8]
 80099a8:	8b7b      	ldrh	r3, [r7, #26]
 80099aa:	f007 f839 	bl	8010a20 <USB_ReadPMA>
 80099ae:	e07a      	b.n	8009aa6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	461a      	mov	r2, r3
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	4413      	add	r3, r2
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	8b7b      	ldrh	r3, [r7, #26]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d306      	bcc.n	80099ee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	8b7b      	ldrh	r3, [r7, #26]
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	619a      	str	r2, [r3, #24]
 80099ec:	e002      	b.n	80099f4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2200      	movs	r2, #0
 80099f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d123      	bne.n	8009a44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	83fb      	strh	r3, [r7, #30]
 8009a18:	8bfb      	ldrh	r3, [r7, #30]
 8009a1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a1e:	83fb      	strh	r3, [r7, #30]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	441a      	add	r2, r3
 8009a2e:	8bfb      	ldrh	r3, [r7, #30]
 8009a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11f      	bne.n	8009a8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a68:	83bb      	strh	r3, [r7, #28]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	441a      	add	r2, r3
 8009a78:	8bbb      	ldrh	r3, [r7, #28]
 8009a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009a8e:	8b7b      	ldrh	r3, [r7, #26]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d008      	beq.n	8009aa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	6959      	ldr	r1, [r3, #20]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	895a      	ldrh	r2, [r3, #10]
 8009aa0:	8b7b      	ldrh	r3, [r7, #26]
 8009aa2:	f006 ffbd 	bl	8010a20 <USB_ReadPMA>
    }
  }

  return count;
 8009aa6:	8b7b      	ldrh	r3, [r7, #26]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b0a2      	sub	sp, #136	; 0x88
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	4613      	mov	r3, r2
 8009abc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 81c5 	beq.w	8009e54 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	4413      	add	r3, r2
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	6812      	ldr	r2, [r2, #0]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d907      	bls.n	8009b0e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b06:	1ad2      	subs	r2, r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	619a      	str	r2, [r3, #24]
 8009b0c:	e002      	b.n	8009b14 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2200      	movs	r2, #0
 8009b12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f040 80b9 	bne.w	8009c90 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d126      	bne.n	8009b74 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	4413      	add	r3, r2
 8009b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	00da      	lsls	r2, r3, #3
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	4413      	add	r3, r2
 8009b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	801a      	strh	r2, [r3, #0]
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e01a      	b.n	8009baa <HAL_PCD_EP_DB_Transmit+0xfa>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d116      	bne.n	8009baa <HAL_PCD_EP_DB_Transmit+0xfa>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	4413      	add	r3, r2
 8009b92:	633b      	str	r3, [r7, #48]	; 0x30
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	00da      	lsls	r2, r3, #3
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	623b      	str	r3, [r7, #32]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d126      	bne.n	8009c06 <HAL_PCD_EP_DB_Transmit+0x156>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	4413      	add	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	00da      	lsls	r2, r3, #3
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	801a      	strh	r2, [r3, #0]
 8009c04:	e017      	b.n	8009c36 <HAL_PCD_EP_DB_Transmit+0x186>
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d113      	bne.n	8009c36 <HAL_PCD_EP_DB_Transmit+0x186>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	623b      	str	r3, [r7, #32]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	00da      	lsls	r2, r3, #3
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2200      	movs	r2, #0
 8009c34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f008 fe28 	bl	8012892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c42:	88fb      	ldrh	r3, [r7, #6]
 8009c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 82d2 	beq.w	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c68:	827b      	strh	r3, [r7, #18]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	441a      	add	r2, r3
 8009c78:	8a7b      	ldrh	r3, [r7, #18]
 8009c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	8013      	strh	r3, [r2, #0]
 8009c8e:	e2b0      	b.n	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c90:	88fb      	ldrh	r3, [r7, #6]
 8009c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d021      	beq.n	8009cde <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	441a      	add	r2, r3
 8009cc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	f040 8284 	bne.w	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	695a      	ldr	r2, [r3, #20]
 8009cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cf2:	441a      	add	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d00:	441a      	add	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d309      	bcc.n	8009d26 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	6a1a      	ldr	r2, [r3, #32]
 8009d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	621a      	str	r2, [r3, #32]
 8009d24:	e015      	b.n	8009d52 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d107      	bne.n	8009d3e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8009d2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009d3c:	e009      	b.n	8009d52 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d155      	bne.n	8009e06 <HAL_PCD_EP_DB_Transmit+0x356>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	4413      	add	r3, r2
 8009d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	00da      	lsls	r2, r3, #3
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
 8009d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d84:	2b3e      	cmp	r3, #62	; 0x3e
 8009d86:	d916      	bls.n	8009db6 <HAL_PCD_EP_DB_Transmit+0x306>
 8009d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8009d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	029b      	lsls	r3, r3, #10
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	e043      	b.n	8009e3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8009db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d112      	bne.n	8009de2 <HAL_PCD_EP_DB_Transmit+0x332>
 8009dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	801a      	strh	r2, [r3, #0]
 8009de0:	e02d      	b.n	8009e3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8009de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de4:	085b      	lsrs	r3, r3, #1
 8009de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_PCD_EP_DB_Transmit+0x348>
 8009df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009df4:	3301      	adds	r3, #1
 8009df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e02:	801a      	strh	r2, [r3, #0]
 8009e04:	e01b      	b.n	8009e3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d117      	bne.n	8009e3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	643b      	str	r3, [r7, #64]	; 0x40
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e22:	4413      	add	r3, r2
 8009e24:	643b      	str	r3, [r7, #64]	; 0x40
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	00da      	lsls	r2, r3, #3
 8009e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e2e:	4413      	add	r3, r2
 8009e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6959      	ldr	r1, [r3, #20]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	891a      	ldrh	r2, [r3, #8]
 8009e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f006 fda5 	bl	801099c <USB_WritePMA>
 8009e52:	e1ce      	b.n	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4413      	add	r3, r2
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d307      	bcc.n	8009e98 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e90:	1ad2      	subs	r2, r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	619a      	str	r2, [r3, #24]
 8009e96:	e002      	b.n	8009e9e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f040 80c4 	bne.w	800a030 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d126      	bne.n	8009efe <HAL_PCD_EP_DB_Transmit+0x44e>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ec4:	4413      	add	r3, r2
 8009ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	00da      	lsls	r2, r3, #3
 8009ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	e01a      	b.n	8009f34 <HAL_PCD_EP_DB_Transmit+0x484>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	785b      	ldrb	r3, [r3, #1]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d116      	bne.n	8009f34 <HAL_PCD_EP_DB_Transmit+0x484>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f1a:	4413      	add	r3, r2
 8009f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	00da      	lsls	r2, r3, #3
 8009f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f26:	4413      	add	r3, r2
 8009f28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f30:	2200      	movs	r2, #0
 8009f32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d12f      	bne.n	8009fa2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	00da      	lsls	r2, r3, #3
 8009f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f86:	801a      	strh	r2, [r3, #0]
 8009f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	e017      	b.n	8009fd2 <HAL_PCD_EP_DB_Transmit+0x522>
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	785b      	ldrb	r3, [r3, #1]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d113      	bne.n	8009fd2 <HAL_PCD_EP_DB_Transmit+0x522>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fb8:	4413      	add	r3, r2
 8009fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	00da      	lsls	r2, r3, #3
 8009fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fce:	2200      	movs	r2, #0
 8009fd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f008 fc5a 	bl	8012892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f040 8104 	bne.w	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a004:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	461a      	mov	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	441a      	add	r2, r3
 800a016:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	8013      	strh	r3, [r2, #0]
 800a02e:	e0e0      	b.n	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d121      	bne.n	800a07e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a054:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	441a      	add	r2, r3
 800a066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a06a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a06e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a084:	2b01      	cmp	r3, #1
 800a086:	f040 80b4 	bne.w	800a1f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	695a      	ldr	r2, [r3, #20]
 800a08e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a092:	441a      	add	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0a0:	441a      	add	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d309      	bcc.n	800a0c6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6a1a      	ldr	r2, [r3, #32]
 800a0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	621a      	str	r2, [r3, #32]
 800a0c4:	e015      	b.n	800a0f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d107      	bne.n	800a0de <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800a0ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a0dc:	e009      	b.n	800a0f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d155      	bne.n	800a1ac <HAL_PCD_EP_DB_Transmit+0x6fc>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	65bb      	str	r3, [r7, #88]	; 0x58
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a10e:	b29b      	uxth	r3, r3
 800a110:	461a      	mov	r2, r3
 800a112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a114:	4413      	add	r3, r2
 800a116:	65bb      	str	r3, [r7, #88]	; 0x58
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	00da      	lsls	r2, r3, #3
 800a11e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a120:	4413      	add	r3, r2
 800a122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a126:	657b      	str	r3, [r7, #84]	; 0x54
 800a128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a12a:	2b3e      	cmp	r3, #62	; 0x3e
 800a12c:	d916      	bls.n	800a15c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800a12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a130:	095b      	lsrs	r3, r3, #5
 800a132:	677b      	str	r3, [r7, #116]	; 0x74
 800a134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d102      	bne.n	800a144 <HAL_PCD_EP_DB_Transmit+0x694>
 800a13e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a140:	3b01      	subs	r3, #1
 800a142:	677b      	str	r3, [r7, #116]	; 0x74
 800a144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a146:	b29b      	uxth	r3, r3
 800a148:	029b      	lsls	r3, r3, #10
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a154:	b29a      	uxth	r2, r3
 800a156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a158:	801a      	strh	r2, [r3, #0]
 800a15a:	e040      	b.n	800a1de <HAL_PCD_EP_DB_Transmit+0x72e>
 800a15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d112      	bne.n	800a188 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800a162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a170:	801a      	strh	r2, [r3, #0]
 800a172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a180:	b29a      	uxth	r2, r3
 800a182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	e02a      	b.n	800a1de <HAL_PCD_EP_DB_Transmit+0x72e>
 800a188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a18a:	085b      	lsrs	r3, r3, #1
 800a18c:	677b      	str	r3, [r7, #116]	; 0x74
 800a18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <HAL_PCD_EP_DB_Transmit+0x6ee>
 800a198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a19a:	3301      	adds	r3, #1
 800a19c:	677b      	str	r3, [r7, #116]	; 0x74
 800a19e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	029b      	lsls	r3, r3, #10
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	e018      	b.n	800a1de <HAL_PCD_EP_DB_Transmit+0x72e>
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d114      	bne.n	800a1de <HAL_PCD_EP_DB_Transmit+0x72e>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1c2:	4413      	add	r3, r2
 800a1c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	00da      	lsls	r2, r3, #3
 800a1cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6959      	ldr	r1, [r3, #20]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	895a      	ldrh	r2, [r3, #10]
 800a1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f006 fbd5 	bl	801099c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a20c:	823b      	strh	r3, [r7, #16]
 800a20e:	8a3b      	ldrh	r3, [r7, #16]
 800a210:	f083 0310 	eor.w	r3, r3, #16
 800a214:	823b      	strh	r3, [r7, #16]
 800a216:	8a3b      	ldrh	r3, [r7, #16]
 800a218:	f083 0320 	eor.w	r3, r3, #32
 800a21c:	823b      	strh	r3, [r7, #16]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	441a      	add	r2, r3
 800a22c:	8a3b      	ldrh	r3, [r7, #16]
 800a22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23e:	b29b      	uxth	r3, r3
 800a240:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3788      	adds	r7, #136	; 0x88
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	817b      	strh	r3, [r7, #10]
 800a25a:	4613      	mov	r3, r2
 800a25c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a25e:	897b      	ldrh	r3, [r7, #10]
 800a260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a264:	b29b      	uxth	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00c      	beq.n	800a284 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a26a:	897b      	ldrh	r3, [r7, #10]
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	3304      	adds	r3, #4
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e00a      	b.n	800a29a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a284:	897a      	ldrh	r2, [r7, #10]
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	3304      	adds	r3, #4
 800a298:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d107      	bne.n	800a2b0 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	80da      	strh	r2, [r3, #6]
 800a2ae:	e00b      	b.n	800a2c8 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	0c1b      	lsrs	r3, r3, #16
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	b29a      	uxth	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <HAL_PWREx_GetVoltageRange+0x18>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	40007000 	.word	0x40007000

0800a348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a356:	d130      	bne.n	800a3ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a358:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a364:	d038      	beq.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a36e:	4a1e      	ldr	r2, [pc, #120]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a376:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2232      	movs	r2, #50	; 0x32
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
 800a380:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	0c9b      	lsrs	r3, r3, #18
 800a388:	3301      	adds	r3, #1
 800a38a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a38c:	e002      	b.n	800a394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3b01      	subs	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a394:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a0:	d102      	bne.n	800a3a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f2      	bne.n	800a38e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b4:	d110      	bne.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e00f      	b.n	800a3da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c6:	d007      	beq.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3c8:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3d0:	4a05      	ldr	r2, [pc, #20]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40007000 	.word	0x40007000
 800a3ec:	20000000 	.word	0x20000000
 800a3f0:	431bde83 	.word	0x431bde83

0800a3f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	4a04      	ldr	r2, [pc, #16]	; (800a410 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a3fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a402:	6053      	str	r3, [r2, #4]
}
 800a404:	bf00      	nop
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40007000 	.word	0x40007000

0800a414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	f000 bc4f 	b.w	800acc6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a428:	4b97      	ldr	r3, [pc, #604]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f003 030c 	and.w	r3, r3, #12
 800a430:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a432:	4b95      	ldr	r3, [pc, #596]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80e6 	beq.w	800a616 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <HAL_RCC_OscConfig+0x4c>
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	2b0c      	cmp	r3, #12
 800a454:	f040 808d 	bne.w	800a572 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	f040 8089 	bne.w	800a572 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a460:	4b89      	ldr	r3, [pc, #548]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <HAL_RCC_OscConfig+0x66>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f000 bc26 	b.w	800acc6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a47e:	4b82      	ldr	r3, [pc, #520]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <HAL_RCC_OscConfig+0x80>
 800a48a:	4b7f      	ldr	r3, [pc, #508]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a492:	e005      	b.n	800a4a0 <HAL_RCC_OscConfig+0x8c>
 800a494:	4b7c      	ldr	r3, [pc, #496]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49a:	091b      	lsrs	r3, r3, #4
 800a49c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d224      	bcs.n	800a4ee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fdd9 	bl	800b060 <RCC_SetFlashLatencyFromMSIRange>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f000 bc06 	b.w	800acc6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4ba:	4b73      	ldr	r3, [pc, #460]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a72      	ldr	r2, [pc, #456]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4c0:	f043 0308 	orr.w	r3, r3, #8
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	4b70      	ldr	r3, [pc, #448]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	496d      	ldr	r1, [pc, #436]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4d8:	4b6b      	ldr	r3, [pc, #428]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	4968      	ldr	r1, [pc, #416]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	604b      	str	r3, [r1, #4]
 800a4ec:	e025      	b.n	800a53a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4ee:	4b66      	ldr	r3, [pc, #408]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a65      	ldr	r2, [pc, #404]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4f4:	f043 0308 	orr.w	r3, r3, #8
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4b63      	ldr	r3, [pc, #396]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	4960      	ldr	r1, [pc, #384]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a50c:	4b5e      	ldr	r3, [pc, #376]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	495b      	ldr	r1, [pc, #364]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fd98 	bl	800b060 <RCC_SetFlashLatencyFromMSIRange>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e3c5      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a53a:	f000 fccd 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800a53e:	4602      	mov	r2, r0
 800a540:	4b51      	ldr	r3, [pc, #324]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	091b      	lsrs	r3, r3, #4
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	4950      	ldr	r1, [pc, #320]	; (800a68c <HAL_RCC_OscConfig+0x278>)
 800a54c:	5ccb      	ldrb	r3, [r1, r3]
 800a54e:	f003 031f 	and.w	r3, r3, #31
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	4a4e      	ldr	r2, [pc, #312]	; (800a690 <HAL_RCC_OscConfig+0x27c>)
 800a558:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a55a:	4b4e      	ldr	r3, [pc, #312]	; (800a694 <HAL_RCC_OscConfig+0x280>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fb fac4 	bl	8005aec <HAL_InitTick>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d052      	beq.n	800a614 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	e3a9      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d032      	beq.n	800a5e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a57a:	4b43      	ldr	r3, [pc, #268]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a42      	ldr	r2, [pc, #264]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a586:	f7fb fb01 	bl	8005b8c <HAL_GetTick>
 800a58a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a58c:	e008      	b.n	800a5a0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a58e:	f7fb fafd 	bl	8005b8c <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d901      	bls.n	800a5a0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e392      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a5a0:	4b39      	ldr	r3, [pc, #228]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0f0      	beq.n	800a58e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5ac:	4b36      	ldr	r3, [pc, #216]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a35      	ldr	r2, [pc, #212]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5b2:	f043 0308 	orr.w	r3, r3, #8
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	4b33      	ldr	r3, [pc, #204]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	4930      	ldr	r1, [pc, #192]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5ca:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	021b      	lsls	r3, r3, #8
 800a5d8:	492b      	ldr	r1, [pc, #172]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	604b      	str	r3, [r1, #4]
 800a5de:	e01a      	b.n	800a616 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a5e0:	4b29      	ldr	r3, [pc, #164]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a28      	ldr	r2, [pc, #160]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a5e6:	f023 0301 	bic.w	r3, r3, #1
 800a5ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a5ec:	f7fb face 	bl	8005b8c <HAL_GetTick>
 800a5f0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5f4:	f7fb faca 	bl	8005b8c <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e35f      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a606:	4b20      	ldr	r3, [pc, #128]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x1e0>
 800a612:	e000      	b.n	800a616 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d073      	beq.n	800a70a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d005      	beq.n	800a634 <HAL_RCC_OscConfig+0x220>
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	2b0c      	cmp	r3, #12
 800a62c:	d10e      	bne.n	800a64c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	2b03      	cmp	r3, #3
 800a632:	d10b      	bne.n	800a64c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a634:	4b14      	ldr	r3, [pc, #80]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d063      	beq.n	800a708 <HAL_RCC_OscConfig+0x2f4>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d15f      	bne.n	800a708 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e33c      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a654:	d106      	bne.n	800a664 <HAL_RCC_OscConfig+0x250>
 800a656:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a0b      	ldr	r2, [pc, #44]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	e025      	b.n	800a6b0 <HAL_RCC_OscConfig+0x29c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a66c:	d114      	bne.n	800a698 <HAL_RCC_OscConfig+0x284>
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a05      	ldr	r2, [pc, #20]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	4b03      	ldr	r3, [pc, #12]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a02      	ldr	r2, [pc, #8]	; (800a688 <HAL_RCC_OscConfig+0x274>)
 800a680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	e013      	b.n	800a6b0 <HAL_RCC_OscConfig+0x29c>
 800a688:	40021000 	.word	0x40021000
 800a68c:	080193a0 	.word	0x080193a0
 800a690:	20000000 	.word	0x20000000
 800a694:	20000004 	.word	0x20000004
 800a698:	4b8f      	ldr	r3, [pc, #572]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a8e      	ldr	r2, [pc, #568]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a69e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	4b8c      	ldr	r3, [pc, #560]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a8b      	ldr	r2, [pc, #556]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a6aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d013      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b8:	f7fb fa68 	bl	8005b8c <HAL_GetTick>
 800a6bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6be:	e008      	b.n	800a6d2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6c0:	f7fb fa64 	bl	8005b8c <HAL_GetTick>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	2b64      	cmp	r3, #100	; 0x64
 800a6cc:	d901      	bls.n	800a6d2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e2f9      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6d2:	4b81      	ldr	r3, [pc, #516]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0f0      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x2ac>
 800a6de:	e014      	b.n	800a70a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e0:	f7fb fa54 	bl	8005b8c <HAL_GetTick>
 800a6e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6e6:	e008      	b.n	800a6fa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6e8:	f7fb fa50 	bl	8005b8c <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b64      	cmp	r3, #100	; 0x64
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e2e5      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6fa:	4b77      	ldr	r3, [pc, #476]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1f0      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x2d4>
 800a706:	e000      	b.n	800a70a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d060      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d005      	beq.n	800a728 <HAL_RCC_OscConfig+0x314>
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	2b0c      	cmp	r3, #12
 800a720:	d119      	bne.n	800a756 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d116      	bne.n	800a756 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a728:	4b6b      	ldr	r3, [pc, #428]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_RCC_OscConfig+0x32c>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e2c2      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a740:	4b65      	ldr	r3, [pc, #404]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	061b      	lsls	r3, r3, #24
 800a74e:	4962      	ldr	r1, [pc, #392]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a750:	4313      	orrs	r3, r2
 800a752:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a754:	e040      	b.n	800a7d8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d023      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a75e:	4b5e      	ldr	r3, [pc, #376]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a5d      	ldr	r2, [pc, #372]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76a:	f7fb fa0f 	bl	8005b8c <HAL_GetTick>
 800a76e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a770:	e008      	b.n	800a784 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a772:	f7fb fa0b 	bl	8005b8c <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e2a0      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a784:	4b54      	ldr	r3, [pc, #336]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0f0      	beq.n	800a772 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a790:	4b51      	ldr	r3, [pc, #324]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	061b      	lsls	r3, r3, #24
 800a79e:	494e      	ldr	r1, [pc, #312]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	604b      	str	r3, [r1, #4]
 800a7a4:	e018      	b.n	800a7d8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7a6:	4b4c      	ldr	r3, [pc, #304]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a4b      	ldr	r2, [pc, #300]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b2:	f7fb f9eb 	bl	8005b8c <HAL_GetTick>
 800a7b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ba:	f7fb f9e7 	bl	8005b8c <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e27c      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7cc:	4b42      	ldr	r3, [pc, #264]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f0      	bne.n	800a7ba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0308 	and.w	r3, r3, #8
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 8082 	beq.w	800a8ea <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d05f      	beq.n	800a8ae <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800a7ee:	4b3a      	ldr	r3, [pc, #232]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7f4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	429a      	cmp	r2, r3
 800a802:	d037      	beq.n	800a874 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d006      	beq.n	800a81c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e254      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01b      	beq.n	800a85e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800a826:	4b2c      	ldr	r3, [pc, #176]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a82c:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a82e:	f023 0301 	bic.w	r3, r3, #1
 800a832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a836:	f7fb f9a9 	bl	8005b8c <HAL_GetTick>
 800a83a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a83e:	f7fb f9a5 	bl	8005b8c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b11      	cmp	r3, #17
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e23a      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a850:	4b21      	ldr	r3, [pc, #132]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1ef      	bne.n	800a83e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800a85e:	4b1e      	ldr	r3, [pc, #120]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a864:	f023 0210 	bic.w	r2, r3, #16
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	491a      	ldr	r1, [pc, #104]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a874:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a87a:	4a17      	ldr	r2, [pc, #92]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a87c:	f043 0301 	orr.w	r3, r3, #1
 800a880:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a884:	f7fb f982 	bl	8005b8c <HAL_GetTick>
 800a888:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a88c:	f7fb f97e 	bl	8005b8c <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b11      	cmp	r3, #17
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e213      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a89e:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0ef      	beq.n	800a88c <HAL_RCC_OscConfig+0x478>
 800a8ac:	e01d      	b.n	800a8ea <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8ae:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8b4:	4a08      	ldr	r2, [pc, #32]	; (800a8d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8be:	f7fb f965 	bl	8005b8c <HAL_GetTick>
 800a8c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8c4:	e00a      	b.n	800a8dc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8c6:	f7fb f961 	bl	8005b8c <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b11      	cmp	r3, #17
 800a8d2:	d903      	bls.n	800a8dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e1f6      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
 800a8d8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8dc:	4ba9      	ldr	r3, [pc, #676]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a8de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1ed      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 80bd 	beq.w	800aa72 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a8fe:	4ba1      	ldr	r3, [pc, #644]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10e      	bne.n	800a928 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a90a:	4b9e      	ldr	r3, [pc, #632]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90e:	4a9d      	ldr	r2, [pc, #628]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a914:	6593      	str	r3, [r2, #88]	; 0x58
 800a916:	4b9b      	ldr	r3, [pc, #620]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a922:	2301      	movs	r3, #1
 800a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a928:	4b97      	ldr	r3, [pc, #604]	; (800ab88 <HAL_RCC_OscConfig+0x774>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a930:	2b00      	cmp	r3, #0
 800a932:	d118      	bne.n	800a966 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a934:	4b94      	ldr	r3, [pc, #592]	; (800ab88 <HAL_RCC_OscConfig+0x774>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a93      	ldr	r2, [pc, #588]	; (800ab88 <HAL_RCC_OscConfig+0x774>)
 800a93a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a93e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a940:	f7fb f924 	bl	8005b8c <HAL_GetTick>
 800a944:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a948:	f7fb f920 	bl	8005b8c <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e1b5      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a95a:	4b8b      	ldr	r3, [pc, #556]	; (800ab88 <HAL_RCC_OscConfig+0x774>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f0      	beq.n	800a948 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d02c      	beq.n	800a9cc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800a972:	4b84      	ldr	r3, [pc, #528]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a978:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a984:	497f      	ldr	r1, [pc, #508]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a986:	4313      	orrs	r3, r2
 800a988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f003 0304 	and.w	r3, r3, #4
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a998:	4b7a      	ldr	r3, [pc, #488]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a99e:	4a79      	ldr	r2, [pc, #484]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9a0:	f043 0304 	orr.w	r3, r3, #4
 800a9a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9a8:	4b76      	ldr	r3, [pc, #472]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ae:	4a75      	ldr	r2, [pc, #468]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9b0:	f043 0301 	orr.w	r3, r3, #1
 800a9b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9b8:	e018      	b.n	800a9ec <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9ba:	4b72      	ldr	r3, [pc, #456]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	4a70      	ldr	r2, [pc, #448]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9ca:	e00f      	b.n	800a9ec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9cc:	4b6d      	ldr	r3, [pc, #436]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d2:	4a6c      	ldr	r2, [pc, #432]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9d4:	f023 0301 	bic.w	r3, r3, #1
 800a9d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9dc:	4b69      	ldr	r3, [pc, #420]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e2:	4a68      	ldr	r2, [pc, #416]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800a9e4:	f023 0304 	bic.w	r3, r3, #4
 800a9e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d016      	beq.n	800aa22 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9f4:	f7fb f8ca 	bl	8005b8c <HAL_GetTick>
 800a9f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9fa:	e00a      	b.n	800aa12 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9fc:	f7fb f8c6 	bl	8005b8c <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d901      	bls.n	800aa12 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e159      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa12:	4b5c      	ldr	r3, [pc, #368]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0ed      	beq.n	800a9fc <HAL_RCC_OscConfig+0x5e8>
 800aa20:	e01d      	b.n	800aa5e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa22:	f7fb f8b3 	bl	8005b8c <HAL_GetTick>
 800aa26:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa28:	e00a      	b.n	800aa40 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa2a:	f7fb f8af 	bl	8005b8c <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d901      	bls.n	800aa40 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e142      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa40:	4b50      	ldr	r3, [pc, #320]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1ed      	bne.n	800aa2a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800aa4e:	4b4d      	ldr	r3, [pc, #308]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	4a4b      	ldr	r2, [pc, #300]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d105      	bne.n	800aa72 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa66:	4b47      	ldr	r3, [pc, #284]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6a:	4a46      	ldr	r2, [pc, #280]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d03c      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01c      	beq.n	800aac0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa86:	4b3f      	ldr	r3, [pc, #252]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa8c:	4a3d      	ldr	r2, [pc, #244]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aa8e:	f043 0301 	orr.w	r3, r3, #1
 800aa92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa96:	f7fb f879 	bl	8005b8c <HAL_GetTick>
 800aa9a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa9c:	e008      	b.n	800aab0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa9e:	f7fb f875 	bl	8005b8c <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d901      	bls.n	800aab0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e10a      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0ef      	beq.n	800aa9e <HAL_RCC_OscConfig+0x68a>
 800aabe:	e01b      	b.n	800aaf8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aac0:	4b30      	ldr	r3, [pc, #192]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aac6:	4a2f      	ldr	r2, [pc, #188]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aac8:	f023 0301 	bic.w	r3, r3, #1
 800aacc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aad0:	f7fb f85c 	bl	8005b8c <HAL_GetTick>
 800aad4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aad8:	f7fb f858 	bl	8005b8c <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e0ed      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aaea:	4b26      	ldr	r3, [pc, #152]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800aaec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1ef      	bne.n	800aad8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80e1 	beq.w	800acc4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	f040 80b5 	bne.w	800ac76 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ab0c:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	f003 0203 	and.w	r2, r3, #3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d124      	bne.n	800ab6a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d11b      	bne.n	800ab6a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d113      	bne.n	800ab6a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d109      	bne.n	800ab6a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	3b01      	subs	r3, #1
 800ab64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d05f      	beq.n	800ac2a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	2b0c      	cmp	r3, #12
 800ab6e:	d05a      	beq.n	800ac26 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ab70:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a03      	ldr	r2, [pc, #12]	; (800ab84 <HAL_RCC_OscConfig+0x770>)
 800ab76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ab7c:	f7fb f806 	bl	8005b8c <HAL_GetTick>
 800ab80:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab82:	e00c      	b.n	800ab9e <HAL_RCC_OscConfig+0x78a>
 800ab84:	40021000 	.word	0x40021000
 800ab88:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab8c:	f7fa fffe 	bl	8005b8c <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d901      	bls.n	800ab9e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e093      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab9e:	4b4c      	ldr	r3, [pc, #304]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f0      	bne.n	800ab8c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abaa:	4b49      	ldr	r3, [pc, #292]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	4b49      	ldr	r3, [pc, #292]	; (800acd4 <HAL_RCC_OscConfig+0x8c0>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800abba:	3a01      	subs	r2, #1
 800abbc:	0112      	lsls	r2, r2, #4
 800abbe:	4311      	orrs	r1, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abc4:	0212      	lsls	r2, r2, #8
 800abc6:	4311      	orrs	r1, r2
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abcc:	0852      	lsrs	r2, r2, #1
 800abce:	3a01      	subs	r2, #1
 800abd0:	0552      	lsls	r2, r2, #21
 800abd2:	4311      	orrs	r1, r2
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800abd8:	0852      	lsrs	r2, r2, #1
 800abda:	3a01      	subs	r2, #1
 800abdc:	0652      	lsls	r2, r2, #25
 800abde:	430a      	orrs	r2, r1
 800abe0:	493b      	ldr	r1, [pc, #236]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800abe6:	4b3a      	ldr	r3, [pc, #232]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a39      	ldr	r2, [pc, #228]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abf0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800abf2:	4b37      	ldr	r3, [pc, #220]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	4a36      	ldr	r2, [pc, #216]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800abf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abfc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800abfe:	f7fa ffc5 	bl	8005b8c <HAL_GetTick>
 800ac02:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac04:	e008      	b.n	800ac18 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac06:	f7fa ffc1 	bl	8005b8c <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e056      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac18:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0f0      	beq.n	800ac06 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac24:	e04e      	b.n	800acc4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e04d      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac2a:	4b29      	ldr	r3, [pc, #164]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d146      	bne.n	800acc4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ac36:	4b26      	ldr	r3, [pc, #152]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a25      	ldr	r2, [pc, #148]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac40:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac42:	4b23      	ldr	r3, [pc, #140]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	4a22      	ldr	r2, [pc, #136]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac4c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac4e:	f7fa ff9d 	bl	8005b8c <HAL_GetTick>
 800ac52:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac54:	e008      	b.n	800ac68 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac56:	f7fa ff99 	bl	8005b8c <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d901      	bls.n	800ac68 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e02e      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac68:	4b19      	ldr	r3, [pc, #100]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0f0      	beq.n	800ac56 <HAL_RCC_OscConfig+0x842>
 800ac74:	e026      	b.n	800acc4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2b0c      	cmp	r3, #12
 800ac7a:	d021      	beq.n	800acc0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac7c:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a13      	ldr	r2, [pc, #76]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800ac82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac88:	f7fa ff80 	bl	8005b8c <HAL_GetTick>
 800ac8c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac8e:	e008      	b.n	800aca2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac90:	f7fa ff7c 	bl	8005b8c <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e011      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1f0      	bne.n	800ac90 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800acae:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	4a07      	ldr	r2, [pc, #28]	; (800acd0 <HAL_RCC_OscConfig+0x8bc>)
 800acb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800acb8:	f023 0303 	bic.w	r3, r3, #3
 800acbc:	60d3      	str	r3, [r2, #12]
 800acbe:	e001      	b.n	800acc4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3728      	adds	r7, #40	; 0x28
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	40021000 	.word	0x40021000
 800acd4:	f99f808c 	.word	0xf99f808c

0800acd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e0e7      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800acec:	4b75      	ldr	r3, [pc, #468]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0307 	and.w	r3, r3, #7
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d910      	bls.n	800ad1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acfa:	4b72      	ldr	r3, [pc, #456]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f023 0207 	bic.w	r2, r3, #7
 800ad02:	4970      	ldr	r1, [pc, #448]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad0a:	4b6e      	ldr	r3, [pc, #440]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0307 	and.w	r3, r3, #7
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d001      	beq.n	800ad1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e0cf      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	4b66      	ldr	r3, [pc, #408]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d908      	bls.n	800ad4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad38:	4b63      	ldr	r3, [pc, #396]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	4960      	ldr	r1, [pc, #384]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d04c      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad5e:	4b5a      	ldr	r3, [pc, #360]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d121      	bne.n	800adae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e0a6      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d107      	bne.n	800ad86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad76:	4b54      	ldr	r3, [pc, #336]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d115      	bne.n	800adae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e09a      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad8e:	4b4e      	ldr	r3, [pc, #312]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e08e      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad9e:	4b4a      	ldr	r3, [pc, #296]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e086      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adae:	4b46      	ldr	r3, [pc, #280]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f023 0203 	bic.w	r2, r3, #3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4943      	ldr	r1, [pc, #268]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adc0:	f7fa fee4 	bl	8005b8c <HAL_GetTick>
 800adc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc6:	e00a      	b.n	800adde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adc8:	f7fa fee0 	bl	8005b8c <HAL_GetTick>
 800adcc:	4602      	mov	r2, r0
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	f241 3288 	movw	r2, #5000	; 0x1388
 800add6:	4293      	cmp	r3, r2
 800add8:	d901      	bls.n	800adde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e06e      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adde:	4b3a      	ldr	r3, [pc, #232]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 020c 	and.w	r2, r3, #12
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	429a      	cmp	r2, r3
 800adee:	d1eb      	bne.n	800adc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d010      	beq.n	800ae1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	4b31      	ldr	r3, [pc, #196]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d208      	bcs.n	800ae1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae0c:	4b2e      	ldr	r3, [pc, #184]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	492b      	ldr	r1, [pc, #172]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae1e:	4b29      	ldr	r3, [pc, #164]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d210      	bcs.n	800ae4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae2c:	4b25      	ldr	r3, [pc, #148]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f023 0207 	bic.w	r2, r3, #7
 800ae34:	4923      	ldr	r1, [pc, #140]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3c:	4b21      	ldr	r3, [pc, #132]	; (800aec4 <HAL_RCC_ClockConfig+0x1ec>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d001      	beq.n	800ae4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e036      	b.n	800aebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae5a:	4b1b      	ldr	r3, [pc, #108]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	4918      	ldr	r1, [pc, #96]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d009      	beq.n	800ae8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae78:	4b13      	ldr	r3, [pc, #76]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	4910      	ldr	r1, [pc, #64]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae8c:	f000 f824 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800ae90:	4602      	mov	r2, r0
 800ae92:	4b0d      	ldr	r3, [pc, #52]	; (800aec8 <HAL_RCC_ClockConfig+0x1f0>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	091b      	lsrs	r3, r3, #4
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	490b      	ldr	r1, [pc, #44]	; (800aecc <HAL_RCC_ClockConfig+0x1f4>)
 800ae9e:	5ccb      	ldrb	r3, [r1, r3]
 800aea0:	f003 031f 	and.w	r3, r3, #31
 800aea4:	fa22 f303 	lsr.w	r3, r2, r3
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <HAL_RCC_ClockConfig+0x1f8>)
 800aeaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCC_ClockConfig+0x1fc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fa fe1b 	bl	8005aec <HAL_InitTick>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	72fb      	strb	r3, [r7, #11]

  return status;
 800aeba:	7afb      	ldrb	r3, [r7, #11]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	40022000 	.word	0x40022000
 800aec8:	40021000 	.word	0x40021000
 800aecc:	080193a0 	.word	0x080193a0
 800aed0:	20000000 	.word	0x20000000
 800aed4:	20000004 	.word	0x20000004

0800aed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b089      	sub	sp, #36	; 0x24
 800aedc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aee6:	4b3e      	ldr	r3, [pc, #248]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f003 030c 	and.w	r3, r3, #12
 800aeee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aef0:	4b3b      	ldr	r3, [pc, #236]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <HAL_RCC_GetSysClockFreq+0x34>
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b0c      	cmp	r3, #12
 800af04:	d121      	bne.n	800af4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d11e      	bne.n	800af4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800af0c:	4b34      	ldr	r3, [pc, #208]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0308 	and.w	r3, r3, #8
 800af14:	2b00      	cmp	r3, #0
 800af16:	d107      	bne.n	800af28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800af18:	4b31      	ldr	r3, [pc, #196]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800af1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e005      	b.n	800af34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800af28:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	091b      	lsrs	r3, r3, #4
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800af34:	4a2b      	ldr	r2, [pc, #172]	; (800afe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10d      	bne.n	800af60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800af48:	e00a      	b.n	800af60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d102      	bne.n	800af56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800af50:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x110>)
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	e004      	b.n	800af60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d101      	bne.n	800af60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af5c:	4b23      	ldr	r3, [pc, #140]	; (800afec <HAL_RCC_GetSysClockFreq+0x114>)
 800af5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2b0c      	cmp	r3, #12
 800af64:	d134      	bne.n	800afd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af66:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f003 0303 	and.w	r3, r3, #3
 800af6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d003      	beq.n	800af7e <HAL_RCC_GetSysClockFreq+0xa6>
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d003      	beq.n	800af84 <HAL_RCC_GetSysClockFreq+0xac>
 800af7c:	e005      	b.n	800af8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800af7e:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x110>)
 800af80:	617b      	str	r3, [r7, #20]
      break;
 800af82:	e005      	b.n	800af90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800af84:	4b19      	ldr	r3, [pc, #100]	; (800afec <HAL_RCC_GetSysClockFreq+0x114>)
 800af86:	617b      	str	r3, [r7, #20]
      break;
 800af88:	e002      	b.n	800af90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	617b      	str	r3, [r7, #20]
      break;
 800af8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af90:	4b13      	ldr	r3, [pc, #76]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	3301      	adds	r3, #1
 800af9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	fb03 f202 	mul.w	r2, r3, r2
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x108>)
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	0e5b      	lsrs	r3, r3, #25
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	3301      	adds	r3, #1
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	fbb2 f3f3 	udiv	r3, r2, r3
 800afce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800afd0:	69bb      	ldr	r3, [r7, #24]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3724      	adds	r7, #36	; 0x24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40021000 	.word	0x40021000
 800afe4:	080193b8 	.word	0x080193b8
 800afe8:	00f42400 	.word	0x00f42400
 800afec:	007a1200 	.word	0x007a1200

0800aff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aff4:	4b03      	ldr	r3, [pc, #12]	; (800b004 <HAL_RCC_GetHCLKFreq+0x14>)
 800aff6:	681b      	ldr	r3, [r3, #0]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000000 	.word	0x20000000

0800b008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b00c:	f7ff fff0 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b010:	4602      	mov	r2, r0
 800b012:	4b06      	ldr	r3, [pc, #24]	; (800b02c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	4904      	ldr	r1, [pc, #16]	; (800b030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b01e:	5ccb      	ldrb	r3, [r1, r3]
 800b020:	f003 031f 	and.w	r3, r3, #31
 800b024:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b028:	4618      	mov	r0, r3
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	40021000 	.word	0x40021000
 800b030:	080193b0 	.word	0x080193b0

0800b034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b038:	f7ff ffda 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b03c:	4602      	mov	r2, r0
 800b03e:	4b06      	ldr	r3, [pc, #24]	; (800b058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	0adb      	lsrs	r3, r3, #11
 800b044:	f003 0307 	and.w	r3, r3, #7
 800b048:	4904      	ldr	r1, [pc, #16]	; (800b05c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b04a:	5ccb      	ldrb	r3, [r1, r3]
 800b04c:	f003 031f 	and.w	r3, r3, #31
 800b050:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b054:	4618      	mov	r0, r3
 800b056:	bd80      	pop	{r7, pc}
 800b058:	40021000 	.word	0x40021000
 800b05c:	080193b0 	.word	0x080193b0

0800b060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b06c:	4b2a      	ldr	r3, [pc, #168]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b078:	f7ff f958 	bl	800a32c <HAL_PWREx_GetVoltageRange>
 800b07c:	6178      	str	r0, [r7, #20]
 800b07e:	e014      	b.n	800b0aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b080:	4b25      	ldr	r3, [pc, #148]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b084:	4a24      	ldr	r2, [pc, #144]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b08a:	6593      	str	r3, [r2, #88]	; 0x58
 800b08c:	4b22      	ldr	r3, [pc, #136]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b08e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b098:	f7ff f948 	bl	800a32c <HAL_PWREx_GetVoltageRange>
 800b09c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b09e:	4b1e      	ldr	r3, [pc, #120]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b0:	d10b      	bne.n	800b0ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b80      	cmp	r3, #128	; 0x80
 800b0b6:	d919      	bls.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2ba0      	cmp	r3, #160	; 0xa0
 800b0bc:	d902      	bls.n	800b0c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b0be:	2302      	movs	r3, #2
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	e013      	b.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	e010      	b.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b80      	cmp	r3, #128	; 0x80
 800b0ce:	d902      	bls.n	800b0d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	613b      	str	r3, [r7, #16]
 800b0d4:	e00a      	b.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b80      	cmp	r3, #128	; 0x80
 800b0da:	d102      	bne.n	800b0e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b0dc:	2302      	movs	r3, #2
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	e004      	b.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b70      	cmp	r3, #112	; 0x70
 800b0e6:	d101      	bne.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f023 0207 	bic.w	r2, r3, #7
 800b0f4:	4909      	ldr	r1, [pc, #36]	; (800b11c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b0fc:	4b07      	ldr	r3, [pc, #28]	; (800b11c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0307 	and.w	r3, r3, #7
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	d001      	beq.n	800b10e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	40021000 	.word	0x40021000
 800b11c:	40022000 	.word	0x40022000

0800b120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b128:	2300      	movs	r3, #0
 800b12a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b12c:	2300      	movs	r3, #0
 800b12e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 809e 	beq.w	800b27a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b13e:	2300      	movs	r3, #0
 800b140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b142:	4b46      	ldr	r3, [pc, #280]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800b152:	2300      	movs	r3, #0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00d      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b158:	4b40      	ldr	r3, [pc, #256]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b15c:	4a3f      	ldr	r2, [pc, #252]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b15e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b162:	6593      	str	r3, [r2, #88]	; 0x58
 800b164:	4b3d      	ldr	r3, [pc, #244]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b170:	2301      	movs	r3, #1
 800b172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b174:	4b3a      	ldr	r3, [pc, #232]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a39      	ldr	r2, [pc, #228]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800b17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b180:	f7fa fd04 	bl	8005b8c <HAL_GetTick>
 800b184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b186:	e009      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b188:	f7fa fd00 	bl	8005b8c <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d902      	bls.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	74fb      	strb	r3, [r7, #19]
        break;
 800b19a:	e005      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b19c:	4b30      	ldr	r3, [pc, #192]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0ef      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800b1a8:	7cfb      	ldrb	r3, [r7, #19]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d15a      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b1ae:	4b2b      	ldr	r3, [pc, #172]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01e      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d019      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1ca:	4b24      	ldr	r3, [pc, #144]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1d6:	4b21      	ldr	r3, [pc, #132]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1dc:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1e6:	4b1d      	ldr	r3, [pc, #116]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	4a1b      	ldr	r2, [pc, #108]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1f6:	4a19      	ldr	r2, [pc, #100]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b208:	f7fa fcc0 	bl	8005b8c <HAL_GetTick>
 800b20c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b20e:	e00b      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b210:	f7fa fcbc 	bl	8005b8c <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21e:	4293      	cmp	r3, r2
 800b220:	d902      	bls.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	74fb      	strb	r3, [r7, #19]
            break;
 800b226:	e006      	b.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b228:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0ec      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800b236:	7cfb      	ldrb	r3, [r7, #19]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10b      	bne.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24a:	4904      	ldr	r1, [pc, #16]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b252:	e009      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b254:	7cfb      	ldrb	r3, [r7, #19]
 800b256:	74bb      	strb	r3, [r7, #18]
 800b258:	e006      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b25a:	bf00      	nop
 800b25c:	40021000 	.word	0x40021000
 800b260:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b264:	7cfb      	ldrb	r3, [r7, #19]
 800b266:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b268:	7c7b      	ldrb	r3, [r7, #17]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d105      	bne.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b26e:	4b6e      	ldr	r3, [pc, #440]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	4a6d      	ldr	r2, [pc, #436]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b278:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b286:	4b68      	ldr	r3, [pc, #416]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28c:	f023 0203 	bic.w	r2, r3, #3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	4964      	ldr	r1, [pc, #400]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b296:	4313      	orrs	r3, r2
 800b298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b2a8:	4b5f      	ldr	r3, [pc, #380]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ae:	f023 020c 	bic.w	r2, r3, #12
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	495c      	ldr	r1, [pc, #368]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b2ca:	4b57      	ldr	r3, [pc, #348]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	4953      	ldr	r1, [pc, #332]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2ec:	4b4e      	ldr	r3, [pc, #312]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	494b      	ldr	r1, [pc, #300]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b30e:	4b46      	ldr	r3, [pc, #280]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	4942      	ldr	r1, [pc, #264]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b330:	4b3d      	ldr	r3, [pc, #244]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	493a      	ldr	r1, [pc, #232]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b340:	4313      	orrs	r3, r2
 800b342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b352:	4b35      	ldr	r3, [pc, #212]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b358:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	4931      	ldr	r1, [pc, #196]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b362:	4313      	orrs	r3, r2
 800b364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b374:	4b2c      	ldr	r3, [pc, #176]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	4929      	ldr	r1, [pc, #164]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b384:	4313      	orrs	r3, r2
 800b386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b39c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	69db      	ldr	r3, [r3, #28]
 800b3a4:	4920      	ldr	r1, [pc, #128]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d015      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3b8:	4b1b      	ldr	r3, [pc, #108]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	4918      	ldr	r1, [pc, #96]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3d6:	d105      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3d8:	4b13      	ldr	r3, [pc, #76]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	4a12      	ldr	r2, [pc, #72]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d015      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	490a      	ldr	r1, [pc, #40]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b400:	4313      	orrs	r3, r2
 800b402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b40e:	d105      	bne.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b410:	4b05      	ldr	r3, [pc, #20]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	4a04      	ldr	r2, [pc, #16]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b41a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b41c:	7cbb      	ldrb	r3, [r7, #18]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	40021000 	.word	0x40021000

0800b42c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e095      	b.n	800b56a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b44e:	d009      	beq.n	800b464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	61da      	str	r2, [r3, #28]
 800b456:	e005      	b.n	800b464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7f9 ff54 	bl	800532c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b49a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4a4:	d902      	bls.n	800b4ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	e002      	b.n	800b4b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b4ba:	d007      	beq.n	800b4cc <HAL_SPI_Init+0xa0>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4c4:	d002      	beq.n	800b4cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0302 	and.w	r3, r3, #2
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	695b      	ldr	r3, [r3, #20]
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50e:	ea42 0103 	orr.w	r1, r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	0c1b      	lsrs	r3, r3, #16
 800b528:	f003 0204 	and.w	r2, r3, #4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	f003 0308 	and.w	r3, r3, #8
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b548:	ea42 0103 	orr.w	r1, r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b088      	sub	sp, #32
 800b576:	af00      	add	r7, sp, #0
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	60b9      	str	r1, [r7, #8]
 800b57c:	603b      	str	r3, [r7, #0]
 800b57e:	4613      	mov	r3, r2
 800b580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d101      	bne.n	800b594 <HAL_SPI_Transmit+0x22>
 800b590:	2302      	movs	r3, #2
 800b592:	e158      	b.n	800b846 <HAL_SPI_Transmit+0x2d4>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b59c:	f7fa faf6 	bl	8005b8c <HAL_GetTick>
 800b5a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5a2:	88fb      	ldrh	r3, [r7, #6]
 800b5a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d002      	beq.n	800b5b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5b6:	e13d      	b.n	800b834 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <HAL_SPI_Transmit+0x52>
 800b5be:	88fb      	ldrh	r3, [r7, #6]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5c8:	e134      	b.n	800b834 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2203      	movs	r2, #3
 800b5ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	88fa      	ldrh	r2, [r7, #6]
 800b5e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	88fa      	ldrh	r2, [r7, #6]
 800b5e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b614:	d10f      	bne.n	800b636 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b634:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b640:	2b40      	cmp	r3, #64	; 0x40
 800b642:	d007      	beq.n	800b654 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b65c:	d94b      	bls.n	800b6f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <HAL_SPI_Transmit+0xfa>
 800b666:	8afb      	ldrh	r3, [r7, #22]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d13e      	bne.n	800b6ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b670:	881a      	ldrh	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	1c9a      	adds	r2, r3, #2
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b686:	b29b      	uxth	r3, r3
 800b688:	3b01      	subs	r3, #1
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b690:	e02b      	b.n	800b6ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d112      	bne.n	800b6c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a4:	881a      	ldrh	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6c4:	e011      	b.n	800b6ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6c6:	f7fa fa61 	bl	8005b8c <HAL_GetTick>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d803      	bhi.n	800b6de <HAL_SPI_Transmit+0x16c>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d102      	bne.n	800b6e4 <HAL_SPI_Transmit+0x172>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6e8:	e0a4      	b.n	800b834 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1ce      	bne.n	800b692 <HAL_SPI_Transmit+0x120>
 800b6f4:	e07c      	b.n	800b7f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <HAL_SPI_Transmit+0x192>
 800b6fe:	8afb      	ldrh	r3, [r7, #22]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d170      	bne.n	800b7e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d912      	bls.n	800b734 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	881a      	ldrh	r2, [r3, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	1c9a      	adds	r2, r3, #2
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b728:	b29b      	uxth	r3, r3
 800b72a:	3b02      	subs	r3, #2
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b732:	e058      	b.n	800b7e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	330c      	adds	r3, #12
 800b73e:	7812      	ldrb	r2, [r2, #0]
 800b740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b750:	b29b      	uxth	r3, r3
 800b752:	3b01      	subs	r3, #1
 800b754:	b29a      	uxth	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b75a:	e044      	b.n	800b7e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	f003 0302 	and.w	r3, r3, #2
 800b766:	2b02      	cmp	r3, #2
 800b768:	d12b      	bne.n	800b7c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b76e:	b29b      	uxth	r3, r3
 800b770:	2b01      	cmp	r3, #1
 800b772:	d912      	bls.n	800b79a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b778:	881a      	ldrh	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	1c9a      	adds	r2, r3, #2
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b78e:	b29b      	uxth	r3, r3
 800b790:	3b02      	subs	r3, #2
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b798:	e025      	b.n	800b7e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	7812      	ldrb	r2, [r2, #0]
 800b7a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7c0:	e011      	b.n	800b7e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7c2:	f7fa f9e3 	bl	8005b8c <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d803      	bhi.n	800b7da <HAL_SPI_Transmit+0x268>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d8:	d102      	bne.n	800b7e0 <HAL_SPI_Transmit+0x26e>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b7e4:	e026      	b.n	800b834 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1b5      	bne.n	800b75c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 fce3 	bl	800c1c0 <SPI_EndRxTxTransaction>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2220      	movs	r2, #32
 800b804:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b80e:	2300      	movs	r3, #0
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	613b      	str	r3, [r7, #16]
 800b822:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	77fb      	strb	r3, [r7, #31]
 800b830:	e000      	b.n	800b834 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b832:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b844:	7ffb      	ldrb	r3, [r7, #31]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3720      	adds	r7, #32
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b088      	sub	sp, #32
 800b852:	af02      	add	r7, sp, #8
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	603b      	str	r3, [r7, #0]
 800b85a:	4613      	mov	r3, r2
 800b85c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b86a:	d112      	bne.n	800b892 <HAL_SPI_Receive+0x44>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10e      	bne.n	800b892 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2204      	movs	r2, #4
 800b878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b87c:	88fa      	ldrh	r2, [r7, #6]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	4613      	mov	r3, r2
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f910 	bl	800baae <HAL_SPI_TransmitReceive>
 800b88e:	4603      	mov	r3, r0
 800b890:	e109      	b.n	800baa6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d101      	bne.n	800b8a0 <HAL_SPI_Receive+0x52>
 800b89c:	2302      	movs	r3, #2
 800b89e:	e102      	b.n	800baa6 <HAL_SPI_Receive+0x258>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8a8:	f7fa f970 	bl	8005b8c <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d002      	beq.n	800b8c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b8be:	e0e9      	b.n	800ba94 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <HAL_SPI_Receive+0x7e>
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b8d0:	e0e0      	b.n	800ba94 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2204      	movs	r2, #4
 800b8d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	88fa      	ldrh	r2, [r7, #6]
 800b8ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	88fa      	ldrh	r2, [r7, #6]
 800b8f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b91c:	d908      	bls.n	800b930 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	e007      	b.n	800b940 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b93e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b948:	d10f      	bne.n	800b96a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b968:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b974:	2b40      	cmp	r3, #64	; 0x40
 800b976:	d007      	beq.n	800b988 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b986:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b990:	d867      	bhi.n	800ba62 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b992:	e030      	b.n	800b9f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d117      	bne.n	800b9d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f103 020c 	add.w	r2, r3, #12
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	b2d2      	uxtb	r2, r2
 800b9b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b9d0:	e011      	b.n	800b9f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9d2:	f7fa f8db 	bl	8005b8c <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d803      	bhi.n	800b9ea <HAL_SPI_Receive+0x19c>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d102      	bne.n	800b9f0 <HAL_SPI_Receive+0x1a2>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b9f4:	e04e      	b.n	800ba94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1c8      	bne.n	800b994 <HAL_SPI_Receive+0x146>
 800ba02:	e034      	b.n	800ba6e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d115      	bne.n	800ba3e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68da      	ldr	r2, [r3, #12]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	1c9a      	adds	r2, r3, #2
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ba3c:	e011      	b.n	800ba62 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba3e:	f7fa f8a5 	bl	8005b8c <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d803      	bhi.n	800ba56 <HAL_SPI_Receive+0x208>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d102      	bne.n	800ba5c <HAL_SPI_Receive+0x20e>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ba60:	e018      	b.n	800ba94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1ca      	bne.n	800ba04 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 fb4c 	bl	800c110 <SPI_EndRxTransaction>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2220      	movs	r2, #32
 800ba82:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	75fb      	strb	r3, [r7, #23]
 800ba90:	e000      	b.n	800ba94 <HAL_SPI_Receive+0x246>
  }

error :
 800ba92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b08a      	sub	sp, #40	; 0x28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800babc:	2301      	movs	r3, #1
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <HAL_SPI_TransmitReceive+0x26>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e1fb      	b.n	800becc <HAL_SPI_TransmitReceive+0x41e>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800badc:	f7fa f856 	bl	8005b8c <HAL_GetTick>
 800bae0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bae8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800baf0:	887b      	ldrh	r3, [r7, #2]
 800baf2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800baf4:	887b      	ldrh	r3, [r7, #2]
 800baf6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800baf8:	7efb      	ldrb	r3, [r7, #27]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d00e      	beq.n	800bb1c <HAL_SPI_TransmitReceive+0x6e>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb04:	d106      	bne.n	800bb14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <HAL_SPI_TransmitReceive+0x66>
 800bb0e:	7efb      	ldrb	r3, [r7, #27]
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d003      	beq.n	800bb1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bb14:	2302      	movs	r3, #2
 800bb16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bb1a:	e1cd      	b.n	800beb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <HAL_SPI_TransmitReceive+0x80>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <HAL_SPI_TransmitReceive+0x80>
 800bb28:	887b      	ldrh	r3, [r7, #2]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d103      	bne.n	800bb36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bb34:	e1c0      	b.n	800beb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d003      	beq.n	800bb4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2205      	movs	r2, #5
 800bb46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	887a      	ldrh	r2, [r7, #2]
 800bb5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	887a      	ldrh	r2, [r7, #2]
 800bb62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	887a      	ldrh	r2, [r7, #2]
 800bb70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	887a      	ldrh	r2, [r7, #2]
 800bb76:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb8c:	d802      	bhi.n	800bb94 <HAL_SPI_TransmitReceive+0xe6>
 800bb8e:	8a3b      	ldrh	r3, [r7, #16]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d908      	bls.n	800bba6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bba2:	605a      	str	r2, [r3, #4]
 800bba4:	e007      	b.n	800bbb6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbb4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc0:	2b40      	cmp	r3, #64	; 0x40
 800bbc2:	d007      	beq.n	800bbd4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bbdc:	d97c      	bls.n	800bcd8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <HAL_SPI_TransmitReceive+0x13e>
 800bbe6:	8a7b      	ldrh	r3, [r7, #18]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d169      	bne.n	800bcc0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf0:	881a      	ldrh	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfc:	1c9a      	adds	r2, r3, #2
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc10:	e056      	b.n	800bcc0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f003 0302 	and.w	r3, r3, #2
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d11b      	bne.n	800bc58 <HAL_SPI_TransmitReceive+0x1aa>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d016      	beq.n	800bc58 <HAL_SPI_TransmitReceive+0x1aa>
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d113      	bne.n	800bc58 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc34:	881a      	ldrh	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	1c9a      	adds	r2, r3, #2
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc54:	2300      	movs	r3, #0
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d11c      	bne.n	800bca0 <HAL_SPI_TransmitReceive+0x1f2>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d016      	beq.n	800bca0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68da      	ldr	r2, [r3, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	b292      	uxth	r2, r2
 800bc7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	1c9a      	adds	r2, r3, #2
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bca0:	f7f9 ff74 	bl	8005b8c <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d807      	bhi.n	800bcc0 <HAL_SPI_TransmitReceive+0x212>
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d003      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bcbe:	e0fb      	b.n	800beb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1a3      	bne.n	800bc12 <HAL_SPI_TransmitReceive+0x164>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d19d      	bne.n	800bc12 <HAL_SPI_TransmitReceive+0x164>
 800bcd6:	e0df      	b.n	800be98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <HAL_SPI_TransmitReceive+0x23a>
 800bce0:	8a7b      	ldrh	r3, [r7, #18]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	f040 80cb 	bne.w	800be7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d912      	bls.n	800bd18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	881a      	ldrh	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	1c9a      	adds	r2, r3, #2
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	3b02      	subs	r3, #2
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd16:	e0b2      	b.n	800be7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	330c      	adds	r3, #12
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd3e:	e09e      	b.n	800be7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d134      	bne.n	800bdb8 <HAL_SPI_TransmitReceive+0x30a>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d02f      	beq.n	800bdb8 <HAL_SPI_TransmitReceive+0x30a>
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d12c      	bne.n	800bdb8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d912      	bls.n	800bd8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6c:	881a      	ldrh	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd78:	1c9a      	adds	r2, r3, #2
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	3b02      	subs	r3, #2
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd8c:	e012      	b.n	800bdb4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	330c      	adds	r3, #12
 800bd98:	7812      	ldrb	r2, [r2, #0]
 800bd9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d148      	bne.n	800be58 <HAL_SPI_TransmitReceive+0x3aa>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d042      	beq.n	800be58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d923      	bls.n	800be26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68da      	ldr	r2, [r3, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	b292      	uxth	r2, r2
 800bdea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf0:	1c9a      	adds	r2, r3, #2
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	3b02      	subs	r3, #2
 800be00:	b29a      	uxth	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be0e:	b29b      	uxth	r3, r3
 800be10:	2b01      	cmp	r3, #1
 800be12:	d81f      	bhi.n	800be54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be22:	605a      	str	r2, [r3, #4]
 800be24:	e016      	b.n	800be54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f103 020c 	add.w	r2, r3, #12
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	7812      	ldrb	r2, [r2, #0]
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be48:	b29b      	uxth	r3, r3
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be54:	2301      	movs	r3, #1
 800be56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be58:	f7f9 fe98 	bl	8005b8c <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be64:	429a      	cmp	r2, r3
 800be66:	d803      	bhi.n	800be70 <HAL_SPI_TransmitReceive+0x3c2>
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d102      	bne.n	800be76 <HAL_SPI_TransmitReceive+0x3c8>
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800be7c:	e01c      	b.n	800beb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be82:	b29b      	uxth	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	f47f af5b 	bne.w	800bd40 <HAL_SPI_TransmitReceive+0x292>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be90:	b29b      	uxth	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	f47f af54 	bne.w	800bd40 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be98:	69fa      	ldr	r2, [r7, #28]
 800be9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 f98f 	bl	800c1c0 <SPI_EndRxTxTransaction>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2220      	movs	r2, #32
 800beb2:	661a      	str	r2, [r3, #96]	; 0x60
 800beb4:	e000      	b.n	800beb8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800beb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800becc:	4618      	mov	r0, r3
 800bece:	3728      	adds	r7, #40	; 0x28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	4613      	mov	r3, r2
 800bee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bee4:	f7f9 fe52 	bl	8005b8c <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	1a9b      	subs	r3, r3, r2
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4413      	add	r3, r2
 800bef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bef4:	f7f9 fe4a 	bl	8005b8c <HAL_GetTick>
 800bef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800befa:	4b39      	ldr	r3, [pc, #228]	; (800bfe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	015b      	lsls	r3, r3, #5
 800bf00:	0d1b      	lsrs	r3, r3, #20
 800bf02:	69fa      	ldr	r2, [r7, #28]
 800bf04:	fb02 f303 	mul.w	r3, r2, r3
 800bf08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf0a:	e054      	b.n	800bfb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf12:	d050      	beq.n	800bfb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf14:	f7f9 fe3a 	bl	8005b8c <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d902      	bls.n	800bf2a <SPI_WaitFlagStateUntilTimeout+0x56>
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d13d      	bne.n	800bfa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf42:	d111      	bne.n	800bf68 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf4c:	d004      	beq.n	800bf58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf56:	d107      	bne.n	800bf68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf70:	d10f      	bne.n	800bf92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e017      	b.n	800bfd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d101      	bne.n	800bfb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2301      	moveq	r3, #1
 800bfc8:	2300      	movne	r3, #0
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	461a      	mov	r2, r3
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d19b      	bne.n	800bf0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000000 	.word	0x20000000

0800bfe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	; 0x28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bff6:	f7f9 fdc9 	bl	8005b8c <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	1a9b      	subs	r3, r3, r2
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	4413      	add	r3, r2
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c006:	f7f9 fdc1 	bl	8005b8c <HAL_GetTick>
 800c00a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	330c      	adds	r3, #12
 800c012:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c014:	4b3d      	ldr	r3, [pc, #244]	; (800c10c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	00da      	lsls	r2, r3, #3
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	0d1b      	lsrs	r3, r3, #20
 800c024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c02c:	e060      	b.n	800c0f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c034:	d107      	bne.n	800c046 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b2db      	uxtb	r3, r3
 800c042:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c044:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04c:	d050      	beq.n	800c0f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c04e:	f7f9 fd9d 	bl	8005b8c <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d902      	bls.n	800c064 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d13d      	bne.n	800c0e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c07c:	d111      	bne.n	800c0a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c086:	d004      	beq.n	800c092 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c090:	d107      	bne.n	800c0a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0aa:	d10f      	bne.n	800c0cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0ba:	601a      	str	r2, [r3, #0]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e010      	b.n	800c102 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d196      	bne.n	800c02e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3728      	adds	r7, #40	; 0x28
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000000 	.word	0x20000000

0800c110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af02      	add	r7, sp, #8
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c124:	d111      	bne.n	800c14a <SPI_EndRxTransaction+0x3a>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c12e:	d004      	beq.n	800c13a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c138:	d107      	bne.n	800c14a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c148:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2200      	movs	r2, #0
 800c152:	2180      	movs	r1, #128	; 0x80
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7ff febd 	bl	800bed4 <SPI_WaitFlagStateUntilTimeout>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d007      	beq.n	800c170 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c164:	f043 0220 	orr.w	r2, r3, #32
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e023      	b.n	800c1b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c178:	d11d      	bne.n	800c1b6 <SPI_EndRxTransaction+0xa6>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c182:	d004      	beq.n	800c18e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c18c:	d113      	bne.n	800c1b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2200      	movs	r2, #0
 800c196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7ff ff22 	bl	800bfe4 <SPI_WaitFifoStateUntilTimeout>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d007      	beq.n	800c1b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1aa:	f043 0220 	orr.w	r2, r3, #32
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e000      	b.n	800c1b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7ff ff03 	bl	800bfe4 <SPI_WaitFifoStateUntilTimeout>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d007      	beq.n	800c1f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1e8:	f043 0220 	orr.w	r2, r3, #32
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	e027      	b.n	800c244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2180      	movs	r1, #128	; 0x80
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f7ff fe68 	bl	800bed4 <SPI_WaitFlagStateUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c20e:	f043 0220 	orr.w	r2, r3, #32
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e014      	b.n	800c244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2200      	movs	r2, #0
 800c222:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f7ff fedc 	bl	800bfe4 <SPI_WaitFifoStateUntilTimeout>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d007      	beq.n	800c242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c236:	f043 0220 	orr.w	r2, r3, #32
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e000      	b.n	800c244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e049      	b.n	800c2f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d106      	bne.n	800c278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7f9 f8f6 	bl	8005464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	3304      	adds	r3, #4
 800c288:	4619      	mov	r1, r3
 800c28a:	4610      	mov	r0, r2
 800c28c:	f000 fae6 	bl	800c85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d001      	beq.n	800c314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e033      	b.n	800c37c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a19      	ldr	r2, [pc, #100]	; (800c388 <HAL_TIM_Base_Start+0x8c>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d009      	beq.n	800c33a <HAL_TIM_Base_Start+0x3e>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c32e:	d004      	beq.n	800c33a <HAL_TIM_Base_Start+0x3e>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a15      	ldr	r2, [pc, #84]	; (800c38c <HAL_TIM_Base_Start+0x90>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d115      	bne.n	800c366 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	689a      	ldr	r2, [r3, #8]
 800c340:	4b13      	ldr	r3, [pc, #76]	; (800c390 <HAL_TIM_Base_Start+0x94>)
 800c342:	4013      	ands	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b06      	cmp	r3, #6
 800c34a:	d015      	beq.n	800c378 <HAL_TIM_Base_Start+0x7c>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c352:	d011      	beq.n	800c378 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0201 	orr.w	r2, r2, #1
 800c362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c364:	e008      	b.n	800c378 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f042 0201 	orr.w	r2, r2, #1
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	e000      	b.n	800c37a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	40012c00 	.word	0x40012c00
 800c38c:	40014000 	.word	0x40014000
 800c390:	00010007 	.word	0x00010007

0800c394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d001      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e03b      	b.n	800c424 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f042 0201 	orr.w	r2, r2, #1
 800c3c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a19      	ldr	r2, [pc, #100]	; (800c430 <HAL_TIM_Base_Start_IT+0x9c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d009      	beq.n	800c3e2 <HAL_TIM_Base_Start_IT+0x4e>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d6:	d004      	beq.n	800c3e2 <HAL_TIM_Base_Start_IT+0x4e>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a15      	ldr	r2, [pc, #84]	; (800c434 <HAL_TIM_Base_Start_IT+0xa0>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d115      	bne.n	800c40e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	4b13      	ldr	r3, [pc, #76]	; (800c438 <HAL_TIM_Base_Start_IT+0xa4>)
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b06      	cmp	r3, #6
 800c3f2:	d015      	beq.n	800c420 <HAL_TIM_Base_Start_IT+0x8c>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fa:	d011      	beq.n	800c420 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0201 	orr.w	r2, r2, #1
 800c40a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40c:	e008      	b.n	800c420 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f042 0201 	orr.w	r2, r2, #1
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	e000      	b.n	800c422 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c420:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	40012c00 	.word	0x40012c00
 800c434:	40014000 	.word	0x40014000
 800c438:	00010007 	.word	0x00010007

0800c43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d122      	bne.n	800c498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d11b      	bne.n	800c498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f06f 0202 	mvn.w	r2, #2
 800c468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	f003 0303 	and.w	r3, r3, #3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f9ce 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c484:	e005      	b.n	800c492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f9c0 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9d1 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	f003 0304 	and.w	r3, r3, #4
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d122      	bne.n	800c4ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d11b      	bne.n	800c4ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f06f 0204 	mvn.w	r2, #4
 800c4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f9a4 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c4d8:	e005      	b.n	800c4e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f996 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f9a7 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	f003 0308 	and.w	r3, r3, #8
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	d122      	bne.n	800c540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f003 0308 	and.w	r3, r3, #8
 800c504:	2b08      	cmp	r3, #8
 800c506:	d11b      	bne.n	800c540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f06f 0208 	mvn.w	r2, #8
 800c510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2204      	movs	r2, #4
 800c516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f97a 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c52c:	e005      	b.n	800c53a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f96c 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f97d 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	f003 0310 	and.w	r3, r3, #16
 800c54a:	2b10      	cmp	r3, #16
 800c54c:	d122      	bne.n	800c594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d11b      	bne.n	800c594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f06f 0210 	mvn.w	r2, #16
 800c564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2208      	movs	r2, #8
 800c56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f950 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c580:	e005      	b.n	800c58e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f942 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f953 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d10e      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d107      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f06f 0201 	mvn.w	r2, #1
 800c5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7f8 f986 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ca:	2b80      	cmp	r3, #128	; 0x80
 800c5cc:	d10e      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d8:	2b80      	cmp	r3, #128	; 0x80
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 faa6 	bl	800cb38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5fa:	d10e      	bne.n	800c61a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c606:	2b80      	cmp	r3, #128	; 0x80
 800c608:	d107      	bne.n	800c61a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fa99 	bl	800cb4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d10e      	bne.n	800c646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b40      	cmp	r3, #64	; 0x40
 800c634:	d107      	bne.n	800c646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f901 	bl	800c848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b20      	cmp	r3, #32
 800c652:	d10e      	bne.n	800c672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f003 0320 	and.w	r3, r3, #32
 800c65e:	2b20      	cmp	r3, #32
 800c660:	d107      	bne.n	800c672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f06f 0220 	mvn.w	r2, #32
 800c66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fa59 	bl	800cb24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d101      	bne.n	800c696 <HAL_TIM_ConfigClockSource+0x1c>
 800c692:	2302      	movs	r3, #2
 800c694:	e0b6      	b.n	800c804 <HAL_TIM_ConfigClockSource+0x18a>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c6b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6d2:	d03e      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0xd8>
 800c6d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6d8:	f200 8087 	bhi.w	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6e0:	f000 8086 	beq.w	800c7f0 <HAL_TIM_ConfigClockSource+0x176>
 800c6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6e8:	d87f      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6ea:	2b70      	cmp	r3, #112	; 0x70
 800c6ec:	d01a      	beq.n	800c724 <HAL_TIM_ConfigClockSource+0xaa>
 800c6ee:	2b70      	cmp	r3, #112	; 0x70
 800c6f0:	d87b      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6f2:	2b60      	cmp	r3, #96	; 0x60
 800c6f4:	d050      	beq.n	800c798 <HAL_TIM_ConfigClockSource+0x11e>
 800c6f6:	2b60      	cmp	r3, #96	; 0x60
 800c6f8:	d877      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6fa:	2b50      	cmp	r3, #80	; 0x50
 800c6fc:	d03c      	beq.n	800c778 <HAL_TIM_ConfigClockSource+0xfe>
 800c6fe:	2b50      	cmp	r3, #80	; 0x50
 800c700:	d873      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c702:	2b40      	cmp	r3, #64	; 0x40
 800c704:	d058      	beq.n	800c7b8 <HAL_TIM_ConfigClockSource+0x13e>
 800c706:	2b40      	cmp	r3, #64	; 0x40
 800c708:	d86f      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c70a:	2b30      	cmp	r3, #48	; 0x30
 800c70c:	d064      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c70e:	2b30      	cmp	r3, #48	; 0x30
 800c710:	d86b      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c712:	2b20      	cmp	r3, #32
 800c714:	d060      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c716:	2b20      	cmp	r3, #32
 800c718:	d867      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d05c      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c71e:	2b10      	cmp	r3, #16
 800c720:	d05a      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c722:	e062      	b.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	6899      	ldr	r1, [r3, #8]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f000 f970 	bl	800ca18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c746:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	609a      	str	r2, [r3, #8]
      break;
 800c750:	e04f      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	6899      	ldr	r1, [r3, #8]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	f000 f959 	bl	800ca18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c774:	609a      	str	r2, [r3, #8]
      break;
 800c776:	e03c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	6859      	ldr	r1, [r3, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	461a      	mov	r2, r3
 800c786:	f000 f8cd 	bl	800c924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2150      	movs	r1, #80	; 0x50
 800c790:	4618      	mov	r0, r3
 800c792:	f000 f926 	bl	800c9e2 <TIM_ITRx_SetConfig>
      break;
 800c796:	e02c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	6859      	ldr	r1, [r3, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f000 f8ec 	bl	800c982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2160      	movs	r1, #96	; 0x60
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f916 	bl	800c9e2 <TIM_ITRx_SetConfig>
      break;
 800c7b6:	e01c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6818      	ldr	r0, [r3, #0]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	6859      	ldr	r1, [r3, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	f000 f8ad 	bl	800c924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2140      	movs	r1, #64	; 0x40
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 f906 	bl	800c9e2 <TIM_ITRx_SetConfig>
      break;
 800c7d6:	e00c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f000 f8fd 	bl	800c9e2 <TIM_ITRx_SetConfig>
      break;
 800c7e8:	e003      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ee:	e000      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c7f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c802:	7bfb      	ldrb	r3, [r7, #15]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a2a      	ldr	r2, [pc, #168]	; (800c918 <TIM_Base_SetConfig+0xbc>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d003      	beq.n	800c87c <TIM_Base_SetConfig+0x20>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c87a:	d108      	bne.n	800c88e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a21      	ldr	r2, [pc, #132]	; (800c918 <TIM_Base_SetConfig+0xbc>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d00b      	beq.n	800c8ae <TIM_Base_SetConfig+0x52>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c89c:	d007      	beq.n	800c8ae <TIM_Base_SetConfig+0x52>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a1e      	ldr	r2, [pc, #120]	; (800c91c <TIM_Base_SetConfig+0xc0>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d003      	beq.n	800c8ae <TIM_Base_SetConfig+0x52>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a1d      	ldr	r2, [pc, #116]	; (800c920 <TIM_Base_SetConfig+0xc4>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d108      	bne.n	800c8c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a0c      	ldr	r2, [pc, #48]	; (800c918 <TIM_Base_SetConfig+0xbc>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d007      	beq.n	800c8fc <TIM_Base_SetConfig+0xa0>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a0b      	ldr	r2, [pc, #44]	; (800c91c <TIM_Base_SetConfig+0xc0>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d003      	beq.n	800c8fc <TIM_Base_SetConfig+0xa0>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a0a      	ldr	r2, [pc, #40]	; (800c920 <TIM_Base_SetConfig+0xc4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d103      	bne.n	800c904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	691a      	ldr	r2, [r3, #16]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	615a      	str	r2, [r3, #20]
}
 800c90a:	bf00      	nop
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	40012c00 	.word	0x40012c00
 800c91c:	40014000 	.word	0x40014000
 800c920:	40014400 	.word	0x40014400

0800c924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f023 0201 	bic.w	r2, r3, #1
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	4313      	orrs	r3, r2
 800c958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f023 030a 	bic.w	r3, r3, #10
 800c960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	621a      	str	r2, [r3, #32]
}
 800c976:	bf00      	nop
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c982:	b480      	push	{r7}
 800c984:	b087      	sub	sp, #28
 800c986:	af00      	add	r7, sp, #0
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	f023 0210 	bic.w	r2, r3, #16
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6a1b      	ldr	r3, [r3, #32]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	031b      	lsls	r3, r3, #12
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	621a      	str	r2, [r3, #32]
}
 800c9d6:	bf00      	nop
 800c9d8:	371c      	adds	r7, #28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	f043 0307 	orr.w	r3, r3, #7
 800ca04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	609a      	str	r2, [r3, #8]
}
 800ca0c:	bf00      	nop
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
 800ca24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	021a      	lsls	r2, r3, #8
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	609a      	str	r2, [r3, #8]
}
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e04f      	b.n	800cb10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a21      	ldr	r2, [pc, #132]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d108      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800caa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a14      	ldr	r2, [pc, #80]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d009      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cad8:	d004      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a10      	ldr	r2, [pc, #64]	; (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d10c      	bne.n	800cafe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	40012c00 	.word	0x40012c00
 800cb20:	40014000 	.word	0x40014000

0800cb24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e040      	b.n	800cbf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7f8 fca6 	bl	80054d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2224      	movs	r2, #36	; 0x24
 800cb8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 0201 	bic.w	r2, r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fcb2 	bl	800d508 <UART_SetConfig>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d101      	bne.n	800cbae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e022      	b.n	800cbf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 ff00 	bl	800d9bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	689a      	ldr	r2, [r3, #8]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f042 0201 	orr.w	r2, r2, #1
 800cbea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 ff87 	bl	800db00 <UART_CheckIdleState>
 800cbf2:	4603      	mov	r3, r0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	; 0x28
 800cc00:	af02      	add	r7, sp, #8
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	f040 8082 	bne.w	800cd1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <HAL_UART_Transmit+0x26>
 800cc1c:	88fb      	ldrh	r3, [r7, #6]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e07a      	b.n	800cd1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d101      	bne.n	800cc34 <HAL_UART_Transmit+0x38>
 800cc30:	2302      	movs	r3, #2
 800cc32:	e073      	b.n	800cd1c <HAL_UART_Transmit+0x120>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2221      	movs	r2, #33	; 0x21
 800cc48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc4a:	f7f8 ff9f 	bl	8005b8c <HAL_GetTick>
 800cc4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	88fa      	ldrh	r2, [r7, #6]
 800cc54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	88fa      	ldrh	r2, [r7, #6]
 800cc5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc68:	d108      	bne.n	800cc7c <HAL_UART_Transmit+0x80>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d104      	bne.n	800cc7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	e003      	b.n	800cc84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800cc8c:	e02d      	b.n	800ccea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2200      	movs	r2, #0
 800cc96:	2180      	movs	r1, #128	; 0x80
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 ff7a 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	e039      	b.n	800cd1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10b      	bne.n	800ccc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	881a      	ldrh	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccba:	b292      	uxth	r2, r2
 800ccbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	3302      	adds	r3, #2
 800ccc2:	61bb      	str	r3, [r7, #24]
 800ccc4:	e008      	b.n	800ccd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1cb      	bne.n	800cc8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2140      	movs	r1, #64	; 0x40
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f000 ff46 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e005      	b.n	800cd1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2220      	movs	r2, #32
 800cd14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e000      	b.n	800cd1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800cd1a:	2302      	movs	r3, #2
  }
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	; 0x28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd36:	2b20      	cmp	r3, #32
 800cd38:	d142      	bne.n	800cdc0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <HAL_UART_Receive_IT+0x22>
 800cd40:	88fb      	ldrh	r3, [r7, #6]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e03b      	b.n	800cdc2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d101      	bne.n	800cd58 <HAL_UART_Receive_IT+0x34>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e034      	b.n	800cdc2 <HAL_UART_Receive_IT+0x9e>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a18      	ldr	r2, [pc, #96]	; (800cdcc <HAL_UART_Receive_IT+0xa8>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d01f      	beq.n	800cdb0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d018      	beq.n	800cdb0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	e853 3f00 	ldrex	r3, [r3]
 800cd8a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	623b      	str	r3, [r7, #32]
 800cd9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda0:	69f9      	ldr	r1, [r7, #28]
 800cda2:	6a3a      	ldr	r2, [r7, #32]
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e6      	bne.n	800cd7e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 ffb0 	bl	800dd1c <UART_Start_Receive_IT>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	e000      	b.n	800cdc2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cdc0:	2302      	movs	r3, #2
  }
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3728      	adds	r7, #40	; 0x28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	40008000 	.word	0x40008000

0800cdd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b08a      	sub	sp, #40	; 0x28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cde2:	2b20      	cmp	r3, #32
 800cde4:	d178      	bne.n	800ced8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <HAL_UART_Transmit_DMA+0x22>
 800cdec:	88fb      	ldrh	r3, [r7, #6]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e071      	b.n	800ceda <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d101      	bne.n	800ce04 <HAL_UART_Transmit_DMA+0x34>
 800ce00:	2302      	movs	r3, #2
 800ce02:	e06a      	b.n	800ceda <HAL_UART_Transmit_DMA+0x10a>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	88fa      	ldrh	r2, [r7, #6]
 800ce1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2221      	movs	r2, #33	; 0x21
 800ce2e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d02b      	beq.n	800ce90 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3c:	4a29      	ldr	r2, [pc, #164]	; (800cee4 <HAL_UART_Transmit_DMA+0x114>)
 800ce3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce44:	4a28      	ldr	r2, [pc, #160]	; (800cee8 <HAL_UART_Transmit_DMA+0x118>)
 800ce46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce4c:	4a27      	ldr	r2, [pc, #156]	; (800ceec <HAL_UART_Transmit_DMA+0x11c>)
 800ce4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce54:	2200      	movs	r2, #0
 800ce56:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce60:	4619      	mov	r1, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3328      	adds	r3, #40	; 0x28
 800ce68:	461a      	mov	r2, r3
 800ce6a:	88fb      	ldrh	r3, [r7, #6]
 800ce6c:	f7f9 f888 	bl	8005f80 <HAL_DMA_Start_IT>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00c      	beq.n	800ce90 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2210      	movs	r2, #16
 800ce7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e024      	b.n	800ceda <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2240      	movs	r2, #64	; 0x40
 800ce96:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3308      	adds	r3, #8
 800cea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	613b      	str	r3, [r7, #16]
   return(result);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3308      	adds	r3, #8
 800cebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec0:	623a      	str	r2, [r7, #32]
 800cec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e5      	bne.n	800cea0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e000      	b.n	800ceda <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ced8:	2302      	movs	r3, #2
  }
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3728      	adds	r7, #40	; 0x28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	0800dfc3 	.word	0x0800dfc3
 800cee8:	0800e05d 	.word	0x0800e05d
 800ceec:	0800e079 	.word	0x0800e079

0800cef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b0ba      	sub	sp, #232	; 0xe8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cf16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cf1a:	f640 030f 	movw	r3, #2063	; 0x80f
 800cf1e:	4013      	ands	r3, r2
 800cf20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cf24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d115      	bne.n	800cf58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cf2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf30:	f003 0320 	and.w	r3, r3, #32
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00f      	beq.n	800cf58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cf38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf3c:	f003 0320 	and.w	r3, r3, #32
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d009      	beq.n	800cf58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 82a6 	beq.w	800d49a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	4798      	blx	r3
      }
      return;
 800cf56:	e2a0      	b.n	800d49a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cf58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 8117 	beq.w	800d190 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cf62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cf6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf72:	4b85      	ldr	r3, [pc, #532]	; (800d188 <HAL_UART_IRQHandler+0x298>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 810a 	beq.w	800d190 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d011      	beq.n	800cfac <HAL_UART_IRQHandler+0xbc>
 800cf88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00b      	beq.n	800cfac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfa2:	f043 0201 	orr.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d011      	beq.n	800cfdc <HAL_UART_IRQHandler+0xec>
 800cfb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfd2:	f043 0204 	orr.w	r2, r3, #4
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d011      	beq.n	800d00c <HAL_UART_IRQHandler+0x11c>
 800cfe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2204      	movs	r2, #4
 800cffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d002:	f043 0202 	orr.w	r2, r3, #2
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d017      	beq.n	800d048 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b00      	cmp	r3, #0
 800d022:	d105      	bne.n	800d030 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d028:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2208      	movs	r2, #8
 800d036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d03e:	f043 0208 	orr.w	r2, r3, #8
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d04c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d050:	2b00      	cmp	r3, #0
 800d052:	d012      	beq.n	800d07a <HAL_UART_IRQHandler+0x18a>
 800d054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00c      	beq.n	800d07a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d070:	f043 0220 	orr.w	r2, r3, #32
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 820c 	beq.w	800d49e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d08a:	f003 0320 	and.w	r3, r3, #32
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00d      	beq.n	800d0ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d096:	f003 0320 	and.w	r3, r3, #32
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d007      	beq.n	800d0ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c2:	2b40      	cmp	r3, #64	; 0x40
 800d0c4:	d005      	beq.n	800d0d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d04f      	beq.n	800d172 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 ff12 	bl	800defc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e2:	2b40      	cmp	r3, #64	; 0x40
 800d0e4:	d141      	bne.n	800d16a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0f4:	e853 3f00 	ldrex	r3, [r3]
 800d0f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3308      	adds	r3, #8
 800d10e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d11e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1d9      	bne.n	800d0e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d136:	2b00      	cmp	r3, #0
 800d138:	d013      	beq.n	800d162 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d13e:	4a13      	ldr	r2, [pc, #76]	; (800d18c <HAL_UART_IRQHandler+0x29c>)
 800d140:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d146:	4618      	mov	r0, r3
 800d148:	f7f8 ffb8 	bl	80060bc <HAL_DMA_Abort_IT>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d017      	beq.n	800d182 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d15c:	4610      	mov	r0, r2
 800d15e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d160:	e00f      	b.n	800d182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f9ba 	bl	800d4dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d168:	e00b      	b.n	800d182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f9b6 	bl	800d4dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d170:	e007      	b.n	800d182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f9b2 	bl	800d4dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d180:	e18d      	b.n	800d49e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d182:	bf00      	nop
    return;
 800d184:	e18b      	b.n	800d49e <HAL_UART_IRQHandler+0x5ae>
 800d186:	bf00      	nop
 800d188:	04000120 	.word	0x04000120
 800d18c:	0800e0f5 	.word	0x0800e0f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d194:	2b01      	cmp	r3, #1
 800d196:	f040 8146 	bne.w	800d426 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d19e:	f003 0310 	and.w	r3, r3, #16
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 813f 	beq.w	800d426 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1ac:	f003 0310 	and.w	r3, r3, #16
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 8138 	beq.w	800d426 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2210      	movs	r2, #16
 800d1bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c8:	2b40      	cmp	r3, #64	; 0x40
 800d1ca:	f040 80b4 	bne.w	800d336 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 815f 	beq.w	800d4a2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d1ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	f080 8157 	bcs.w	800d4a2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f003 0320 	and.w	r3, r3, #32
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f040 8085 	bne.w	800d31a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d21c:	e853 3f00 	ldrex	r3, [r3]
 800d220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d22c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	461a      	mov	r2, r3
 800d236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d23a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d23e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1da      	bne.n	800d210 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3308      	adds	r3, #8
 800d260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d264:	e853 3f00 	ldrex	r3, [r3]
 800d268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d26a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d26c:	f023 0301 	bic.w	r3, r3, #1
 800d270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3308      	adds	r3, #8
 800d27a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d27e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d28a:	e841 2300 	strex	r3, r2, [r1]
 800d28e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1e1      	bne.n	800d25a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3308      	adds	r3, #8
 800d29c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2a0:	e853 3f00 	ldrex	r3, [r3]
 800d2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2c2:	e841 2300 	strex	r3, r2, [r1]
 800d2c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1e3      	bne.n	800d296 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	e853 3f00 	ldrex	r3, [r3]
 800d2e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ea:	f023 0310 	bic.w	r3, r3, #16
 800d2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d304:	e841 2300 	strex	r3, r2, [r1]
 800d308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e4      	bne.n	800d2da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d314:	4618      	mov	r0, r3
 800d316:	f7f8 fe93 	bl	8006040 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d326:	b29b      	uxth	r3, r3
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f8de 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d334:	e0b5      	b.n	800d4a2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d342:	b29b      	uxth	r3, r3
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d350:	b29b      	uxth	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 80a7 	beq.w	800d4a6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80a2 	beq.w	800d4a6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	e853 3f00 	ldrex	r3, [r3]
 800d36e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d384:	647b      	str	r3, [r7, #68]	; 0x44
 800d386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d38c:	e841 2300 	strex	r3, r2, [r1]
 800d390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e4      	bne.n	800d362 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3308      	adds	r3, #8
 800d39e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	e853 3f00 	ldrex	r3, [r3]
 800d3a6:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	f023 0301 	bic.w	r3, r3, #1
 800d3ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3bc:	633a      	str	r2, [r7, #48]	; 0x30
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e3      	bne.n	800d398 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	e853 3f00 	ldrex	r3, [r3]
 800d3ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f023 0310 	bic.w	r3, r3, #16
 800d3f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d404:	61fb      	str	r3, [r7, #28]
 800d406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	69b9      	ldr	r1, [r7, #24]
 800d40a:	69fa      	ldr	r2, [r7, #28]
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	617b      	str	r3, [r7, #20]
   return(result);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e4      	bne.n	800d3e2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f866 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d424:	e03f      	b.n	800d4a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d42a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00e      	beq.n	800d450 <HAL_UART_IRQHandler+0x560>
 800d432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d008      	beq.n	800d450 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fff3 	bl	800e434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44e:	e02d      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00e      	beq.n	800d47a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d464:	2b00      	cmp	r3, #0
 800d466:	d008      	beq.n	800d47a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01c      	beq.n	800d4aa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	4798      	blx	r3
    }
    return;
 800d478:	e017      	b.n	800d4aa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d012      	beq.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
 800d486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00c      	beq.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fe44 	bl	800e120 <UART_EndTransmit_IT>
    return;
 800d498:	e008      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800d49a:	bf00      	nop
 800d49c:	e006      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
    return;
 800d49e:	bf00      	nop
 800d4a0:	e004      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800d4a2:	bf00      	nop
 800d4a4:	e002      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800d4a6:	bf00      	nop
 800d4a8:	e000      	b.n	800d4ac <HAL_UART_IRQHandler+0x5bc>
    return;
 800d4aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d4ac:	37e8      	adds	r7, #232	; 0xe8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop

0800d4b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d50c:	b08a      	sub	sp, #40	; 0x28
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	689a      	ldr	r2, [r3, #8]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	431a      	orrs	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	431a      	orrs	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b9e      	ldr	r3, [pc, #632]	; (800d7b0 <UART_SetConfig+0x2a8>)
 800d538:	4013      	ands	r3, r2
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d540:	430b      	orrs	r3, r1
 800d542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a93      	ldr	r2, [pc, #588]	; (800d7b4 <UART_SetConfig+0x2ac>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d004      	beq.n	800d574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d570:	4313      	orrs	r3, r2
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d584:	430a      	orrs	r2, r1
 800d586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a8a      	ldr	r2, [pc, #552]	; (800d7b8 <UART_SetConfig+0x2b0>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d126      	bne.n	800d5e0 <UART_SetConfig+0xd8>
 800d592:	4b8a      	ldr	r3, [pc, #552]	; (800d7bc <UART_SetConfig+0x2b4>)
 800d594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d598:	f003 0303 	and.w	r3, r3, #3
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d81b      	bhi.n	800d5d8 <UART_SetConfig+0xd0>
 800d5a0:	a201      	add	r2, pc, #4	; (adr r2, 800d5a8 <UART_SetConfig+0xa0>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d5b9 	.word	0x0800d5b9
 800d5ac:	0800d5c9 	.word	0x0800d5c9
 800d5b0:	0800d5c1 	.word	0x0800d5c1
 800d5b4:	0800d5d1 	.word	0x0800d5d1
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5be:	e0ab      	b.n	800d718 <UART_SetConfig+0x210>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5c6:	e0a7      	b.n	800d718 <UART_SetConfig+0x210>
 800d5c8:	2304      	movs	r3, #4
 800d5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5ce:	e0a3      	b.n	800d718 <UART_SetConfig+0x210>
 800d5d0:	2308      	movs	r3, #8
 800d5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5d6:	e09f      	b.n	800d718 <UART_SetConfig+0x210>
 800d5d8:	2310      	movs	r3, #16
 800d5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5de:	e09b      	b.n	800d718 <UART_SetConfig+0x210>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a76      	ldr	r2, [pc, #472]	; (800d7c0 <UART_SetConfig+0x2b8>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d138      	bne.n	800d65c <UART_SetConfig+0x154>
 800d5ea:	4b74      	ldr	r3, [pc, #464]	; (800d7bc <UART_SetConfig+0x2b4>)
 800d5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5f0:	f003 030c 	and.w	r3, r3, #12
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d82d      	bhi.n	800d654 <UART_SetConfig+0x14c>
 800d5f8:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <UART_SetConfig+0xf8>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d635 	.word	0x0800d635
 800d604:	0800d655 	.word	0x0800d655
 800d608:	0800d655 	.word	0x0800d655
 800d60c:	0800d655 	.word	0x0800d655
 800d610:	0800d645 	.word	0x0800d645
 800d614:	0800d655 	.word	0x0800d655
 800d618:	0800d655 	.word	0x0800d655
 800d61c:	0800d655 	.word	0x0800d655
 800d620:	0800d63d 	.word	0x0800d63d
 800d624:	0800d655 	.word	0x0800d655
 800d628:	0800d655 	.word	0x0800d655
 800d62c:	0800d655 	.word	0x0800d655
 800d630:	0800d64d 	.word	0x0800d64d
 800d634:	2300      	movs	r3, #0
 800d636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d63a:	e06d      	b.n	800d718 <UART_SetConfig+0x210>
 800d63c:	2302      	movs	r3, #2
 800d63e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d642:	e069      	b.n	800d718 <UART_SetConfig+0x210>
 800d644:	2304      	movs	r3, #4
 800d646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d64a:	e065      	b.n	800d718 <UART_SetConfig+0x210>
 800d64c:	2308      	movs	r3, #8
 800d64e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d652:	e061      	b.n	800d718 <UART_SetConfig+0x210>
 800d654:	2310      	movs	r3, #16
 800d656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d65a:	e05d      	b.n	800d718 <UART_SetConfig+0x210>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a58      	ldr	r2, [pc, #352]	; (800d7c4 <UART_SetConfig+0x2bc>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d125      	bne.n	800d6b2 <UART_SetConfig+0x1aa>
 800d666:	4b55      	ldr	r3, [pc, #340]	; (800d7bc <UART_SetConfig+0x2b4>)
 800d668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d66c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d670:	2b30      	cmp	r3, #48	; 0x30
 800d672:	d016      	beq.n	800d6a2 <UART_SetConfig+0x19a>
 800d674:	2b30      	cmp	r3, #48	; 0x30
 800d676:	d818      	bhi.n	800d6aa <UART_SetConfig+0x1a2>
 800d678:	2b20      	cmp	r3, #32
 800d67a:	d00a      	beq.n	800d692 <UART_SetConfig+0x18a>
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	d814      	bhi.n	800d6aa <UART_SetConfig+0x1a2>
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <UART_SetConfig+0x182>
 800d684:	2b10      	cmp	r3, #16
 800d686:	d008      	beq.n	800d69a <UART_SetConfig+0x192>
 800d688:	e00f      	b.n	800d6aa <UART_SetConfig+0x1a2>
 800d68a:	2300      	movs	r3, #0
 800d68c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d690:	e042      	b.n	800d718 <UART_SetConfig+0x210>
 800d692:	2302      	movs	r3, #2
 800d694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d698:	e03e      	b.n	800d718 <UART_SetConfig+0x210>
 800d69a:	2304      	movs	r3, #4
 800d69c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6a0:	e03a      	b.n	800d718 <UART_SetConfig+0x210>
 800d6a2:	2308      	movs	r3, #8
 800d6a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6a8:	e036      	b.n	800d718 <UART_SetConfig+0x210>
 800d6aa:	2310      	movs	r3, #16
 800d6ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6b0:	e032      	b.n	800d718 <UART_SetConfig+0x210>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a3f      	ldr	r2, [pc, #252]	; (800d7b4 <UART_SetConfig+0x2ac>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d12a      	bne.n	800d712 <UART_SetConfig+0x20a>
 800d6bc:	4b3f      	ldr	r3, [pc, #252]	; (800d7bc <UART_SetConfig+0x2b4>)
 800d6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d6c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6ca:	d01a      	beq.n	800d702 <UART_SetConfig+0x1fa>
 800d6cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6d0:	d81b      	bhi.n	800d70a <UART_SetConfig+0x202>
 800d6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6d6:	d00c      	beq.n	800d6f2 <UART_SetConfig+0x1ea>
 800d6d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6dc:	d815      	bhi.n	800d70a <UART_SetConfig+0x202>
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <UART_SetConfig+0x1e2>
 800d6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6e6:	d008      	beq.n	800d6fa <UART_SetConfig+0x1f2>
 800d6e8:	e00f      	b.n	800d70a <UART_SetConfig+0x202>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6f0:	e012      	b.n	800d718 <UART_SetConfig+0x210>
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6f8:	e00e      	b.n	800d718 <UART_SetConfig+0x210>
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d700:	e00a      	b.n	800d718 <UART_SetConfig+0x210>
 800d702:	2308      	movs	r3, #8
 800d704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d708:	e006      	b.n	800d718 <UART_SetConfig+0x210>
 800d70a:	2310      	movs	r3, #16
 800d70c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d710:	e002      	b.n	800d718 <UART_SetConfig+0x210>
 800d712:	2310      	movs	r3, #16
 800d714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a25      	ldr	r2, [pc, #148]	; (800d7b4 <UART_SetConfig+0x2ac>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	f040 808a 	bne.w	800d838 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d728:	2b08      	cmp	r3, #8
 800d72a:	d824      	bhi.n	800d776 <UART_SetConfig+0x26e>
 800d72c:	a201      	add	r2, pc, #4	; (adr r2, 800d734 <UART_SetConfig+0x22c>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d759 	.word	0x0800d759
 800d738:	0800d777 	.word	0x0800d777
 800d73c:	0800d761 	.word	0x0800d761
 800d740:	0800d777 	.word	0x0800d777
 800d744:	0800d767 	.word	0x0800d767
 800d748:	0800d777 	.word	0x0800d777
 800d74c:	0800d777 	.word	0x0800d777
 800d750:	0800d777 	.word	0x0800d777
 800d754:	0800d76f 	.word	0x0800d76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d758:	f7fd fc56 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800d75c:	61f8      	str	r0, [r7, #28]
        break;
 800d75e:	e010      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d760:	4b19      	ldr	r3, [pc, #100]	; (800d7c8 <UART_SetConfig+0x2c0>)
 800d762:	61fb      	str	r3, [r7, #28]
        break;
 800d764:	e00d      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d766:	f7fd fbb7 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800d76a:	61f8      	str	r0, [r7, #28]
        break;
 800d76c:	e009      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d772:	61fb      	str	r3, [r7, #28]
        break;
 800d774:	e005      	b.n	800d782 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 8109 	beq.w	800d99c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685a      	ldr	r2, [r3, #4]
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	69fa      	ldr	r2, [r7, #28]
 800d796:	429a      	cmp	r2, r3
 800d798:	d305      	bcc.n	800d7a6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d7a0:	69fa      	ldr	r2, [r7, #28]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d912      	bls.n	800d7cc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d7ac:	e0f6      	b.n	800d99c <UART_SetConfig+0x494>
 800d7ae:	bf00      	nop
 800d7b0:	efff69f3 	.word	0xefff69f3
 800d7b4:	40008000 	.word	0x40008000
 800d7b8:	40013800 	.word	0x40013800
 800d7bc:	40021000 	.word	0x40021000
 800d7c0:	40004400 	.word	0x40004400
 800d7c4:	40004800 	.word	0x40004800
 800d7c8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	4615      	mov	r5, r2
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	022b      	lsls	r3, r5, #8
 800d7de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d7e2:	0222      	lsls	r2, r4, #8
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	6849      	ldr	r1, [r1, #4]
 800d7e8:	0849      	lsrs	r1, r1, #1
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	4688      	mov	r8, r1
 800d7ee:	4681      	mov	r9, r0
 800d7f0:	eb12 0a08 	adds.w	sl, r2, r8
 800d7f4:	eb43 0b09 	adc.w	fp, r3, r9
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	607a      	str	r2, [r7, #4]
 800d802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d806:	4650      	mov	r0, sl
 800d808:	4659      	mov	r1, fp
 800d80a:	f7f3 fa3d 	bl	8000c88 <__aeabi_uldivmod>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4613      	mov	r3, r2
 800d814:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d81c:	d308      	bcc.n	800d830 <UART_SetConfig+0x328>
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d824:	d204      	bcs.n	800d830 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69ba      	ldr	r2, [r7, #24]
 800d82c:	60da      	str	r2, [r3, #12]
 800d82e:	e0b5      	b.n	800d99c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d836:	e0b1      	b.n	800d99c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d840:	d15d      	bne.n	800d8fe <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800d842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d846:	2b08      	cmp	r3, #8
 800d848:	d827      	bhi.n	800d89a <UART_SetConfig+0x392>
 800d84a:	a201      	add	r2, pc, #4	; (adr r2, 800d850 <UART_SetConfig+0x348>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d875 	.word	0x0800d875
 800d854:	0800d87d 	.word	0x0800d87d
 800d858:	0800d885 	.word	0x0800d885
 800d85c:	0800d89b 	.word	0x0800d89b
 800d860:	0800d88b 	.word	0x0800d88b
 800d864:	0800d89b 	.word	0x0800d89b
 800d868:	0800d89b 	.word	0x0800d89b
 800d86c:	0800d89b 	.word	0x0800d89b
 800d870:	0800d893 	.word	0x0800d893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d874:	f7fd fbc8 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800d878:	61f8      	str	r0, [r7, #28]
        break;
 800d87a:	e014      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d87c:	f7fd fbda 	bl	800b034 <HAL_RCC_GetPCLK2Freq>
 800d880:	61f8      	str	r0, [r7, #28]
        break;
 800d882:	e010      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d884:	4b4c      	ldr	r3, [pc, #304]	; (800d9b8 <UART_SetConfig+0x4b0>)
 800d886:	61fb      	str	r3, [r7, #28]
        break;
 800d888:	e00d      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d88a:	f7fd fb25 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800d88e:	61f8      	str	r0, [r7, #28]
        break;
 800d890:	e009      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d896:	61fb      	str	r3, [r7, #28]
        break;
 800d898:	e005      	b.n	800d8a6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800d89a:	2300      	movs	r3, #0
 800d89c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d8a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d077      	beq.n	800d99c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	005a      	lsls	r2, r3, #1
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	085b      	lsrs	r3, r3, #1
 800d8b6:	441a      	add	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	2b0f      	cmp	r3, #15
 800d8c6:	d916      	bls.n	800d8f6 <UART_SetConfig+0x3ee>
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8ce:	d212      	bcs.n	800d8f6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	f023 030f 	bic.w	r3, r3, #15
 800d8d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f003 0307 	and.w	r3, r3, #7
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	8afb      	ldrh	r3, [r7, #22]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	8afa      	ldrh	r2, [r7, #22]
 800d8f2:	60da      	str	r2, [r3, #12]
 800d8f4:	e052      	b.n	800d99c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d8fc:	e04e      	b.n	800d99c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d902:	2b08      	cmp	r3, #8
 800d904:	d827      	bhi.n	800d956 <UART_SetConfig+0x44e>
 800d906:	a201      	add	r2, pc, #4	; (adr r2, 800d90c <UART_SetConfig+0x404>)
 800d908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	0800d957 	.word	0x0800d957
 800d91c:	0800d947 	.word	0x0800d947
 800d920:	0800d957 	.word	0x0800d957
 800d924:	0800d957 	.word	0x0800d957
 800d928:	0800d957 	.word	0x0800d957
 800d92c:	0800d94f 	.word	0x0800d94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d930:	f7fd fb6a 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800d934:	61f8      	str	r0, [r7, #28]
        break;
 800d936:	e014      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d938:	f7fd fb7c 	bl	800b034 <HAL_RCC_GetPCLK2Freq>
 800d93c:	61f8      	str	r0, [r7, #28]
        break;
 800d93e:	e010      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d940:	4b1d      	ldr	r3, [pc, #116]	; (800d9b8 <UART_SetConfig+0x4b0>)
 800d942:	61fb      	str	r3, [r7, #28]
        break;
 800d944:	e00d      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d946:	f7fd fac7 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800d94a:	61f8      	str	r0, [r7, #28]
        break;
 800d94c:	e009      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d952:	61fb      	str	r3, [r7, #28]
        break;
 800d954:	e005      	b.n	800d962 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d960:	bf00      	nop
    }

    if (pclk != 0U)
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d019      	beq.n	800d99c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	085a      	lsrs	r2, r3, #1
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	441a      	add	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	2b0f      	cmp	r3, #15
 800d980:	d909      	bls.n	800d996 <UART_SetConfig+0x48e>
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d988:	d205      	bcs.n	800d996 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	60da      	str	r2, [r3, #12]
 800d994:	e002      	b.n	800d99c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d9a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3728      	adds	r7, #40	; 0x28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9b6:	bf00      	nop
 800d9b8:	00f42400 	.word	0x00f42400

0800d9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00a      	beq.n	800d9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ea:	f003 0302 	and.w	r3, r3, #2
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0c:	f003 0304 	and.w	r3, r3, #4
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00a      	beq.n	800da2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	430a      	orrs	r2, r1
 800da28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	f003 0308 	and.w	r3, r3, #8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00a      	beq.n	800da4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	430a      	orrs	r2, r1
 800da4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	f003 0310 	and.w	r3, r3, #16
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00a      	beq.n	800da6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	f003 0320 	and.w	r3, r3, #32
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	430a      	orrs	r2, r1
 800da8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01a      	beq.n	800dad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	430a      	orrs	r2, r1
 800dab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daba:	d10a      	bne.n	800dad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	430a      	orrs	r2, r1
 800dad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00a      	beq.n	800daf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	430a      	orrs	r2, r1
 800daf2:	605a      	str	r2, [r3, #4]
  }
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af02      	add	r7, sp, #8
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db10:	f7f8 f83c 	bl	8005b8c <HAL_GetTick>
 800db14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 0308 	and.w	r3, r3, #8
 800db20:	2b08      	cmp	r3, #8
 800db22:	d10e      	bne.n	800db42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f82d 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e023      	b.n	800db8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	d10e      	bne.n	800db6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f817 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db6a:	2303      	movs	r3, #3
 800db6c:	e00d      	b.n	800db8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2220      	movs	r2, #32
 800db72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2220      	movs	r2, #32
 800db78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b09c      	sub	sp, #112	; 0x70
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	603b      	str	r3, [r7, #0]
 800db9e:	4613      	mov	r3, r2
 800dba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dba2:	e0a5      	b.n	800dcf0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbaa:	f000 80a1 	beq.w	800dcf0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbae:	f7f7 ffed 	bl	8005b8c <HAL_GetTick>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d302      	bcc.n	800dbc4 <UART_WaitOnFlagUntilTimeout+0x32>
 800dbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d13e      	bne.n	800dc42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbcc:	e853 3f00 	ldrex	r3, [r3]
 800dbd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbd8:	667b      	str	r3, [r7, #100]	; 0x64
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbe4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e6      	bne.n	800dbc4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	f023 0301 	bic.w	r3, r3, #1
 800dc0c:	663b      	str	r3, [r7, #96]	; 0x60
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3308      	adds	r3, #8
 800dc14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc16:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e5      	bne.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2220      	movs	r2, #32
 800dc34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	e067      	b.n	800dd12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d04f      	beq.n	800dcf0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc5e:	d147      	bne.n	800dcf0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc72:	e853 3f00 	ldrex	r3, [r3]
 800dc76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	461a      	mov	r2, r3
 800dc86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc88:	637b      	str	r3, [r7, #52]	; 0x34
 800dc8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc90:	e841 2300 	strex	r3, r2, [r1]
 800dc94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e6      	bne.n	800dc6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3308      	adds	r3, #8
 800dca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	e853 3f00 	ldrex	r3, [r3]
 800dcaa:	613b      	str	r3, [r7, #16]
   return(result);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	f023 0301 	bic.w	r3, r3, #1
 800dcb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3308      	adds	r3, #8
 800dcba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcbc:	623a      	str	r2, [r7, #32]
 800dcbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc0:	69f9      	ldr	r1, [r7, #28]
 800dcc2:	6a3a      	ldr	r2, [r7, #32]
 800dcc4:	e841 2300 	strex	r3, r2, [r1]
 800dcc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1e5      	bne.n	800dc9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2220      	movs	r2, #32
 800dcd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2220      	movs	r2, #32
 800dce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dcec:	2303      	movs	r3, #3
 800dcee:	e010      	b.n	800dd12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	69da      	ldr	r2, [r3, #28]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	bf0c      	ite	eq
 800dd00:	2301      	moveq	r3, #1
 800dd02:	2300      	movne	r3, #0
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	461a      	mov	r2, r3
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	f43f af4a 	beq.w	800dba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3770      	adds	r7, #112	; 0x70
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
	...

0800dd1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b097      	sub	sp, #92	; 0x5c
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	4613      	mov	r3, r2
 800dd28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	88fa      	ldrh	r2, [r7, #6]
 800dd34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	88fa      	ldrh	r2, [r7, #6]
 800dd3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd4e:	d10e      	bne.n	800dd6e <UART_Start_Receive_IT+0x52>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d105      	bne.n	800dd64 <UART_Start_Receive_IT+0x48>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dd5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd62:	e02d      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	22ff      	movs	r2, #255	; 0xff
 800dd68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd6c:	e028      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10d      	bne.n	800dd92 <UART_Start_Receive_IT+0x76>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d104      	bne.n	800dd88 <UART_Start_Receive_IT+0x6c>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	22ff      	movs	r2, #255	; 0xff
 800dd82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd86:	e01b      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	227f      	movs	r2, #127	; 0x7f
 800dd8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd90:	e016      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd9a:	d10d      	bne.n	800ddb8 <UART_Start_Receive_IT+0x9c>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d104      	bne.n	800ddae <UART_Start_Receive_IT+0x92>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	227f      	movs	r2, #127	; 0x7f
 800dda8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ddac:	e008      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	223f      	movs	r2, #63	; 0x3f
 800ddb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ddb6:	e003      	b.n	800ddc0 <UART_Start_Receive_IT+0xa4>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2222      	movs	r2, #34	; 0x22
 800ddcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd8:	e853 3f00 	ldrex	r3, [r3]
 800dddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	f043 0301 	orr.w	r3, r3, #1
 800dde4:	657b      	str	r3, [r7, #84]	; 0x54
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddee:	64ba      	str	r2, [r7, #72]	; 0x48
 800ddf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddf6:	e841 2300 	strex	r3, r2, [r1]
 800ddfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ddfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e5      	bne.n	800ddce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de0a:	d107      	bne.n	800de1c <UART_Start_Receive_IT+0x100>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d103      	bne.n	800de1c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4a24      	ldr	r2, [pc, #144]	; (800dea8 <UART_Start_Receive_IT+0x18c>)
 800de18:	665a      	str	r2, [r3, #100]	; 0x64
 800de1a:	e002      	b.n	800de22 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4a23      	ldr	r2, [pc, #140]	; (800deac <UART_Start_Receive_IT+0x190>)
 800de20:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	691b      	ldr	r3, [r3, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d019      	beq.n	800de66 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	e853 3f00 	ldrex	r3, [r3]
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800de46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	461a      	mov	r2, r3
 800de4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de50:	637b      	str	r3, [r7, #52]	; 0x34
 800de52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de58:	e841 2300 	strex	r3, r2, [r1]
 800de5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1e6      	bne.n	800de32 <UART_Start_Receive_IT+0x116>
 800de64:	e018      	b.n	800de98 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	e853 3f00 	ldrex	r3, [r3]
 800de72:	613b      	str	r3, [r7, #16]
   return(result);
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	f043 0320 	orr.w	r3, r3, #32
 800de7a:	653b      	str	r3, [r7, #80]	; 0x50
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	461a      	mov	r2, r3
 800de82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de84:	623b      	str	r3, [r7, #32]
 800de86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de88:	69f9      	ldr	r1, [r7, #28]
 800de8a:	6a3a      	ldr	r2, [r7, #32]
 800de8c:	e841 2300 	strex	r3, r2, [r1]
 800de90:	61bb      	str	r3, [r7, #24]
   return(result);
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1e6      	bne.n	800de66 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	375c      	adds	r7, #92	; 0x5c
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	0800e2d5 	.word	0x0800e2d5
 800deac:	0800e175 	.word	0x0800e175

0800deb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b089      	sub	sp, #36	; 0x24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	61bb      	str	r3, [r7, #24]
 800ded8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	6979      	ldr	r1, [r7, #20]
 800dedc:	69ba      	ldr	r2, [r7, #24]
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	613b      	str	r3, [r7, #16]
   return(result);
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e6      	bne.n	800deb8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2220      	movs	r2, #32
 800deee:	679a      	str	r2, [r3, #120]	; 0x78
}
 800def0:	bf00      	nop
 800def2:	3724      	adds	r7, #36	; 0x24
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800defc:	b480      	push	{r7}
 800defe:	b095      	sub	sp, #84	; 0x54
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0c:	e853 3f00 	ldrex	r3, [r3]
 800df10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	461a      	mov	r2, r3
 800df20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df22:	643b      	str	r3, [r7, #64]	; 0x40
 800df24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df2a:	e841 2300 	strex	r3, r2, [r1]
 800df2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e6      	bne.n	800df04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3308      	adds	r3, #8
 800df3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	e853 3f00 	ldrex	r3, [r3]
 800df44:	61fb      	str	r3, [r7, #28]
   return(result);
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	f023 0301 	bic.w	r3, r3, #1
 800df4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3308      	adds	r3, #8
 800df54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df5e:	e841 2300 	strex	r3, r2, [r1]
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e5      	bne.n	800df36 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d118      	bne.n	800dfa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f023 0310 	bic.w	r3, r3, #16
 800df86:	647b      	str	r3, [r7, #68]	; 0x44
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	461a      	mov	r2, r3
 800df8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	6979      	ldr	r1, [r7, #20]
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	e841 2300 	strex	r3, r2, [r1]
 800df9c:	613b      	str	r3, [r7, #16]
   return(result);
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e6      	bne.n	800df72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2220      	movs	r2, #32
 800dfa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800dfb6:	bf00      	nop
 800dfb8:	3754      	adds	r7, #84	; 0x54
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b090      	sub	sp, #64	; 0x40
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 0320 	and.w	r3, r3, #32
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d137      	bne.n	800e04e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3308      	adds	r3, #8
 800dfec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	e853 3f00 	ldrex	r3, [r3]
 800dff4:	623b      	str	r3, [r7, #32]
   return(result);
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dffc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3308      	adds	r3, #8
 800e004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e006:	633a      	str	r2, [r7, #48]	; 0x30
 800e008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00e:	e841 2300 	strex	r3, r2, [r1]
 800e012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1e5      	bne.n	800dfe6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	e853 3f00 	ldrex	r3, [r3]
 800e026:	60fb      	str	r3, [r7, #12]
   return(result);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e02e:	637b      	str	r3, [r7, #52]	; 0x34
 800e030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	461a      	mov	r2, r3
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	61fb      	str	r3, [r7, #28]
 800e03a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03c:	69b9      	ldr	r1, [r7, #24]
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	e841 2300 	strex	r3, r2, [r1]
 800e044:	617b      	str	r3, [r7, #20]
   return(result);
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1e6      	bne.n	800e01a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e04c:	e002      	b.n	800e054 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e04e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e050:	f7ff fa30 	bl	800d4b4 <HAL_UART_TxCpltCallback>
}
 800e054:	bf00      	nop
 800e056:	3740      	adds	r7, #64	; 0x40
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e068:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fa2c 	bl	800d4c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e070:	bf00      	nop
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e084:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e090:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e09c:	2b80      	cmp	r3, #128	; 0x80
 800e09e:	d109      	bne.n	800e0b4 <UART_DMAError+0x3c>
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	2b21      	cmp	r3, #33	; 0x21
 800e0a4:	d106      	bne.n	800e0b4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e0ae:	6978      	ldr	r0, [r7, #20]
 800e0b0:	f7ff fefe 	bl	800deb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0be:	2b40      	cmp	r3, #64	; 0x40
 800e0c0:	d109      	bne.n	800e0d6 <UART_DMAError+0x5e>
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b22      	cmp	r3, #34	; 0x22
 800e0c6:	d106      	bne.n	800e0d6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e0d0:	6978      	ldr	r0, [r7, #20]
 800e0d2:	f7ff ff13 	bl	800defc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0dc:	f043 0210 	orr.w	r2, r3, #16
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0e6:	6978      	ldr	r0, [r7, #20]
 800e0e8:	f7ff f9f8 	bl	800d4dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ec:	bf00      	nop
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7ff f9e2 	bl	800d4dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e118:	bf00      	nop
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	e853 3f00 	ldrex	r3, [r3]
 800e134:	60bb      	str	r3, [r7, #8]
   return(result);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e13c:	61fb      	str	r3, [r7, #28]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	461a      	mov	r2, r3
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	61bb      	str	r3, [r7, #24]
 800e148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14a:	6979      	ldr	r1, [r7, #20]
 800e14c:	69ba      	ldr	r2, [r7, #24]
 800e14e:	e841 2300 	strex	r3, r2, [r1]
 800e152:	613b      	str	r3, [r7, #16]
   return(result);
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1e6      	bne.n	800e128 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2220      	movs	r2, #32
 800e15e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff f9a4 	bl	800d4b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e16c:	bf00      	nop
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b096      	sub	sp, #88	; 0x58
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e182:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e18a:	2b22      	cmp	r3, #34	; 0x22
 800e18c:	f040 8094 	bne.w	800e2b8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e196:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e19a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e19e:	b2d9      	uxtb	r1, r3
 800e1a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1aa:	400a      	ands	r2, r1
 800e1ac:	b2d2      	uxtb	r2, r2
 800e1ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d179      	bne.n	800e2cc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e0:	e853 3f00 	ldrex	r3, [r3]
 800e1e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1ec:	653b      	str	r3, [r7, #80]	; 0x50
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1fe:	e841 2300 	strex	r3, r2, [r1]
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d1e6      	bne.n	800e1d8 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	3308      	adds	r3, #8
 800e210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	e853 3f00 	ldrex	r3, [r3]
 800e218:	623b      	str	r3, [r7, #32]
   return(result);
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	f023 0301 	bic.w	r3, r3, #1
 800e220:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3308      	adds	r3, #8
 800e228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e22a:	633a      	str	r2, [r7, #48]	; 0x30
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e232:	e841 2300 	strex	r3, r2, [r1]
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1e5      	bne.n	800e20a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2220      	movs	r2, #32
 800e242:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d12e      	bne.n	800e2b0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2200      	movs	r2, #0
 800e256:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	e853 3f00 	ldrex	r3, [r3]
 800e264:	60fb      	str	r3, [r7, #12]
   return(result);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f023 0310 	bic.w	r3, r3, #16
 800e26c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27a:	69b9      	ldr	r1, [r7, #24]
 800e27c:	69fa      	ldr	r2, [r7, #28]
 800e27e:	e841 2300 	strex	r3, r2, [r1]
 800e282:	617b      	str	r3, [r7, #20]
   return(result);
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1e6      	bne.n	800e258 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	f003 0310 	and.w	r3, r3, #16
 800e294:	2b10      	cmp	r3, #16
 800e296:	d103      	bne.n	800e2a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2210      	movs	r2, #16
 800e29e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff f921 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2ae:	e00d      	b.n	800e2cc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7f6 fd97 	bl	8004de4 <HAL_UART_RxCpltCallback>
}
 800e2b6:	e009      	b.n	800e2cc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	8b1b      	ldrh	r3, [r3, #24]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f042 0208 	orr.w	r2, r2, #8
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	831a      	strh	r2, [r3, #24]
}
 800e2cc:	bf00      	nop
 800e2ce:	3758      	adds	r7, #88	; 0x58
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b096      	sub	sp, #88	; 0x58
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ea:	2b22      	cmp	r3, #34	; 0x22
 800e2ec:	f040 8094 	bne.w	800e418 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e300:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e304:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e308:	4013      	ands	r3, r2
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e30e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e314:	1c9a      	adds	r2, r3, #2
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e320:	b29b      	uxth	r3, r3
 800e322:	3b01      	subs	r3, #1
 800e324:	b29a      	uxth	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e332:	b29b      	uxth	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	d179      	bne.n	800e42c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e340:	e853 3f00 	ldrex	r3, [r3]
 800e344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e34c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e356:	643b      	str	r3, [r7, #64]	; 0x40
 800e358:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e35c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e35e:	e841 2300 	strex	r3, r2, [r1]
 800e362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1e6      	bne.n	800e338 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3308      	adds	r3, #8
 800e370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	e853 3f00 	ldrex	r3, [r3]
 800e378:	61fb      	str	r3, [r7, #28]
   return(result);
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	f023 0301 	bic.w	r3, r3, #1
 800e380:	64bb      	str	r3, [r7, #72]	; 0x48
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3308      	adds	r3, #8
 800e388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e38a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e38c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e392:	e841 2300 	strex	r3, r2, [r1]
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1e5      	bne.n	800e36a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d12e      	bne.n	800e410 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	e853 3f00 	ldrex	r3, [r3]
 800e3c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	f023 0310 	bic.w	r3, r3, #16
 800e3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d6:	61bb      	str	r3, [r7, #24]
 800e3d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3da:	6979      	ldr	r1, [r7, #20]
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	e841 2300 	strex	r3, r2, [r1]
 800e3e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1e6      	bne.n	800e3b8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	2b10      	cmp	r3, #16
 800e3f6:	d103      	bne.n	800e400 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2210      	movs	r2, #16
 800e3fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff f871 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e40e:	e00d      	b.n	800e42c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7f6 fce7 	bl	8004de4 <HAL_UART_RxCpltCallback>
}
 800e416:	e009      	b.n	800e42c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	8b1b      	ldrh	r3, [r3, #24]
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f042 0208 	orr.w	r2, r2, #8
 800e428:	b292      	uxth	r2, r2
 800e42a:	831a      	strh	r2, [r3, #24]
}
 800e42c:	bf00      	nop
 800e42e:	3758      	adds	r7, #88	; 0x58
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e448:	b084      	sub	sp, #16
 800e44a:	b480      	push	{r7}
 800e44c:	b083      	sub	sp, #12
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	f107 0014 	add.w	r0, r7, #20
 800e456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	b004      	add	sp, #16
 800e468:	4770      	bx	lr

0800e46a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b085      	sub	sp, #20
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e47a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e47e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	b29a      	uxth	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3714      	adds	r7, #20
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e4a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e4a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	43db      	mvns	r3, r3
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e4e8:	b084      	sub	sp, #16
 800e4ea:	b480      	push	{r7}
 800e4ec:	b083      	sub	sp, #12
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	f107 0014 	add.w	r0, r7, #20
 800e4f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	b004      	add	sp, #16
 800e528:	4770      	bx	lr
	...

0800e52c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b09d      	sub	sp, #116	; 0x74
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800e54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e552:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	78db      	ldrb	r3, [r3, #3]
 800e55a:	2b03      	cmp	r3, #3
 800e55c:	d81f      	bhi.n	800e59e <USB_ActivateEndpoint+0x72>
 800e55e:	a201      	add	r2, pc, #4	; (adr r2, 800e564 <USB_ActivateEndpoint+0x38>)
 800e560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e564:	0800e575 	.word	0x0800e575
 800e568:	0800e591 	.word	0x0800e591
 800e56c:	0800e5a7 	.word	0x0800e5a7
 800e570:	0800e583 	.word	0x0800e583
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e57c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e580:	e012      	b.n	800e5a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e582:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e586:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800e58a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e58e:	e00b      	b.n	800e5a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e590:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e59c:	e004      	b.n	800e5a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800e5a4:	e000      	b.n	800e5a8 <USB_ActivateEndpoint+0x7c>
      break;
 800e5a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	441a      	add	r2, r3
 800e5b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e5b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	b21b      	sxth	r3, r3
 800e5da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5e2:	b21a      	sxth	r2, r3
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	b21b      	sxth	r3, r3
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	b21b      	sxth	r3, r3
 800e5ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	441a      	add	r2, r3
 800e5fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e610:	b29b      	uxth	r3, r3
 800e612:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	7b1b      	ldrb	r3, [r3, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f040 816e 	bne.w	800e8fa <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	785b      	ldrb	r3, [r3, #1]
 800e622:	2b00      	cmp	r3, #0
 800e624:	f000 8084 	beq.w	800e730 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	61bb      	str	r3, [r7, #24]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e632:	b29b      	uxth	r3, r3
 800e634:	461a      	mov	r2, r3
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	4413      	add	r3, r2
 800e63a:	61bb      	str	r3, [r7, #24]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	00da      	lsls	r2, r3, #3
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	4413      	add	r3, r2
 800e646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	085b      	lsrs	r3, r3, #1
 800e652:	b29b      	uxth	r3, r3
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	b29a      	uxth	r2, r3
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	827b      	strh	r3, [r7, #18]
 800e66a:	8a7b      	ldrh	r3, [r7, #18]
 800e66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e670:	2b00      	cmp	r3, #0
 800e672:	d01b      	beq.n	800e6ac <USB_ActivateEndpoint+0x180>
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	b29b      	uxth	r3, r3
 800e682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e68a:	823b      	strh	r3, [r7, #16]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	441a      	add	r2, r3
 800e696:	8a3b      	ldrh	r3, [r7, #16]
 800e698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e69c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	78db      	ldrb	r3, [r3, #3]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d020      	beq.n	800e6f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6ca:	81bb      	strh	r3, [r7, #12]
 800e6cc:	89bb      	ldrh	r3, [r7, #12]
 800e6ce:	f083 0320 	eor.w	r3, r3, #32
 800e6d2:	81bb      	strh	r3, [r7, #12]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	441a      	add	r2, r3
 800e6de:	89bb      	ldrh	r3, [r7, #12]
 800e6e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	8013      	strh	r3, [r2, #0]
 800e6f4:	e2cb      	b.n	800ec8e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e70c:	81fb      	strh	r3, [r7, #14]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	441a      	add	r2, r3
 800e718:	89fb      	ldrh	r3, [r7, #14]
 800e71a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e71e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	8013      	strh	r3, [r2, #0]
 800e72e:	e2ae      	b.n	800ec8e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	633b      	str	r3, [r7, #48]	; 0x30
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	461a      	mov	r2, r3
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	4413      	add	r3, r2
 800e742:	633b      	str	r3, [r7, #48]	; 0x30
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	00da      	lsls	r2, r3, #3
 800e74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74c:	4413      	add	r3, r2
 800e74e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	88db      	ldrh	r3, [r3, #6]
 800e758:	085b      	lsrs	r3, r3, #1
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	b29a      	uxth	r2, r3
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	62bb      	str	r3, [r7, #40]	; 0x28
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e76e:	b29b      	uxth	r3, r3
 800e770:	461a      	mov	r2, r3
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	4413      	add	r3, r2
 800e776:	62bb      	str	r3, [r7, #40]	; 0x28
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	00da      	lsls	r2, r3, #3
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	4413      	add	r3, r2
 800e782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e786:	627b      	str	r3, [r7, #36]	; 0x24
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	2b3e      	cmp	r3, #62	; 0x3e
 800e78e:	d918      	bls.n	800e7c2 <USB_ActivateEndpoint+0x296>
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	095b      	lsrs	r3, r3, #5
 800e796:	66bb      	str	r3, [r7, #104]	; 0x68
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	f003 031f 	and.w	r3, r3, #31
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <USB_ActivateEndpoint+0x27e>
 800e7a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	029b      	lsls	r3, r3, #10
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	801a      	strh	r2, [r3, #0]
 800e7c0:	e029      	b.n	800e816 <USB_ActivateEndpoint+0x2ea>
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d112      	bne.n	800e7f0 <USB_ActivateEndpoint+0x2c4>
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	801a      	strh	r2, [r3, #0]
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	801a      	strh	r2, [r3, #0]
 800e7ee:	e012      	b.n	800e816 <USB_ActivateEndpoint+0x2ea>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	691b      	ldr	r3, [r3, #16]
 800e7f4:	085b      	lsrs	r3, r3, #1
 800e7f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <USB_ActivateEndpoint+0x2de>
 800e804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e806:	3301      	adds	r3, #1
 800e808:	66bb      	str	r3, [r7, #104]	; 0x68
 800e80a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	029b      	lsls	r3, r3, #10
 800e810:	b29a      	uxth	r2, r3
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	881b      	ldrh	r3, [r3, #0]
 800e822:	847b      	strh	r3, [r7, #34]	; 0x22
 800e824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d01b      	beq.n	800e866 <USB_ActivateEndpoint+0x33a>
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e844:	843b      	strh	r3, [r7, #32]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	441a      	add	r2, r3
 800e850:	8c3b      	ldrh	r3, [r7, #32]
 800e852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e85a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e862:	b29b      	uxth	r3, r3
 800e864:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d124      	bne.n	800e8b8 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e884:	83bb      	strh	r3, [r7, #28]
 800e886:	8bbb      	ldrh	r3, [r7, #28]
 800e888:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e88c:	83bb      	strh	r3, [r7, #28]
 800e88e:	8bbb      	ldrh	r3, [r7, #28]
 800e890:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e894:	83bb      	strh	r3, [r7, #28]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	441a      	add	r2, r3
 800e8a0:	8bbb      	ldrh	r3, [r7, #28]
 800e8a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	8013      	strh	r3, [r2, #0]
 800e8b6:	e1ea      	b.n	800ec8e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8ce:	83fb      	strh	r3, [r7, #30]
 800e8d0:	8bfb      	ldrh	r3, [r7, #30]
 800e8d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e8d6:	83fb      	strh	r3, [r7, #30]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	441a      	add	r2, r3
 800e8e2:	8bfb      	ldrh	r3, [r7, #30]
 800e8e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	8013      	strh	r3, [r2, #0]
 800e8f8:	e1c9      	b.n	800ec8e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	78db      	ldrb	r3, [r3, #3]
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d11e      	bne.n	800e940 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e918:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	441a      	add	r2, r3
 800e926:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e932:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	8013      	strh	r3, [r2, #0]
 800e93e:	e01d      	b.n	800e97c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	4413      	add	r3, r2
 800e94a:	881b      	ldrh	r3, [r3, #0]
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e956:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	441a      	add	r2, r3
 800e964:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e96c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e978:	b29b      	uxth	r3, r3
 800e97a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e986:	b29b      	uxth	r3, r3
 800e988:	461a      	mov	r2, r3
 800e98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e98c:	4413      	add	r3, r2
 800e98e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	00da      	lsls	r2, r3, #3
 800e996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e99e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	891b      	ldrh	r3, [r3, #8]
 800e9a4:	085b      	lsrs	r3, r3, #1
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9ae:	801a      	strh	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	657b      	str	r3, [r7, #84]	; 0x54
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	461a      	mov	r2, r3
 800e9be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9c0:	4413      	add	r3, r2
 800e9c2:	657b      	str	r3, [r7, #84]	; 0x54
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	00da      	lsls	r2, r3, #3
 800e9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e9d2:	653b      	str	r3, [r7, #80]	; 0x50
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	895b      	ldrh	r3, [r3, #10]
 800e9d8:	085b      	lsrs	r3, r3, #1
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	785b      	ldrb	r3, [r3, #1]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f040 8093 	bne.w	800eb14 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e9fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ea02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d01b      	beq.n	800ea42 <USB_ActivateEndpoint+0x516>
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	441a      	add	r2, r3
 800ea2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ea2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ea3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	881b      	ldrh	r3, [r3, #0]
 800ea4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ea50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d01b      	beq.n	800ea92 <USB_ActivateEndpoint+0x566>
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4413      	add	r3, r2
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea70:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	441a      	add	r2, r3
 800ea7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4413      	add	r3, r2
 800ea9c:	881b      	ldrh	r3, [r3, #0]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaa8:	873b      	strh	r3, [r7, #56]	; 0x38
 800eaaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eaac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800eab0:	873b      	strh	r3, [r7, #56]	; 0x38
 800eab2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eab8:	873b      	strh	r3, [r7, #56]	; 0x38
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	441a      	add	r2, r3
 800eac4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eaca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ead2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eaec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaf0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	441a      	add	r2, r3
 800eafc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eafe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	8013      	strh	r3, [r2, #0]
 800eb12:	e0bc      	b.n	800ec8e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800eb24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d01d      	beq.n	800eb6c <USB_ActivateEndpoint+0x640>
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	881b      	ldrh	r3, [r3, #0]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	441a      	add	r2, r3
 800eb54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800eb58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	4413      	add	r3, r2
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800eb7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d01d      	beq.n	800ebc4 <USB_ActivateEndpoint+0x698>
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	881b      	ldrh	r3, [r3, #0]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	441a      	add	r2, r3
 800ebac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ebb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	78db      	ldrb	r3, [r3, #3]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d024      	beq.n	800ec16 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	881b      	ldrh	r3, [r3, #0]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebe2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ebe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ebea:	f083 0320 	eor.w	r3, r3, #32
 800ebee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	441a      	add	r2, r3
 800ebfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ec00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	8013      	strh	r3, [r2, #0]
 800ec14:	e01d      	b.n	800ec52 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	881b      	ldrh	r3, [r3, #0]
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	441a      	add	r2, r3
 800ec3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ec3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4413      	add	r3, r2
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	441a      	add	r2, r3
 800ec76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ec8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3774      	adds	r7, #116	; 0x74
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop

0800eca0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b08d      	sub	sp, #52	; 0x34
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	7b1b      	ldrb	r3, [r3, #12]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f040 808e 	bne.w	800edd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d044      	beq.n	800ed46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	81bb      	strh	r3, [r7, #12]
 800ecca:	89bb      	ldrh	r3, [r7, #12]
 800eccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d01b      	beq.n	800ed0c <USB_DeactivateEndpoint+0x6c>
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4413      	add	r3, r2
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ece6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecea:	817b      	strh	r3, [r7, #10]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	441a      	add	r2, r3
 800ecf6:	897b      	ldrh	r3, [r7, #10]
 800ecf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed22:	813b      	strh	r3, [r7, #8]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	441a      	add	r2, r3
 800ed2e:	893b      	ldrh	r3, [r7, #8]
 800ed30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	8013      	strh	r3, [r2, #0]
 800ed44:	e192      	b.n	800f06c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	4413      	add	r3, r2
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	827b      	strh	r3, [r7, #18]
 800ed54:	8a7b      	ldrh	r3, [r7, #18]
 800ed56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d01b      	beq.n	800ed96 <USB_DeactivateEndpoint+0xf6>
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4413      	add	r3, r2
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed74:	823b      	strh	r3, [r7, #16]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	441a      	add	r2, r3
 800ed80:	8a3b      	ldrh	r3, [r7, #16]
 800ed82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ed8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4413      	add	r3, r2
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eda8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edac:	81fb      	strh	r3, [r7, #14]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	441a      	add	r2, r3
 800edb8:	89fb      	ldrh	r3, [r7, #14]
 800edba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edca:	b29b      	uxth	r3, r3
 800edcc:	8013      	strh	r3, [r2, #0]
 800edce:	e14d      	b.n	800f06c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	785b      	ldrb	r3, [r3, #1]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f040 80a5 	bne.w	800ef24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4413      	add	r3, r2
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	843b      	strh	r3, [r7, #32]
 800ede8:	8c3b      	ldrh	r3, [r7, #32]
 800edea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01b      	beq.n	800ee2a <USB_DeactivateEndpoint+0x18a>
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee08:	83fb      	strh	r3, [r7, #30]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	441a      	add	r2, r3
 800ee14:	8bfb      	ldrh	r3, [r7, #30]
 800ee16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	83bb      	strh	r3, [r7, #28]
 800ee38:	8bbb      	ldrh	r3, [r7, #28]
 800ee3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d01b      	beq.n	800ee7a <USB_DeactivateEndpoint+0x1da>
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee58:	837b      	strh	r3, [r7, #26]
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	441a      	add	r2, r3
 800ee64:	8b7b      	ldrh	r3, [r7, #26]
 800ee66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee90:	833b      	strh	r3, [r7, #24]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	441a      	add	r2, r3
 800ee9c:	8b3b      	ldrh	r3, [r7, #24]
 800ee9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eec8:	82fb      	strh	r3, [r7, #22]
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	441a      	add	r2, r3
 800eed4:	8afb      	ldrh	r3, [r7, #22]
 800eed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eefc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef00:	82bb      	strh	r3, [r7, #20]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	441a      	add	r2, r3
 800ef0c:	8abb      	ldrh	r3, [r7, #20]
 800ef0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	8013      	strh	r3, [r2, #0]
 800ef22:	e0a3      	b.n	800f06c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	4413      	add	r3, r2
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ef32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d01b      	beq.n	800ef74 <USB_DeactivateEndpoint+0x2d4>
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	441a      	add	r2, r3
 800ef5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ef82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d01b      	beq.n	800efc4 <USB_DeactivateEndpoint+0x324>
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efa2:	853b      	strh	r3, [r7, #40]	; 0x28
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	441a      	add	r2, r3
 800efae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efda:	84fb      	strh	r3, [r7, #38]	; 0x26
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	441a      	add	r2, r3
 800efe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eff8:	b29b      	uxth	r3, r3
 800effa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f012:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	441a      	add	r2, r3
 800f01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f030:	b29b      	uxth	r3, r3
 800f032:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4413      	add	r3, r2
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	b29b      	uxth	r3, r3
 800f042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f04a:	847b      	strh	r3, [r7, #34]	; 0x22
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	441a      	add	r2, r3
 800f056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f068:	b29b      	uxth	r3, r3
 800f06a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3734      	adds	r7, #52	; 0x34
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b0c2      	sub	sp, #264	; 0x108
 800f07e:	af00      	add	r7, sp, #0
 800f080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f088:	6018      	str	r0, [r3, #0]
 800f08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f092:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	f040 867b 	bne.w	800fd9c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	699a      	ldr	r2, [r3, #24]
 800f0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d908      	bls.n	800f0d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f0d2:	e007      	b.n	800f0e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	7b1b      	ldrb	r3, [r3, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d13a      	bne.n	800f16a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6959      	ldr	r1, [r3, #20]
 800f100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	88da      	ldrh	r2, [r3, #6]
 800f10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f110:	b29b      	uxth	r3, r3
 800f112:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f116:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f11a:	6800      	ldr	r0, [r0, #0]
 800f11c:	f001 fc3e 	bl	801099c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	613b      	str	r3, [r7, #16]
 800f12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	461a      	mov	r2, r3
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	4413      	add	r3, r2
 800f142:	613b      	str	r3, [r7, #16]
 800f144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	00da      	lsls	r2, r3, #3
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	4413      	add	r3, r2
 800f156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f160:	b29a      	uxth	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	801a      	strh	r2, [r3, #0]
 800f166:	f000 bde3 	b.w	800fd30 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	78db      	ldrb	r3, [r3, #3]
 800f176:	2b02      	cmp	r3, #2
 800f178:	f040 843a 	bne.w	800f9f0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6a1a      	ldr	r2, [r3, #32]
 800f188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	429a      	cmp	r2, r3
 800f196:	f240 83b7 	bls.w	800f908 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f19e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4413      	add	r3, r2
 800f1b4:	881b      	ldrh	r3, [r3, #0]
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	441a      	add	r2, r3
 800f1de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f1e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6a1a      	ldr	r2, [r3, #32]
 800f202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f206:	1ad2      	subs	r2, r2, r3
 800f208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	b29b      	uxth	r3, r3
 800f232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f236:	2b00      	cmp	r3, #0
 800f238:	f000 81b3 	beq.w	800f5a2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	633b      	str	r3, [r7, #48]	; 0x30
 800f248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	785b      	ldrb	r3, [r3, #1]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d16d      	bne.n	800f334 <USB_EPStartXfer+0x2ba>
 800f258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f25c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	62bb      	str	r3, [r7, #40]	; 0x28
 800f264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f272:	b29b      	uxth	r3, r3
 800f274:	461a      	mov	r2, r3
 800f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f278:	4413      	add	r3, r2
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	00da      	lsls	r2, r3, #3
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	4413      	add	r3, r2
 800f28e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f292:	627b      	str	r3, [r7, #36]	; 0x24
 800f294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f298:	2b3e      	cmp	r3, #62	; 0x3e
 800f29a:	d91c      	bls.n	800f2d6 <USB_EPStartXfer+0x25c>
 800f29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2a0:	095b      	lsrs	r3, r3, #5
 800f2a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2aa:	f003 031f 	and.w	r3, r3, #31
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d104      	bne.n	800f2bc <USB_EPStartXfer+0x242>
 800f2b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f2bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	029b      	lsls	r3, r3, #10
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	801a      	strh	r2, [r3, #0]
 800f2d4:	e053      	b.n	800f37e <USB_EPStartXfer+0x304>
 800f2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d112      	bne.n	800f304 <USB_EPStartXfer+0x28a>
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	801a      	strh	r2, [r3, #0]
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f300:	801a      	strh	r2, [r3, #0]
 800f302:	e03c      	b.n	800f37e <USB_EPStartXfer+0x304>
 800f304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f308:	085b      	lsrs	r3, r3, #1
 800f30a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	2b00      	cmp	r3, #0
 800f318:	d004      	beq.n	800f324 <USB_EPStartXfer+0x2aa>
 800f31a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f31e:	3301      	adds	r3, #1
 800f320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f324:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f328:	b29b      	uxth	r3, r3
 800f32a:	029b      	lsls	r3, r3, #10
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f330:	801a      	strh	r2, [r3, #0]
 800f332:	e024      	b.n	800f37e <USB_EPStartXfer+0x304>
 800f334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	785b      	ldrb	r3, [r3, #1]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d11c      	bne.n	800f37e <USB_EPStartXfer+0x304>
 800f344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f352:	b29b      	uxth	r3, r3
 800f354:	461a      	mov	r2, r3
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	4413      	add	r3, r2
 800f35a:	633b      	str	r3, [r7, #48]	; 0x30
 800f35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	00da      	lsls	r2, r3, #3
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	4413      	add	r3, r2
 800f36e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f378:	b29a      	uxth	r2, r3
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f37e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	895b      	ldrh	r3, [r3, #10]
 800f38a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6959      	ldr	r1, [r3, #20]
 800f39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f3a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f3a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f3ac:	6800      	ldr	r0, [r0, #0]
 800f3ae:	f001 faf5 	bl	801099c <USB_WritePMA>
            ep->xfer_buff += len;
 800f3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	695a      	ldr	r2, [r3, #20]
 800f3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3c2:	441a      	add	r2, r3
 800f3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	6a1a      	ldr	r2, [r3, #32]
 800f3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d90f      	bls.n	800f40c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800f3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6a1a      	ldr	r2, [r3, #32]
 800f3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3fc:	1ad2      	subs	r2, r2, r3
 800f3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	621a      	str	r2, [r3, #32]
 800f40a:	e00e      	b.n	800f42a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800f40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2200      	movs	r2, #0
 800f428:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	785b      	ldrb	r3, [r3, #1]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d16d      	bne.n	800f516 <USB_EPStartXfer+0x49c>
 800f43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f43e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	61bb      	str	r3, [r7, #24]
 800f446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f44a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f454:	b29b      	uxth	r3, r3
 800f456:	461a      	mov	r2, r3
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	4413      	add	r3, r2
 800f45c:	61bb      	str	r3, [r7, #24]
 800f45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	00da      	lsls	r2, r3, #3
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	4413      	add	r3, r2
 800f470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f474:	617b      	str	r3, [r7, #20]
 800f476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f47a:	2b3e      	cmp	r3, #62	; 0x3e
 800f47c:	d91c      	bls.n	800f4b8 <USB_EPStartXfer+0x43e>
 800f47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f482:	095b      	lsrs	r3, r3, #5
 800f484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f48c:	f003 031f 	and.w	r3, r3, #31
 800f490:	2b00      	cmp	r3, #0
 800f492:	d104      	bne.n	800f49e <USB_EPStartXfer+0x424>
 800f494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f498:	3b01      	subs	r3, #1
 800f49a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	029b      	lsls	r3, r3, #10
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	801a      	strh	r2, [r3, #0]
 800f4b6:	e059      	b.n	800f56c <USB_EPStartXfer+0x4f2>
 800f4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d112      	bne.n	800f4e6 <USB_EPStartXfer+0x46c>
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	801a      	strh	r2, [r3, #0]
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	801a      	strh	r2, [r3, #0]
 800f4e4:	e042      	b.n	800f56c <USB_EPStartXfer+0x4f2>
 800f4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4ea:	085b      	lsrs	r3, r3, #1
 800f4ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d004      	beq.n	800f506 <USB_EPStartXfer+0x48c>
 800f4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f500:	3301      	adds	r3, #1
 800f502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	029b      	lsls	r3, r3, #10
 800f50e:	b29a      	uxth	r2, r3
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	801a      	strh	r2, [r3, #0]
 800f514:	e02a      	b.n	800f56c <USB_EPStartXfer+0x4f2>
 800f516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	785b      	ldrb	r3, [r3, #1]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d122      	bne.n	800f56c <USB_EPStartXfer+0x4f2>
 800f526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	623b      	str	r3, [r7, #32]
 800f532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f540:	b29b      	uxth	r3, r3
 800f542:	461a      	mov	r2, r3
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	4413      	add	r3, r2
 800f548:	623b      	str	r3, [r7, #32]
 800f54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	00da      	lsls	r2, r3, #3
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	4413      	add	r3, r2
 800f55c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f560:	61fb      	str	r3, [r7, #28]
 800f562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f566:	b29a      	uxth	r2, r3
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	891b      	ldrh	r3, [r3, #8]
 800f578:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6959      	ldr	r1, [r3, #20]
 800f588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f592:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f596:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f59a:	6800      	ldr	r0, [r0, #0]
 800f59c:	f001 f9fe 	bl	801099c <USB_WritePMA>
 800f5a0:	e3c6      	b.n	800fd30 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	785b      	ldrb	r3, [r3, #1]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d16d      	bne.n	800f68e <USB_EPStartXfer+0x614>
 800f5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d2:	4413      	add	r3, r2
 800f5d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	00da      	lsls	r2, r3, #3
 800f5e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f5ec:	647b      	str	r3, [r7, #68]	; 0x44
 800f5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5f2:	2b3e      	cmp	r3, #62	; 0x3e
 800f5f4:	d91c      	bls.n	800f630 <USB_EPStartXfer+0x5b6>
 800f5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5fa:	095b      	lsrs	r3, r3, #5
 800f5fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f604:	f003 031f 	and.w	r3, r3, #31
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <USB_EPStartXfer+0x59c>
 800f60c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f610:	3b01      	subs	r3, #1
 800f612:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	029b      	lsls	r3, r3, #10
 800f61e:	b29b      	uxth	r3, r3
 800f620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f628:	b29a      	uxth	r2, r3
 800f62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f62c:	801a      	strh	r2, [r3, #0]
 800f62e:	e059      	b.n	800f6e4 <USB_EPStartXfer+0x66a>
 800f630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f634:	2b00      	cmp	r3, #0
 800f636:	d112      	bne.n	800f65e <USB_EPStartXfer+0x5e4>
 800f638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f642:	b29a      	uxth	r2, r3
 800f644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f646:	801a      	strh	r2, [r3, #0]
 800f648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f656:	b29a      	uxth	r2, r3
 800f658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f65a:	801a      	strh	r2, [r3, #0]
 800f65c:	e042      	b.n	800f6e4 <USB_EPStartXfer+0x66a>
 800f65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f662:	085b      	lsrs	r3, r3, #1
 800f664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	d004      	beq.n	800f67e <USB_EPStartXfer+0x604>
 800f674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f678:	3301      	adds	r3, #1
 800f67a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f67e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f682:	b29b      	uxth	r3, r3
 800f684:	029b      	lsls	r3, r3, #10
 800f686:	b29a      	uxth	r2, r3
 800f688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f68a:	801a      	strh	r2, [r3, #0]
 800f68c:	e02a      	b.n	800f6e4 <USB_EPStartXfer+0x66a>
 800f68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	785b      	ldrb	r3, [r3, #1]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d122      	bne.n	800f6e4 <USB_EPStartXfer+0x66a>
 800f69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	653b      	str	r3, [r7, #80]	; 0x50
 800f6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6be:	4413      	add	r3, r2
 800f6c0:	653b      	str	r3, [r7, #80]	; 0x50
 800f6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	00da      	lsls	r2, r3, #3
 800f6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d2:	4413      	add	r3, r2
 800f6d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	891b      	ldrh	r3, [r3, #8]
 800f6f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6959      	ldr	r1, [r3, #20]
 800f700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f704:	b29b      	uxth	r3, r3
 800f706:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f70a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f70e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f712:	6800      	ldr	r0, [r0, #0]
 800f714:	f001 f942 	bl	801099c <USB_WritePMA>
            ep->xfer_buff += len;
 800f718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	695a      	ldr	r2, [r3, #20]
 800f724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f728:	441a      	add	r2, r3
 800f72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6a1a      	ldr	r2, [r3, #32]
 800f742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d90f      	bls.n	800f772 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800f752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6a1a      	ldr	r2, [r3, #32]
 800f75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f762:	1ad2      	subs	r2, r2, r3
 800f764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	621a      	str	r2, [r3, #32]
 800f770:	e00e      	b.n	800f790 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800f772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2200      	movs	r2, #0
 800f78e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	643b      	str	r3, [r7, #64]	; 0x40
 800f79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	785b      	ldrb	r3, [r3, #1]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d16d      	bne.n	800f888 <USB_EPStartXfer+0x80e>
 800f7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7cc:	4413      	add	r3, r2
 800f7ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	00da      	lsls	r2, r3, #3
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800f7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ec:	2b3e      	cmp	r3, #62	; 0x3e
 800f7ee:	d91c      	bls.n	800f82a <USB_EPStartXfer+0x7b0>
 800f7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7f4:	095b      	lsrs	r3, r3, #5
 800f7f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7fe:	f003 031f 	and.w	r3, r3, #31
 800f802:	2b00      	cmp	r3, #0
 800f804:	d104      	bne.n	800f810 <USB_EPStartXfer+0x796>
 800f806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f80a:	3b01      	subs	r3, #1
 800f80c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f814:	b29b      	uxth	r3, r3
 800f816:	029b      	lsls	r3, r3, #10
 800f818:	b29b      	uxth	r3, r3
 800f81a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f81e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f822:	b29a      	uxth	r2, r3
 800f824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f826:	801a      	strh	r2, [r3, #0]
 800f828:	e053      	b.n	800f8d2 <USB_EPStartXfer+0x858>
 800f82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d112      	bne.n	800f858 <USB_EPStartXfer+0x7de>
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	b29b      	uxth	r3, r3
 800f838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f840:	801a      	strh	r2, [r3, #0]
 800f842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	b29b      	uxth	r3, r3
 800f848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f850:	b29a      	uxth	r2, r3
 800f852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f854:	801a      	strh	r2, [r3, #0]
 800f856:	e03c      	b.n	800f8d2 <USB_EPStartXfer+0x858>
 800f858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f85c:	085b      	lsrs	r3, r3, #1
 800f85e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d004      	beq.n	800f878 <USB_EPStartXfer+0x7fe>
 800f86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f872:	3301      	adds	r3, #1
 800f874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	029b      	lsls	r3, r3, #10
 800f880:	b29a      	uxth	r2, r3
 800f882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f884:	801a      	strh	r2, [r3, #0]
 800f886:	e024      	b.n	800f8d2 <USB_EPStartXfer+0x858>
 800f888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	785b      	ldrb	r3, [r3, #1]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d11c      	bne.n	800f8d2 <USB_EPStartXfer+0x858>
 800f898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f89c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ac:	4413      	add	r3, r2
 800f8ae:	643b      	str	r3, [r7, #64]	; 0x40
 800f8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	00da      	lsls	r2, r3, #3
 800f8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	895b      	ldrh	r3, [r3, #10]
 800f8de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	6959      	ldr	r1, [r3, #20]
 800f8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f8f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f8fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f900:	6800      	ldr	r0, [r0, #0]
 800f902:	f001 f84b 	bl	801099c <USB_WritePMA>
 800f906:	e213      	b.n	800fd30 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f90c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	6a1b      	ldr	r3, [r3, #32]
 800f914:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f91c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	b29b      	uxth	r3, r3
 800f936:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f93e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	441a      	add	r2, r3
 800f95c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f970:	b29b      	uxth	r3, r3
 800f972:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f98e:	b29b      	uxth	r3, r3
 800f990:	461a      	mov	r2, r3
 800f992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f994:	4413      	add	r3, r2
 800f996:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f99c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	00da      	lsls	r2, r3, #3
 800f9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	891b      	ldrh	r3, [r3, #8]
 800f9c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	6959      	ldr	r1, [r3, #20]
 800f9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f9e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f9e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f9e8:	6800      	ldr	r0, [r0, #0]
 800f9ea:	f000 ffd7 	bl	801099c <USB_WritePMA>
 800f9ee:	e19f      	b.n	800fd30 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6a1a      	ldr	r2, [r3, #32]
 800f9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa00:	1ad2      	subs	r2, r2, r3
 800fa02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fa0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4413      	add	r3, r2
 800fa28:	881b      	ldrh	r3, [r3, #0]
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 80bc 	beq.w	800fbae <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fa36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	673b      	str	r3, [r7, #112]	; 0x70
 800fa42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	785b      	ldrb	r3, [r3, #1]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d16d      	bne.n	800fb2e <USB_EPStartXfer+0xab4>
 800fa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	461a      	mov	r2, r3
 800fa70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa72:	4413      	add	r3, r2
 800fa74:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	00da      	lsls	r2, r3, #3
 800fa84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa86:	4413      	add	r3, r2
 800fa88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fa8c:	667b      	str	r3, [r7, #100]	; 0x64
 800fa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa92:	2b3e      	cmp	r3, #62	; 0x3e
 800fa94:	d91c      	bls.n	800fad0 <USB_EPStartXfer+0xa56>
 800fa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa9a:	095b      	lsrs	r3, r3, #5
 800fa9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800faa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faa4:	f003 031f 	and.w	r3, r3, #31
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d104      	bne.n	800fab6 <USB_EPStartXfer+0xa3c>
 800faac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fab0:	3b01      	subs	r3, #1
 800fab2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fab6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800faba:	b29b      	uxth	r3, r3
 800fabc:	029b      	lsls	r3, r3, #10
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fac8:	b29a      	uxth	r2, r3
 800faca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800facc:	801a      	strh	r2, [r3, #0]
 800face:	e053      	b.n	800fb78 <USB_EPStartXfer+0xafe>
 800fad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d112      	bne.n	800fafe <USB_EPStartXfer+0xa84>
 800fad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fae6:	801a      	strh	r2, [r3, #0]
 800fae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	b29b      	uxth	r3, r3
 800faee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800faf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fafa:	801a      	strh	r2, [r3, #0]
 800fafc:	e03c      	b.n	800fb78 <USB_EPStartXfer+0xafe>
 800fafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb02:	085b      	lsrs	r3, r3, #1
 800fb04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb0c:	f003 0301 	and.w	r3, r3, #1
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d004      	beq.n	800fb1e <USB_EPStartXfer+0xaa4>
 800fb14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb18:	3301      	adds	r3, #1
 800fb1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fb1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	029b      	lsls	r3, r3, #10
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb2a:	801a      	strh	r2, [r3, #0]
 800fb2c:	e024      	b.n	800fb78 <USB_EPStartXfer+0xafe>
 800fb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	785b      	ldrb	r3, [r3, #1]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d11c      	bne.n	800fb78 <USB_EPStartXfer+0xafe>
 800fb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	461a      	mov	r2, r3
 800fb50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb52:	4413      	add	r3, r2
 800fb54:	673b      	str	r3, [r7, #112]	; 0x70
 800fb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	00da      	lsls	r2, r3, #3
 800fb64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb66:	4413      	add	r3, r2
 800fb68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	895b      	ldrh	r3, [r3, #10]
 800fb84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6959      	ldr	r1, [r3, #20]
 800fb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fb9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fba2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fba6:	6800      	ldr	r0, [r0, #0]
 800fba8:	f000 fef8 	bl	801099c <USB_WritePMA>
 800fbac:	e0c0      	b.n	800fd30 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	785b      	ldrb	r3, [r3, #1]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d16d      	bne.n	800fc9a <USB_EPStartXfer+0xc20>
 800fbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	461a      	mov	r2, r3
 800fbdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbde:	4413      	add	r3, r2
 800fbe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	00da      	lsls	r2, r3, #3
 800fbf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fbf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800fbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbfe:	2b3e      	cmp	r3, #62	; 0x3e
 800fc00:	d91c      	bls.n	800fc3c <USB_EPStartXfer+0xbc2>
 800fc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc06:	095b      	lsrs	r3, r3, #5
 800fc08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc10:	f003 031f 	and.w	r3, r3, #31
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d104      	bne.n	800fc22 <USB_EPStartXfer+0xba8>
 800fc18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	029b      	lsls	r3, r3, #10
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc38:	801a      	strh	r2, [r3, #0]
 800fc3a:	e05f      	b.n	800fcfc <USB_EPStartXfer+0xc82>
 800fc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d112      	bne.n	800fc6a <USB_EPStartXfer+0xbf0>
 800fc44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc52:	801a      	strh	r2, [r3, #0]
 800fc54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc56:	881b      	ldrh	r3, [r3, #0]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc66:	801a      	strh	r2, [r3, #0]
 800fc68:	e048      	b.n	800fcfc <USB_EPStartXfer+0xc82>
 800fc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc6e:	085b      	lsrs	r3, r3, #1
 800fc70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d004      	beq.n	800fc8a <USB_EPStartXfer+0xc10>
 800fc80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc84:	3301      	adds	r3, #1
 800fc86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	029b      	lsls	r3, r3, #10
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc96:	801a      	strh	r2, [r3, #0]
 800fc98:	e030      	b.n	800fcfc <USB_EPStartXfer+0xc82>
 800fc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	785b      	ldrb	r3, [r3, #1]
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d128      	bne.n	800fcfc <USB_EPStartXfer+0xc82>
 800fcaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fcb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	461a      	mov	r2, r3
 800fcca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fcce:	4413      	add	r3, r2
 800fcd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	00da      	lsls	r2, r3, #3
 800fce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fce6:	4413      	add	r3, r2
 800fce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fcec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fcfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fcfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	891b      	ldrh	r3, [r3, #8]
 800fd08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6959      	ldr	r1, [r3, #20]
 800fd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	f000 fe36 	bl	801099c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fd30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4413      	add	r3, r2
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd56:	817b      	strh	r3, [r7, #10]
 800fd58:	897b      	ldrh	r3, [r7, #10]
 800fd5a:	f083 0310 	eor.w	r3, r3, #16
 800fd5e:	817b      	strh	r3, [r7, #10]
 800fd60:	897b      	ldrh	r3, [r7, #10]
 800fd62:	f083 0320 	eor.w	r3, r3, #32
 800fd66:	817b      	strh	r3, [r7, #10]
 800fd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	441a      	add	r2, r3
 800fd82:	897b      	ldrh	r3, [r7, #10]
 800fd84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	8013      	strh	r3, [r2, #0]
 800fd98:	f000 bc9f 	b.w	80106da <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	7b1b      	ldrb	r3, [r3, #12]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f040 80ae 	bne.w	800ff0a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	699a      	ldr	r2, [r3, #24]
 800fdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d917      	bls.n	800fdfa <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800fdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800fdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	699a      	ldr	r2, [r3, #24]
 800fde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdea:	1ad2      	subs	r2, r2, r3
 800fdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	619a      	str	r2, [r3, #24]
 800fdf8:	e00e      	b.n	800fe18 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800fdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	699b      	ldr	r3, [r3, #24]
 800fe06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800fe0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2200      	movs	r2, #0
 800fe16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fe18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	461a      	mov	r2, r3
 800fe38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	00da      	lsls	r2, r3, #3
 800fe50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe54:	4413      	add	r3, r2
 800fe56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fe5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe62:	2b3e      	cmp	r3, #62	; 0x3e
 800fe64:	d91d      	bls.n	800fea2 <USB_EPStartXfer+0xe28>
 800fe66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe6a:	095b      	lsrs	r3, r3, #5
 800fe6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe74:	f003 031f 	and.w	r3, r3, #31
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d104      	bne.n	800fe86 <USB_EPStartXfer+0xe0c>
 800fe7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe80:	3b01      	subs	r3, #1
 800fe82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	029b      	lsls	r3, r3, #10
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe9e:	801a      	strh	r2, [r3, #0]
 800fea0:	e3e1      	b.n	8010666 <USB_EPStartXfer+0x15ec>
 800fea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d116      	bne.n	800fed8 <USB_EPStartXfer+0xe5e>
 800feaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800febc:	801a      	strh	r2, [r3, #0]
 800febe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800feca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fece:	b29a      	uxth	r2, r3
 800fed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed4:	801a      	strh	r2, [r3, #0]
 800fed6:	e3c6      	b.n	8010666 <USB_EPStartXfer+0x15ec>
 800fed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fedc:	085b      	lsrs	r3, r3, #1
 800fede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fee6:	f003 0301 	and.w	r3, r3, #1
 800feea:	2b00      	cmp	r3, #0
 800feec:	d004      	beq.n	800fef8 <USB_EPStartXfer+0xe7e>
 800feee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fef2:	3301      	adds	r3, #1
 800fef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	029b      	lsls	r3, r3, #10
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff06:	801a      	strh	r2, [r3, #0]
 800ff08:	e3ad      	b.n	8010666 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ff0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	78db      	ldrb	r3, [r3, #3]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	f040 8200 	bne.w	801031c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ff1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	785b      	ldrb	r3, [r3, #1]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f040 8091 	bne.w	8010050 <USB_EPStartXfer+0xfd6>
 800ff2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff52:	4413      	add	r3, r2
 800ff54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	00da      	lsls	r2, r3, #3
 800ff66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff6a:	4413      	add	r3, r2
 800ff6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ff74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	2b3e      	cmp	r3, #62	; 0x3e
 800ff82:	d925      	bls.n	800ffd0 <USB_EPStartXfer+0xf56>
 800ff84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	095b      	lsrs	r3, r3, #5
 800ff92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	f003 031f 	and.w	r3, r3, #31
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d104      	bne.n	800ffb4 <USB_EPStartXfer+0xf3a>
 800ffaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ffb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	029b      	lsls	r3, r3, #10
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ffc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ffcc:	801a      	strh	r2, [r3, #0]
 800ffce:	e074      	b.n	80100ba <USB_EPStartXfer+0x1040>
 800ffd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d116      	bne.n	801000e <USB_EPStartXfer+0xf94>
 800ffe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fff2:	801a      	strh	r2, [r3, #0]
 800fff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fff8:	881b      	ldrh	r3, [r3, #0]
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010004:	b29a      	uxth	r2, r3
 8010006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801000a:	801a      	strh	r2, [r3, #0]
 801000c:	e055      	b.n	80100ba <USB_EPStartXfer+0x1040>
 801000e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	085b      	lsrs	r3, r3, #1
 801001c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	f003 0301 	and.w	r3, r3, #1
 8010030:	2b00      	cmp	r3, #0
 8010032:	d004      	beq.n	801003e <USB_EPStartXfer+0xfc4>
 8010034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010038:	3301      	adds	r3, #1
 801003a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801003e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010042:	b29b      	uxth	r3, r3
 8010044:	029b      	lsls	r3, r3, #10
 8010046:	b29a      	uxth	r2, r3
 8010048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801004c:	801a      	strh	r2, [r3, #0]
 801004e:	e034      	b.n	80100ba <USB_EPStartXfer+0x1040>
 8010050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	785b      	ldrb	r3, [r3, #1]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d12c      	bne.n	80100ba <USB_EPStartXfer+0x1040>
 8010060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801006e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801007c:	b29b      	uxth	r3, r3
 801007e:	461a      	mov	r2, r3
 8010080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010084:	4413      	add	r3, r2
 8010086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801008a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801008e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	00da      	lsls	r2, r3, #3
 8010098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801009c:	4413      	add	r3, r2
 801009e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80100a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80100a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80100b8:	801a      	strh	r2, [r3, #0]
 80100ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80100c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	785b      	ldrb	r3, [r3, #1]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f040 8091 	bne.w	80101fc <USB_EPStartXfer+0x1182>
 80100da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80100e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	461a      	mov	r2, r3
 80100fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100fe:	4413      	add	r3, r2
 8010100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	00da      	lsls	r2, r3, #3
 8010112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010116:	4413      	add	r3, r2
 8010118:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801011c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	2b3e      	cmp	r3, #62	; 0x3e
 801012e:	d925      	bls.n	801017c <USB_EPStartXfer+0x1102>
 8010130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	095b      	lsrs	r3, r3, #5
 801013e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	691b      	ldr	r3, [r3, #16]
 801014e:	f003 031f 	and.w	r3, r3, #31
 8010152:	2b00      	cmp	r3, #0
 8010154:	d104      	bne.n	8010160 <USB_EPStartXfer+0x10e6>
 8010156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801015a:	3b01      	subs	r3, #1
 801015c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010164:	b29b      	uxth	r3, r3
 8010166:	029b      	lsls	r3, r3, #10
 8010168:	b29b      	uxth	r3, r3
 801016a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801016e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010172:	b29a      	uxth	r2, r3
 8010174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010178:	801a      	strh	r2, [r3, #0]
 801017a:	e06d      	b.n	8010258 <USB_EPStartXfer+0x11de>
 801017c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d116      	bne.n	80101ba <USB_EPStartXfer+0x1140>
 801018c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	b29b      	uxth	r3, r3
 8010194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010198:	b29a      	uxth	r2, r3
 801019a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801019e:	801a      	strh	r2, [r3, #0]
 80101a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101b6:	801a      	strh	r2, [r3, #0]
 80101b8:	e04e      	b.n	8010258 <USB_EPStartXfer+0x11de>
 80101ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	085b      	lsrs	r3, r3, #1
 80101c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80101cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	f003 0301 	and.w	r3, r3, #1
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d004      	beq.n	80101ea <USB_EPStartXfer+0x1170>
 80101e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101e4:	3301      	adds	r3, #1
 80101e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80101ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	029b      	lsls	r3, r3, #10
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101f8:	801a      	strh	r2, [r3, #0]
 80101fa:	e02d      	b.n	8010258 <USB_EPStartXfer+0x11de>
 80101fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	785b      	ldrb	r3, [r3, #1]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d125      	bne.n	8010258 <USB_EPStartXfer+0x11de>
 801020c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801021a:	b29b      	uxth	r3, r3
 801021c:	461a      	mov	r2, r3
 801021e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010222:	4413      	add	r3, r2
 8010224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801022c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	00da      	lsls	r2, r3, #3
 8010236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801023a:	4413      	add	r3, r2
 801023c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010240:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	b29a      	uxth	r2, r3
 8010252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010256:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801025c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 81fe 	beq.w	8010666 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801026a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4413      	add	r3, r2
 8010284:	881b      	ldrh	r3, [r3, #0]
 8010286:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801028a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801028e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <USB_EPStartXfer+0x1228>
 8010296:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801029a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10d      	bne.n	80102be <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80102a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80102a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f040 81db 	bne.w	8010666 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80102b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80102b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f040 81d4 	bne.w	8010666 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80102be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80102e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	441a      	add	r2, r3
 8010302:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801030a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801030e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010316:	b29b      	uxth	r3, r3
 8010318:	8013      	strh	r3, [r2, #0]
 801031a:	e1a4      	b.n	8010666 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801031c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	78db      	ldrb	r3, [r3, #3]
 8010328:	2b01      	cmp	r3, #1
 801032a:	f040 819a 	bne.w	8010662 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801032e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	699a      	ldr	r2, [r3, #24]
 801033a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801033e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	429a      	cmp	r2, r3
 8010348:	d917      	bls.n	801037a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 801034a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801034e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 801035a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801035e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	699a      	ldr	r2, [r3, #24]
 8010366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801036a:	1ad2      	subs	r2, r2, r3
 801036c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	619a      	str	r2, [r3, #24]
 8010378:	e00e      	b.n	8010398 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 801037a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801037e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	699b      	ldr	r3, [r3, #24]
 8010386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801038a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801038e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2200      	movs	r2, #0
 8010396:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	785b      	ldrb	r3, [r3, #1]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d178      	bne.n	801049a <USB_EPStartXfer+0x1420>
 80103a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80103b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	461a      	mov	r2, r3
 80103c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80103cc:	4413      	add	r3, r2
 80103ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80103d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	00da      	lsls	r2, r3, #3
 80103e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80103e4:	4413      	add	r3, r2
 80103e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80103ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80103ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103f2:	2b3e      	cmp	r3, #62	; 0x3e
 80103f4:	d91d      	bls.n	8010432 <USB_EPStartXfer+0x13b8>
 80103f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103fa:	095b      	lsrs	r3, r3, #5
 80103fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010404:	f003 031f 	and.w	r3, r3, #31
 8010408:	2b00      	cmp	r3, #0
 801040a:	d104      	bne.n	8010416 <USB_EPStartXfer+0x139c>
 801040c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010410:	3b01      	subs	r3, #1
 8010412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801041a:	b29b      	uxth	r3, r3
 801041c:	029b      	lsls	r3, r3, #10
 801041e:	b29b      	uxth	r3, r3
 8010420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010428:	b29a      	uxth	r2, r3
 801042a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801042e:	801a      	strh	r2, [r3, #0]
 8010430:	e064      	b.n	80104fc <USB_EPStartXfer+0x1482>
 8010432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010436:	2b00      	cmp	r3, #0
 8010438:	d116      	bne.n	8010468 <USB_EPStartXfer+0x13ee>
 801043a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	b29b      	uxth	r3, r3
 8010442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010446:	b29a      	uxth	r2, r3
 8010448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	b29b      	uxth	r3, r3
 8010456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801045a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801045e:	b29a      	uxth	r2, r3
 8010460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010464:	801a      	strh	r2, [r3, #0]
 8010466:	e049      	b.n	80104fc <USB_EPStartXfer+0x1482>
 8010468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801046c:	085b      	lsrs	r3, r3, #1
 801046e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010476:	f003 0301 	and.w	r3, r3, #1
 801047a:	2b00      	cmp	r3, #0
 801047c:	d004      	beq.n	8010488 <USB_EPStartXfer+0x140e>
 801047e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010482:	3301      	adds	r3, #1
 8010484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801048c:	b29b      	uxth	r3, r3
 801048e:	029b      	lsls	r3, r3, #10
 8010490:	b29a      	uxth	r2, r3
 8010492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010496:	801a      	strh	r2, [r3, #0]
 8010498:	e030      	b.n	80104fc <USB_EPStartXfer+0x1482>
 801049a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801049e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	785b      	ldrb	r3, [r3, #1]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d128      	bne.n	80104fc <USB_EPStartXfer+0x1482>
 80104aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80104b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	461a      	mov	r2, r3
 80104ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80104ce:	4413      	add	r3, r2
 80104d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80104d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	00da      	lsls	r2, r3, #3
 80104e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80104e6:	4413      	add	r3, r2
 80104e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80104f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80104fa:	801a      	strh	r2, [r3, #0]
 80104fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801050a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801050e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d178      	bne.n	801060c <USB_EPStartXfer+0x1592>
 801051a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801051e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010536:	b29b      	uxth	r3, r3
 8010538:	461a      	mov	r2, r3
 801053a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801053e:	4413      	add	r3, r2
 8010540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	00da      	lsls	r2, r3, #3
 8010552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010556:	4413      	add	r3, r2
 8010558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801055c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010564:	2b3e      	cmp	r3, #62	; 0x3e
 8010566:	d91d      	bls.n	80105a4 <USB_EPStartXfer+0x152a>
 8010568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801056c:	095b      	lsrs	r3, r3, #5
 801056e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010576:	f003 031f 	and.w	r3, r3, #31
 801057a:	2b00      	cmp	r3, #0
 801057c:	d104      	bne.n	8010588 <USB_EPStartXfer+0x150e>
 801057e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010582:	3b01      	subs	r3, #1
 8010584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801058c:	b29b      	uxth	r3, r3
 801058e:	029b      	lsls	r3, r3, #10
 8010590:	b29b      	uxth	r3, r3
 8010592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801059a:	b29a      	uxth	r2, r3
 801059c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105a0:	801a      	strh	r2, [r3, #0]
 80105a2:	e060      	b.n	8010666 <USB_EPStartXfer+0x15ec>
 80105a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d116      	bne.n	80105da <USB_EPStartXfer+0x1560>
 80105ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105be:	801a      	strh	r2, [r3, #0]
 80105c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105d6:	801a      	strh	r2, [r3, #0]
 80105d8:	e045      	b.n	8010666 <USB_EPStartXfer+0x15ec>
 80105da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105de:	085b      	lsrs	r3, r3, #1
 80105e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d004      	beq.n	80105fa <USB_EPStartXfer+0x1580>
 80105f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105f4:	3301      	adds	r3, #1
 80105f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105fe:	b29b      	uxth	r3, r3
 8010600:	029b      	lsls	r3, r3, #10
 8010602:	b29a      	uxth	r2, r3
 8010604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010608:	801a      	strh	r2, [r3, #0]
 801060a:	e02c      	b.n	8010666 <USB_EPStartXfer+0x15ec>
 801060c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	785b      	ldrb	r3, [r3, #1]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d124      	bne.n	8010666 <USB_EPStartXfer+0x15ec>
 801061c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801062a:	b29b      	uxth	r3, r3
 801062c:	461a      	mov	r2, r3
 801062e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010632:	4413      	add	r3, r2
 8010634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	00da      	lsls	r2, r3, #3
 8010646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801064a:	4413      	add	r3, r2
 801064c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010658:	b29a      	uxth	r2, r3
 801065a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801065e:	801a      	strh	r2, [r3, #0]
 8010660:	e001      	b.n	8010666 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8010662:	2301      	movs	r3, #1
 8010664:	e03a      	b.n	80106dc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801066a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	881b      	ldrh	r3, [r3, #0]
 8010682:	b29b      	uxth	r3, r3
 8010684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801068c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010690:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010694:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010698:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801069c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80106a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80106a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80106a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	441a      	add	r2, r3
 80106c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80106c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80106e6:	b480      	push	{r7}
 80106e8:	b085      	sub	sp, #20
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
 80106ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	785b      	ldrb	r3, [r3, #1]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d020      	beq.n	801073a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	4413      	add	r3, r2
 8010702:	881b      	ldrh	r3, [r3, #0]
 8010704:	b29b      	uxth	r3, r3
 8010706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801070a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801070e:	81bb      	strh	r3, [r7, #12]
 8010710:	89bb      	ldrh	r3, [r7, #12]
 8010712:	f083 0310 	eor.w	r3, r3, #16
 8010716:	81bb      	strh	r3, [r7, #12]
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	441a      	add	r2, r3
 8010722:	89bb      	ldrh	r3, [r7, #12]
 8010724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010734:	b29b      	uxth	r3, r3
 8010736:	8013      	strh	r3, [r2, #0]
 8010738:	e01f      	b.n	801077a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	4413      	add	r3, r2
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	b29b      	uxth	r3, r3
 8010748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801074c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010750:	81fb      	strh	r3, [r7, #14]
 8010752:	89fb      	ldrh	r3, [r7, #14]
 8010754:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010758:	81fb      	strh	r3, [r7, #14]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	441a      	add	r2, r3
 8010764:	89fb      	ldrh	r3, [r7, #14]
 8010766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801076a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801076e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010776:	b29b      	uxth	r3, r3
 8010778:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3714      	adds	r7, #20
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010788:	b480      	push	{r7}
 801078a:	b087      	sub	sp, #28
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	7b1b      	ldrb	r3, [r3, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	f040 809d 	bne.w	80108d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	785b      	ldrb	r3, [r3, #1]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d04c      	beq.n	801083e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	4413      	add	r3, r2
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	823b      	strh	r3, [r7, #16]
 80107b2:	8a3b      	ldrh	r3, [r7, #16]
 80107b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d01b      	beq.n	80107f4 <USB_EPClearStall+0x6c>
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107d2:	81fb      	strh	r3, [r7, #14]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	441a      	add	r2, r3
 80107de:	89fb      	ldrh	r3, [r7, #14]
 80107e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	78db      	ldrb	r3, [r3, #3]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d06c      	beq.n	80108d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	4413      	add	r3, r2
 8010806:	881b      	ldrh	r3, [r3, #0]
 8010808:	b29b      	uxth	r3, r3
 801080a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801080e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010812:	81bb      	strh	r3, [r7, #12]
 8010814:	89bb      	ldrh	r3, [r7, #12]
 8010816:	f083 0320 	eor.w	r3, r3, #32
 801081a:	81bb      	strh	r3, [r7, #12]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	441a      	add	r2, r3
 8010826:	89bb      	ldrh	r3, [r7, #12]
 8010828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801082c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010838:	b29b      	uxth	r3, r3
 801083a:	8013      	strh	r3, [r2, #0]
 801083c:	e04b      	b.n	80108d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4413      	add	r3, r2
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	82fb      	strh	r3, [r7, #22]
 801084c:	8afb      	ldrh	r3, [r7, #22]
 801084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010852:	2b00      	cmp	r3, #0
 8010854:	d01b      	beq.n	801088e <USB_EPClearStall+0x106>
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	b29b      	uxth	r3, r3
 8010864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801086c:	82bb      	strh	r3, [r7, #20]
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	441a      	add	r2, r3
 8010878:	8abb      	ldrh	r3, [r7, #20]
 801087a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801087e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801088a:	b29b      	uxth	r3, r3
 801088c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	4413      	add	r3, r2
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	b29b      	uxth	r3, r3
 801089c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80108a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108a4:	827b      	strh	r3, [r7, #18]
 80108a6:	8a7b      	ldrh	r3, [r7, #18]
 80108a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80108ac:	827b      	strh	r3, [r7, #18]
 80108ae:	8a7b      	ldrh	r3, [r7, #18]
 80108b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80108b4:	827b      	strh	r3, [r7, #18]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	441a      	add	r2, r3
 80108c0:	8a7b      	ldrh	r3, [r7, #18]
 80108c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	371c      	adds	r7, #28
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80108f0:	78fb      	ldrb	r3, [r7, #3]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d103      	bne.n	80108fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2280      	movs	r2, #128	; 0x80
 80108fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801091a:	b29b      	uxth	r3, r3
 801091c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010924:	b29a      	uxth	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 801093a:	b480      	push	{r7}
 801093c:	b083      	sub	sp, #12
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010948:	b29b      	uxth	r3, r3
 801094a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801094e:	b29a      	uxth	r2, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010972:	b29b      	uxth	r3, r3
 8010974:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010976:	68fb      	ldr	r3, [r7, #12]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801099c:	b480      	push	{r7}
 801099e:	b08b      	sub	sp, #44	; 0x2c
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	4611      	mov	r1, r2
 80109a8:	461a      	mov	r2, r3
 80109aa:	460b      	mov	r3, r1
 80109ac:	80fb      	strh	r3, [r7, #6]
 80109ae:	4613      	mov	r3, r2
 80109b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80109b2:	88bb      	ldrh	r3, [r7, #4]
 80109b4:	3301      	adds	r3, #1
 80109b6:	085b      	lsrs	r3, r3, #1
 80109b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80109c2:	88fa      	ldrh	r2, [r7, #6]
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	4413      	add	r3, r2
 80109c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24
 80109d2:	e01b      	b.n	8010a0c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	3301      	adds	r3, #1
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	021b      	lsls	r3, r3, #8
 80109e2:	b21a      	sxth	r2, r3
 80109e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	b21b      	sxth	r3, r3
 80109ec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	8a7a      	ldrh	r2, [r7, #18]
 80109f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80109f4:	6a3b      	ldr	r3, [r7, #32]
 80109f6:	3302      	adds	r3, #2
 80109f8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	3301      	adds	r3, #1
 80109fe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	3301      	adds	r3, #1
 8010a04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e0      	bne.n	80109d4 <USB_WritePMA+0x38>
  }
}
 8010a12:	bf00      	nop
 8010a14:	bf00      	nop
 8010a16:	372c      	adds	r7, #44	; 0x2c
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b08b      	sub	sp, #44	; 0x2c
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	460b      	mov	r3, r1
 8010a30:	80fb      	strh	r3, [r7, #6]
 8010a32:	4613      	mov	r3, r2
 8010a34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010a36:	88bb      	ldrh	r3, [r7, #4]
 8010a38:	085b      	lsrs	r3, r3, #1
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010a46:	88fa      	ldrh	r2, [r7, #6]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	627b      	str	r3, [r7, #36]	; 0x24
 8010a56:	e018      	b.n	8010a8a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	3302      	adds	r3, #2
 8010a64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	3301      	adds	r3, #1
 8010a72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	0a1b      	lsrs	r3, r3, #8
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	3301      	adds	r3, #1
 8010a82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	3b01      	subs	r3, #1
 8010a88:	627b      	str	r3, [r7, #36]	; 0x24
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1e3      	bne.n	8010a58 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010a90:	88bb      	ldrh	r3, [r7, #4]
 8010a92:	f003 0301 	and.w	r3, r3, #1
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d007      	beq.n	8010aac <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8010a9c:	6a3b      	ldr	r3, [r7, #32]
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	701a      	strb	r2, [r3, #0]
  }
}
 8010aac:	bf00      	nop
 8010aae:	372c      	adds	r7, #44	; 0x2c
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010ac4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010ac8:	f002 f9f2 	bl	8012eb0 <USBD_static_malloc>
 8010acc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d105      	bne.n	8010ae0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010adc:	2302      	movs	r3, #2
 8010ade:	e066      	b.n	8010bae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	68fa      	ldr	r2, [r7, #12]
 8010ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	7c1b      	ldrb	r3, [r3, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d119      	bne.n	8010b24 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010af4:	2202      	movs	r2, #2
 8010af6:	2181      	movs	r1, #129	; 0x81
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f001 ffdb 	bl	8012ab4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2201      	movs	r2, #1
 8010b02:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b08:	2202      	movs	r2, #2
 8010b0a:	2101      	movs	r1, #1
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f001 ffd1 	bl	8012ab4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2210      	movs	r2, #16
 8010b1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010b22:	e016      	b.n	8010b52 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010b24:	2340      	movs	r3, #64	; 0x40
 8010b26:	2202      	movs	r2, #2
 8010b28:	2181      	movs	r1, #129	; 0x81
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f001 ffc2 	bl	8012ab4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010b36:	2340      	movs	r3, #64	; 0x40
 8010b38:	2202      	movs	r2, #2
 8010b3a:	2101      	movs	r1, #1
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f001 ffb9 	bl	8012ab4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2210      	movs	r2, #16
 8010b4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010b52:	2308      	movs	r3, #8
 8010b54:	2203      	movs	r2, #3
 8010b56:	2182      	movs	r1, #130	; 0x82
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f001 ffab 	bl	8012ab4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2201      	movs	r2, #1
 8010b62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	7c1b      	ldrb	r3, [r3, #16]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d109      	bne.n	8010b9c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b92:	2101      	movs	r1, #1
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f002 f909 	bl	8012dac <USBD_LL_PrepareReceive>
 8010b9a:	e007      	b.n	8010bac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ba2:	2340      	movs	r3, #64	; 0x40
 8010ba4:	2101      	movs	r1, #1
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f002 f900 	bl	8012dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010bc2:	2181      	movs	r1, #129	; 0x81
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f001 ffb3 	bl	8012b30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010bd0:	2101      	movs	r1, #1
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f001 ffac 	bl	8012b30 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010be0:	2182      	movs	r1, #130	; 0x82
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f001 ffa4 	bl	8012b30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d00e      	beq.n	8010c20 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c12:	4618      	mov	r0, r3
 8010c14:	f002 f95a 	bl	8012ecc <USBD_static_free>
    pdev->pClassData = NULL;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010c20:	2300      	movs	r3, #0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
	...

08010c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d101      	bne.n	8010c54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010c50:	2303      	movs	r3, #3
 8010c52:	e0af      	b.n	8010db4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d03f      	beq.n	8010ce0 <USBD_CDC_Setup+0xb4>
 8010c60:	2b20      	cmp	r3, #32
 8010c62:	f040 809f 	bne.w	8010da4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	88db      	ldrh	r3, [r3, #6]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d02e      	beq.n	8010ccc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	b25b      	sxtb	r3, r3
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	da16      	bge.n	8010ca6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	683a      	ldr	r2, [r7, #0]
 8010c82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010c84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	88d2      	ldrh	r2, [r2, #6]
 8010c8a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	88db      	ldrh	r3, [r3, #6]
 8010c90:	2b07      	cmp	r3, #7
 8010c92:	bf28      	it	cs
 8010c94:	2307      	movcs	r3, #7
 8010c96:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	89fa      	ldrh	r2, [r7, #14]
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f001 facf 	bl	8012242 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010ca4:	e085      	b.n	8010db2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	785a      	ldrb	r2, [r3, #1]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	88db      	ldrh	r3, [r3, #6]
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010cbc:	6939      	ldr	r1, [r7, #16]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	88db      	ldrh	r3, [r3, #6]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f001 fae8 	bl	801229a <USBD_CtlPrepareRx>
      break;
 8010cca:	e072      	b.n	8010db2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	7850      	ldrb	r0, [r2, #1]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4798      	blx	r3
      break;
 8010cde:	e068      	b.n	8010db2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	785b      	ldrb	r3, [r3, #1]
 8010ce4:	2b0b      	cmp	r3, #11
 8010ce6:	d852      	bhi.n	8010d8e <USBD_CDC_Setup+0x162>
 8010ce8:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <USBD_CDC_Setup+0xc4>)
 8010cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cee:	bf00      	nop
 8010cf0:	08010d21 	.word	0x08010d21
 8010cf4:	08010d9d 	.word	0x08010d9d
 8010cf8:	08010d8f 	.word	0x08010d8f
 8010cfc:	08010d8f 	.word	0x08010d8f
 8010d00:	08010d8f 	.word	0x08010d8f
 8010d04:	08010d8f 	.word	0x08010d8f
 8010d08:	08010d8f 	.word	0x08010d8f
 8010d0c:	08010d8f 	.word	0x08010d8f
 8010d10:	08010d8f 	.word	0x08010d8f
 8010d14:	08010d8f 	.word	0x08010d8f
 8010d18:	08010d4b 	.word	0x08010d4b
 8010d1c:	08010d75 	.word	0x08010d75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2b03      	cmp	r3, #3
 8010d2a:	d107      	bne.n	8010d3c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010d2c:	f107 030a 	add.w	r3, r7, #10
 8010d30:	2202      	movs	r2, #2
 8010d32:	4619      	mov	r1, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f001 fa84 	bl	8012242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d3a:	e032      	b.n	8010da2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f001 fa0e 	bl	8012160 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d44:	2303      	movs	r3, #3
 8010d46:	75fb      	strb	r3, [r7, #23]
          break;
 8010d48:	e02b      	b.n	8010da2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b03      	cmp	r3, #3
 8010d54:	d107      	bne.n	8010d66 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010d56:	f107 030d 	add.w	r3, r7, #13
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f001 fa6f 	bl	8012242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d64:	e01d      	b.n	8010da2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f001 f9f9 	bl	8012160 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	75fb      	strb	r3, [r7, #23]
          break;
 8010d72:	e016      	b.n	8010da2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d00f      	beq.n	8010da0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f001 f9ec 	bl	8012160 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d88:	2303      	movs	r3, #3
 8010d8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010d8c:	e008      	b.n	8010da0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010d8e:	6839      	ldr	r1, [r7, #0]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f001 f9e5 	bl	8012160 <USBD_CtlError>
          ret = USBD_FAIL;
 8010d96:	2303      	movs	r3, #3
 8010d98:	75fb      	strb	r3, [r7, #23]
          break;
 8010d9a:	e002      	b.n	8010da2 <USBD_CDC_Setup+0x176>
          break;
 8010d9c:	bf00      	nop
 8010d9e:	e008      	b.n	8010db2 <USBD_CDC_Setup+0x186>
          break;
 8010da0:	bf00      	nop
      }
      break;
 8010da2:	e006      	b.n	8010db2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010da4:	6839      	ldr	r1, [r7, #0]
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f001 f9da 	bl	8012160 <USBD_CtlError>
      ret = USBD_FAIL;
 8010dac:	2303      	movs	r3, #3
 8010dae:	75fb      	strb	r3, [r7, #23]
      break;
 8010db0:	bf00      	nop
  }

  return (uint8_t)ret;
 8010db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3718      	adds	r7, #24
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d101      	bne.n	8010dde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010dda:	2303      	movs	r3, #3
 8010ddc:	e04f      	b.n	8010e7e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010de4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010de6:	78fa      	ldrb	r2, [r7, #3]
 8010de8:	6879      	ldr	r1, [r7, #4]
 8010dea:	4613      	mov	r3, r2
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	440b      	add	r3, r1
 8010df4:	3318      	adds	r3, #24
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d029      	beq.n	8010e50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010dfc:	78fa      	ldrb	r2, [r7, #3]
 8010dfe:	6879      	ldr	r1, [r7, #4]
 8010e00:	4613      	mov	r3, r2
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	4413      	add	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	440b      	add	r3, r1
 8010e0a:	3318      	adds	r3, #24
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	78f9      	ldrb	r1, [r7, #3]
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	460b      	mov	r3, r1
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	440b      	add	r3, r1
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	4403      	add	r3, r0
 8010e1c:	333c      	adds	r3, #60	; 0x3c
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	fbb2 f1f3 	udiv	r1, r2, r3
 8010e24:	fb01 f303 	mul.w	r3, r1, r3
 8010e28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d110      	bne.n	8010e50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010e2e:	78fa      	ldrb	r2, [r7, #3]
 8010e30:	6879      	ldr	r1, [r7, #4]
 8010e32:	4613      	mov	r3, r2
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	4413      	add	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	3318      	adds	r3, #24
 8010e3e:	2200      	movs	r2, #0
 8010e40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010e42:	78f9      	ldrb	r1, [r7, #3]
 8010e44:	2300      	movs	r3, #0
 8010e46:	2200      	movs	r2, #0
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f001 ff77 	bl	8012d3c <USBD_LL_Transmit>
 8010e4e:	e015      	b.n	8010e7c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	2200      	movs	r2, #0
 8010e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00b      	beq.n	8010e7c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	68ba      	ldr	r2, [r7, #8]
 8010e6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010e72:	68ba      	ldr	r2, [r7, #8]
 8010e74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010e78:	78fa      	ldrb	r2, [r7, #3]
 8010e7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010e7c:	2300      	movs	r3, #0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e86:	b580      	push	{r7, lr}
 8010e88:	b084      	sub	sp, #16
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
 8010e8e:	460b      	mov	r3, r1
 8010e90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d101      	bne.n	8010ea8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e015      	b.n	8010ed4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010ea8:	78fb      	ldrb	r3, [r7, #3]
 8010eaa:	4619      	mov	r1, r3
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f001 ffb5 	bl	8012e1c <USBD_LL_GetRxDataSize>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d101      	bne.n	8010ef6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010ef2:	2303      	movs	r3, #3
 8010ef4:	e01b      	b.n	8010f2e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d015      	beq.n	8010f2c <USBD_CDC_EP0_RxReady+0x50>
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010f06:	2bff      	cmp	r3, #255	; 0xff
 8010f08:	d010      	beq.n	8010f2c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010f18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010f1a:	68fa      	ldr	r2, [r7, #12]
 8010f1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010f20:	b292      	uxth	r2, r2
 8010f22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	22ff      	movs	r2, #255	; 0xff
 8010f28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
	...

08010f38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2243      	movs	r2, #67	; 0x43
 8010f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010f46:	4b03      	ldr	r3, [pc, #12]	; (8010f54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	20000094 	.word	0x20000094

08010f58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2243      	movs	r2, #67	; 0x43
 8010f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010f66:	4b03      	ldr	r3, [pc, #12]	; (8010f74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	20000050 	.word	0x20000050

08010f78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2243      	movs	r2, #67	; 0x43
 8010f84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010f86:	4b03      	ldr	r3, [pc, #12]	; (8010f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	200000d8 	.word	0x200000d8

08010f98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	220a      	movs	r2, #10
 8010fa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010fa6:	4b03      	ldr	r3, [pc, #12]	; (8010fb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	2000000c 	.word	0x2000000c

08010fb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d101      	bne.n	8010fcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010fc8:	2303      	movs	r3, #3
 8010fca:	e004      	b.n	8010fd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	683a      	ldr	r2, [r7, #0]
 8010fd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	370c      	adds	r7, #12
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr

08010fe2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010fe2:	b480      	push	{r7}
 8010fe4:	b087      	sub	sp, #28
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ff4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d101      	bne.n	8011000 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	e008      	b.n	8011012 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr

0801101e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801101e:	b480      	push	{r7}
 8011020:	b085      	sub	sp, #20
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
 8011026:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801102e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011036:	2303      	movs	r3, #3
 8011038:	e004      	b.n	8011044 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801105e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011060:	2301      	movs	r3, #1
 8011062:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801106e:	2303      	movs	r3, #3
 8011070:	e01a      	b.n	80110a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011078:	2b00      	cmp	r3, #0
 801107a:	d114      	bne.n	80110a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	2201      	movs	r2, #1
 8011080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801109a:	2181      	movs	r1, #129	; 0x81
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f001 fe4d 	bl	8012d3c <USBD_LL_Transmit>

    ret = USBD_OK;
 80110a2:	2300      	movs	r3, #0
 80110a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80110ca:	2303      	movs	r3, #3
 80110cc:	e016      	b.n	80110fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7c1b      	ldrb	r3, [r3, #16]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d109      	bne.n	80110ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110e0:	2101      	movs	r1, #1
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f001 fe62 	bl	8012dac <USBD_LL_PrepareReceive>
 80110e8:	e007      	b.n	80110fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110f0:	2340      	movs	r3, #64	; 0x40
 80110f2:	2101      	movs	r1, #1
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f001 fe59 	bl	8012dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80110fa:	2300      	movs	r3, #0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4613      	mov	r3, r2
 8011110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d101      	bne.n	801111c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011118:	2303      	movs	r3, #3
 801111a:	e01f      	b.n	801115c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2200      	movs	r2, #0
 8011130:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d003      	beq.n	8011142 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2201      	movs	r2, #1
 8011146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	79fa      	ldrb	r2, [r7, #7]
 801114e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f001 fc1b 	bl	801298c <USBD_LL_Init>
 8011156:	4603      	mov	r3, r0
 8011158:	75fb      	strb	r3, [r7, #23]

  return ret;
 801115a:	7dfb      	ldrb	r3, [r7, #23]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3718      	adds	r7, #24
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801116e:	2300      	movs	r3, #0
 8011170:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d101      	bne.n	801117c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011178:	2303      	movs	r3, #3
 801117a:	e016      	b.n	80111aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	683a      	ldr	r2, [r7, #0]
 8011180:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00b      	beq.n	80111a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011198:	f107 020e 	add.w	r2, r7, #14
 801119c:	4610      	mov	r0, r2
 801119e:	4798      	blx	r3
 80111a0:	4602      	mov	r2, r0
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f001 fc48 	bl	8012a50 <USBD_LL_Start>
 80111c0:	4603      	mov	r3, r0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	460b      	mov	r3, r1
 80111ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80111ec:	2303      	movs	r3, #3
 80111ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d009      	beq.n	801120e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	78fa      	ldrb	r2, [r7, #3]
 8011204:	4611      	mov	r1, r2
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	4798      	blx	r3
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	460b      	mov	r3, r1
 8011222:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801122a:	2b00      	cmp	r3, #0
 801122c:	d007      	beq.n	801123e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	78fa      	ldrb	r2, [r7, #3]
 8011238:	4611      	mov	r1, r2
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	4798      	blx	r3
  }

  return USBD_OK;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 ff46 	bl	80120ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2201      	movs	r2, #1
 8011264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801126e:	461a      	mov	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801127c:	f003 031f 	and.w	r3, r3, #31
 8011280:	2b02      	cmp	r3, #2
 8011282:	d01a      	beq.n	80112ba <USBD_LL_SetupStage+0x72>
 8011284:	2b02      	cmp	r3, #2
 8011286:	d822      	bhi.n	80112ce <USBD_LL_SetupStage+0x86>
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <USBD_LL_SetupStage+0x4a>
 801128c:	2b01      	cmp	r3, #1
 801128e:	d00a      	beq.n	80112a6 <USBD_LL_SetupStage+0x5e>
 8011290:	e01d      	b.n	80112ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011298:	4619      	mov	r1, r3
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f9ee 	bl	801167c <USBD_StdDevReq>
 80112a0:	4603      	mov	r3, r0
 80112a2:	73fb      	strb	r3, [r7, #15]
      break;
 80112a4:	e020      	b.n	80112e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 fa52 	bl	8011758 <USBD_StdItfReq>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73fb      	strb	r3, [r7, #15]
      break;
 80112b8:	e016      	b.n	80112e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112c0:	4619      	mov	r1, r3
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fa91 	bl	80117ea <USBD_StdEPReq>
 80112c8:	4603      	mov	r3, r0
 80112ca:	73fb      	strb	r3, [r7, #15]
      break;
 80112cc:	e00c      	b.n	80112e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80112d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f001 fc5d 	bl	8012b9c <USBD_LL_StallEP>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73fb      	strb	r3, [r7, #15]
      break;
 80112e6:	bf00      	nop
  }

  return ret;
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b086      	sub	sp, #24
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	60f8      	str	r0, [r7, #12]
 80112fa:	460b      	mov	r3, r1
 80112fc:	607a      	str	r2, [r7, #4]
 80112fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011300:	7afb      	ldrb	r3, [r7, #11]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d138      	bne.n	8011378 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801130c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011314:	2b03      	cmp	r3, #3
 8011316:	d14a      	bne.n	80113ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	689a      	ldr	r2, [r3, #8]
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	429a      	cmp	r2, r3
 8011322:	d913      	bls.n	801134c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	689a      	ldr	r2, [r3, #8]
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	1ad2      	subs	r2, r2, r3
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	68da      	ldr	r2, [r3, #12]
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	4293      	cmp	r3, r2
 801133c:	bf28      	it	cs
 801133e:	4613      	movcs	r3, r2
 8011340:	461a      	mov	r2, r3
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f000 ffc5 	bl	80122d4 <USBD_CtlContinueRx>
 801134a:	e030      	b.n	80113ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2b03      	cmp	r3, #3
 8011356:	d10b      	bne.n	8011370 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d005      	beq.n	8011370 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801136a:	691b      	ldr	r3, [r3, #16]
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 ffc0 	bl	80122f6 <USBD_CtlSendStatus>
 8011376:	e01a      	b.n	80113ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b03      	cmp	r3, #3
 8011382:	d114      	bne.n	80113ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011396:	699b      	ldr	r3, [r3, #24]
 8011398:	7afa      	ldrb	r2, [r7, #11]
 801139a:	4611      	mov	r1, r2
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	4798      	blx	r3
 80113a0:	4603      	mov	r3, r0
 80113a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
 80113ac:	e000      	b.n	80113b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80113ae:	2300      	movs	r3, #0
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3718      	adds	r7, #24
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b086      	sub	sp, #24
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	460b      	mov	r3, r1
 80113c2:	607a      	str	r2, [r7, #4]
 80113c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80113c6:	7afb      	ldrb	r3, [r7, #11]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d16b      	bne.n	80114a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	3314      	adds	r3, #20
 80113d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80113d8:	2b02      	cmp	r3, #2
 80113da:	d156      	bne.n	801148a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	689a      	ldr	r2, [r3, #8]
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d914      	bls.n	8011412 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	689a      	ldr	r2, [r3, #8]
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	1ad2      	subs	r2, r2, r3
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	461a      	mov	r2, r3
 80113fc:	6879      	ldr	r1, [r7, #4]
 80113fe:	68f8      	ldr	r0, [r7, #12]
 8011400:	f000 ff3a 	bl	8012278 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011404:	2300      	movs	r3, #0
 8011406:	2200      	movs	r2, #0
 8011408:	2100      	movs	r1, #0
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f001 fcce 	bl	8012dac <USBD_LL_PrepareReceive>
 8011410:	e03b      	b.n	801148a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	68da      	ldr	r2, [r3, #12]
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	429a      	cmp	r2, r3
 801141c:	d11c      	bne.n	8011458 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	685a      	ldr	r2, [r3, #4]
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011426:	429a      	cmp	r2, r3
 8011428:	d316      	bcc.n	8011458 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011434:	429a      	cmp	r2, r3
 8011436:	d20f      	bcs.n	8011458 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011438:	2200      	movs	r2, #0
 801143a:	2100      	movs	r1, #0
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f000 ff1b 	bl	8012278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801144a:	2300      	movs	r3, #0
 801144c:	2200      	movs	r2, #0
 801144e:	2100      	movs	r1, #0
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f001 fcab 	bl	8012dac <USBD_LL_PrepareReceive>
 8011456:	e018      	b.n	801148a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b03      	cmp	r3, #3
 8011462:	d10b      	bne.n	801147c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d005      	beq.n	801147c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801147c:	2180      	movs	r1, #128	; 0x80
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f001 fb8c 	bl	8012b9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f000 ff49 	bl	801231c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011490:	2b01      	cmp	r3, #1
 8011492:	d122      	bne.n	80114da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f7ff fe98 	bl	80111ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2200      	movs	r2, #0
 801149e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80114a2:	e01a      	b.n	80114da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	2b03      	cmp	r3, #3
 80114ae:	d114      	bne.n	80114da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b6:	695b      	ldr	r3, [r3, #20]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00e      	beq.n	80114da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114c2:	695b      	ldr	r3, [r3, #20]
 80114c4:	7afa      	ldrb	r2, [r7, #11]
 80114c6:	4611      	mov	r1, r2
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	4798      	blx	r3
 80114cc:	4603      	mov	r3, r0
 80114ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80114d0:	7dfb      	ldrb	r3, [r7, #23]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
 80114d8:	e000      	b.n	80114dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2200      	movs	r2, #0
 8011506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011510:	2b00      	cmp	r3, #0
 8011512:	d101      	bne.n	8011518 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011514:	2303      	movs	r3, #3
 8011516:	e02f      	b.n	8011578 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00f      	beq.n	8011542 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d009      	beq.n	8011542 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	6852      	ldr	r2, [r2, #4]
 801153a:	b2d2      	uxtb	r2, r2
 801153c:	4611      	mov	r1, r2
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011542:	2340      	movs	r3, #64	; 0x40
 8011544:	2200      	movs	r2, #0
 8011546:	2100      	movs	r1, #0
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f001 fab3 	bl	8012ab4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2201      	movs	r2, #1
 8011552:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2240      	movs	r2, #64	; 0x40
 801155a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801155e:	2340      	movs	r3, #64	; 0x40
 8011560:	2200      	movs	r2, #0
 8011562:	2180      	movs	r1, #128	; 0x80
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f001 faa5 	bl	8012ab4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2201      	movs	r2, #1
 801156e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2240      	movs	r2, #64	; 0x40
 8011574:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	460b      	mov	r3, r1
 801158a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	78fa      	ldrb	r2, [r7, #3]
 8011590:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2204      	movs	r2, #4
 80115ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	370c      	adds	r7, #12
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b04      	cmp	r3, #4
 80115de:	d106      	bne.n	80115ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80115e6:	b2da      	uxtb	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	370c      	adds	r7, #12
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr

080115fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801160e:	2303      	movs	r3, #3
 8011610:	e012      	b.n	8011638 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011618:	b2db      	uxtb	r3, r3
 801161a:	2b03      	cmp	r3, #3
 801161c:	d10b      	bne.n	8011636 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011624:	69db      	ldr	r3, [r3, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d005      	beq.n	8011636 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011630:	69db      	ldr	r3, [r3, #28]
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011636:	2300      	movs	r3, #0
}
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011640:	b480      	push	{r7}
 8011642:	b087      	sub	sp, #28
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	3301      	adds	r3, #1
 8011656:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801165e:	8a3b      	ldrh	r3, [r7, #16]
 8011660:	021b      	lsls	r3, r3, #8
 8011662:	b21a      	sxth	r2, r3
 8011664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011668:	4313      	orrs	r3, r2
 801166a:	b21b      	sxth	r3, r3
 801166c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801166e:	89fb      	ldrh	r3, [r7, #14]
}
 8011670:	4618      	mov	r0, r3
 8011672:	371c      	adds	r7, #28
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011686:	2300      	movs	r3, #0
 8011688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011692:	2b40      	cmp	r3, #64	; 0x40
 8011694:	d005      	beq.n	80116a2 <USBD_StdDevReq+0x26>
 8011696:	2b40      	cmp	r3, #64	; 0x40
 8011698:	d853      	bhi.n	8011742 <USBD_StdDevReq+0xc6>
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00b      	beq.n	80116b6 <USBD_StdDevReq+0x3a>
 801169e:	2b20      	cmp	r3, #32
 80116a0:	d14f      	bne.n	8011742 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a8:	689b      	ldr	r3, [r3, #8]
 80116aa:	6839      	ldr	r1, [r7, #0]
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	4798      	blx	r3
 80116b0:	4603      	mov	r3, r0
 80116b2:	73fb      	strb	r3, [r7, #15]
      break;
 80116b4:	e04a      	b.n	801174c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	785b      	ldrb	r3, [r3, #1]
 80116ba:	2b09      	cmp	r3, #9
 80116bc:	d83b      	bhi.n	8011736 <USBD_StdDevReq+0xba>
 80116be:	a201      	add	r2, pc, #4	; (adr r2, 80116c4 <USBD_StdDevReq+0x48>)
 80116c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c4:	08011719 	.word	0x08011719
 80116c8:	0801172d 	.word	0x0801172d
 80116cc:	08011737 	.word	0x08011737
 80116d0:	08011723 	.word	0x08011723
 80116d4:	08011737 	.word	0x08011737
 80116d8:	080116f7 	.word	0x080116f7
 80116dc:	080116ed 	.word	0x080116ed
 80116e0:	08011737 	.word	0x08011737
 80116e4:	0801170f 	.word	0x0801170f
 80116e8:	08011701 	.word	0x08011701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80116ec:	6839      	ldr	r1, [r7, #0]
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f000 f9de 	bl	8011ab0 <USBD_GetDescriptor>
          break;
 80116f4:	e024      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fb6d 	bl	8011dd8 <USBD_SetAddress>
          break;
 80116fe:	e01f      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011700:	6839      	ldr	r1, [r7, #0]
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 fbac 	bl	8011e60 <USBD_SetConfig>
 8011708:	4603      	mov	r3, r0
 801170a:	73fb      	strb	r3, [r7, #15]
          break;
 801170c:	e018      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801170e:	6839      	ldr	r1, [r7, #0]
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 fc4b 	bl	8011fac <USBD_GetConfig>
          break;
 8011716:	e013      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 fc7c 	bl	8012018 <USBD_GetStatus>
          break;
 8011720:	e00e      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 fcab 	bl	8012080 <USBD_SetFeature>
          break;
 801172a:	e009      	b.n	8011740 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801172c:	6839      	ldr	r1, [r7, #0]
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fcba 	bl	80120a8 <USBD_ClrFeature>
          break;
 8011734:	e004      	b.n	8011740 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011736:	6839      	ldr	r1, [r7, #0]
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fd11 	bl	8012160 <USBD_CtlError>
          break;
 801173e:	bf00      	nop
      }
      break;
 8011740:	e004      	b.n	801174c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011742:	6839      	ldr	r1, [r7, #0]
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 fd0b 	bl	8012160 <USBD_CtlError>
      break;
 801174a:	bf00      	nop
  }

  return ret;
 801174c:	7bfb      	ldrb	r3, [r7, #15]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop

08011758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011762:	2300      	movs	r3, #0
 8011764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801176e:	2b40      	cmp	r3, #64	; 0x40
 8011770:	d005      	beq.n	801177e <USBD_StdItfReq+0x26>
 8011772:	2b40      	cmp	r3, #64	; 0x40
 8011774:	d82f      	bhi.n	80117d6 <USBD_StdItfReq+0x7e>
 8011776:	2b00      	cmp	r3, #0
 8011778:	d001      	beq.n	801177e <USBD_StdItfReq+0x26>
 801177a:	2b20      	cmp	r3, #32
 801177c:	d12b      	bne.n	80117d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011784:	b2db      	uxtb	r3, r3
 8011786:	3b01      	subs	r3, #1
 8011788:	2b02      	cmp	r3, #2
 801178a:	d81d      	bhi.n	80117c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	889b      	ldrh	r3, [r3, #4]
 8011790:	b2db      	uxtb	r3, r3
 8011792:	2b01      	cmp	r3, #1
 8011794:	d813      	bhi.n	80117be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	6839      	ldr	r1, [r7, #0]
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	4798      	blx	r3
 80117a4:	4603      	mov	r3, r0
 80117a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	88db      	ldrh	r3, [r3, #6]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d110      	bne.n	80117d2 <USBD_StdItfReq+0x7a>
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d10d      	bne.n	80117d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 fd9d 	bl	80122f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80117bc:	e009      	b.n	80117d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80117be:	6839      	ldr	r1, [r7, #0]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 fccd 	bl	8012160 <USBD_CtlError>
          break;
 80117c6:	e004      	b.n	80117d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80117c8:	6839      	ldr	r1, [r7, #0]
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 fcc8 	bl	8012160 <USBD_CtlError>
          break;
 80117d0:	e000      	b.n	80117d4 <USBD_StdItfReq+0x7c>
          break;
 80117d2:	bf00      	nop
      }
      break;
 80117d4:	e004      	b.n	80117e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80117d6:	6839      	ldr	r1, [r7, #0]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 fcc1 	bl	8012160 <USBD_CtlError>
      break;
 80117de:	bf00      	nop
  }

  return ret;
 80117e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
 80117f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	889b      	ldrh	r3, [r3, #4]
 80117fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011806:	2b40      	cmp	r3, #64	; 0x40
 8011808:	d007      	beq.n	801181a <USBD_StdEPReq+0x30>
 801180a:	2b40      	cmp	r3, #64	; 0x40
 801180c:	f200 8145 	bhi.w	8011a9a <USBD_StdEPReq+0x2b0>
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00c      	beq.n	801182e <USBD_StdEPReq+0x44>
 8011814:	2b20      	cmp	r3, #32
 8011816:	f040 8140 	bne.w	8011a9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	6839      	ldr	r1, [r7, #0]
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	4798      	blx	r3
 8011828:	4603      	mov	r3, r0
 801182a:	73fb      	strb	r3, [r7, #15]
      break;
 801182c:	e13a      	b.n	8011aa4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	785b      	ldrb	r3, [r3, #1]
 8011832:	2b03      	cmp	r3, #3
 8011834:	d007      	beq.n	8011846 <USBD_StdEPReq+0x5c>
 8011836:	2b03      	cmp	r3, #3
 8011838:	f300 8129 	bgt.w	8011a8e <USBD_StdEPReq+0x2a4>
 801183c:	2b00      	cmp	r3, #0
 801183e:	d07f      	beq.n	8011940 <USBD_StdEPReq+0x156>
 8011840:	2b01      	cmp	r3, #1
 8011842:	d03c      	beq.n	80118be <USBD_StdEPReq+0xd4>
 8011844:	e123      	b.n	8011a8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801184c:	b2db      	uxtb	r3, r3
 801184e:	2b02      	cmp	r3, #2
 8011850:	d002      	beq.n	8011858 <USBD_StdEPReq+0x6e>
 8011852:	2b03      	cmp	r3, #3
 8011854:	d016      	beq.n	8011884 <USBD_StdEPReq+0x9a>
 8011856:	e02c      	b.n	80118b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011858:	7bbb      	ldrb	r3, [r7, #14]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00d      	beq.n	801187a <USBD_StdEPReq+0x90>
 801185e:	7bbb      	ldrb	r3, [r7, #14]
 8011860:	2b80      	cmp	r3, #128	; 0x80
 8011862:	d00a      	beq.n	801187a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011864:	7bbb      	ldrb	r3, [r7, #14]
 8011866:	4619      	mov	r1, r3
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f001 f997 	bl	8012b9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801186e:	2180      	movs	r1, #128	; 0x80
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f001 f993 	bl	8012b9c <USBD_LL_StallEP>
 8011876:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011878:	e020      	b.n	80118bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801187a:	6839      	ldr	r1, [r7, #0]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 fc6f 	bl	8012160 <USBD_CtlError>
              break;
 8011882:	e01b      	b.n	80118bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	885b      	ldrh	r3, [r3, #2]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d10e      	bne.n	80118aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801188c:	7bbb      	ldrb	r3, [r7, #14]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00b      	beq.n	80118aa <USBD_StdEPReq+0xc0>
 8011892:	7bbb      	ldrb	r3, [r7, #14]
 8011894:	2b80      	cmp	r3, #128	; 0x80
 8011896:	d008      	beq.n	80118aa <USBD_StdEPReq+0xc0>
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	88db      	ldrh	r3, [r3, #6]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d104      	bne.n	80118aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80118a0:	7bbb      	ldrb	r3, [r7, #14]
 80118a2:	4619      	mov	r1, r3
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f001 f979 	bl	8012b9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 fd23 	bl	80122f6 <USBD_CtlSendStatus>

              break;
 80118b0:	e004      	b.n	80118bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80118b2:	6839      	ldr	r1, [r7, #0]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 fc53 	bl	8012160 <USBD_CtlError>
              break;
 80118ba:	bf00      	nop
          }
          break;
 80118bc:	e0ec      	b.n	8011a98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d002      	beq.n	80118d0 <USBD_StdEPReq+0xe6>
 80118ca:	2b03      	cmp	r3, #3
 80118cc:	d016      	beq.n	80118fc <USBD_StdEPReq+0x112>
 80118ce:	e030      	b.n	8011932 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118d0:	7bbb      	ldrb	r3, [r7, #14]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d00d      	beq.n	80118f2 <USBD_StdEPReq+0x108>
 80118d6:	7bbb      	ldrb	r3, [r7, #14]
 80118d8:	2b80      	cmp	r3, #128	; 0x80
 80118da:	d00a      	beq.n	80118f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80118dc:	7bbb      	ldrb	r3, [r7, #14]
 80118de:	4619      	mov	r1, r3
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f001 f95b 	bl	8012b9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80118e6:	2180      	movs	r1, #128	; 0x80
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f001 f957 	bl	8012b9c <USBD_LL_StallEP>
 80118ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80118f0:	e025      	b.n	801193e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80118f2:	6839      	ldr	r1, [r7, #0]
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 fc33 	bl	8012160 <USBD_CtlError>
              break;
 80118fa:	e020      	b.n	801193e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	885b      	ldrh	r3, [r3, #2]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d11b      	bne.n	801193c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011904:	7bbb      	ldrb	r3, [r7, #14]
 8011906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801190a:	2b00      	cmp	r3, #0
 801190c:	d004      	beq.n	8011918 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801190e:	7bbb      	ldrb	r3, [r7, #14]
 8011910:	4619      	mov	r1, r3
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f001 f978 	bl	8012c08 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fcec 	bl	80122f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011924:	689b      	ldr	r3, [r3, #8]
 8011926:	6839      	ldr	r1, [r7, #0]
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	4798      	blx	r3
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011930:	e004      	b.n	801193c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f000 fc13 	bl	8012160 <USBD_CtlError>
              break;
 801193a:	e000      	b.n	801193e <USBD_StdEPReq+0x154>
              break;
 801193c:	bf00      	nop
          }
          break;
 801193e:	e0ab      	b.n	8011a98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b02      	cmp	r3, #2
 801194a:	d002      	beq.n	8011952 <USBD_StdEPReq+0x168>
 801194c:	2b03      	cmp	r3, #3
 801194e:	d032      	beq.n	80119b6 <USBD_StdEPReq+0x1cc>
 8011950:	e097      	b.n	8011a82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011952:	7bbb      	ldrb	r3, [r7, #14]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d007      	beq.n	8011968 <USBD_StdEPReq+0x17e>
 8011958:	7bbb      	ldrb	r3, [r7, #14]
 801195a:	2b80      	cmp	r3, #128	; 0x80
 801195c:	d004      	beq.n	8011968 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801195e:	6839      	ldr	r1, [r7, #0]
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f000 fbfd 	bl	8012160 <USBD_CtlError>
                break;
 8011966:	e091      	b.n	8011a8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801196c:	2b00      	cmp	r3, #0
 801196e:	da0b      	bge.n	8011988 <USBD_StdEPReq+0x19e>
 8011970:	7bbb      	ldrb	r3, [r7, #14]
 8011972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011976:	4613      	mov	r3, r2
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	4413      	add	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	3310      	adds	r3, #16
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	4413      	add	r3, r2
 8011984:	3304      	adds	r3, #4
 8011986:	e00b      	b.n	80119a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011988:	7bbb      	ldrb	r3, [r7, #14]
 801198a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801198e:	4613      	mov	r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	4413      	add	r3, r2
 801199e:	3304      	adds	r3, #4
 80119a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2200      	movs	r2, #0
 80119a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	2202      	movs	r2, #2
 80119ac:	4619      	mov	r1, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 fc47 	bl	8012242 <USBD_CtlSendData>
              break;
 80119b4:	e06a      	b.n	8011a8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80119b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	da11      	bge.n	80119e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119be:	7bbb      	ldrb	r3, [r7, #14]
 80119c0:	f003 020f 	and.w	r2, r3, #15
 80119c4:	6879      	ldr	r1, [r7, #4]
 80119c6:	4613      	mov	r3, r2
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	440b      	add	r3, r1
 80119d0:	3324      	adds	r3, #36	; 0x24
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d117      	bne.n	8011a08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80119d8:	6839      	ldr	r1, [r7, #0]
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 fbc0 	bl	8012160 <USBD_CtlError>
                  break;
 80119e0:	e054      	b.n	8011a8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119e2:	7bbb      	ldrb	r3, [r7, #14]
 80119e4:	f003 020f 	and.w	r2, r3, #15
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	4613      	mov	r3, r2
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	440b      	add	r3, r1
 80119f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d104      	bne.n	8011a08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80119fe:	6839      	ldr	r1, [r7, #0]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 fbad 	bl	8012160 <USBD_CtlError>
                  break;
 8011a06:	e041      	b.n	8011a8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	da0b      	bge.n	8011a28 <USBD_StdEPReq+0x23e>
 8011a10:	7bbb      	ldrb	r3, [r7, #14]
 8011a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a16:	4613      	mov	r3, r2
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	4413      	add	r3, r2
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	3310      	adds	r3, #16
 8011a20:	687a      	ldr	r2, [r7, #4]
 8011a22:	4413      	add	r3, r2
 8011a24:	3304      	adds	r3, #4
 8011a26:	e00b      	b.n	8011a40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a28:	7bbb      	ldrb	r3, [r7, #14]
 8011a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a2e:	4613      	mov	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	3304      	adds	r3, #4
 8011a40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a42:	7bbb      	ldrb	r3, [r7, #14]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <USBD_StdEPReq+0x264>
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b80      	cmp	r3, #128	; 0x80
 8011a4c:	d103      	bne.n	8011a56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2200      	movs	r2, #0
 8011a52:	601a      	str	r2, [r3, #0]
 8011a54:	e00e      	b.n	8011a74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a56:	7bbb      	ldrb	r3, [r7, #14]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f001 f90a 	bl	8012c74 <USBD_LL_IsStallEP>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d003      	beq.n	8011a6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	601a      	str	r2, [r3, #0]
 8011a6c:	e002      	b.n	8011a74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2200      	movs	r2, #0
 8011a72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2202      	movs	r2, #2
 8011a78:	4619      	mov	r1, r3
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 fbe1 	bl	8012242 <USBD_CtlSendData>
              break;
 8011a80:	e004      	b.n	8011a8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011a82:	6839      	ldr	r1, [r7, #0]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fb6b 	bl	8012160 <USBD_CtlError>
              break;
 8011a8a:	bf00      	nop
          }
          break;
 8011a8c:	e004      	b.n	8011a98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fb65 	bl	8012160 <USBD_CtlError>
          break;
 8011a96:	bf00      	nop
      }
      break;
 8011a98:	e004      	b.n	8011aa4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 fb5f 	bl	8012160 <USBD_CtlError>
      break;
 8011aa2:	bf00      	nop
  }

  return ret;
 8011aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
	...

08011ab0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011aba:	2300      	movs	r3, #0
 8011abc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	885b      	ldrh	r3, [r3, #2]
 8011aca:	0a1b      	lsrs	r3, r3, #8
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	2b0e      	cmp	r3, #14
 8011ad2:	f200 8152 	bhi.w	8011d7a <USBD_GetDescriptor+0x2ca>
 8011ad6:	a201      	add	r2, pc, #4	; (adr r2, 8011adc <USBD_GetDescriptor+0x2c>)
 8011ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011adc:	08011b4d 	.word	0x08011b4d
 8011ae0:	08011b65 	.word	0x08011b65
 8011ae4:	08011ba5 	.word	0x08011ba5
 8011ae8:	08011d7b 	.word	0x08011d7b
 8011aec:	08011d7b 	.word	0x08011d7b
 8011af0:	08011d1b 	.word	0x08011d1b
 8011af4:	08011d47 	.word	0x08011d47
 8011af8:	08011d7b 	.word	0x08011d7b
 8011afc:	08011d7b 	.word	0x08011d7b
 8011b00:	08011d7b 	.word	0x08011d7b
 8011b04:	08011d7b 	.word	0x08011d7b
 8011b08:	08011d7b 	.word	0x08011d7b
 8011b0c:	08011d7b 	.word	0x08011d7b
 8011b10:	08011d7b 	.word	0x08011d7b
 8011b14:	08011b19 	.word	0x08011b19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b1e:	69db      	ldr	r3, [r3, #28]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00b      	beq.n	8011b3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	7c12      	ldrb	r2, [r2, #16]
 8011b30:	f107 0108 	add.w	r1, r7, #8
 8011b34:	4610      	mov	r0, r2
 8011b36:	4798      	blx	r3
 8011b38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b3a:	e126      	b.n	8011d8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011b3c:	6839      	ldr	r1, [r7, #0]
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 fb0e 	bl	8012160 <USBD_CtlError>
        err++;
 8011b44:	7afb      	ldrb	r3, [r7, #11]
 8011b46:	3301      	adds	r3, #1
 8011b48:	72fb      	strb	r3, [r7, #11]
      break;
 8011b4a:	e11e      	b.n	8011d8a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	7c12      	ldrb	r2, [r2, #16]
 8011b58:	f107 0108 	add.w	r1, r7, #8
 8011b5c:	4610      	mov	r0, r2
 8011b5e:	4798      	blx	r3
 8011b60:	60f8      	str	r0, [r7, #12]
      break;
 8011b62:	e112      	b.n	8011d8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	7c1b      	ldrb	r3, [r3, #16]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10d      	bne.n	8011b88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b74:	f107 0208 	add.w	r2, r7, #8
 8011b78:	4610      	mov	r0, r2
 8011b7a:	4798      	blx	r3
 8011b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3301      	adds	r3, #1
 8011b82:	2202      	movs	r2, #2
 8011b84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011b86:	e100      	b.n	8011d8a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b90:	f107 0208 	add.w	r2, r7, #8
 8011b94:	4610      	mov	r0, r2
 8011b96:	4798      	blx	r3
 8011b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	2202      	movs	r2, #2
 8011ba0:	701a      	strb	r2, [r3, #0]
      break;
 8011ba2:	e0f2      	b.n	8011d8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	885b      	ldrh	r3, [r3, #2]
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b05      	cmp	r3, #5
 8011bac:	f200 80ac 	bhi.w	8011d08 <USBD_GetDescriptor+0x258>
 8011bb0:	a201      	add	r2, pc, #4	; (adr r2, 8011bb8 <USBD_GetDescriptor+0x108>)
 8011bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb6:	bf00      	nop
 8011bb8:	08011bd1 	.word	0x08011bd1
 8011bbc:	08011c05 	.word	0x08011c05
 8011bc0:	08011c39 	.word	0x08011c39
 8011bc4:	08011c6d 	.word	0x08011c6d
 8011bc8:	08011ca1 	.word	0x08011ca1
 8011bcc:	08011cd5 	.word	0x08011cd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00b      	beq.n	8011bf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	7c12      	ldrb	r2, [r2, #16]
 8011be8:	f107 0108 	add.w	r1, r7, #8
 8011bec:	4610      	mov	r0, r2
 8011bee:	4798      	blx	r3
 8011bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bf2:	e091      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011bf4:	6839      	ldr	r1, [r7, #0]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f000 fab2 	bl	8012160 <USBD_CtlError>
            err++;
 8011bfc:	7afb      	ldrb	r3, [r7, #11]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	72fb      	strb	r3, [r7, #11]
          break;
 8011c02:	e089      	b.n	8011d18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c0a:	689b      	ldr	r3, [r3, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00b      	beq.n	8011c28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	7c12      	ldrb	r2, [r2, #16]
 8011c1c:	f107 0108 	add.w	r1, r7, #8
 8011c20:	4610      	mov	r0, r2
 8011c22:	4798      	blx	r3
 8011c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c26:	e077      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011c28:	6839      	ldr	r1, [r7, #0]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 fa98 	bl	8012160 <USBD_CtlError>
            err++;
 8011c30:	7afb      	ldrb	r3, [r7, #11]
 8011c32:	3301      	adds	r3, #1
 8011c34:	72fb      	strb	r3, [r7, #11]
          break;
 8011c36:	e06f      	b.n	8011d18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00b      	beq.n	8011c5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	7c12      	ldrb	r2, [r2, #16]
 8011c50:	f107 0108 	add.w	r1, r7, #8
 8011c54:	4610      	mov	r0, r2
 8011c56:	4798      	blx	r3
 8011c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c5a:	e05d      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fa7e 	bl	8012160 <USBD_CtlError>
            err++;
 8011c64:	7afb      	ldrb	r3, [r7, #11]
 8011c66:	3301      	adds	r3, #1
 8011c68:	72fb      	strb	r3, [r7, #11]
          break;
 8011c6a:	e055      	b.n	8011d18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c72:	691b      	ldr	r3, [r3, #16]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00b      	beq.n	8011c90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c7e:	691b      	ldr	r3, [r3, #16]
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	7c12      	ldrb	r2, [r2, #16]
 8011c84:	f107 0108 	add.w	r1, r7, #8
 8011c88:	4610      	mov	r0, r2
 8011c8a:	4798      	blx	r3
 8011c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c8e:	e043      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 fa64 	bl	8012160 <USBD_CtlError>
            err++;
 8011c98:	7afb      	ldrb	r3, [r7, #11]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8011c9e:	e03b      	b.n	8011d18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ca6:	695b      	ldr	r3, [r3, #20]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00b      	beq.n	8011cc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cb2:	695b      	ldr	r3, [r3, #20]
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	7c12      	ldrb	r2, [r2, #16]
 8011cb8:	f107 0108 	add.w	r1, r7, #8
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	4798      	blx	r3
 8011cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cc2:	e029      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011cc4:	6839      	ldr	r1, [r7, #0]
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 fa4a 	bl	8012160 <USBD_CtlError>
            err++;
 8011ccc:	7afb      	ldrb	r3, [r7, #11]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8011cd2:	e021      	b.n	8011d18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00b      	beq.n	8011cf8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	7c12      	ldrb	r2, [r2, #16]
 8011cec:	f107 0108 	add.w	r1, r7, #8
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	4798      	blx	r3
 8011cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cf6:	e00f      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011cf8:	6839      	ldr	r1, [r7, #0]
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 fa30 	bl	8012160 <USBD_CtlError>
            err++;
 8011d00:	7afb      	ldrb	r3, [r7, #11]
 8011d02:	3301      	adds	r3, #1
 8011d04:	72fb      	strb	r3, [r7, #11]
          break;
 8011d06:	e007      	b.n	8011d18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fa28 	bl	8012160 <USBD_CtlError>
          err++;
 8011d10:	7afb      	ldrb	r3, [r7, #11]
 8011d12:	3301      	adds	r3, #1
 8011d14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011d16:	bf00      	nop
      }
      break;
 8011d18:	e037      	b.n	8011d8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	7c1b      	ldrb	r3, [r3, #16]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d109      	bne.n	8011d36 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d2a:	f107 0208 	add.w	r2, r7, #8
 8011d2e:	4610      	mov	r0, r2
 8011d30:	4798      	blx	r3
 8011d32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d34:	e029      	b.n	8011d8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 fa11 	bl	8012160 <USBD_CtlError>
        err++;
 8011d3e:	7afb      	ldrb	r3, [r7, #11]
 8011d40:	3301      	adds	r3, #1
 8011d42:	72fb      	strb	r3, [r7, #11]
      break;
 8011d44:	e021      	b.n	8011d8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	7c1b      	ldrb	r3, [r3, #16]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d10d      	bne.n	8011d6a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d56:	f107 0208 	add.w	r2, r7, #8
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	4798      	blx	r3
 8011d5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	3301      	adds	r3, #1
 8011d64:	2207      	movs	r2, #7
 8011d66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d68:	e00f      	b.n	8011d8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011d6a:	6839      	ldr	r1, [r7, #0]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 f9f7 	bl	8012160 <USBD_CtlError>
        err++;
 8011d72:	7afb      	ldrb	r3, [r7, #11]
 8011d74:	3301      	adds	r3, #1
 8011d76:	72fb      	strb	r3, [r7, #11]
      break;
 8011d78:	e007      	b.n	8011d8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011d7a:	6839      	ldr	r1, [r7, #0]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 f9ef 	bl	8012160 <USBD_CtlError>
      err++;
 8011d82:	7afb      	ldrb	r3, [r7, #11]
 8011d84:	3301      	adds	r3, #1
 8011d86:	72fb      	strb	r3, [r7, #11]
      break;
 8011d88:	bf00      	nop
  }

  if (err != 0U)
 8011d8a:	7afb      	ldrb	r3, [r7, #11]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d11e      	bne.n	8011dce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	88db      	ldrh	r3, [r3, #6]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d016      	beq.n	8011dc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011d98:	893b      	ldrh	r3, [r7, #8]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00e      	beq.n	8011dbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	88da      	ldrh	r2, [r3, #6]
 8011da2:	893b      	ldrh	r3, [r7, #8]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	bf28      	it	cs
 8011da8:	4613      	movcs	r3, r2
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011dae:	893b      	ldrh	r3, [r7, #8]
 8011db0:	461a      	mov	r2, r3
 8011db2:	68f9      	ldr	r1, [r7, #12]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fa44 	bl	8012242 <USBD_CtlSendData>
 8011dba:	e009      	b.n	8011dd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f9ce 	bl	8012160 <USBD_CtlError>
 8011dc4:	e004      	b.n	8011dd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 fa95 	bl	80122f6 <USBD_CtlSendStatus>
 8011dcc:	e000      	b.n	8011dd0 <USBD_GetDescriptor+0x320>
    return;
 8011dce:	bf00      	nop
  }
}
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop

08011dd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	889b      	ldrh	r3, [r3, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d131      	bne.n	8011e4e <USBD_SetAddress+0x76>
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	88db      	ldrh	r3, [r3, #6]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d12d      	bne.n	8011e4e <USBD_SetAddress+0x76>
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	885b      	ldrh	r3, [r3, #2]
 8011df6:	2b7f      	cmp	r3, #127	; 0x7f
 8011df8:	d829      	bhi.n	8011e4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	885b      	ldrh	r3, [r3, #2]
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	2b03      	cmp	r3, #3
 8011e10:	d104      	bne.n	8011e1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 f9a3 	bl	8012160 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e1a:	e01d      	b.n	8011e58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	7bfa      	ldrb	r2, [r7, #15]
 8011e20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 ff51 	bl	8012cd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fa61 	bl	80122f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011e34:	7bfb      	ldrb	r3, [r7, #15]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d004      	beq.n	8011e44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2202      	movs	r2, #2
 8011e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e42:	e009      	b.n	8011e58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2201      	movs	r2, #1
 8011e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e4c:	e004      	b.n	8011e58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e4e:	6839      	ldr	r1, [r7, #0]
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 f985 	bl	8012160 <USBD_CtlError>
  }
}
 8011e56:	bf00      	nop
 8011e58:	bf00      	nop
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	885b      	ldrh	r3, [r3, #2]
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	4b4c      	ldr	r3, [pc, #304]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011e76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e78:	4b4b      	ldr	r3, [pc, #300]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d905      	bls.n	8011e8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 f96c 	bl	8012160 <USBD_CtlError>
    return USBD_FAIL;
 8011e88:	2303      	movs	r3, #3
 8011e8a:	e088      	b.n	8011f9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d002      	beq.n	8011e9e <USBD_SetConfig+0x3e>
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d025      	beq.n	8011ee8 <USBD_SetConfig+0x88>
 8011e9c:	e071      	b.n	8011f82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e9e:	4b42      	ldr	r3, [pc, #264]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d01c      	beq.n	8011ee0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011ea6:	4b40      	ldr	r3, [pc, #256]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011eb0:	4b3d      	ldr	r3, [pc, #244]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7ff f992 	bl	80111e0 <USBD_SetClassConfig>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d004      	beq.n	8011ed0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011ec6:	6839      	ldr	r1, [r7, #0]
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 f949 	bl	8012160 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011ece:	e065      	b.n	8011f9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 fa10 	bl	80122f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2203      	movs	r2, #3
 8011eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011ede:	e05d      	b.n	8011f9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 fa08 	bl	80122f6 <USBD_CtlSendStatus>
      break;
 8011ee6:	e059      	b.n	8011f9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011ee8:	4b2f      	ldr	r3, [pc, #188]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d112      	bne.n	8011f16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2202      	movs	r2, #2
 8011ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011ef8:	4b2b      	ldr	r3, [pc, #172]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	461a      	mov	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f02:	4b29      	ldr	r3, [pc, #164]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff f985 	bl	8011218 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f9f1 	bl	80122f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011f14:	e042      	b.n	8011f9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011f16:	4b24      	ldr	r3, [pc, #144]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d02a      	beq.n	8011f7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff f973 	bl	8011218 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011f32:	4b1d      	ldr	r3, [pc, #116]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f3c:	4b1a      	ldr	r3, [pc, #104]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff f94c 	bl	80111e0 <USBD_SetClassConfig>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011f4c:	7bfb      	ldrb	r3, [r7, #15]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00f      	beq.n	8011f72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011f52:	6839      	ldr	r1, [r7, #0]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f903 	bl	8012160 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	4619      	mov	r1, r3
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ff f958 	bl	8011218 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2202      	movs	r2, #2
 8011f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011f70:	e014      	b.n	8011f9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f000 f9bf 	bl	80122f6 <USBD_CtlSendStatus>
      break;
 8011f78:	e010      	b.n	8011f9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 f9bb 	bl	80122f6 <USBD_CtlSendStatus>
      break;
 8011f80:	e00c      	b.n	8011f9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011f82:	6839      	ldr	r1, [r7, #0]
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 f8eb 	bl	8012160 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f8a:	4b07      	ldr	r3, [pc, #28]	; (8011fa8 <USBD_SetConfig+0x148>)
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7ff f941 	bl	8011218 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f96:	2303      	movs	r3, #3
 8011f98:	73fb      	strb	r3, [r7, #15]
      break;
 8011f9a:	bf00      	nop
  }

  return ret;
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	200011d0 	.word	0x200011d0

08011fac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	88db      	ldrh	r3, [r3, #6]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d004      	beq.n	8011fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 f8cd 	bl	8012160 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011fc6:	e023      	b.n	8012010 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	dc02      	bgt.n	8011fda <USBD_GetConfig+0x2e>
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	dc03      	bgt.n	8011fe0 <USBD_GetConfig+0x34>
 8011fd8:	e015      	b.n	8012006 <USBD_GetConfig+0x5a>
 8011fda:	2b03      	cmp	r3, #3
 8011fdc:	d00b      	beq.n	8011ff6 <USBD_GetConfig+0x4a>
 8011fde:	e012      	b.n	8012006 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	3308      	adds	r3, #8
 8011fea:	2201      	movs	r2, #1
 8011fec:	4619      	mov	r1, r3
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 f927 	bl	8012242 <USBD_CtlSendData>
        break;
 8011ff4:	e00c      	b.n	8012010 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 f91f 	bl	8012242 <USBD_CtlSendData>
        break;
 8012004:	e004      	b.n	8012010 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012006:	6839      	ldr	r1, [r7, #0]
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f000 f8a9 	bl	8012160 <USBD_CtlError>
        break;
 801200e:	bf00      	nop
}
 8012010:	bf00      	nop
 8012012:	3708      	adds	r7, #8
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012028:	b2db      	uxtb	r3, r3
 801202a:	3b01      	subs	r3, #1
 801202c:	2b02      	cmp	r3, #2
 801202e:	d81e      	bhi.n	801206e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	88db      	ldrh	r3, [r3, #6]
 8012034:	2b02      	cmp	r3, #2
 8012036:	d004      	beq.n	8012042 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012038:	6839      	ldr	r1, [r7, #0]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 f890 	bl	8012160 <USBD_CtlError>
        break;
 8012040:	e01a      	b.n	8012078 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801204e:	2b00      	cmp	r3, #0
 8012050:	d005      	beq.n	801205e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	f043 0202 	orr.w	r2, r3, #2
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	330c      	adds	r3, #12
 8012062:	2202      	movs	r2, #2
 8012064:	4619      	mov	r1, r3
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f8eb 	bl	8012242 <USBD_CtlSendData>
      break;
 801206c:	e004      	b.n	8012078 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f875 	bl	8012160 <USBD_CtlError>
      break;
 8012076:	bf00      	nop
  }
}
 8012078:	bf00      	nop
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	885b      	ldrh	r3, [r3, #2]
 801208e:	2b01      	cmp	r3, #1
 8012090:	d106      	bne.n	80120a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2201      	movs	r2, #1
 8012096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f92b 	bl	80122f6 <USBD_CtlSendStatus>
  }
}
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	3b01      	subs	r3, #1
 80120bc:	2b02      	cmp	r3, #2
 80120be:	d80b      	bhi.n	80120d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	885b      	ldrh	r3, [r3, #2]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d10c      	bne.n	80120e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 f910 	bl	80122f6 <USBD_CtlSendStatus>
      }
      break;
 80120d6:	e004      	b.n	80120e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f840 	bl	8012160 <USBD_CtlError>
      break;
 80120e0:	e000      	b.n	80120e4 <USBD_ClrFeature+0x3c>
      break;
 80120e2:	bf00      	nop
  }
}
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	781a      	ldrb	r2, [r3, #0]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	3301      	adds	r3, #1
 8012106:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	3301      	adds	r3, #1
 8012114:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f7ff fa92 	bl	8011640 <SWAPBYTE>
 801211c:	4603      	mov	r3, r0
 801211e:	461a      	mov	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3301      	adds	r3, #1
 8012128:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	3301      	adds	r3, #1
 801212e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7ff fa85 	bl	8011640 <SWAPBYTE>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	3301      	adds	r3, #1
 8012142:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	3301      	adds	r3, #1
 8012148:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f7ff fa78 	bl	8011640 <SWAPBYTE>
 8012150:	4603      	mov	r3, r0
 8012152:	461a      	mov	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	80da      	strh	r2, [r3, #6]
}
 8012158:	bf00      	nop
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801216a:	2180      	movs	r1, #128	; 0x80
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f000 fd15 	bl	8012b9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012172:	2100      	movs	r1, #0
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 fd11 	bl	8012b9c <USBD_LL_StallEP>
}
 801217a:	bf00      	nop
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b086      	sub	sp, #24
 8012186:	af00      	add	r7, sp, #0
 8012188:	60f8      	str	r0, [r7, #12]
 801218a:	60b9      	str	r1, [r7, #8]
 801218c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801218e:	2300      	movs	r3, #0
 8012190:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d036      	beq.n	8012206 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801219c:	6938      	ldr	r0, [r7, #16]
 801219e:	f000 f836 	bl	801220e <USBD_GetLen>
 80121a2:	4603      	mov	r3, r0
 80121a4:	3301      	adds	r3, #1
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	005b      	lsls	r3, r3, #1
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80121b0:	7dfb      	ldrb	r3, [r7, #23]
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	4413      	add	r3, r2
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	7812      	ldrb	r2, [r2, #0]
 80121ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80121bc:	7dfb      	ldrb	r3, [r7, #23]
 80121be:	3301      	adds	r3, #1
 80121c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	4413      	add	r3, r2
 80121c8:	2203      	movs	r2, #3
 80121ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80121cc:	7dfb      	ldrb	r3, [r7, #23]
 80121ce:	3301      	adds	r3, #1
 80121d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80121d2:	e013      	b.n	80121fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80121d4:	7dfb      	ldrb	r3, [r7, #23]
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	4413      	add	r3, r2
 80121da:	693a      	ldr	r2, [r7, #16]
 80121dc:	7812      	ldrb	r2, [r2, #0]
 80121de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	3301      	adds	r3, #1
 80121e4:	613b      	str	r3, [r7, #16]
    idx++;
 80121e6:	7dfb      	ldrb	r3, [r7, #23]
 80121e8:	3301      	adds	r3, #1
 80121ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80121ec:	7dfb      	ldrb	r3, [r7, #23]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	4413      	add	r3, r2
 80121f2:	2200      	movs	r2, #0
 80121f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80121f6:	7dfb      	ldrb	r3, [r7, #23]
 80121f8:	3301      	adds	r3, #1
 80121fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1e7      	bne.n	80121d4 <USBD_GetString+0x52>
 8012204:	e000      	b.n	8012208 <USBD_GetString+0x86>
    return;
 8012206:	bf00      	nop
  }
}
 8012208:	3718      	adds	r7, #24
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801220e:	b480      	push	{r7}
 8012210:	b085      	sub	sp, #20
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012216:	2300      	movs	r3, #0
 8012218:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801221e:	e005      	b.n	801222c <USBD_GetLen+0x1e>
  {
    len++;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
 8012222:	3301      	adds	r3, #1
 8012224:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	3301      	adds	r3, #1
 801222a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d1f5      	bne.n	8012220 <USBD_GetLen+0x12>
  }

  return len;
 8012234:	7bfb      	ldrb	r3, [r7, #15]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3714      	adds	r7, #20
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b084      	sub	sp, #16
 8012246:	af00      	add	r7, sp, #0
 8012248:	60f8      	str	r0, [r7, #12]
 801224a:	60b9      	str	r1, [r7, #8]
 801224c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2202      	movs	r2, #2
 8012252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	2100      	movs	r1, #0
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 fd67 	bl	8012d3c <USBD_LL_Transmit>

  return USBD_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	68ba      	ldr	r2, [r7, #8]
 8012288:	2100      	movs	r1, #0
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f000 fd56 	bl	8012d3c <USBD_LL_Transmit>

  return USBD_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b084      	sub	sp, #16
 801229e:	af00      	add	r7, sp, #0
 80122a0:	60f8      	str	r0, [r7, #12]
 80122a2:	60b9      	str	r1, [r7, #8]
 80122a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2203      	movs	r2, #3
 80122aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	2100      	movs	r1, #0
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f000 fd71 	bl	8012dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3710      	adds	r7, #16
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	68ba      	ldr	r2, [r7, #8]
 80122e4:	2100      	movs	r1, #0
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f000 fd60 	bl	8012dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b082      	sub	sp, #8
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2204      	movs	r2, #4
 8012302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012306:	2300      	movs	r3, #0
 8012308:	2200      	movs	r2, #0
 801230a:	2100      	movs	r1, #0
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fd15 	bl	8012d3c <USBD_LL_Transmit>

  return USBD_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2205      	movs	r2, #5
 8012328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801232c:	2300      	movs	r3, #0
 801232e:	2200      	movs	r2, #0
 8012330:	2100      	movs	r1, #0
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 fd3a 	bl	8012dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012338:	2300      	movs	r3, #0
}
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
	...

08012344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012348:	2200      	movs	r2, #0
 801234a:	4912      	ldr	r1, [pc, #72]	; (8012394 <MX_USB_DEVICE_Init+0x50>)
 801234c:	4812      	ldr	r0, [pc, #72]	; (8012398 <MX_USB_DEVICE_Init+0x54>)
 801234e:	f7fe fed9 	bl	8011104 <USBD_Init>
 8012352:	4603      	mov	r3, r0
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012358:	f7f2 fe2c 	bl	8004fb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801235c:	490f      	ldr	r1, [pc, #60]	; (801239c <MX_USB_DEVICE_Init+0x58>)
 801235e:	480e      	ldr	r0, [pc, #56]	; (8012398 <MX_USB_DEVICE_Init+0x54>)
 8012360:	f7fe ff00 	bl	8011164 <USBD_RegisterClass>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801236a:	f7f2 fe23 	bl	8004fb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801236e:	490c      	ldr	r1, [pc, #48]	; (80123a0 <MX_USB_DEVICE_Init+0x5c>)
 8012370:	4809      	ldr	r0, [pc, #36]	; (8012398 <MX_USB_DEVICE_Init+0x54>)
 8012372:	f7fe fe21 	bl	8010fb8 <USBD_CDC_RegisterInterface>
 8012376:	4603      	mov	r3, r0
 8012378:	2b00      	cmp	r3, #0
 801237a:	d001      	beq.n	8012380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801237c:	f7f2 fe1a 	bl	8004fb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012380:	4805      	ldr	r0, [pc, #20]	; (8012398 <MX_USB_DEVICE_Init+0x54>)
 8012382:	f7fe ff16 	bl	80111b2 <USBD_Start>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801238c:	f7f2 fe12 	bl	8004fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012390:	bf00      	nop
 8012392:	bd80      	pop	{r7, pc}
 8012394:	20000130 	.word	0x20000130
 8012398:	200011d4 	.word	0x200011d4
 801239c:	20000018 	.word	0x20000018
 80123a0:	2000011c 	.word	0x2000011c

080123a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80123a8:	2200      	movs	r2, #0
 80123aa:	4905      	ldr	r1, [pc, #20]	; (80123c0 <CDC_Init_FS+0x1c>)
 80123ac:	4805      	ldr	r0, [pc, #20]	; (80123c4 <CDC_Init_FS+0x20>)
 80123ae:	f7fe fe18 	bl	8010fe2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80123b2:	4905      	ldr	r1, [pc, #20]	; (80123c8 <CDC_Init_FS+0x24>)
 80123b4:	4803      	ldr	r0, [pc, #12]	; (80123c4 <CDC_Init_FS+0x20>)
 80123b6:	f7fe fe32 	bl	801101e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80123ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80123bc:	4618      	mov	r0, r3
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	200018a4 	.word	0x200018a4
 80123c4:	200011d4 	.word	0x200011d4
 80123c8:	200014a4 	.word	0x200014a4

080123cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80123cc:	b480      	push	{r7}
 80123ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80123d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	6039      	str	r1, [r7, #0]
 80123e6:	71fb      	strb	r3, [r7, #7]
 80123e8:	4613      	mov	r3, r2
 80123ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80123ec:	79fb      	ldrb	r3, [r7, #7]
 80123ee:	2b23      	cmp	r3, #35	; 0x23
 80123f0:	d84a      	bhi.n	8012488 <CDC_Control_FS+0xac>
 80123f2:	a201      	add	r2, pc, #4	; (adr r2, 80123f8 <CDC_Control_FS+0x1c>)
 80123f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123f8:	08012489 	.word	0x08012489
 80123fc:	08012489 	.word	0x08012489
 8012400:	08012489 	.word	0x08012489
 8012404:	08012489 	.word	0x08012489
 8012408:	08012489 	.word	0x08012489
 801240c:	08012489 	.word	0x08012489
 8012410:	08012489 	.word	0x08012489
 8012414:	08012489 	.word	0x08012489
 8012418:	08012489 	.word	0x08012489
 801241c:	08012489 	.word	0x08012489
 8012420:	08012489 	.word	0x08012489
 8012424:	08012489 	.word	0x08012489
 8012428:	08012489 	.word	0x08012489
 801242c:	08012489 	.word	0x08012489
 8012430:	08012489 	.word	0x08012489
 8012434:	08012489 	.word	0x08012489
 8012438:	08012489 	.word	0x08012489
 801243c:	08012489 	.word	0x08012489
 8012440:	08012489 	.word	0x08012489
 8012444:	08012489 	.word	0x08012489
 8012448:	08012489 	.word	0x08012489
 801244c:	08012489 	.word	0x08012489
 8012450:	08012489 	.word	0x08012489
 8012454:	08012489 	.word	0x08012489
 8012458:	08012489 	.word	0x08012489
 801245c:	08012489 	.word	0x08012489
 8012460:	08012489 	.word	0x08012489
 8012464:	08012489 	.word	0x08012489
 8012468:	08012489 	.word	0x08012489
 801246c:	08012489 	.word	0x08012489
 8012470:	08012489 	.word	0x08012489
 8012474:	08012489 	.word	0x08012489
 8012478:	08012489 	.word	0x08012489
 801247c:	08012489 	.word	0x08012489
 8012480:	08012489 	.word	0x08012489
 8012484:	08012489 	.word	0x08012489
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012488:	bf00      	nop
  }

  return (USBD_OK);
 801248a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801248c:	4618      	mov	r0, r3
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80124a2:	6879      	ldr	r1, [r7, #4]
 80124a4:	4805      	ldr	r0, [pc, #20]	; (80124bc <CDC_Receive_FS+0x24>)
 80124a6:	f7fe fdba 	bl	801101e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80124aa:	4804      	ldr	r0, [pc, #16]	; (80124bc <CDC_Receive_FS+0x24>)
 80124ac:	f7fe fe00 	bl	80110b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80124b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	200011d4 	.word	0x200011d4

080124c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	460b      	mov	r3, r1
 80124ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80124cc:	2300      	movs	r3, #0
 80124ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80124d0:	4b0d      	ldr	r3, [pc, #52]	; (8012508 <CDC_Transmit_FS+0x48>)
 80124d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d001      	beq.n	80124e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80124e2:	2301      	movs	r3, #1
 80124e4:	e00b      	b.n	80124fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80124e6:	887b      	ldrh	r3, [r7, #2]
 80124e8:	461a      	mov	r2, r3
 80124ea:	6879      	ldr	r1, [r7, #4]
 80124ec:	4806      	ldr	r0, [pc, #24]	; (8012508 <CDC_Transmit_FS+0x48>)
 80124ee:	f7fe fd78 	bl	8010fe2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80124f2:	4805      	ldr	r0, [pc, #20]	; (8012508 <CDC_Transmit_FS+0x48>)
 80124f4:	f7fe fdac 	bl	8011050 <USBD_CDC_TransmitPacket>
 80124f8:	4603      	mov	r3, r0
 80124fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80124fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	200011d4 	.word	0x200011d4

0801250c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801250c:	b480      	push	{r7}
 801250e:	b087      	sub	sp, #28
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	4613      	mov	r3, r2
 8012518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801251e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012522:	4618      	mov	r0, r3
 8012524:	371c      	adds	r7, #28
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
	...

08012530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	4603      	mov	r3, r0
 8012538:	6039      	str	r1, [r7, #0]
 801253a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2212      	movs	r2, #18
 8012540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012542:	4b03      	ldr	r3, [pc, #12]	; (8012550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012544:	4618      	mov	r0, r3
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	20000150 	.word	0x20000150

08012554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	4603      	mov	r3, r0
 801255c:	6039      	str	r1, [r7, #0]
 801255e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	2204      	movs	r2, #4
 8012564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012566:	4b03      	ldr	r3, [pc, #12]	; (8012574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012568:	4618      	mov	r0, r3
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	20000170 	.word	0x20000170

08012578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	4603      	mov	r3, r0
 8012580:	6039      	str	r1, [r7, #0]
 8012582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012584:	79fb      	ldrb	r3, [r7, #7]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d105      	bne.n	8012596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	4907      	ldr	r1, [pc, #28]	; (80125ac <USBD_FS_ProductStrDescriptor+0x34>)
 801258e:	4808      	ldr	r0, [pc, #32]	; (80125b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012590:	f7ff fdf7 	bl	8012182 <USBD_GetString>
 8012594:	e004      	b.n	80125a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	4904      	ldr	r1, [pc, #16]	; (80125ac <USBD_FS_ProductStrDescriptor+0x34>)
 801259a:	4805      	ldr	r0, [pc, #20]	; (80125b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801259c:	f7ff fdf1 	bl	8012182 <USBD_GetString>
  }
  return USBD_StrDesc;
 80125a0:	4b02      	ldr	r3, [pc, #8]	; (80125ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	20001ca4 	.word	0x20001ca4
 80125b0:	08019158 	.word	0x08019158

080125b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	4603      	mov	r3, r0
 80125bc:	6039      	str	r1, [r7, #0]
 80125be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80125c0:	683a      	ldr	r2, [r7, #0]
 80125c2:	4904      	ldr	r1, [pc, #16]	; (80125d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80125c4:	4804      	ldr	r0, [pc, #16]	; (80125d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80125c6:	f7ff fddc 	bl	8012182 <USBD_GetString>
  return USBD_StrDesc;
 80125ca:	4b02      	ldr	r3, [pc, #8]	; (80125d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	20001ca4 	.word	0x20001ca4
 80125d8:	08019170 	.word	0x08019170

080125dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	4603      	mov	r3, r0
 80125e4:	6039      	str	r1, [r7, #0]
 80125e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	221a      	movs	r2, #26
 80125ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80125ee:	f000 f855 	bl	801269c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80125f2:	4b02      	ldr	r3, [pc, #8]	; (80125fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	20000174 	.word	0x20000174

08012600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b082      	sub	sp, #8
 8012604:	af00      	add	r7, sp, #0
 8012606:	4603      	mov	r3, r0
 8012608:	6039      	str	r1, [r7, #0]
 801260a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d105      	bne.n	801261e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	4907      	ldr	r1, [pc, #28]	; (8012634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012616:	4808      	ldr	r0, [pc, #32]	; (8012638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012618:	f7ff fdb3 	bl	8012182 <USBD_GetString>
 801261c:	e004      	b.n	8012628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	4904      	ldr	r1, [pc, #16]	; (8012634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012622:	4805      	ldr	r0, [pc, #20]	; (8012638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012624:	f7ff fdad 	bl	8012182 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012628:	4b02      	ldr	r3, [pc, #8]	; (8012634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801262a:	4618      	mov	r0, r3
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	20001ca4 	.word	0x20001ca4
 8012638:	08019184 	.word	0x08019184

0801263c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	4603      	mov	r3, r0
 8012644:	6039      	str	r1, [r7, #0]
 8012646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012648:	79fb      	ldrb	r3, [r7, #7]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d105      	bne.n	801265a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801264e:	683a      	ldr	r2, [r7, #0]
 8012650:	4907      	ldr	r1, [pc, #28]	; (8012670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012652:	4808      	ldr	r0, [pc, #32]	; (8012674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012654:	f7ff fd95 	bl	8012182 <USBD_GetString>
 8012658:	e004      	b.n	8012664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801265a:	683a      	ldr	r2, [r7, #0]
 801265c:	4904      	ldr	r1, [pc, #16]	; (8012670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801265e:	4805      	ldr	r0, [pc, #20]	; (8012674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012660:	f7ff fd8f 	bl	8012182 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012664:	4b02      	ldr	r3, [pc, #8]	; (8012670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	20001ca4 	.word	0x20001ca4
 8012674:	08019190 	.word	0x08019190

08012678 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	4603      	mov	r3, r0
 8012680:	6039      	str	r1, [r7, #0]
 8012682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	220c      	movs	r2, #12
 8012688:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801268a:	4b03      	ldr	r3, [pc, #12]	; (8012698 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	20000164 	.word	0x20000164

0801269c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80126a2:	4b0f      	ldr	r3, [pc, #60]	; (80126e0 <Get_SerialNum+0x44>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80126a8:	4b0e      	ldr	r3, [pc, #56]	; (80126e4 <Get_SerialNum+0x48>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80126ae:	4b0e      	ldr	r3, [pc, #56]	; (80126e8 <Get_SerialNum+0x4c>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4413      	add	r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d009      	beq.n	80126d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80126c2:	2208      	movs	r2, #8
 80126c4:	4909      	ldr	r1, [pc, #36]	; (80126ec <Get_SerialNum+0x50>)
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f000 f814 	bl	80126f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80126cc:	2204      	movs	r2, #4
 80126ce:	4908      	ldr	r1, [pc, #32]	; (80126f0 <Get_SerialNum+0x54>)
 80126d0:	68b8      	ldr	r0, [r7, #8]
 80126d2:	f000 f80f 	bl	80126f4 <IntToUnicode>
  }
}
 80126d6:	bf00      	nop
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	1fff7590 	.word	0x1fff7590
 80126e4:	1fff7594 	.word	0x1fff7594
 80126e8:	1fff7598 	.word	0x1fff7598
 80126ec:	20000176 	.word	0x20000176
 80126f0:	20000186 	.word	0x20000186

080126f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b087      	sub	sp, #28
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	4613      	mov	r3, r2
 8012700:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012706:	2300      	movs	r3, #0
 8012708:	75fb      	strb	r3, [r7, #23]
 801270a:	e027      	b.n	801275c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	0f1b      	lsrs	r3, r3, #28
 8012710:	2b09      	cmp	r3, #9
 8012712:	d80b      	bhi.n	801272c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	0f1b      	lsrs	r3, r3, #28
 8012718:	b2da      	uxtb	r2, r3
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	4619      	mov	r1, r3
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	440b      	add	r3, r1
 8012724:	3230      	adds	r2, #48	; 0x30
 8012726:	b2d2      	uxtb	r2, r2
 8012728:	701a      	strb	r2, [r3, #0]
 801272a:	e00a      	b.n	8012742 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	0f1b      	lsrs	r3, r3, #28
 8012730:	b2da      	uxtb	r2, r3
 8012732:	7dfb      	ldrb	r3, [r7, #23]
 8012734:	005b      	lsls	r3, r3, #1
 8012736:	4619      	mov	r1, r3
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	440b      	add	r3, r1
 801273c:	3237      	adds	r2, #55	; 0x37
 801273e:	b2d2      	uxtb	r2, r2
 8012740:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	011b      	lsls	r3, r3, #4
 8012746:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012748:	7dfb      	ldrb	r3, [r7, #23]
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	3301      	adds	r3, #1
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	4413      	add	r3, r2
 8012752:	2200      	movs	r2, #0
 8012754:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	3301      	adds	r3, #1
 801275a:	75fb      	strb	r3, [r7, #23]
 801275c:	7dfa      	ldrb	r2, [r7, #23]
 801275e:	79fb      	ldrb	r3, [r7, #7]
 8012760:	429a      	cmp	r2, r3
 8012762:	d3d3      	bcc.n	801270c <IntToUnicode+0x18>
  }
}
 8012764:	bf00      	nop
 8012766:	bf00      	nop
 8012768:	371c      	adds	r7, #28
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
	...

08012774 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b096      	sub	sp, #88	; 0x58
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801277c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012780:	2200      	movs	r2, #0
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	605a      	str	r2, [r3, #4]
 8012786:	609a      	str	r2, [r3, #8]
 8012788:	60da      	str	r2, [r3, #12]
 801278a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801278c:	f107 0310 	add.w	r3, r7, #16
 8012790:	2234      	movs	r2, #52	; 0x34
 8012792:	2100      	movs	r1, #0
 8012794:	4618      	mov	r0, r3
 8012796:	f000 fbd3 	bl	8012f40 <memset>
  if(pcdHandle->Instance==USB)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4a24      	ldr	r2, [pc, #144]	; (8012830 <HAL_PCD_MspInit+0xbc>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d141      	bne.n	8012828 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80127a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80127aa:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80127ae:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80127b0:	f107 0310 	add.w	r3, r7, #16
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7f8 fcb3 	bl	800b120 <HAL_RCCEx_PeriphCLKConfig>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d001      	beq.n	80127c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80127c0:	f7f2 fbf8 	bl	8004fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80127c4:	4b1b      	ldr	r3, [pc, #108]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 80127c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127c8:	4a1a      	ldr	r2, [pc, #104]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 80127ca:	f043 0301 	orr.w	r3, r3, #1
 80127ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80127d0:	4b18      	ldr	r3, [pc, #96]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 80127d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127d4:	f003 0301 	and.w	r3, r3, #1
 80127d8:	60fb      	str	r3, [r7, #12]
 80127da:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80127dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80127e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127e2:	2302      	movs	r3, #2
 80127e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127e6:	2300      	movs	r3, #0
 80127e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127ea:	2303      	movs	r3, #3
 80127ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80127ee:	230a      	movs	r3, #10
 80127f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80127f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80127f6:	4619      	mov	r1, r3
 80127f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80127fc:	f7f3 fd8c 	bl	8006318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012800:	4b0c      	ldr	r3, [pc, #48]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 8012802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012804:	4a0b      	ldr	r2, [pc, #44]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 8012806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801280a:	6593      	str	r3, [r2, #88]	; 0x58
 801280c:	4b09      	ldr	r3, [pc, #36]	; (8012834 <HAL_PCD_MspInit+0xc0>)
 801280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012814:	60bb      	str	r3, [r7, #8]
 8012816:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8012818:	2200      	movs	r2, #0
 801281a:	2100      	movs	r1, #0
 801281c:	2043      	movs	r0, #67	; 0x43
 801281e:	f7f3 fac0 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012822:	2043      	movs	r0, #67	; 0x43
 8012824:	f7f3 fad9 	bl	8005dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012828:	bf00      	nop
 801282a:	3758      	adds	r7, #88	; 0x58
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	40006800 	.word	0x40006800
 8012834:	40021000 	.word	0x40021000

08012838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 801284c:	4619      	mov	r1, r3
 801284e:	4610      	mov	r0, r2
 8012850:	f7fe fcfa 	bl	8011248 <USBD_LL_SetupStage>
}
 8012854:	bf00      	nop
 8012856:	3708      	adds	r7, #8
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 801286e:	78fa      	ldrb	r2, [r7, #3]
 8012870:	6879      	ldr	r1, [r7, #4]
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	440b      	add	r3, r1
 801287c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	78fb      	ldrb	r3, [r7, #3]
 8012884:	4619      	mov	r1, r3
 8012886:	f7fe fd34 	bl	80112f2 <USBD_LL_DataOutStage>
}
 801288a:	bf00      	nop
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012892:	b580      	push	{r7, lr}
 8012894:	b082      	sub	sp, #8
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
 801289a:	460b      	mov	r3, r1
 801289c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 80128a4:	78fa      	ldrb	r2, [r7, #3]
 80128a6:	6879      	ldr	r1, [r7, #4]
 80128a8:	4613      	mov	r3, r2
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4413      	add	r3, r2
 80128ae:	00db      	lsls	r3, r3, #3
 80128b0:	440b      	add	r3, r1
 80128b2:	3340      	adds	r3, #64	; 0x40
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	78fb      	ldrb	r3, [r7, #3]
 80128b8:	4619      	mov	r1, r3
 80128ba:	f7fe fd7d 	bl	80113b8 <USBD_LL_DataInStage>
}
 80128be:	bf00      	nop
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b082      	sub	sp, #8
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fe fe91 	bl	80115fc <USBD_LL_SOF>
}
 80128da:	bf00      	nop
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b084      	sub	sp, #16
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80128ea:	2301      	movs	r3, #1
 80128ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	689b      	ldr	r3, [r3, #8]
 80128f2:	2b02      	cmp	r3, #2
 80128f4:	d001      	beq.n	80128fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80128f6:	f7f2 fb5d 	bl	8004fb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012900:	7bfa      	ldrb	r2, [r7, #15]
 8012902:	4611      	mov	r1, r2
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe fe3b 	bl	8011580 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012910:	4618      	mov	r0, r3
 8012912:	f7fe fde7 	bl	80114e4 <USBD_LL_Reset>
}
 8012916:	bf00      	nop
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
	...

08012920 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe fe36 	bl	80115a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d005      	beq.n	8012948 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801293c:	4b04      	ldr	r3, [pc, #16]	; (8012950 <HAL_PCD_SuspendCallback+0x30>)
 801293e:	691b      	ldr	r3, [r3, #16]
 8012940:	4a03      	ldr	r2, [pc, #12]	; (8012950 <HAL_PCD_SuspendCallback+0x30>)
 8012942:	f043 0306 	orr.w	r3, r3, #6
 8012946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012948:	bf00      	nop
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	e000ed00 	.word	0xe000ed00

08012954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	699b      	ldr	r3, [r3, #24]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d007      	beq.n	8012974 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012964:	4b08      	ldr	r3, [pc, #32]	; (8012988 <HAL_PCD_ResumeCallback+0x34>)
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	4a07      	ldr	r2, [pc, #28]	; (8012988 <HAL_PCD_ResumeCallback+0x34>)
 801296a:	f023 0306 	bic.w	r3, r3, #6
 801296e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012970:	f000 fab6 	bl	8012ee0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801297a:	4618      	mov	r0, r3
 801297c:	f7fe fe26 	bl	80115cc <USBD_LL_Resume>
}
 8012980:	bf00      	nop
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	e000ed00 	.word	0xe000ed00

0801298c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012994:	f7f7 fd2e 	bl	800a3f4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012998:	4a2b      	ldr	r2, [pc, #172]	; (8012a48 <USBD_LL_Init+0xbc>)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4a29      	ldr	r2, [pc, #164]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80129a8:	4b27      	ldr	r3, [pc, #156]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129aa:	4a28      	ldr	r2, [pc, #160]	; (8012a4c <USBD_LL_Init+0xc0>)
 80129ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80129ae:	4b26      	ldr	r3, [pc, #152]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129b0:	2208      	movs	r2, #8
 80129b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80129b4:	4b24      	ldr	r3, [pc, #144]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129b6:	2202      	movs	r2, #2
 80129b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80129ba:	4b23      	ldr	r3, [pc, #140]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129bc:	2202      	movs	r2, #2
 80129be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80129c0:	4b21      	ldr	r3, [pc, #132]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80129c6:	4b20      	ldr	r3, [pc, #128]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129c8:	2200      	movs	r2, #0
 80129ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80129cc:	4b1e      	ldr	r3, [pc, #120]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129ce:	2200      	movs	r2, #0
 80129d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80129d2:	4b1d      	ldr	r3, [pc, #116]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80129d8:	481b      	ldr	r0, [pc, #108]	; (8012a48 <USBD_LL_Init+0xbc>)
 80129da:	f7f5 ff1a 	bl	8008812 <HAL_PCD_Init>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80129e4:	f7f2 fae6 	bl	8004fb4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129ee:	2318      	movs	r3, #24
 80129f0:	2200      	movs	r2, #0
 80129f2:	2100      	movs	r1, #0
 80129f4:	f7f7 fc2a 	bl	800a24c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129fe:	2358      	movs	r3, #88	; 0x58
 8012a00:	2200      	movs	r2, #0
 8012a02:	2180      	movs	r1, #128	; 0x80
 8012a04:	f7f7 fc22 	bl	800a24c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a0e:	23c0      	movs	r3, #192	; 0xc0
 8012a10:	2200      	movs	r2, #0
 8012a12:	2181      	movs	r1, #129	; 0x81
 8012a14:	f7f7 fc1a 	bl	800a24c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012a22:	2200      	movs	r2, #0
 8012a24:	2101      	movs	r1, #1
 8012a26:	f7f7 fc11 	bl	800a24c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a34:	2200      	movs	r2, #0
 8012a36:	2182      	movs	r1, #130	; 0x82
 8012a38:	f7f7 fc08 	bl	800a24c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012a3c:	2300      	movs	r3, #0
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3708      	adds	r7, #8
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	20001ea4 	.word	0x20001ea4
 8012a4c:	40006800 	.word	0x40006800

08012a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7f5 ffea 	bl	8008a40 <HAL_PCD_Start>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012a70:	7bbb      	ldrb	r3, [r7, #14]
 8012a72:	2b03      	cmp	r3, #3
 8012a74:	d816      	bhi.n	8012aa4 <USBD_LL_Start+0x54>
 8012a76:	a201      	add	r2, pc, #4	; (adr r2, 8012a7c <USBD_LL_Start+0x2c>)
 8012a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a7c:	08012a8d 	.word	0x08012a8d
 8012a80:	08012a93 	.word	0x08012a93
 8012a84:	08012a99 	.word	0x08012a99
 8012a88:	08012a9f 	.word	0x08012a9f
    case HAL_OK :
      usb_status = USBD_OK;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a90:	e00b      	b.n	8012aaa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a92:	2303      	movs	r3, #3
 8012a94:	73fb      	strb	r3, [r7, #15]
    break;
 8012a96:	e008      	b.n	8012aaa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a9c:	e005      	b.n	8012aaa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a9e:	2303      	movs	r3, #3
 8012aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8012aa2:	e002      	b.n	8012aaa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8012aa8:	bf00      	nop
  }
  return usb_status;
 8012aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	4608      	mov	r0, r1
 8012abe:	4611      	mov	r1, r2
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	70fb      	strb	r3, [r7, #3]
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	70bb      	strb	r3, [r7, #2]
 8012aca:	4613      	mov	r3, r2
 8012acc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012adc:	78bb      	ldrb	r3, [r7, #2]
 8012ade:	883a      	ldrh	r2, [r7, #0]
 8012ae0:	78f9      	ldrb	r1, [r7, #3]
 8012ae2:	f7f6 f91b 	bl	8008d1c <HAL_PCD_EP_Open>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012aea:	7bbb      	ldrb	r3, [r7, #14]
 8012aec:	2b03      	cmp	r3, #3
 8012aee:	d817      	bhi.n	8012b20 <USBD_LL_OpenEP+0x6c>
 8012af0:	a201      	add	r2, pc, #4	; (adr r2, 8012af8 <USBD_LL_OpenEP+0x44>)
 8012af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af6:	bf00      	nop
 8012af8:	08012b09 	.word	0x08012b09
 8012afc:	08012b0f 	.word	0x08012b0f
 8012b00:	08012b15 	.word	0x08012b15
 8012b04:	08012b1b 	.word	0x08012b1b
    case HAL_OK :
      usb_status = USBD_OK;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b0c:	e00b      	b.n	8012b26 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b0e:	2303      	movs	r3, #3
 8012b10:	73fb      	strb	r3, [r7, #15]
    break;
 8012b12:	e008      	b.n	8012b26 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b14:	2301      	movs	r3, #1
 8012b16:	73fb      	strb	r3, [r7, #15]
    break;
 8012b18:	e005      	b.n	8012b26 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b1a:	2303      	movs	r3, #3
 8012b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b1e:	e002      	b.n	8012b26 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012b20:	2303      	movs	r3, #3
 8012b22:	73fb      	strb	r3, [r7, #15]
    break;
 8012b24:	bf00      	nop
  }
  return usb_status;
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3710      	adds	r7, #16
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	460b      	mov	r3, r1
 8012b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b40:	2300      	movs	r3, #0
 8012b42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b4a:	78fa      	ldrb	r2, [r7, #3]
 8012b4c:	4611      	mov	r1, r2
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7f6 f94c 	bl	8008dec <HAL_PCD_EP_Close>
 8012b54:	4603      	mov	r3, r0
 8012b56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012b58:	7bbb      	ldrb	r3, [r7, #14]
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	d816      	bhi.n	8012b8c <USBD_LL_CloseEP+0x5c>
 8012b5e:	a201      	add	r2, pc, #4	; (adr r2, 8012b64 <USBD_LL_CloseEP+0x34>)
 8012b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b64:	08012b75 	.word	0x08012b75
 8012b68:	08012b7b 	.word	0x08012b7b
 8012b6c:	08012b81 	.word	0x08012b81
 8012b70:	08012b87 	.word	0x08012b87
    case HAL_OK :
      usb_status = USBD_OK;
 8012b74:	2300      	movs	r3, #0
 8012b76:	73fb      	strb	r3, [r7, #15]
    break;
 8012b78:	e00b      	b.n	8012b92 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b7e:	e008      	b.n	8012b92 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b80:	2301      	movs	r3, #1
 8012b82:	73fb      	strb	r3, [r7, #15]
    break;
 8012b84:	e005      	b.n	8012b92 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b86:	2303      	movs	r3, #3
 8012b88:	73fb      	strb	r3, [r7, #15]
    break;
 8012b8a:	e002      	b.n	8012b92 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012b8c:	2303      	movs	r3, #3
 8012b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b90:	bf00      	nop
  }
  return usb_status;
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bac:	2300      	movs	r3, #0
 8012bae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012bb6:	78fa      	ldrb	r2, [r7, #3]
 8012bb8:	4611      	mov	r1, r2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f6 f9fa 	bl	8008fb4 <HAL_PCD_EP_SetStall>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012bc4:	7bbb      	ldrb	r3, [r7, #14]
 8012bc6:	2b03      	cmp	r3, #3
 8012bc8:	d816      	bhi.n	8012bf8 <USBD_LL_StallEP+0x5c>
 8012bca:	a201      	add	r2, pc, #4	; (adr r2, 8012bd0 <USBD_LL_StallEP+0x34>)
 8012bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd0:	08012be1 	.word	0x08012be1
 8012bd4:	08012be7 	.word	0x08012be7
 8012bd8:	08012bed 	.word	0x08012bed
 8012bdc:	08012bf3 	.word	0x08012bf3
    case HAL_OK :
      usb_status = USBD_OK;
 8012be0:	2300      	movs	r3, #0
 8012be2:	73fb      	strb	r3, [r7, #15]
    break;
 8012be4:	e00b      	b.n	8012bfe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012be6:	2303      	movs	r3, #3
 8012be8:	73fb      	strb	r3, [r7, #15]
    break;
 8012bea:	e008      	b.n	8012bfe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012bec:	2301      	movs	r3, #1
 8012bee:	73fb      	strb	r3, [r7, #15]
    break;
 8012bf0:	e005      	b.n	8012bfe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8012bf6:	e002      	b.n	8012bfe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012bf8:	2303      	movs	r3, #3
 8012bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8012bfc:	bf00      	nop
  }
  return usb_status;
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	460b      	mov	r3, r1
 8012c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c14:	2300      	movs	r3, #0
 8012c16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c22:	78fa      	ldrb	r2, [r7, #3]
 8012c24:	4611      	mov	r1, r2
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7f6 fa26 	bl	8009078 <HAL_PCD_EP_ClrStall>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012c30:	7bbb      	ldrb	r3, [r7, #14]
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	d816      	bhi.n	8012c64 <USBD_LL_ClearStallEP+0x5c>
 8012c36:	a201      	add	r2, pc, #4	; (adr r2, 8012c3c <USBD_LL_ClearStallEP+0x34>)
 8012c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c3c:	08012c4d 	.word	0x08012c4d
 8012c40:	08012c53 	.word	0x08012c53
 8012c44:	08012c59 	.word	0x08012c59
 8012c48:	08012c5f 	.word	0x08012c5f
    case HAL_OK :
      usb_status = USBD_OK;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8012c50:	e00b      	b.n	8012c6a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012c52:	2303      	movs	r3, #3
 8012c54:	73fb      	strb	r3, [r7, #15]
    break;
 8012c56:	e008      	b.n	8012c6a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8012c5c:	e005      	b.n	8012c6a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012c5e:	2303      	movs	r3, #3
 8012c60:	73fb      	strb	r3, [r7, #15]
    break;
 8012c62:	e002      	b.n	8012c6a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012c64:	2303      	movs	r3, #3
 8012c66:	73fb      	strb	r3, [r7, #15]
    break;
 8012c68:	bf00      	nop
  }
  return usb_status;
 8012c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3710      	adds	r7, #16
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b085      	sub	sp, #20
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	da0c      	bge.n	8012caa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c96:	68f9      	ldr	r1, [r7, #12]
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	00db      	lsls	r3, r3, #3
 8012ca2:	440b      	add	r3, r1
 8012ca4:	3306      	adds	r3, #6
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	e00b      	b.n	8012cc2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012caa:	78fb      	ldrb	r3, [r7, #3]
 8012cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012cb0:	68f9      	ldr	r1, [r7, #12]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	4413      	add	r3, r2
 8012cb8:	00db      	lsls	r3, r3, #3
 8012cba:	440b      	add	r3, r1
 8012cbc:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8012cc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
	...

08012cd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012cea:	78fa      	ldrb	r2, [r7, #3]
 8012cec:	4611      	mov	r1, r2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7f5 ffef 	bl	8008cd2 <HAL_PCD_SetAddress>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012cf8:	7bbb      	ldrb	r3, [r7, #14]
 8012cfa:	2b03      	cmp	r3, #3
 8012cfc:	d816      	bhi.n	8012d2c <USBD_LL_SetUSBAddress+0x5c>
 8012cfe:	a201      	add	r2, pc, #4	; (adr r2, 8012d04 <USBD_LL_SetUSBAddress+0x34>)
 8012d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d04:	08012d15 	.word	0x08012d15
 8012d08:	08012d1b 	.word	0x08012d1b
 8012d0c:	08012d21 	.word	0x08012d21
 8012d10:	08012d27 	.word	0x08012d27
    case HAL_OK :
      usb_status = USBD_OK;
 8012d14:	2300      	movs	r3, #0
 8012d16:	73fb      	strb	r3, [r7, #15]
    break;
 8012d18:	e00b      	b.n	8012d32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012d1e:	e008      	b.n	8012d32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d20:	2301      	movs	r3, #1
 8012d22:	73fb      	strb	r3, [r7, #15]
    break;
 8012d24:	e005      	b.n	8012d32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d26:	2303      	movs	r3, #3
 8012d28:	73fb      	strb	r3, [r7, #15]
    break;
 8012d2a:	e002      	b.n	8012d32 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012d2c:	2303      	movs	r3, #3
 8012d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d30:	bf00      	nop
  }
  return usb_status;
 8012d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b086      	sub	sp, #24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	607a      	str	r2, [r7, #4]
 8012d46:	603b      	str	r3, [r7, #0]
 8012d48:	460b      	mov	r3, r1
 8012d4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d50:	2300      	movs	r3, #0
 8012d52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012d5a:	7af9      	ldrb	r1, [r7, #11]
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	f7f6 f8e4 	bl	8008f2c <HAL_PCD_EP_Transmit>
 8012d64:	4603      	mov	r3, r0
 8012d66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012d68:	7dbb      	ldrb	r3, [r7, #22]
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	d816      	bhi.n	8012d9c <USBD_LL_Transmit+0x60>
 8012d6e:	a201      	add	r2, pc, #4	; (adr r2, 8012d74 <USBD_LL_Transmit+0x38>)
 8012d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d74:	08012d85 	.word	0x08012d85
 8012d78:	08012d8b 	.word	0x08012d8b
 8012d7c:	08012d91 	.word	0x08012d91
 8012d80:	08012d97 	.word	0x08012d97
    case HAL_OK :
      usb_status = USBD_OK;
 8012d84:	2300      	movs	r3, #0
 8012d86:	75fb      	strb	r3, [r7, #23]
    break;
 8012d88:	e00b      	b.n	8012da2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d8a:	2303      	movs	r3, #3
 8012d8c:	75fb      	strb	r3, [r7, #23]
    break;
 8012d8e:	e008      	b.n	8012da2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d90:	2301      	movs	r3, #1
 8012d92:	75fb      	strb	r3, [r7, #23]
    break;
 8012d94:	e005      	b.n	8012da2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d96:	2303      	movs	r3, #3
 8012d98:	75fb      	strb	r3, [r7, #23]
    break;
 8012d9a:	e002      	b.n	8012da2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	75fb      	strb	r3, [r7, #23]
    break;
 8012da0:	bf00      	nop
  }
  return usb_status;
 8012da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b086      	sub	sp, #24
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	607a      	str	r2, [r7, #4]
 8012db6:	603b      	str	r3, [r7, #0]
 8012db8:	460b      	mov	r3, r1
 8012dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012dca:	7af9      	ldrb	r1, [r7, #11]
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	f7f6 f856 	bl	8008e80 <HAL_PCD_EP_Receive>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012dd8:	7dbb      	ldrb	r3, [r7, #22]
 8012dda:	2b03      	cmp	r3, #3
 8012ddc:	d816      	bhi.n	8012e0c <USBD_LL_PrepareReceive+0x60>
 8012dde:	a201      	add	r2, pc, #4	; (adr r2, 8012de4 <USBD_LL_PrepareReceive+0x38>)
 8012de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de4:	08012df5 	.word	0x08012df5
 8012de8:	08012dfb 	.word	0x08012dfb
 8012dec:	08012e01 	.word	0x08012e01
 8012df0:	08012e07 	.word	0x08012e07
    case HAL_OK :
      usb_status = USBD_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75fb      	strb	r3, [r7, #23]
    break;
 8012df8:	e00b      	b.n	8012e12 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012dfa:	2303      	movs	r3, #3
 8012dfc:	75fb      	strb	r3, [r7, #23]
    break;
 8012dfe:	e008      	b.n	8012e12 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e00:	2301      	movs	r3, #1
 8012e02:	75fb      	strb	r3, [r7, #23]
    break;
 8012e04:	e005      	b.n	8012e12 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e06:	2303      	movs	r3, #3
 8012e08:	75fb      	strb	r3, [r7, #23]
    break;
 8012e0a:	e002      	b.n	8012e12 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	75fb      	strb	r3, [r7, #23]
    break;
 8012e10:	bf00      	nop
  }
  return usb_status;
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3718      	adds	r7, #24
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	460b      	mov	r3, r1
 8012e26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012e2e:	78fa      	ldrb	r2, [r7, #3]
 8012e30:	4611      	mov	r1, r2
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7f6 f862 	bl	8008efc <HAL_PCD_EP_GetRxCount>
 8012e38:	4603      	mov	r3, r0
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
	...

08012e44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012e50:	78fb      	ldrb	r3, [r7, #3]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d002      	beq.n	8012e5c <HAL_PCDEx_LPM_Callback+0x18>
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d013      	beq.n	8012e82 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012e5a:	e023      	b.n	8012ea4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	699b      	ldr	r3, [r3, #24]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d007      	beq.n	8012e74 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012e64:	f000 f83c 	bl	8012ee0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e68:	4b10      	ldr	r3, [pc, #64]	; (8012eac <HAL_PCDEx_LPM_Callback+0x68>)
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	4a0f      	ldr	r2, [pc, #60]	; (8012eac <HAL_PCDEx_LPM_Callback+0x68>)
 8012e6e:	f023 0306 	bic.w	r3, r3, #6
 8012e72:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fe fba6 	bl	80115cc <USBD_LL_Resume>
    break;
 8012e80:	e010      	b.n	8012ea4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fe fb89 	bl	80115a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d005      	beq.n	8012ea2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e96:	4b05      	ldr	r3, [pc, #20]	; (8012eac <HAL_PCDEx_LPM_Callback+0x68>)
 8012e98:	691b      	ldr	r3, [r3, #16]
 8012e9a:	4a04      	ldr	r2, [pc, #16]	; (8012eac <HAL_PCDEx_LPM_Callback+0x68>)
 8012e9c:	f043 0306 	orr.w	r3, r3, #6
 8012ea0:	6113      	str	r3, [r2, #16]
    break;
 8012ea2:	bf00      	nop
}
 8012ea4:	bf00      	nop
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	e000ed00 	.word	0xe000ed00

08012eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012eb8:	4b03      	ldr	r3, [pc, #12]	; (8012ec8 <USBD_static_malloc+0x18>)
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	370c      	adds	r7, #12
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	200021a0 	.word	0x200021a0

08012ecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]

}
 8012ed4:	bf00      	nop
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012ee4:	f7f1 f95a 	bl	800419c <SystemClock_Config>
}
 8012ee8:	bf00      	nop
 8012eea:	bd80      	pop	{r7, pc}

08012eec <__errno>:
 8012eec:	4b01      	ldr	r3, [pc, #4]	; (8012ef4 <__errno+0x8>)
 8012eee:	6818      	ldr	r0, [r3, #0]
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	20000190 	.word	0x20000190

08012ef8 <__libc_init_array>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	4d0d      	ldr	r5, [pc, #52]	; (8012f30 <__libc_init_array+0x38>)
 8012efc:	4c0d      	ldr	r4, [pc, #52]	; (8012f34 <__libc_init_array+0x3c>)
 8012efe:	1b64      	subs	r4, r4, r5
 8012f00:	10a4      	asrs	r4, r4, #2
 8012f02:	2600      	movs	r6, #0
 8012f04:	42a6      	cmp	r6, r4
 8012f06:	d109      	bne.n	8012f1c <__libc_init_array+0x24>
 8012f08:	4d0b      	ldr	r5, [pc, #44]	; (8012f38 <__libc_init_array+0x40>)
 8012f0a:	4c0c      	ldr	r4, [pc, #48]	; (8012f3c <__libc_init_array+0x44>)
 8012f0c:	f005 ff2e 	bl	8018d6c <_init>
 8012f10:	1b64      	subs	r4, r4, r5
 8012f12:	10a4      	asrs	r4, r4, #2
 8012f14:	2600      	movs	r6, #0
 8012f16:	42a6      	cmp	r6, r4
 8012f18:	d105      	bne.n	8012f26 <__libc_init_array+0x2e>
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f20:	4798      	blx	r3
 8012f22:	3601      	adds	r6, #1
 8012f24:	e7ee      	b.n	8012f04 <__libc_init_array+0xc>
 8012f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f2a:	4798      	blx	r3
 8012f2c:	3601      	adds	r6, #1
 8012f2e:	e7f2      	b.n	8012f16 <__libc_init_array+0x1e>
 8012f30:	08019f68 	.word	0x08019f68
 8012f34:	08019f68 	.word	0x08019f68
 8012f38:	08019f68 	.word	0x08019f68
 8012f3c:	08019f6c 	.word	0x08019f6c

08012f40 <memset>:
 8012f40:	4402      	add	r2, r0
 8012f42:	4603      	mov	r3, r0
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d100      	bne.n	8012f4a <memset+0xa>
 8012f48:	4770      	bx	lr
 8012f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8012f4e:	e7f9      	b.n	8012f44 <memset+0x4>

08012f50 <__cvt>:
 8012f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f54:	ec55 4b10 	vmov	r4, r5, d0
 8012f58:	2d00      	cmp	r5, #0
 8012f5a:	460e      	mov	r6, r1
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	462b      	mov	r3, r5
 8012f60:	bfbb      	ittet	lt
 8012f62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012f66:	461d      	movlt	r5, r3
 8012f68:	2300      	movge	r3, #0
 8012f6a:	232d      	movlt	r3, #45	; 0x2d
 8012f6c:	700b      	strb	r3, [r1, #0]
 8012f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012f74:	4691      	mov	r9, r2
 8012f76:	f023 0820 	bic.w	r8, r3, #32
 8012f7a:	bfbc      	itt	lt
 8012f7c:	4622      	movlt	r2, r4
 8012f7e:	4614      	movlt	r4, r2
 8012f80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f84:	d005      	beq.n	8012f92 <__cvt+0x42>
 8012f86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012f8a:	d100      	bne.n	8012f8e <__cvt+0x3e>
 8012f8c:	3601      	adds	r6, #1
 8012f8e:	2102      	movs	r1, #2
 8012f90:	e000      	b.n	8012f94 <__cvt+0x44>
 8012f92:	2103      	movs	r1, #3
 8012f94:	ab03      	add	r3, sp, #12
 8012f96:	9301      	str	r3, [sp, #4]
 8012f98:	ab02      	add	r3, sp, #8
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	ec45 4b10 	vmov	d0, r4, r5
 8012fa0:	4653      	mov	r3, sl
 8012fa2:	4632      	mov	r2, r6
 8012fa4:	f002 f9ec 	bl	8015380 <_dtoa_r>
 8012fa8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012fac:	4607      	mov	r7, r0
 8012fae:	d102      	bne.n	8012fb6 <__cvt+0x66>
 8012fb0:	f019 0f01 	tst.w	r9, #1
 8012fb4:	d022      	beq.n	8012ffc <__cvt+0xac>
 8012fb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012fba:	eb07 0906 	add.w	r9, r7, r6
 8012fbe:	d110      	bne.n	8012fe2 <__cvt+0x92>
 8012fc0:	783b      	ldrb	r3, [r7, #0]
 8012fc2:	2b30      	cmp	r3, #48	; 0x30
 8012fc4:	d10a      	bne.n	8012fdc <__cvt+0x8c>
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	2300      	movs	r3, #0
 8012fca:	4620      	mov	r0, r4
 8012fcc:	4629      	mov	r1, r5
 8012fce:	f7ed fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fd2:	b918      	cbnz	r0, 8012fdc <__cvt+0x8c>
 8012fd4:	f1c6 0601 	rsb	r6, r6, #1
 8012fd8:	f8ca 6000 	str.w	r6, [sl]
 8012fdc:	f8da 3000 	ldr.w	r3, [sl]
 8012fe0:	4499      	add	r9, r3
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	4629      	mov	r1, r5
 8012fea:	f7ed fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fee:	b108      	cbz	r0, 8012ff4 <__cvt+0xa4>
 8012ff0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ff4:	2230      	movs	r2, #48	; 0x30
 8012ff6:	9b03      	ldr	r3, [sp, #12]
 8012ff8:	454b      	cmp	r3, r9
 8012ffa:	d307      	bcc.n	801300c <__cvt+0xbc>
 8012ffc:	9b03      	ldr	r3, [sp, #12]
 8012ffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013000:	1bdb      	subs	r3, r3, r7
 8013002:	4638      	mov	r0, r7
 8013004:	6013      	str	r3, [r2, #0]
 8013006:	b004      	add	sp, #16
 8013008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300c:	1c59      	adds	r1, r3, #1
 801300e:	9103      	str	r1, [sp, #12]
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	e7f0      	b.n	8012ff6 <__cvt+0xa6>

08013014 <__exponent>:
 8013014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013016:	4603      	mov	r3, r0
 8013018:	2900      	cmp	r1, #0
 801301a:	bfb8      	it	lt
 801301c:	4249      	neglt	r1, r1
 801301e:	f803 2b02 	strb.w	r2, [r3], #2
 8013022:	bfb4      	ite	lt
 8013024:	222d      	movlt	r2, #45	; 0x2d
 8013026:	222b      	movge	r2, #43	; 0x2b
 8013028:	2909      	cmp	r1, #9
 801302a:	7042      	strb	r2, [r0, #1]
 801302c:	dd2a      	ble.n	8013084 <__exponent+0x70>
 801302e:	f10d 0407 	add.w	r4, sp, #7
 8013032:	46a4      	mov	ip, r4
 8013034:	270a      	movs	r7, #10
 8013036:	46a6      	mov	lr, r4
 8013038:	460a      	mov	r2, r1
 801303a:	fb91 f6f7 	sdiv	r6, r1, r7
 801303e:	fb07 1516 	mls	r5, r7, r6, r1
 8013042:	3530      	adds	r5, #48	; 0x30
 8013044:	2a63      	cmp	r2, #99	; 0x63
 8013046:	f104 34ff 	add.w	r4, r4, #4294967295
 801304a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801304e:	4631      	mov	r1, r6
 8013050:	dcf1      	bgt.n	8013036 <__exponent+0x22>
 8013052:	3130      	adds	r1, #48	; 0x30
 8013054:	f1ae 0502 	sub.w	r5, lr, #2
 8013058:	f804 1c01 	strb.w	r1, [r4, #-1]
 801305c:	1c44      	adds	r4, r0, #1
 801305e:	4629      	mov	r1, r5
 8013060:	4561      	cmp	r1, ip
 8013062:	d30a      	bcc.n	801307a <__exponent+0x66>
 8013064:	f10d 0209 	add.w	r2, sp, #9
 8013068:	eba2 020e 	sub.w	r2, r2, lr
 801306c:	4565      	cmp	r5, ip
 801306e:	bf88      	it	hi
 8013070:	2200      	movhi	r2, #0
 8013072:	4413      	add	r3, r2
 8013074:	1a18      	subs	r0, r3, r0
 8013076:	b003      	add	sp, #12
 8013078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801307a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801307e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013082:	e7ed      	b.n	8013060 <__exponent+0x4c>
 8013084:	2330      	movs	r3, #48	; 0x30
 8013086:	3130      	adds	r1, #48	; 0x30
 8013088:	7083      	strb	r3, [r0, #2]
 801308a:	70c1      	strb	r1, [r0, #3]
 801308c:	1d03      	adds	r3, r0, #4
 801308e:	e7f1      	b.n	8013074 <__exponent+0x60>

08013090 <_printf_float>:
 8013090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013094:	ed2d 8b02 	vpush	{d8}
 8013098:	b08d      	sub	sp, #52	; 0x34
 801309a:	460c      	mov	r4, r1
 801309c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80130a0:	4616      	mov	r6, r2
 80130a2:	461f      	mov	r7, r3
 80130a4:	4605      	mov	r5, r0
 80130a6:	f003 fcbd 	bl	8016a24 <_localeconv_r>
 80130aa:	f8d0 a000 	ldr.w	sl, [r0]
 80130ae:	4650      	mov	r0, sl
 80130b0:	f7ed f88e 	bl	80001d0 <strlen>
 80130b4:	2300      	movs	r3, #0
 80130b6:	930a      	str	r3, [sp, #40]	; 0x28
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	9305      	str	r3, [sp, #20]
 80130bc:	f8d8 3000 	ldr.w	r3, [r8]
 80130c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80130c4:	3307      	adds	r3, #7
 80130c6:	f023 0307 	bic.w	r3, r3, #7
 80130ca:	f103 0208 	add.w	r2, r3, #8
 80130ce:	f8c8 2000 	str.w	r2, [r8]
 80130d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80130da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80130de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80130e2:	9307      	str	r3, [sp, #28]
 80130e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80130e8:	ee08 0a10 	vmov	s16, r0
 80130ec:	4b9f      	ldr	r3, [pc, #636]	; (801336c <_printf_float+0x2dc>)
 80130ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130f2:	f04f 32ff 	mov.w	r2, #4294967295
 80130f6:	f7ed fd19 	bl	8000b2c <__aeabi_dcmpun>
 80130fa:	bb88      	cbnz	r0, 8013160 <_printf_float+0xd0>
 80130fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013100:	4b9a      	ldr	r3, [pc, #616]	; (801336c <_printf_float+0x2dc>)
 8013102:	f04f 32ff 	mov.w	r2, #4294967295
 8013106:	f7ed fcf3 	bl	8000af0 <__aeabi_dcmple>
 801310a:	bb48      	cbnz	r0, 8013160 <_printf_float+0xd0>
 801310c:	2200      	movs	r2, #0
 801310e:	2300      	movs	r3, #0
 8013110:	4640      	mov	r0, r8
 8013112:	4649      	mov	r1, r9
 8013114:	f7ed fce2 	bl	8000adc <__aeabi_dcmplt>
 8013118:	b110      	cbz	r0, 8013120 <_printf_float+0x90>
 801311a:	232d      	movs	r3, #45	; 0x2d
 801311c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013120:	4b93      	ldr	r3, [pc, #588]	; (8013370 <_printf_float+0x2e0>)
 8013122:	4894      	ldr	r0, [pc, #592]	; (8013374 <_printf_float+0x2e4>)
 8013124:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013128:	bf94      	ite	ls
 801312a:	4698      	movls	r8, r3
 801312c:	4680      	movhi	r8, r0
 801312e:	2303      	movs	r3, #3
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	9b05      	ldr	r3, [sp, #20]
 8013134:	f023 0204 	bic.w	r2, r3, #4
 8013138:	6022      	str	r2, [r4, #0]
 801313a:	f04f 0900 	mov.w	r9, #0
 801313e:	9700      	str	r7, [sp, #0]
 8013140:	4633      	mov	r3, r6
 8013142:	aa0b      	add	r2, sp, #44	; 0x2c
 8013144:	4621      	mov	r1, r4
 8013146:	4628      	mov	r0, r5
 8013148:	f000 f9d8 	bl	80134fc <_printf_common>
 801314c:	3001      	adds	r0, #1
 801314e:	f040 8090 	bne.w	8013272 <_printf_float+0x1e2>
 8013152:	f04f 30ff 	mov.w	r0, #4294967295
 8013156:	b00d      	add	sp, #52	; 0x34
 8013158:	ecbd 8b02 	vpop	{d8}
 801315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013160:	4642      	mov	r2, r8
 8013162:	464b      	mov	r3, r9
 8013164:	4640      	mov	r0, r8
 8013166:	4649      	mov	r1, r9
 8013168:	f7ed fce0 	bl	8000b2c <__aeabi_dcmpun>
 801316c:	b140      	cbz	r0, 8013180 <_printf_float+0xf0>
 801316e:	464b      	mov	r3, r9
 8013170:	2b00      	cmp	r3, #0
 8013172:	bfbc      	itt	lt
 8013174:	232d      	movlt	r3, #45	; 0x2d
 8013176:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801317a:	487f      	ldr	r0, [pc, #508]	; (8013378 <_printf_float+0x2e8>)
 801317c:	4b7f      	ldr	r3, [pc, #508]	; (801337c <_printf_float+0x2ec>)
 801317e:	e7d1      	b.n	8013124 <_printf_float+0x94>
 8013180:	6863      	ldr	r3, [r4, #4]
 8013182:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013186:	9206      	str	r2, [sp, #24]
 8013188:	1c5a      	adds	r2, r3, #1
 801318a:	d13f      	bne.n	801320c <_printf_float+0x17c>
 801318c:	2306      	movs	r3, #6
 801318e:	6063      	str	r3, [r4, #4]
 8013190:	9b05      	ldr	r3, [sp, #20]
 8013192:	6861      	ldr	r1, [r4, #4]
 8013194:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013198:	2300      	movs	r3, #0
 801319a:	9303      	str	r3, [sp, #12]
 801319c:	ab0a      	add	r3, sp, #40	; 0x28
 801319e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80131a2:	ab09      	add	r3, sp, #36	; 0x24
 80131a4:	ec49 8b10 	vmov	d0, r8, r9
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	6022      	str	r2, [r4, #0]
 80131ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80131b0:	4628      	mov	r0, r5
 80131b2:	f7ff fecd 	bl	8012f50 <__cvt>
 80131b6:	9b06      	ldr	r3, [sp, #24]
 80131b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131ba:	2b47      	cmp	r3, #71	; 0x47
 80131bc:	4680      	mov	r8, r0
 80131be:	d108      	bne.n	80131d2 <_printf_float+0x142>
 80131c0:	1cc8      	adds	r0, r1, #3
 80131c2:	db02      	blt.n	80131ca <_printf_float+0x13a>
 80131c4:	6863      	ldr	r3, [r4, #4]
 80131c6:	4299      	cmp	r1, r3
 80131c8:	dd41      	ble.n	801324e <_printf_float+0x1be>
 80131ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80131ce:	fa5f fb8b 	uxtb.w	fp, fp
 80131d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80131d6:	d820      	bhi.n	801321a <_printf_float+0x18a>
 80131d8:	3901      	subs	r1, #1
 80131da:	465a      	mov	r2, fp
 80131dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80131e0:	9109      	str	r1, [sp, #36]	; 0x24
 80131e2:	f7ff ff17 	bl	8013014 <__exponent>
 80131e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131e8:	1813      	adds	r3, r2, r0
 80131ea:	2a01      	cmp	r2, #1
 80131ec:	4681      	mov	r9, r0
 80131ee:	6123      	str	r3, [r4, #16]
 80131f0:	dc02      	bgt.n	80131f8 <_printf_float+0x168>
 80131f2:	6822      	ldr	r2, [r4, #0]
 80131f4:	07d2      	lsls	r2, r2, #31
 80131f6:	d501      	bpl.n	80131fc <_printf_float+0x16c>
 80131f8:	3301      	adds	r3, #1
 80131fa:	6123      	str	r3, [r4, #16]
 80131fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013200:	2b00      	cmp	r3, #0
 8013202:	d09c      	beq.n	801313e <_printf_float+0xae>
 8013204:	232d      	movs	r3, #45	; 0x2d
 8013206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801320a:	e798      	b.n	801313e <_printf_float+0xae>
 801320c:	9a06      	ldr	r2, [sp, #24]
 801320e:	2a47      	cmp	r2, #71	; 0x47
 8013210:	d1be      	bne.n	8013190 <_printf_float+0x100>
 8013212:	2b00      	cmp	r3, #0
 8013214:	d1bc      	bne.n	8013190 <_printf_float+0x100>
 8013216:	2301      	movs	r3, #1
 8013218:	e7b9      	b.n	801318e <_printf_float+0xfe>
 801321a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801321e:	d118      	bne.n	8013252 <_printf_float+0x1c2>
 8013220:	2900      	cmp	r1, #0
 8013222:	6863      	ldr	r3, [r4, #4]
 8013224:	dd0b      	ble.n	801323e <_printf_float+0x1ae>
 8013226:	6121      	str	r1, [r4, #16]
 8013228:	b913      	cbnz	r3, 8013230 <_printf_float+0x1a0>
 801322a:	6822      	ldr	r2, [r4, #0]
 801322c:	07d0      	lsls	r0, r2, #31
 801322e:	d502      	bpl.n	8013236 <_printf_float+0x1a6>
 8013230:	3301      	adds	r3, #1
 8013232:	440b      	add	r3, r1
 8013234:	6123      	str	r3, [r4, #16]
 8013236:	65a1      	str	r1, [r4, #88]	; 0x58
 8013238:	f04f 0900 	mov.w	r9, #0
 801323c:	e7de      	b.n	80131fc <_printf_float+0x16c>
 801323e:	b913      	cbnz	r3, 8013246 <_printf_float+0x1b6>
 8013240:	6822      	ldr	r2, [r4, #0]
 8013242:	07d2      	lsls	r2, r2, #31
 8013244:	d501      	bpl.n	801324a <_printf_float+0x1ba>
 8013246:	3302      	adds	r3, #2
 8013248:	e7f4      	b.n	8013234 <_printf_float+0x1a4>
 801324a:	2301      	movs	r3, #1
 801324c:	e7f2      	b.n	8013234 <_printf_float+0x1a4>
 801324e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013254:	4299      	cmp	r1, r3
 8013256:	db05      	blt.n	8013264 <_printf_float+0x1d4>
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	6121      	str	r1, [r4, #16]
 801325c:	07d8      	lsls	r0, r3, #31
 801325e:	d5ea      	bpl.n	8013236 <_printf_float+0x1a6>
 8013260:	1c4b      	adds	r3, r1, #1
 8013262:	e7e7      	b.n	8013234 <_printf_float+0x1a4>
 8013264:	2900      	cmp	r1, #0
 8013266:	bfd4      	ite	le
 8013268:	f1c1 0202 	rsble	r2, r1, #2
 801326c:	2201      	movgt	r2, #1
 801326e:	4413      	add	r3, r2
 8013270:	e7e0      	b.n	8013234 <_printf_float+0x1a4>
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	055a      	lsls	r2, r3, #21
 8013276:	d407      	bmi.n	8013288 <_printf_float+0x1f8>
 8013278:	6923      	ldr	r3, [r4, #16]
 801327a:	4642      	mov	r2, r8
 801327c:	4631      	mov	r1, r6
 801327e:	4628      	mov	r0, r5
 8013280:	47b8      	blx	r7
 8013282:	3001      	adds	r0, #1
 8013284:	d12c      	bne.n	80132e0 <_printf_float+0x250>
 8013286:	e764      	b.n	8013152 <_printf_float+0xc2>
 8013288:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801328c:	f240 80e0 	bls.w	8013450 <_printf_float+0x3c0>
 8013290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013294:	2200      	movs	r2, #0
 8013296:	2300      	movs	r3, #0
 8013298:	f7ed fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 801329c:	2800      	cmp	r0, #0
 801329e:	d034      	beq.n	801330a <_printf_float+0x27a>
 80132a0:	4a37      	ldr	r2, [pc, #220]	; (8013380 <_printf_float+0x2f0>)
 80132a2:	2301      	movs	r3, #1
 80132a4:	4631      	mov	r1, r6
 80132a6:	4628      	mov	r0, r5
 80132a8:	47b8      	blx	r7
 80132aa:	3001      	adds	r0, #1
 80132ac:	f43f af51 	beq.w	8013152 <_printf_float+0xc2>
 80132b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132b4:	429a      	cmp	r2, r3
 80132b6:	db02      	blt.n	80132be <_printf_float+0x22e>
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	07d8      	lsls	r0, r3, #31
 80132bc:	d510      	bpl.n	80132e0 <_printf_float+0x250>
 80132be:	ee18 3a10 	vmov	r3, s16
 80132c2:	4652      	mov	r2, sl
 80132c4:	4631      	mov	r1, r6
 80132c6:	4628      	mov	r0, r5
 80132c8:	47b8      	blx	r7
 80132ca:	3001      	adds	r0, #1
 80132cc:	f43f af41 	beq.w	8013152 <_printf_float+0xc2>
 80132d0:	f04f 0800 	mov.w	r8, #0
 80132d4:	f104 091a 	add.w	r9, r4, #26
 80132d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132da:	3b01      	subs	r3, #1
 80132dc:	4543      	cmp	r3, r8
 80132de:	dc09      	bgt.n	80132f4 <_printf_float+0x264>
 80132e0:	6823      	ldr	r3, [r4, #0]
 80132e2:	079b      	lsls	r3, r3, #30
 80132e4:	f100 8105 	bmi.w	80134f2 <_printf_float+0x462>
 80132e8:	68e0      	ldr	r0, [r4, #12]
 80132ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ec:	4298      	cmp	r0, r3
 80132ee:	bfb8      	it	lt
 80132f0:	4618      	movlt	r0, r3
 80132f2:	e730      	b.n	8013156 <_printf_float+0xc6>
 80132f4:	2301      	movs	r3, #1
 80132f6:	464a      	mov	r2, r9
 80132f8:	4631      	mov	r1, r6
 80132fa:	4628      	mov	r0, r5
 80132fc:	47b8      	blx	r7
 80132fe:	3001      	adds	r0, #1
 8013300:	f43f af27 	beq.w	8013152 <_printf_float+0xc2>
 8013304:	f108 0801 	add.w	r8, r8, #1
 8013308:	e7e6      	b.n	80132d8 <_printf_float+0x248>
 801330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801330c:	2b00      	cmp	r3, #0
 801330e:	dc39      	bgt.n	8013384 <_printf_float+0x2f4>
 8013310:	4a1b      	ldr	r2, [pc, #108]	; (8013380 <_printf_float+0x2f0>)
 8013312:	2301      	movs	r3, #1
 8013314:	4631      	mov	r1, r6
 8013316:	4628      	mov	r0, r5
 8013318:	47b8      	blx	r7
 801331a:	3001      	adds	r0, #1
 801331c:	f43f af19 	beq.w	8013152 <_printf_float+0xc2>
 8013320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013324:	4313      	orrs	r3, r2
 8013326:	d102      	bne.n	801332e <_printf_float+0x29e>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	07d9      	lsls	r1, r3, #31
 801332c:	d5d8      	bpl.n	80132e0 <_printf_float+0x250>
 801332e:	ee18 3a10 	vmov	r3, s16
 8013332:	4652      	mov	r2, sl
 8013334:	4631      	mov	r1, r6
 8013336:	4628      	mov	r0, r5
 8013338:	47b8      	blx	r7
 801333a:	3001      	adds	r0, #1
 801333c:	f43f af09 	beq.w	8013152 <_printf_float+0xc2>
 8013340:	f04f 0900 	mov.w	r9, #0
 8013344:	f104 0a1a 	add.w	sl, r4, #26
 8013348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334a:	425b      	negs	r3, r3
 801334c:	454b      	cmp	r3, r9
 801334e:	dc01      	bgt.n	8013354 <_printf_float+0x2c4>
 8013350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013352:	e792      	b.n	801327a <_printf_float+0x1ea>
 8013354:	2301      	movs	r3, #1
 8013356:	4652      	mov	r2, sl
 8013358:	4631      	mov	r1, r6
 801335a:	4628      	mov	r0, r5
 801335c:	47b8      	blx	r7
 801335e:	3001      	adds	r0, #1
 8013360:	f43f aef7 	beq.w	8013152 <_printf_float+0xc2>
 8013364:	f109 0901 	add.w	r9, r9, #1
 8013368:	e7ee      	b.n	8013348 <_printf_float+0x2b8>
 801336a:	bf00      	nop
 801336c:	7fefffff 	.word	0x7fefffff
 8013370:	080193ec 	.word	0x080193ec
 8013374:	080193f0 	.word	0x080193f0
 8013378:	080193f8 	.word	0x080193f8
 801337c:	080193f4 	.word	0x080193f4
 8013380:	080193fc 	.word	0x080193fc
 8013384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013386:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013388:	429a      	cmp	r2, r3
 801338a:	bfa8      	it	ge
 801338c:	461a      	movge	r2, r3
 801338e:	2a00      	cmp	r2, #0
 8013390:	4691      	mov	r9, r2
 8013392:	dc37      	bgt.n	8013404 <_printf_float+0x374>
 8013394:	f04f 0b00 	mov.w	fp, #0
 8013398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801339c:	f104 021a 	add.w	r2, r4, #26
 80133a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80133a2:	9305      	str	r3, [sp, #20]
 80133a4:	eba3 0309 	sub.w	r3, r3, r9
 80133a8:	455b      	cmp	r3, fp
 80133aa:	dc33      	bgt.n	8013414 <_printf_float+0x384>
 80133ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133b0:	429a      	cmp	r2, r3
 80133b2:	db3b      	blt.n	801342c <_printf_float+0x39c>
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	07da      	lsls	r2, r3, #31
 80133b8:	d438      	bmi.n	801342c <_printf_float+0x39c>
 80133ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133bc:	9a05      	ldr	r2, [sp, #20]
 80133be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133c0:	1a9a      	subs	r2, r3, r2
 80133c2:	eba3 0901 	sub.w	r9, r3, r1
 80133c6:	4591      	cmp	r9, r2
 80133c8:	bfa8      	it	ge
 80133ca:	4691      	movge	r9, r2
 80133cc:	f1b9 0f00 	cmp.w	r9, #0
 80133d0:	dc35      	bgt.n	801343e <_printf_float+0x3ae>
 80133d2:	f04f 0800 	mov.w	r8, #0
 80133d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80133da:	f104 0a1a 	add.w	sl, r4, #26
 80133de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133e2:	1a9b      	subs	r3, r3, r2
 80133e4:	eba3 0309 	sub.w	r3, r3, r9
 80133e8:	4543      	cmp	r3, r8
 80133ea:	f77f af79 	ble.w	80132e0 <_printf_float+0x250>
 80133ee:	2301      	movs	r3, #1
 80133f0:	4652      	mov	r2, sl
 80133f2:	4631      	mov	r1, r6
 80133f4:	4628      	mov	r0, r5
 80133f6:	47b8      	blx	r7
 80133f8:	3001      	adds	r0, #1
 80133fa:	f43f aeaa 	beq.w	8013152 <_printf_float+0xc2>
 80133fe:	f108 0801 	add.w	r8, r8, #1
 8013402:	e7ec      	b.n	80133de <_printf_float+0x34e>
 8013404:	4613      	mov	r3, r2
 8013406:	4631      	mov	r1, r6
 8013408:	4642      	mov	r2, r8
 801340a:	4628      	mov	r0, r5
 801340c:	47b8      	blx	r7
 801340e:	3001      	adds	r0, #1
 8013410:	d1c0      	bne.n	8013394 <_printf_float+0x304>
 8013412:	e69e      	b.n	8013152 <_printf_float+0xc2>
 8013414:	2301      	movs	r3, #1
 8013416:	4631      	mov	r1, r6
 8013418:	4628      	mov	r0, r5
 801341a:	9205      	str	r2, [sp, #20]
 801341c:	47b8      	blx	r7
 801341e:	3001      	adds	r0, #1
 8013420:	f43f ae97 	beq.w	8013152 <_printf_float+0xc2>
 8013424:	9a05      	ldr	r2, [sp, #20]
 8013426:	f10b 0b01 	add.w	fp, fp, #1
 801342a:	e7b9      	b.n	80133a0 <_printf_float+0x310>
 801342c:	ee18 3a10 	vmov	r3, s16
 8013430:	4652      	mov	r2, sl
 8013432:	4631      	mov	r1, r6
 8013434:	4628      	mov	r0, r5
 8013436:	47b8      	blx	r7
 8013438:	3001      	adds	r0, #1
 801343a:	d1be      	bne.n	80133ba <_printf_float+0x32a>
 801343c:	e689      	b.n	8013152 <_printf_float+0xc2>
 801343e:	9a05      	ldr	r2, [sp, #20]
 8013440:	464b      	mov	r3, r9
 8013442:	4442      	add	r2, r8
 8013444:	4631      	mov	r1, r6
 8013446:	4628      	mov	r0, r5
 8013448:	47b8      	blx	r7
 801344a:	3001      	adds	r0, #1
 801344c:	d1c1      	bne.n	80133d2 <_printf_float+0x342>
 801344e:	e680      	b.n	8013152 <_printf_float+0xc2>
 8013450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013452:	2a01      	cmp	r2, #1
 8013454:	dc01      	bgt.n	801345a <_printf_float+0x3ca>
 8013456:	07db      	lsls	r3, r3, #31
 8013458:	d538      	bpl.n	80134cc <_printf_float+0x43c>
 801345a:	2301      	movs	r3, #1
 801345c:	4642      	mov	r2, r8
 801345e:	4631      	mov	r1, r6
 8013460:	4628      	mov	r0, r5
 8013462:	47b8      	blx	r7
 8013464:	3001      	adds	r0, #1
 8013466:	f43f ae74 	beq.w	8013152 <_printf_float+0xc2>
 801346a:	ee18 3a10 	vmov	r3, s16
 801346e:	4652      	mov	r2, sl
 8013470:	4631      	mov	r1, r6
 8013472:	4628      	mov	r0, r5
 8013474:	47b8      	blx	r7
 8013476:	3001      	adds	r0, #1
 8013478:	f43f ae6b 	beq.w	8013152 <_printf_float+0xc2>
 801347c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013480:	2200      	movs	r2, #0
 8013482:	2300      	movs	r3, #0
 8013484:	f7ed fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8013488:	b9d8      	cbnz	r0, 80134c2 <_printf_float+0x432>
 801348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801348c:	f108 0201 	add.w	r2, r8, #1
 8013490:	3b01      	subs	r3, #1
 8013492:	4631      	mov	r1, r6
 8013494:	4628      	mov	r0, r5
 8013496:	47b8      	blx	r7
 8013498:	3001      	adds	r0, #1
 801349a:	d10e      	bne.n	80134ba <_printf_float+0x42a>
 801349c:	e659      	b.n	8013152 <_printf_float+0xc2>
 801349e:	2301      	movs	r3, #1
 80134a0:	4652      	mov	r2, sl
 80134a2:	4631      	mov	r1, r6
 80134a4:	4628      	mov	r0, r5
 80134a6:	47b8      	blx	r7
 80134a8:	3001      	adds	r0, #1
 80134aa:	f43f ae52 	beq.w	8013152 <_printf_float+0xc2>
 80134ae:	f108 0801 	add.w	r8, r8, #1
 80134b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134b4:	3b01      	subs	r3, #1
 80134b6:	4543      	cmp	r3, r8
 80134b8:	dcf1      	bgt.n	801349e <_printf_float+0x40e>
 80134ba:	464b      	mov	r3, r9
 80134bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80134c0:	e6dc      	b.n	801327c <_printf_float+0x1ec>
 80134c2:	f04f 0800 	mov.w	r8, #0
 80134c6:	f104 0a1a 	add.w	sl, r4, #26
 80134ca:	e7f2      	b.n	80134b2 <_printf_float+0x422>
 80134cc:	2301      	movs	r3, #1
 80134ce:	4642      	mov	r2, r8
 80134d0:	e7df      	b.n	8013492 <_printf_float+0x402>
 80134d2:	2301      	movs	r3, #1
 80134d4:	464a      	mov	r2, r9
 80134d6:	4631      	mov	r1, r6
 80134d8:	4628      	mov	r0, r5
 80134da:	47b8      	blx	r7
 80134dc:	3001      	adds	r0, #1
 80134de:	f43f ae38 	beq.w	8013152 <_printf_float+0xc2>
 80134e2:	f108 0801 	add.w	r8, r8, #1
 80134e6:	68e3      	ldr	r3, [r4, #12]
 80134e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80134ea:	1a5b      	subs	r3, r3, r1
 80134ec:	4543      	cmp	r3, r8
 80134ee:	dcf0      	bgt.n	80134d2 <_printf_float+0x442>
 80134f0:	e6fa      	b.n	80132e8 <_printf_float+0x258>
 80134f2:	f04f 0800 	mov.w	r8, #0
 80134f6:	f104 0919 	add.w	r9, r4, #25
 80134fa:	e7f4      	b.n	80134e6 <_printf_float+0x456>

080134fc <_printf_common>:
 80134fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013500:	4616      	mov	r6, r2
 8013502:	4699      	mov	r9, r3
 8013504:	688a      	ldr	r2, [r1, #8]
 8013506:	690b      	ldr	r3, [r1, #16]
 8013508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801350c:	4293      	cmp	r3, r2
 801350e:	bfb8      	it	lt
 8013510:	4613      	movlt	r3, r2
 8013512:	6033      	str	r3, [r6, #0]
 8013514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013518:	4607      	mov	r7, r0
 801351a:	460c      	mov	r4, r1
 801351c:	b10a      	cbz	r2, 8013522 <_printf_common+0x26>
 801351e:	3301      	adds	r3, #1
 8013520:	6033      	str	r3, [r6, #0]
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	0699      	lsls	r1, r3, #26
 8013526:	bf42      	ittt	mi
 8013528:	6833      	ldrmi	r3, [r6, #0]
 801352a:	3302      	addmi	r3, #2
 801352c:	6033      	strmi	r3, [r6, #0]
 801352e:	6825      	ldr	r5, [r4, #0]
 8013530:	f015 0506 	ands.w	r5, r5, #6
 8013534:	d106      	bne.n	8013544 <_printf_common+0x48>
 8013536:	f104 0a19 	add.w	sl, r4, #25
 801353a:	68e3      	ldr	r3, [r4, #12]
 801353c:	6832      	ldr	r2, [r6, #0]
 801353e:	1a9b      	subs	r3, r3, r2
 8013540:	42ab      	cmp	r3, r5
 8013542:	dc26      	bgt.n	8013592 <_printf_common+0x96>
 8013544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013548:	1e13      	subs	r3, r2, #0
 801354a:	6822      	ldr	r2, [r4, #0]
 801354c:	bf18      	it	ne
 801354e:	2301      	movne	r3, #1
 8013550:	0692      	lsls	r2, r2, #26
 8013552:	d42b      	bmi.n	80135ac <_printf_common+0xb0>
 8013554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013558:	4649      	mov	r1, r9
 801355a:	4638      	mov	r0, r7
 801355c:	47c0      	blx	r8
 801355e:	3001      	adds	r0, #1
 8013560:	d01e      	beq.n	80135a0 <_printf_common+0xa4>
 8013562:	6823      	ldr	r3, [r4, #0]
 8013564:	68e5      	ldr	r5, [r4, #12]
 8013566:	6832      	ldr	r2, [r6, #0]
 8013568:	f003 0306 	and.w	r3, r3, #6
 801356c:	2b04      	cmp	r3, #4
 801356e:	bf08      	it	eq
 8013570:	1aad      	subeq	r5, r5, r2
 8013572:	68a3      	ldr	r3, [r4, #8]
 8013574:	6922      	ldr	r2, [r4, #16]
 8013576:	bf0c      	ite	eq
 8013578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801357c:	2500      	movne	r5, #0
 801357e:	4293      	cmp	r3, r2
 8013580:	bfc4      	itt	gt
 8013582:	1a9b      	subgt	r3, r3, r2
 8013584:	18ed      	addgt	r5, r5, r3
 8013586:	2600      	movs	r6, #0
 8013588:	341a      	adds	r4, #26
 801358a:	42b5      	cmp	r5, r6
 801358c:	d11a      	bne.n	80135c4 <_printf_common+0xc8>
 801358e:	2000      	movs	r0, #0
 8013590:	e008      	b.n	80135a4 <_printf_common+0xa8>
 8013592:	2301      	movs	r3, #1
 8013594:	4652      	mov	r2, sl
 8013596:	4649      	mov	r1, r9
 8013598:	4638      	mov	r0, r7
 801359a:	47c0      	blx	r8
 801359c:	3001      	adds	r0, #1
 801359e:	d103      	bne.n	80135a8 <_printf_common+0xac>
 80135a0:	f04f 30ff 	mov.w	r0, #4294967295
 80135a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135a8:	3501      	adds	r5, #1
 80135aa:	e7c6      	b.n	801353a <_printf_common+0x3e>
 80135ac:	18e1      	adds	r1, r4, r3
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	2030      	movs	r0, #48	; 0x30
 80135b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80135b6:	4422      	add	r2, r4
 80135b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80135bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80135c0:	3302      	adds	r3, #2
 80135c2:	e7c7      	b.n	8013554 <_printf_common+0x58>
 80135c4:	2301      	movs	r3, #1
 80135c6:	4622      	mov	r2, r4
 80135c8:	4649      	mov	r1, r9
 80135ca:	4638      	mov	r0, r7
 80135cc:	47c0      	blx	r8
 80135ce:	3001      	adds	r0, #1
 80135d0:	d0e6      	beq.n	80135a0 <_printf_common+0xa4>
 80135d2:	3601      	adds	r6, #1
 80135d4:	e7d9      	b.n	801358a <_printf_common+0x8e>
	...

080135d8 <_printf_i>:
 80135d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135dc:	7e0f      	ldrb	r7, [r1, #24]
 80135de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80135e0:	2f78      	cmp	r7, #120	; 0x78
 80135e2:	4691      	mov	r9, r2
 80135e4:	4680      	mov	r8, r0
 80135e6:	460c      	mov	r4, r1
 80135e8:	469a      	mov	sl, r3
 80135ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80135ee:	d807      	bhi.n	8013600 <_printf_i+0x28>
 80135f0:	2f62      	cmp	r7, #98	; 0x62
 80135f2:	d80a      	bhi.n	801360a <_printf_i+0x32>
 80135f4:	2f00      	cmp	r7, #0
 80135f6:	f000 80d8 	beq.w	80137aa <_printf_i+0x1d2>
 80135fa:	2f58      	cmp	r7, #88	; 0x58
 80135fc:	f000 80a3 	beq.w	8013746 <_printf_i+0x16e>
 8013600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013608:	e03a      	b.n	8013680 <_printf_i+0xa8>
 801360a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801360e:	2b15      	cmp	r3, #21
 8013610:	d8f6      	bhi.n	8013600 <_printf_i+0x28>
 8013612:	a101      	add	r1, pc, #4	; (adr r1, 8013618 <_printf_i+0x40>)
 8013614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013618:	08013671 	.word	0x08013671
 801361c:	08013685 	.word	0x08013685
 8013620:	08013601 	.word	0x08013601
 8013624:	08013601 	.word	0x08013601
 8013628:	08013601 	.word	0x08013601
 801362c:	08013601 	.word	0x08013601
 8013630:	08013685 	.word	0x08013685
 8013634:	08013601 	.word	0x08013601
 8013638:	08013601 	.word	0x08013601
 801363c:	08013601 	.word	0x08013601
 8013640:	08013601 	.word	0x08013601
 8013644:	08013791 	.word	0x08013791
 8013648:	080136b5 	.word	0x080136b5
 801364c:	08013773 	.word	0x08013773
 8013650:	08013601 	.word	0x08013601
 8013654:	08013601 	.word	0x08013601
 8013658:	080137b3 	.word	0x080137b3
 801365c:	08013601 	.word	0x08013601
 8013660:	080136b5 	.word	0x080136b5
 8013664:	08013601 	.word	0x08013601
 8013668:	08013601 	.word	0x08013601
 801366c:	0801377b 	.word	0x0801377b
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	1d1a      	adds	r2, r3, #4
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	602a      	str	r2, [r5, #0]
 8013678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801367c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013680:	2301      	movs	r3, #1
 8013682:	e0a3      	b.n	80137cc <_printf_i+0x1f4>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	6829      	ldr	r1, [r5, #0]
 8013688:	0606      	lsls	r6, r0, #24
 801368a:	f101 0304 	add.w	r3, r1, #4
 801368e:	d50a      	bpl.n	80136a6 <_printf_i+0xce>
 8013690:	680e      	ldr	r6, [r1, #0]
 8013692:	602b      	str	r3, [r5, #0]
 8013694:	2e00      	cmp	r6, #0
 8013696:	da03      	bge.n	80136a0 <_printf_i+0xc8>
 8013698:	232d      	movs	r3, #45	; 0x2d
 801369a:	4276      	negs	r6, r6
 801369c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136a0:	485e      	ldr	r0, [pc, #376]	; (801381c <_printf_i+0x244>)
 80136a2:	230a      	movs	r3, #10
 80136a4:	e019      	b.n	80136da <_printf_i+0x102>
 80136a6:	680e      	ldr	r6, [r1, #0]
 80136a8:	602b      	str	r3, [r5, #0]
 80136aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80136ae:	bf18      	it	ne
 80136b0:	b236      	sxthne	r6, r6
 80136b2:	e7ef      	b.n	8013694 <_printf_i+0xbc>
 80136b4:	682b      	ldr	r3, [r5, #0]
 80136b6:	6820      	ldr	r0, [r4, #0]
 80136b8:	1d19      	adds	r1, r3, #4
 80136ba:	6029      	str	r1, [r5, #0]
 80136bc:	0601      	lsls	r1, r0, #24
 80136be:	d501      	bpl.n	80136c4 <_printf_i+0xec>
 80136c0:	681e      	ldr	r6, [r3, #0]
 80136c2:	e002      	b.n	80136ca <_printf_i+0xf2>
 80136c4:	0646      	lsls	r6, r0, #25
 80136c6:	d5fb      	bpl.n	80136c0 <_printf_i+0xe8>
 80136c8:	881e      	ldrh	r6, [r3, #0]
 80136ca:	4854      	ldr	r0, [pc, #336]	; (801381c <_printf_i+0x244>)
 80136cc:	2f6f      	cmp	r7, #111	; 0x6f
 80136ce:	bf0c      	ite	eq
 80136d0:	2308      	moveq	r3, #8
 80136d2:	230a      	movne	r3, #10
 80136d4:	2100      	movs	r1, #0
 80136d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80136da:	6865      	ldr	r5, [r4, #4]
 80136dc:	60a5      	str	r5, [r4, #8]
 80136de:	2d00      	cmp	r5, #0
 80136e0:	bfa2      	ittt	ge
 80136e2:	6821      	ldrge	r1, [r4, #0]
 80136e4:	f021 0104 	bicge.w	r1, r1, #4
 80136e8:	6021      	strge	r1, [r4, #0]
 80136ea:	b90e      	cbnz	r6, 80136f0 <_printf_i+0x118>
 80136ec:	2d00      	cmp	r5, #0
 80136ee:	d04d      	beq.n	801378c <_printf_i+0x1b4>
 80136f0:	4615      	mov	r5, r2
 80136f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80136f6:	fb03 6711 	mls	r7, r3, r1, r6
 80136fa:	5dc7      	ldrb	r7, [r0, r7]
 80136fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013700:	4637      	mov	r7, r6
 8013702:	42bb      	cmp	r3, r7
 8013704:	460e      	mov	r6, r1
 8013706:	d9f4      	bls.n	80136f2 <_printf_i+0x11a>
 8013708:	2b08      	cmp	r3, #8
 801370a:	d10b      	bne.n	8013724 <_printf_i+0x14c>
 801370c:	6823      	ldr	r3, [r4, #0]
 801370e:	07de      	lsls	r6, r3, #31
 8013710:	d508      	bpl.n	8013724 <_printf_i+0x14c>
 8013712:	6923      	ldr	r3, [r4, #16]
 8013714:	6861      	ldr	r1, [r4, #4]
 8013716:	4299      	cmp	r1, r3
 8013718:	bfde      	ittt	le
 801371a:	2330      	movle	r3, #48	; 0x30
 801371c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013724:	1b52      	subs	r2, r2, r5
 8013726:	6122      	str	r2, [r4, #16]
 8013728:	f8cd a000 	str.w	sl, [sp]
 801372c:	464b      	mov	r3, r9
 801372e:	aa03      	add	r2, sp, #12
 8013730:	4621      	mov	r1, r4
 8013732:	4640      	mov	r0, r8
 8013734:	f7ff fee2 	bl	80134fc <_printf_common>
 8013738:	3001      	adds	r0, #1
 801373a:	d14c      	bne.n	80137d6 <_printf_i+0x1fe>
 801373c:	f04f 30ff 	mov.w	r0, #4294967295
 8013740:	b004      	add	sp, #16
 8013742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013746:	4835      	ldr	r0, [pc, #212]	; (801381c <_printf_i+0x244>)
 8013748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801374c:	6829      	ldr	r1, [r5, #0]
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	f851 6b04 	ldr.w	r6, [r1], #4
 8013754:	6029      	str	r1, [r5, #0]
 8013756:	061d      	lsls	r5, r3, #24
 8013758:	d514      	bpl.n	8013784 <_printf_i+0x1ac>
 801375a:	07df      	lsls	r7, r3, #31
 801375c:	bf44      	itt	mi
 801375e:	f043 0320 	orrmi.w	r3, r3, #32
 8013762:	6023      	strmi	r3, [r4, #0]
 8013764:	b91e      	cbnz	r6, 801376e <_printf_i+0x196>
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	f023 0320 	bic.w	r3, r3, #32
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	2310      	movs	r3, #16
 8013770:	e7b0      	b.n	80136d4 <_printf_i+0xfc>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	f043 0320 	orr.w	r3, r3, #32
 8013778:	6023      	str	r3, [r4, #0]
 801377a:	2378      	movs	r3, #120	; 0x78
 801377c:	4828      	ldr	r0, [pc, #160]	; (8013820 <_printf_i+0x248>)
 801377e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013782:	e7e3      	b.n	801374c <_printf_i+0x174>
 8013784:	0659      	lsls	r1, r3, #25
 8013786:	bf48      	it	mi
 8013788:	b2b6      	uxthmi	r6, r6
 801378a:	e7e6      	b.n	801375a <_printf_i+0x182>
 801378c:	4615      	mov	r5, r2
 801378e:	e7bb      	b.n	8013708 <_printf_i+0x130>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	6826      	ldr	r6, [r4, #0]
 8013794:	6961      	ldr	r1, [r4, #20]
 8013796:	1d18      	adds	r0, r3, #4
 8013798:	6028      	str	r0, [r5, #0]
 801379a:	0635      	lsls	r5, r6, #24
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	d501      	bpl.n	80137a4 <_printf_i+0x1cc>
 80137a0:	6019      	str	r1, [r3, #0]
 80137a2:	e002      	b.n	80137aa <_printf_i+0x1d2>
 80137a4:	0670      	lsls	r0, r6, #25
 80137a6:	d5fb      	bpl.n	80137a0 <_printf_i+0x1c8>
 80137a8:	8019      	strh	r1, [r3, #0]
 80137aa:	2300      	movs	r3, #0
 80137ac:	6123      	str	r3, [r4, #16]
 80137ae:	4615      	mov	r5, r2
 80137b0:	e7ba      	b.n	8013728 <_printf_i+0x150>
 80137b2:	682b      	ldr	r3, [r5, #0]
 80137b4:	1d1a      	adds	r2, r3, #4
 80137b6:	602a      	str	r2, [r5, #0]
 80137b8:	681d      	ldr	r5, [r3, #0]
 80137ba:	6862      	ldr	r2, [r4, #4]
 80137bc:	2100      	movs	r1, #0
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ec fd0e 	bl	80001e0 <memchr>
 80137c4:	b108      	cbz	r0, 80137ca <_printf_i+0x1f2>
 80137c6:	1b40      	subs	r0, r0, r5
 80137c8:	6060      	str	r0, [r4, #4]
 80137ca:	6863      	ldr	r3, [r4, #4]
 80137cc:	6123      	str	r3, [r4, #16]
 80137ce:	2300      	movs	r3, #0
 80137d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137d4:	e7a8      	b.n	8013728 <_printf_i+0x150>
 80137d6:	6923      	ldr	r3, [r4, #16]
 80137d8:	462a      	mov	r2, r5
 80137da:	4649      	mov	r1, r9
 80137dc:	4640      	mov	r0, r8
 80137de:	47d0      	blx	sl
 80137e0:	3001      	adds	r0, #1
 80137e2:	d0ab      	beq.n	801373c <_printf_i+0x164>
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	079b      	lsls	r3, r3, #30
 80137e8:	d413      	bmi.n	8013812 <_printf_i+0x23a>
 80137ea:	68e0      	ldr	r0, [r4, #12]
 80137ec:	9b03      	ldr	r3, [sp, #12]
 80137ee:	4298      	cmp	r0, r3
 80137f0:	bfb8      	it	lt
 80137f2:	4618      	movlt	r0, r3
 80137f4:	e7a4      	b.n	8013740 <_printf_i+0x168>
 80137f6:	2301      	movs	r3, #1
 80137f8:	4632      	mov	r2, r6
 80137fa:	4649      	mov	r1, r9
 80137fc:	4640      	mov	r0, r8
 80137fe:	47d0      	blx	sl
 8013800:	3001      	adds	r0, #1
 8013802:	d09b      	beq.n	801373c <_printf_i+0x164>
 8013804:	3501      	adds	r5, #1
 8013806:	68e3      	ldr	r3, [r4, #12]
 8013808:	9903      	ldr	r1, [sp, #12]
 801380a:	1a5b      	subs	r3, r3, r1
 801380c:	42ab      	cmp	r3, r5
 801380e:	dcf2      	bgt.n	80137f6 <_printf_i+0x21e>
 8013810:	e7eb      	b.n	80137ea <_printf_i+0x212>
 8013812:	2500      	movs	r5, #0
 8013814:	f104 0619 	add.w	r6, r4, #25
 8013818:	e7f5      	b.n	8013806 <_printf_i+0x22e>
 801381a:	bf00      	nop
 801381c:	080193fe 	.word	0x080193fe
 8013820:	0801940f 	.word	0x0801940f

08013824 <_scanf_float>:
 8013824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013828:	b087      	sub	sp, #28
 801382a:	4617      	mov	r7, r2
 801382c:	9303      	str	r3, [sp, #12]
 801382e:	688b      	ldr	r3, [r1, #8]
 8013830:	1e5a      	subs	r2, r3, #1
 8013832:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013836:	bf83      	ittte	hi
 8013838:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801383c:	195b      	addhi	r3, r3, r5
 801383e:	9302      	strhi	r3, [sp, #8]
 8013840:	2300      	movls	r3, #0
 8013842:	bf86      	itte	hi
 8013844:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013848:	608b      	strhi	r3, [r1, #8]
 801384a:	9302      	strls	r3, [sp, #8]
 801384c:	680b      	ldr	r3, [r1, #0]
 801384e:	468b      	mov	fp, r1
 8013850:	2500      	movs	r5, #0
 8013852:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013856:	f84b 3b1c 	str.w	r3, [fp], #28
 801385a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801385e:	4680      	mov	r8, r0
 8013860:	460c      	mov	r4, r1
 8013862:	465e      	mov	r6, fp
 8013864:	46aa      	mov	sl, r5
 8013866:	46a9      	mov	r9, r5
 8013868:	9501      	str	r5, [sp, #4]
 801386a:	68a2      	ldr	r2, [r4, #8]
 801386c:	b152      	cbz	r2, 8013884 <_scanf_float+0x60>
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	2b4e      	cmp	r3, #78	; 0x4e
 8013874:	d864      	bhi.n	8013940 <_scanf_float+0x11c>
 8013876:	2b40      	cmp	r3, #64	; 0x40
 8013878:	d83c      	bhi.n	80138f4 <_scanf_float+0xd0>
 801387a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801387e:	b2c8      	uxtb	r0, r1
 8013880:	280e      	cmp	r0, #14
 8013882:	d93a      	bls.n	80138fa <_scanf_float+0xd6>
 8013884:	f1b9 0f00 	cmp.w	r9, #0
 8013888:	d003      	beq.n	8013892 <_scanf_float+0x6e>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013890:	6023      	str	r3, [r4, #0]
 8013892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013896:	f1ba 0f01 	cmp.w	sl, #1
 801389a:	f200 8113 	bhi.w	8013ac4 <_scanf_float+0x2a0>
 801389e:	455e      	cmp	r6, fp
 80138a0:	f200 8105 	bhi.w	8013aae <_scanf_float+0x28a>
 80138a4:	2501      	movs	r5, #1
 80138a6:	4628      	mov	r0, r5
 80138a8:	b007      	add	sp, #28
 80138aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80138b2:	2a0d      	cmp	r2, #13
 80138b4:	d8e6      	bhi.n	8013884 <_scanf_float+0x60>
 80138b6:	a101      	add	r1, pc, #4	; (adr r1, 80138bc <_scanf_float+0x98>)
 80138b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80138bc:	080139fb 	.word	0x080139fb
 80138c0:	08013885 	.word	0x08013885
 80138c4:	08013885 	.word	0x08013885
 80138c8:	08013885 	.word	0x08013885
 80138cc:	08013a5b 	.word	0x08013a5b
 80138d0:	08013a33 	.word	0x08013a33
 80138d4:	08013885 	.word	0x08013885
 80138d8:	08013885 	.word	0x08013885
 80138dc:	08013a09 	.word	0x08013a09
 80138e0:	08013885 	.word	0x08013885
 80138e4:	08013885 	.word	0x08013885
 80138e8:	08013885 	.word	0x08013885
 80138ec:	08013885 	.word	0x08013885
 80138f0:	080139c1 	.word	0x080139c1
 80138f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80138f8:	e7db      	b.n	80138b2 <_scanf_float+0x8e>
 80138fa:	290e      	cmp	r1, #14
 80138fc:	d8c2      	bhi.n	8013884 <_scanf_float+0x60>
 80138fe:	a001      	add	r0, pc, #4	; (adr r0, 8013904 <_scanf_float+0xe0>)
 8013900:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013904:	080139b3 	.word	0x080139b3
 8013908:	08013885 	.word	0x08013885
 801390c:	080139b3 	.word	0x080139b3
 8013910:	08013a47 	.word	0x08013a47
 8013914:	08013885 	.word	0x08013885
 8013918:	08013961 	.word	0x08013961
 801391c:	0801399d 	.word	0x0801399d
 8013920:	0801399d 	.word	0x0801399d
 8013924:	0801399d 	.word	0x0801399d
 8013928:	0801399d 	.word	0x0801399d
 801392c:	0801399d 	.word	0x0801399d
 8013930:	0801399d 	.word	0x0801399d
 8013934:	0801399d 	.word	0x0801399d
 8013938:	0801399d 	.word	0x0801399d
 801393c:	0801399d 	.word	0x0801399d
 8013940:	2b6e      	cmp	r3, #110	; 0x6e
 8013942:	d809      	bhi.n	8013958 <_scanf_float+0x134>
 8013944:	2b60      	cmp	r3, #96	; 0x60
 8013946:	d8b2      	bhi.n	80138ae <_scanf_float+0x8a>
 8013948:	2b54      	cmp	r3, #84	; 0x54
 801394a:	d077      	beq.n	8013a3c <_scanf_float+0x218>
 801394c:	2b59      	cmp	r3, #89	; 0x59
 801394e:	d199      	bne.n	8013884 <_scanf_float+0x60>
 8013950:	2d07      	cmp	r5, #7
 8013952:	d197      	bne.n	8013884 <_scanf_float+0x60>
 8013954:	2508      	movs	r5, #8
 8013956:	e029      	b.n	80139ac <_scanf_float+0x188>
 8013958:	2b74      	cmp	r3, #116	; 0x74
 801395a:	d06f      	beq.n	8013a3c <_scanf_float+0x218>
 801395c:	2b79      	cmp	r3, #121	; 0x79
 801395e:	e7f6      	b.n	801394e <_scanf_float+0x12a>
 8013960:	6821      	ldr	r1, [r4, #0]
 8013962:	05c8      	lsls	r0, r1, #23
 8013964:	d51a      	bpl.n	801399c <_scanf_float+0x178>
 8013966:	9b02      	ldr	r3, [sp, #8]
 8013968:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801396c:	6021      	str	r1, [r4, #0]
 801396e:	f109 0901 	add.w	r9, r9, #1
 8013972:	b11b      	cbz	r3, 801397c <_scanf_float+0x158>
 8013974:	3b01      	subs	r3, #1
 8013976:	3201      	adds	r2, #1
 8013978:	9302      	str	r3, [sp, #8]
 801397a:	60a2      	str	r2, [r4, #8]
 801397c:	68a3      	ldr	r3, [r4, #8]
 801397e:	3b01      	subs	r3, #1
 8013980:	60a3      	str	r3, [r4, #8]
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	3301      	adds	r3, #1
 8013986:	6123      	str	r3, [r4, #16]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	3b01      	subs	r3, #1
 801398c:	2b00      	cmp	r3, #0
 801398e:	607b      	str	r3, [r7, #4]
 8013990:	f340 8084 	ble.w	8013a9c <_scanf_float+0x278>
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	3301      	adds	r3, #1
 8013998:	603b      	str	r3, [r7, #0]
 801399a:	e766      	b.n	801386a <_scanf_float+0x46>
 801399c:	eb1a 0f05 	cmn.w	sl, r5
 80139a0:	f47f af70 	bne.w	8013884 <_scanf_float+0x60>
 80139a4:	6822      	ldr	r2, [r4, #0]
 80139a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80139aa:	6022      	str	r2, [r4, #0]
 80139ac:	f806 3b01 	strb.w	r3, [r6], #1
 80139b0:	e7e4      	b.n	801397c <_scanf_float+0x158>
 80139b2:	6822      	ldr	r2, [r4, #0]
 80139b4:	0610      	lsls	r0, r2, #24
 80139b6:	f57f af65 	bpl.w	8013884 <_scanf_float+0x60>
 80139ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80139be:	e7f4      	b.n	80139aa <_scanf_float+0x186>
 80139c0:	f1ba 0f00 	cmp.w	sl, #0
 80139c4:	d10e      	bne.n	80139e4 <_scanf_float+0x1c0>
 80139c6:	f1b9 0f00 	cmp.w	r9, #0
 80139ca:	d10e      	bne.n	80139ea <_scanf_float+0x1c6>
 80139cc:	6822      	ldr	r2, [r4, #0]
 80139ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80139d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80139d6:	d108      	bne.n	80139ea <_scanf_float+0x1c6>
 80139d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80139dc:	6022      	str	r2, [r4, #0]
 80139de:	f04f 0a01 	mov.w	sl, #1
 80139e2:	e7e3      	b.n	80139ac <_scanf_float+0x188>
 80139e4:	f1ba 0f02 	cmp.w	sl, #2
 80139e8:	d055      	beq.n	8013a96 <_scanf_float+0x272>
 80139ea:	2d01      	cmp	r5, #1
 80139ec:	d002      	beq.n	80139f4 <_scanf_float+0x1d0>
 80139ee:	2d04      	cmp	r5, #4
 80139f0:	f47f af48 	bne.w	8013884 <_scanf_float+0x60>
 80139f4:	3501      	adds	r5, #1
 80139f6:	b2ed      	uxtb	r5, r5
 80139f8:	e7d8      	b.n	80139ac <_scanf_float+0x188>
 80139fa:	f1ba 0f01 	cmp.w	sl, #1
 80139fe:	f47f af41 	bne.w	8013884 <_scanf_float+0x60>
 8013a02:	f04f 0a02 	mov.w	sl, #2
 8013a06:	e7d1      	b.n	80139ac <_scanf_float+0x188>
 8013a08:	b97d      	cbnz	r5, 8013a2a <_scanf_float+0x206>
 8013a0a:	f1b9 0f00 	cmp.w	r9, #0
 8013a0e:	f47f af3c 	bne.w	801388a <_scanf_float+0x66>
 8013a12:	6822      	ldr	r2, [r4, #0]
 8013a14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013a18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013a1c:	f47f af39 	bne.w	8013892 <_scanf_float+0x6e>
 8013a20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a24:	6022      	str	r2, [r4, #0]
 8013a26:	2501      	movs	r5, #1
 8013a28:	e7c0      	b.n	80139ac <_scanf_float+0x188>
 8013a2a:	2d03      	cmp	r5, #3
 8013a2c:	d0e2      	beq.n	80139f4 <_scanf_float+0x1d0>
 8013a2e:	2d05      	cmp	r5, #5
 8013a30:	e7de      	b.n	80139f0 <_scanf_float+0x1cc>
 8013a32:	2d02      	cmp	r5, #2
 8013a34:	f47f af26 	bne.w	8013884 <_scanf_float+0x60>
 8013a38:	2503      	movs	r5, #3
 8013a3a:	e7b7      	b.n	80139ac <_scanf_float+0x188>
 8013a3c:	2d06      	cmp	r5, #6
 8013a3e:	f47f af21 	bne.w	8013884 <_scanf_float+0x60>
 8013a42:	2507      	movs	r5, #7
 8013a44:	e7b2      	b.n	80139ac <_scanf_float+0x188>
 8013a46:	6822      	ldr	r2, [r4, #0]
 8013a48:	0591      	lsls	r1, r2, #22
 8013a4a:	f57f af1b 	bpl.w	8013884 <_scanf_float+0x60>
 8013a4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013a52:	6022      	str	r2, [r4, #0]
 8013a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a58:	e7a8      	b.n	80139ac <_scanf_float+0x188>
 8013a5a:	6822      	ldr	r2, [r4, #0]
 8013a5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013a60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013a64:	d006      	beq.n	8013a74 <_scanf_float+0x250>
 8013a66:	0550      	lsls	r0, r2, #21
 8013a68:	f57f af0c 	bpl.w	8013884 <_scanf_float+0x60>
 8013a6c:	f1b9 0f00 	cmp.w	r9, #0
 8013a70:	f43f af0f 	beq.w	8013892 <_scanf_float+0x6e>
 8013a74:	0591      	lsls	r1, r2, #22
 8013a76:	bf58      	it	pl
 8013a78:	9901      	ldrpl	r1, [sp, #4]
 8013a7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a7e:	bf58      	it	pl
 8013a80:	eba9 0101 	subpl.w	r1, r9, r1
 8013a84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013a88:	bf58      	it	pl
 8013a8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013a8e:	6022      	str	r2, [r4, #0]
 8013a90:	f04f 0900 	mov.w	r9, #0
 8013a94:	e78a      	b.n	80139ac <_scanf_float+0x188>
 8013a96:	f04f 0a03 	mov.w	sl, #3
 8013a9a:	e787      	b.n	80139ac <_scanf_float+0x188>
 8013a9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	4798      	blx	r3
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	f43f aedf 	beq.w	801386a <_scanf_float+0x46>
 8013aac:	e6ea      	b.n	8013884 <_scanf_float+0x60>
 8013aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ab6:	463a      	mov	r2, r7
 8013ab8:	4640      	mov	r0, r8
 8013aba:	4798      	blx	r3
 8013abc:	6923      	ldr	r3, [r4, #16]
 8013abe:	3b01      	subs	r3, #1
 8013ac0:	6123      	str	r3, [r4, #16]
 8013ac2:	e6ec      	b.n	801389e <_scanf_float+0x7a>
 8013ac4:	1e6b      	subs	r3, r5, #1
 8013ac6:	2b06      	cmp	r3, #6
 8013ac8:	d825      	bhi.n	8013b16 <_scanf_float+0x2f2>
 8013aca:	2d02      	cmp	r5, #2
 8013acc:	d836      	bhi.n	8013b3c <_scanf_float+0x318>
 8013ace:	455e      	cmp	r6, fp
 8013ad0:	f67f aee8 	bls.w	80138a4 <_scanf_float+0x80>
 8013ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ad8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013adc:	463a      	mov	r2, r7
 8013ade:	4640      	mov	r0, r8
 8013ae0:	4798      	blx	r3
 8013ae2:	6923      	ldr	r3, [r4, #16]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	6123      	str	r3, [r4, #16]
 8013ae8:	e7f1      	b.n	8013ace <_scanf_float+0x2aa>
 8013aea:	9802      	ldr	r0, [sp, #8]
 8013aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013af0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013af4:	9002      	str	r0, [sp, #8]
 8013af6:	463a      	mov	r2, r7
 8013af8:	4640      	mov	r0, r8
 8013afa:	4798      	blx	r3
 8013afc:	6923      	ldr	r3, [r4, #16]
 8013afe:	3b01      	subs	r3, #1
 8013b00:	6123      	str	r3, [r4, #16]
 8013b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b06:	fa5f fa8a 	uxtb.w	sl, sl
 8013b0a:	f1ba 0f02 	cmp.w	sl, #2
 8013b0e:	d1ec      	bne.n	8013aea <_scanf_float+0x2c6>
 8013b10:	3d03      	subs	r5, #3
 8013b12:	b2ed      	uxtb	r5, r5
 8013b14:	1b76      	subs	r6, r6, r5
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	05da      	lsls	r2, r3, #23
 8013b1a:	d52f      	bpl.n	8013b7c <_scanf_float+0x358>
 8013b1c:	055b      	lsls	r3, r3, #21
 8013b1e:	d510      	bpl.n	8013b42 <_scanf_float+0x31e>
 8013b20:	455e      	cmp	r6, fp
 8013b22:	f67f aebf 	bls.w	80138a4 <_scanf_float+0x80>
 8013b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b2e:	463a      	mov	r2, r7
 8013b30:	4640      	mov	r0, r8
 8013b32:	4798      	blx	r3
 8013b34:	6923      	ldr	r3, [r4, #16]
 8013b36:	3b01      	subs	r3, #1
 8013b38:	6123      	str	r3, [r4, #16]
 8013b3a:	e7f1      	b.n	8013b20 <_scanf_float+0x2fc>
 8013b3c:	46aa      	mov	sl, r5
 8013b3e:	9602      	str	r6, [sp, #8]
 8013b40:	e7df      	b.n	8013b02 <_scanf_float+0x2de>
 8013b42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013b46:	6923      	ldr	r3, [r4, #16]
 8013b48:	2965      	cmp	r1, #101	; 0x65
 8013b4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013b52:	6123      	str	r3, [r4, #16]
 8013b54:	d00c      	beq.n	8013b70 <_scanf_float+0x34c>
 8013b56:	2945      	cmp	r1, #69	; 0x45
 8013b58:	d00a      	beq.n	8013b70 <_scanf_float+0x34c>
 8013b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b5e:	463a      	mov	r2, r7
 8013b60:	4640      	mov	r0, r8
 8013b62:	4798      	blx	r3
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	1eb5      	subs	r5, r6, #2
 8013b6e:	6123      	str	r3, [r4, #16]
 8013b70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b74:	463a      	mov	r2, r7
 8013b76:	4640      	mov	r0, r8
 8013b78:	4798      	blx	r3
 8013b7a:	462e      	mov	r6, r5
 8013b7c:	6825      	ldr	r5, [r4, #0]
 8013b7e:	f015 0510 	ands.w	r5, r5, #16
 8013b82:	d159      	bne.n	8013c38 <_scanf_float+0x414>
 8013b84:	7035      	strb	r5, [r6, #0]
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b90:	d11b      	bne.n	8013bca <_scanf_float+0x3a6>
 8013b92:	9b01      	ldr	r3, [sp, #4]
 8013b94:	454b      	cmp	r3, r9
 8013b96:	eba3 0209 	sub.w	r2, r3, r9
 8013b9a:	d123      	bne.n	8013be4 <_scanf_float+0x3c0>
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	4659      	mov	r1, fp
 8013ba0:	4640      	mov	r0, r8
 8013ba2:	f001 f9f3 	bl	8014f8c <_strtod_r>
 8013ba6:	6822      	ldr	r2, [r4, #0]
 8013ba8:	9b03      	ldr	r3, [sp, #12]
 8013baa:	f012 0f02 	tst.w	r2, #2
 8013bae:	ec57 6b10 	vmov	r6, r7, d0
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	d021      	beq.n	8013bfa <_scanf_float+0x3d6>
 8013bb6:	9903      	ldr	r1, [sp, #12]
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	600a      	str	r2, [r1, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	e9c3 6700 	strd	r6, r7, [r3]
 8013bc2:	68e3      	ldr	r3, [r4, #12]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	60e3      	str	r3, [r4, #12]
 8013bc8:	e66d      	b.n	80138a6 <_scanf_float+0x82>
 8013bca:	9b04      	ldr	r3, [sp, #16]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d0e5      	beq.n	8013b9c <_scanf_float+0x378>
 8013bd0:	9905      	ldr	r1, [sp, #20]
 8013bd2:	230a      	movs	r3, #10
 8013bd4:	462a      	mov	r2, r5
 8013bd6:	3101      	adds	r1, #1
 8013bd8:	4640      	mov	r0, r8
 8013bda:	f001 fa5f 	bl	801509c <_strtol_r>
 8013bde:	9b04      	ldr	r3, [sp, #16]
 8013be0:	9e05      	ldr	r6, [sp, #20]
 8013be2:	1ac2      	subs	r2, r0, r3
 8013be4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013be8:	429e      	cmp	r6, r3
 8013bea:	bf28      	it	cs
 8013bec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013bf0:	4912      	ldr	r1, [pc, #72]	; (8013c3c <_scanf_float+0x418>)
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f000 f95c 	bl	8013eb0 <siprintf>
 8013bf8:	e7d0      	b.n	8013b9c <_scanf_float+0x378>
 8013bfa:	9903      	ldr	r1, [sp, #12]
 8013bfc:	f012 0f04 	tst.w	r2, #4
 8013c00:	f103 0204 	add.w	r2, r3, #4
 8013c04:	600a      	str	r2, [r1, #0]
 8013c06:	d1d9      	bne.n	8013bbc <_scanf_float+0x398>
 8013c08:	f8d3 8000 	ldr.w	r8, [r3]
 8013c0c:	ee10 2a10 	vmov	r2, s0
 8013c10:	ee10 0a10 	vmov	r0, s0
 8013c14:	463b      	mov	r3, r7
 8013c16:	4639      	mov	r1, r7
 8013c18:	f7ec ff88 	bl	8000b2c <__aeabi_dcmpun>
 8013c1c:	b128      	cbz	r0, 8013c2a <_scanf_float+0x406>
 8013c1e:	4808      	ldr	r0, [pc, #32]	; (8013c40 <_scanf_float+0x41c>)
 8013c20:	f000 f940 	bl	8013ea4 <nanf>
 8013c24:	ed88 0a00 	vstr	s0, [r8]
 8013c28:	e7cb      	b.n	8013bc2 <_scanf_float+0x39e>
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	4639      	mov	r1, r7
 8013c2e:	f7ec ffdb 	bl	8000be8 <__aeabi_d2f>
 8013c32:	f8c8 0000 	str.w	r0, [r8]
 8013c36:	e7c4      	b.n	8013bc2 <_scanf_float+0x39e>
 8013c38:	2500      	movs	r5, #0
 8013c3a:	e634      	b.n	80138a6 <_scanf_float+0x82>
 8013c3c:	08019420 	.word	0x08019420
 8013c40:	08019f28 	.word	0x08019f28

08013c44 <_perror_r>:
 8013c44:	6983      	ldr	r3, [r0, #24]
 8013c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c48:	68c4      	ldr	r4, [r0, #12]
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	460e      	mov	r6, r1
 8013c4e:	b90b      	cbnz	r3, 8013c54 <_perror_r+0x10>
 8013c50:	f002 fadc 	bl	801620c <__sinit>
 8013c54:	4b43      	ldr	r3, [pc, #268]	; (8013d64 <_perror_r+0x120>)
 8013c56:	429c      	cmp	r4, r3
 8013c58:	d132      	bne.n	8013cc0 <_perror_r+0x7c>
 8013c5a:	686c      	ldr	r4, [r5, #4]
 8013c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c5e:	07d8      	lsls	r0, r3, #31
 8013c60:	d405      	bmi.n	8013c6e <_perror_r+0x2a>
 8013c62:	89a3      	ldrh	r3, [r4, #12]
 8013c64:	0599      	lsls	r1, r3, #22
 8013c66:	d402      	bmi.n	8013c6e <_perror_r+0x2a>
 8013c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c6a:	f002 fee0 	bl	8016a2e <__retarget_lock_acquire_recursive>
 8013c6e:	4621      	mov	r1, r4
 8013c70:	4628      	mov	r0, r5
 8013c72:	f002 f9f9 	bl	8016068 <_fflush_r>
 8013c76:	bb6e      	cbnz	r6, 8013cd4 <_perror_r+0x90>
 8013c78:	6829      	ldr	r1, [r5, #0]
 8013c7a:	ab01      	add	r3, sp, #4
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f000 f97a 	bl	8013f78 <_strerror_r>
 8013c84:	4607      	mov	r7, r0
 8013c86:	2800      	cmp	r0, #0
 8013c88:	d14f      	bne.n	8013d2a <_perror_r+0xe6>
 8013c8a:	4837      	ldr	r0, [pc, #220]	; (8013d68 <_perror_r+0x124>)
 8013c8c:	4f36      	ldr	r7, [pc, #216]	; (8013d68 <_perror_r+0x124>)
 8013c8e:	f7ec fa9f 	bl	80001d0 <strlen>
 8013c92:	4606      	mov	r6, r0
 8013c94:	b156      	cbz	r6, 8013cac <_perror_r+0x68>
 8013c96:	4620      	mov	r0, r4
 8013c98:	f002 fa22 	bl	80160e0 <fileno>
 8013c9c:	4633      	mov	r3, r6
 8013c9e:	4601      	mov	r1, r0
 8013ca0:	463a      	mov	r2, r7
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f001 fa50 	bl	8015148 <_write_r>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	da51      	bge.n	8013d50 <_perror_r+0x10c>
 8013cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013cb6:	07d2      	lsls	r2, r2, #31
 8013cb8:	81a3      	strh	r3, [r4, #12]
 8013cba:	d54c      	bpl.n	8013d56 <_perror_r+0x112>
 8013cbc:	b003      	add	sp, #12
 8013cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc0:	4b2a      	ldr	r3, [pc, #168]	; (8013d6c <_perror_r+0x128>)
 8013cc2:	429c      	cmp	r4, r3
 8013cc4:	d101      	bne.n	8013cca <_perror_r+0x86>
 8013cc6:	68ac      	ldr	r4, [r5, #8]
 8013cc8:	e7c8      	b.n	8013c5c <_perror_r+0x18>
 8013cca:	4b29      	ldr	r3, [pc, #164]	; (8013d70 <_perror_r+0x12c>)
 8013ccc:	429c      	cmp	r4, r3
 8013cce:	bf08      	it	eq
 8013cd0:	68ec      	ldreq	r4, [r5, #12]
 8013cd2:	e7c3      	b.n	8013c5c <_perror_r+0x18>
 8013cd4:	7833      	ldrb	r3, [r6, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d0ce      	beq.n	8013c78 <_perror_r+0x34>
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f7ec fa78 	bl	80001d0 <strlen>
 8013ce0:	4607      	mov	r7, r0
 8013ce2:	b157      	cbz	r7, 8013cfa <_perror_r+0xb6>
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f002 f9fb 	bl	80160e0 <fileno>
 8013cea:	463b      	mov	r3, r7
 8013cec:	4601      	mov	r1, r0
 8013cee:	4632      	mov	r2, r6
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	f001 fa29 	bl	8015148 <_write_r>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	da14      	bge.n	8013d24 <_perror_r+0xe0>
 8013cfa:	481e      	ldr	r0, [pc, #120]	; (8013d74 <_perror_r+0x130>)
 8013cfc:	4f1d      	ldr	r7, [pc, #116]	; (8013d74 <_perror_r+0x130>)
 8013cfe:	f7ec fa67 	bl	80001d0 <strlen>
 8013d02:	4606      	mov	r6, r0
 8013d04:	2e00      	cmp	r6, #0
 8013d06:	d0b7      	beq.n	8013c78 <_perror_r+0x34>
 8013d08:	4620      	mov	r0, r4
 8013d0a:	f002 f9e9 	bl	80160e0 <fileno>
 8013d0e:	4633      	mov	r3, r6
 8013d10:	4601      	mov	r1, r0
 8013d12:	463a      	mov	r2, r7
 8013d14:	4628      	mov	r0, r5
 8013d16:	f001 fa17 	bl	8015148 <_write_r>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	dbac      	blt.n	8013c78 <_perror_r+0x34>
 8013d1e:	1a36      	subs	r6, r6, r0
 8013d20:	4407      	add	r7, r0
 8013d22:	e7ef      	b.n	8013d04 <_perror_r+0xc0>
 8013d24:	1a3f      	subs	r7, r7, r0
 8013d26:	4406      	add	r6, r0
 8013d28:	e7db      	b.n	8013ce2 <_perror_r+0x9e>
 8013d2a:	f7ec fa51 	bl	80001d0 <strlen>
 8013d2e:	4606      	mov	r6, r0
 8013d30:	2e00      	cmp	r6, #0
 8013d32:	d0aa      	beq.n	8013c8a <_perror_r+0x46>
 8013d34:	4620      	mov	r0, r4
 8013d36:	f002 f9d3 	bl	80160e0 <fileno>
 8013d3a:	4633      	mov	r3, r6
 8013d3c:	4601      	mov	r1, r0
 8013d3e:	463a      	mov	r2, r7
 8013d40:	4628      	mov	r0, r5
 8013d42:	f001 fa01 	bl	8015148 <_write_r>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	db9f      	blt.n	8013c8a <_perror_r+0x46>
 8013d4a:	1a36      	subs	r6, r6, r0
 8013d4c:	4407      	add	r7, r0
 8013d4e:	e7ef      	b.n	8013d30 <_perror_r+0xec>
 8013d50:	1a36      	subs	r6, r6, r0
 8013d52:	4407      	add	r7, r0
 8013d54:	e79e      	b.n	8013c94 <_perror_r+0x50>
 8013d56:	059b      	lsls	r3, r3, #22
 8013d58:	d4b0      	bmi.n	8013cbc <_perror_r+0x78>
 8013d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d5c:	f002 fe68 	bl	8016a30 <__retarget_lock_release_recursive>
 8013d60:	e7ac      	b.n	8013cbc <_perror_r+0x78>
 8013d62:	bf00      	nop
 8013d64:	08019cc4 	.word	0x08019cc4
 8013d68:	08019f27 	.word	0x08019f27
 8013d6c:	08019ce4 	.word	0x08019ce4
 8013d70:	08019ca4 	.word	0x08019ca4
 8013d74:	08019ef7 	.word	0x08019ef7

08013d78 <perror>:
 8013d78:	4b02      	ldr	r3, [pc, #8]	; (8013d84 <perror+0xc>)
 8013d7a:	4601      	mov	r1, r0
 8013d7c:	6818      	ldr	r0, [r3, #0]
 8013d7e:	f7ff bf61 	b.w	8013c44 <_perror_r>
 8013d82:	bf00      	nop
 8013d84:	20000190 	.word	0x20000190

08013d88 <iprintf>:
 8013d88:	b40f      	push	{r0, r1, r2, r3}
 8013d8a:	4b0a      	ldr	r3, [pc, #40]	; (8013db4 <iprintf+0x2c>)
 8013d8c:	b513      	push	{r0, r1, r4, lr}
 8013d8e:	681c      	ldr	r4, [r3, #0]
 8013d90:	b124      	cbz	r4, 8013d9c <iprintf+0x14>
 8013d92:	69a3      	ldr	r3, [r4, #24]
 8013d94:	b913      	cbnz	r3, 8013d9c <iprintf+0x14>
 8013d96:	4620      	mov	r0, r4
 8013d98:	f002 fa38 	bl	801620c <__sinit>
 8013d9c:	ab05      	add	r3, sp, #20
 8013d9e:	9a04      	ldr	r2, [sp, #16]
 8013da0:	68a1      	ldr	r1, [r4, #8]
 8013da2:	9301      	str	r3, [sp, #4]
 8013da4:	4620      	mov	r0, r4
 8013da6:	f003 fe23 	bl	80179f0 <_vfiprintf_r>
 8013daa:	b002      	add	sp, #8
 8013dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013db0:	b004      	add	sp, #16
 8013db2:	4770      	bx	lr
 8013db4:	20000190 	.word	0x20000190

08013db8 <_puts_r>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	460e      	mov	r6, r1
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	b118      	cbz	r0, 8013dc8 <_puts_r+0x10>
 8013dc0:	6983      	ldr	r3, [r0, #24]
 8013dc2:	b90b      	cbnz	r3, 8013dc8 <_puts_r+0x10>
 8013dc4:	f002 fa22 	bl	801620c <__sinit>
 8013dc8:	69ab      	ldr	r3, [r5, #24]
 8013dca:	68ac      	ldr	r4, [r5, #8]
 8013dcc:	b913      	cbnz	r3, 8013dd4 <_puts_r+0x1c>
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f002 fa1c 	bl	801620c <__sinit>
 8013dd4:	4b2c      	ldr	r3, [pc, #176]	; (8013e88 <_puts_r+0xd0>)
 8013dd6:	429c      	cmp	r4, r3
 8013dd8:	d120      	bne.n	8013e1c <_puts_r+0x64>
 8013dda:	686c      	ldr	r4, [r5, #4]
 8013ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013dde:	07db      	lsls	r3, r3, #31
 8013de0:	d405      	bmi.n	8013dee <_puts_r+0x36>
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	0598      	lsls	r0, r3, #22
 8013de6:	d402      	bmi.n	8013dee <_puts_r+0x36>
 8013de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dea:	f002 fe20 	bl	8016a2e <__retarget_lock_acquire_recursive>
 8013dee:	89a3      	ldrh	r3, [r4, #12]
 8013df0:	0719      	lsls	r1, r3, #28
 8013df2:	d51d      	bpl.n	8013e30 <_puts_r+0x78>
 8013df4:	6923      	ldr	r3, [r4, #16]
 8013df6:	b1db      	cbz	r3, 8013e30 <_puts_r+0x78>
 8013df8:	3e01      	subs	r6, #1
 8013dfa:	68a3      	ldr	r3, [r4, #8]
 8013dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e00:	3b01      	subs	r3, #1
 8013e02:	60a3      	str	r3, [r4, #8]
 8013e04:	bb39      	cbnz	r1, 8013e56 <_puts_r+0x9e>
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	da38      	bge.n	8013e7c <_puts_r+0xc4>
 8013e0a:	4622      	mov	r2, r4
 8013e0c:	210a      	movs	r1, #10
 8013e0e:	4628      	mov	r0, r5
 8013e10:	f001 f948 	bl	80150a4 <__swbuf_r>
 8013e14:	3001      	adds	r0, #1
 8013e16:	d011      	beq.n	8013e3c <_puts_r+0x84>
 8013e18:	250a      	movs	r5, #10
 8013e1a:	e011      	b.n	8013e40 <_puts_r+0x88>
 8013e1c:	4b1b      	ldr	r3, [pc, #108]	; (8013e8c <_puts_r+0xd4>)
 8013e1e:	429c      	cmp	r4, r3
 8013e20:	d101      	bne.n	8013e26 <_puts_r+0x6e>
 8013e22:	68ac      	ldr	r4, [r5, #8]
 8013e24:	e7da      	b.n	8013ddc <_puts_r+0x24>
 8013e26:	4b1a      	ldr	r3, [pc, #104]	; (8013e90 <_puts_r+0xd8>)
 8013e28:	429c      	cmp	r4, r3
 8013e2a:	bf08      	it	eq
 8013e2c:	68ec      	ldreq	r4, [r5, #12]
 8013e2e:	e7d5      	b.n	8013ddc <_puts_r+0x24>
 8013e30:	4621      	mov	r1, r4
 8013e32:	4628      	mov	r0, r5
 8013e34:	f001 f99a 	bl	801516c <__swsetup_r>
 8013e38:	2800      	cmp	r0, #0
 8013e3a:	d0dd      	beq.n	8013df8 <_puts_r+0x40>
 8013e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8013e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e42:	07da      	lsls	r2, r3, #31
 8013e44:	d405      	bmi.n	8013e52 <_puts_r+0x9a>
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	059b      	lsls	r3, r3, #22
 8013e4a:	d402      	bmi.n	8013e52 <_puts_r+0x9a>
 8013e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e4e:	f002 fdef 	bl	8016a30 <__retarget_lock_release_recursive>
 8013e52:	4628      	mov	r0, r5
 8013e54:	bd70      	pop	{r4, r5, r6, pc}
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	da04      	bge.n	8013e64 <_puts_r+0xac>
 8013e5a:	69a2      	ldr	r2, [r4, #24]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	dc06      	bgt.n	8013e6e <_puts_r+0xb6>
 8013e60:	290a      	cmp	r1, #10
 8013e62:	d004      	beq.n	8013e6e <_puts_r+0xb6>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	1c5a      	adds	r2, r3, #1
 8013e68:	6022      	str	r2, [r4, #0]
 8013e6a:	7019      	strb	r1, [r3, #0]
 8013e6c:	e7c5      	b.n	8013dfa <_puts_r+0x42>
 8013e6e:	4622      	mov	r2, r4
 8013e70:	4628      	mov	r0, r5
 8013e72:	f001 f917 	bl	80150a4 <__swbuf_r>
 8013e76:	3001      	adds	r0, #1
 8013e78:	d1bf      	bne.n	8013dfa <_puts_r+0x42>
 8013e7a:	e7df      	b.n	8013e3c <_puts_r+0x84>
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	250a      	movs	r5, #10
 8013e80:	1c5a      	adds	r2, r3, #1
 8013e82:	6022      	str	r2, [r4, #0]
 8013e84:	701d      	strb	r5, [r3, #0]
 8013e86:	e7db      	b.n	8013e40 <_puts_r+0x88>
 8013e88:	08019cc4 	.word	0x08019cc4
 8013e8c:	08019ce4 	.word	0x08019ce4
 8013e90:	08019ca4 	.word	0x08019ca4

08013e94 <puts>:
 8013e94:	4b02      	ldr	r3, [pc, #8]	; (8013ea0 <puts+0xc>)
 8013e96:	4601      	mov	r1, r0
 8013e98:	6818      	ldr	r0, [r3, #0]
 8013e9a:	f7ff bf8d 	b.w	8013db8 <_puts_r>
 8013e9e:	bf00      	nop
 8013ea0:	20000190 	.word	0x20000190

08013ea4 <nanf>:
 8013ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013eac <nanf+0x8>
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	7fc00000 	.word	0x7fc00000

08013eb0 <siprintf>:
 8013eb0:	b40e      	push	{r1, r2, r3}
 8013eb2:	b500      	push	{lr}
 8013eb4:	b09c      	sub	sp, #112	; 0x70
 8013eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8013eb8:	9002      	str	r0, [sp, #8]
 8013eba:	9006      	str	r0, [sp, #24]
 8013ebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ec0:	4809      	ldr	r0, [pc, #36]	; (8013ee8 <siprintf+0x38>)
 8013ec2:	9107      	str	r1, [sp, #28]
 8013ec4:	9104      	str	r1, [sp, #16]
 8013ec6:	4909      	ldr	r1, [pc, #36]	; (8013eec <siprintf+0x3c>)
 8013ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ecc:	9105      	str	r1, [sp, #20]
 8013ece:	6800      	ldr	r0, [r0, #0]
 8013ed0:	9301      	str	r3, [sp, #4]
 8013ed2:	a902      	add	r1, sp, #8
 8013ed4:	f003 fc62 	bl	801779c <_svfiprintf_r>
 8013ed8:	9b02      	ldr	r3, [sp, #8]
 8013eda:	2200      	movs	r2, #0
 8013edc:	701a      	strb	r2, [r3, #0]
 8013ede:	b01c      	add	sp, #112	; 0x70
 8013ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ee4:	b003      	add	sp, #12
 8013ee6:	4770      	bx	lr
 8013ee8:	20000190 	.word	0x20000190
 8013eec:	ffff0208 	.word	0xffff0208

08013ef0 <__sread>:
 8013ef0:	b510      	push	{r4, lr}
 8013ef2:	460c      	mov	r4, r1
 8013ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef8:	f003 feaa 	bl	8017c50 <_read_r>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	bfab      	itete	ge
 8013f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f02:	89a3      	ldrhlt	r3, [r4, #12]
 8013f04:	181b      	addge	r3, r3, r0
 8013f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f0a:	bfac      	ite	ge
 8013f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f0e:	81a3      	strhlt	r3, [r4, #12]
 8013f10:	bd10      	pop	{r4, pc}

08013f12 <__swrite>:
 8013f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f16:	461f      	mov	r7, r3
 8013f18:	898b      	ldrh	r3, [r1, #12]
 8013f1a:	05db      	lsls	r3, r3, #23
 8013f1c:	4605      	mov	r5, r0
 8013f1e:	460c      	mov	r4, r1
 8013f20:	4616      	mov	r6, r2
 8013f22:	d505      	bpl.n	8013f30 <__swrite+0x1e>
 8013f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f28:	2302      	movs	r3, #2
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f002 fd82 	bl	8016a34 <_lseek_r>
 8013f30:	89a3      	ldrh	r3, [r4, #12]
 8013f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f3a:	81a3      	strh	r3, [r4, #12]
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	463b      	mov	r3, r7
 8013f40:	4628      	mov	r0, r5
 8013f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f46:	f001 b8ff 	b.w	8015148 <_write_r>

08013f4a <__sseek>:
 8013f4a:	b510      	push	{r4, lr}
 8013f4c:	460c      	mov	r4, r1
 8013f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f52:	f002 fd6f 	bl	8016a34 <_lseek_r>
 8013f56:	1c43      	adds	r3, r0, #1
 8013f58:	89a3      	ldrh	r3, [r4, #12]
 8013f5a:	bf15      	itete	ne
 8013f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f66:	81a3      	strheq	r3, [r4, #12]
 8013f68:	bf18      	it	ne
 8013f6a:	81a3      	strhne	r3, [r4, #12]
 8013f6c:	bd10      	pop	{r4, pc}

08013f6e <__sclose>:
 8013f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f72:	f001 b969 	b.w	8015248 <_close_r>
	...

08013f78 <_strerror_r>:
 8013f78:	b510      	push	{r4, lr}
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	4608      	mov	r0, r1
 8013f7e:	4611      	mov	r1, r2
 8013f80:	288e      	cmp	r0, #142	; 0x8e
 8013f82:	f200 8130 	bhi.w	80141e6 <_strerror_r+0x26e>
 8013f86:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013f8a:	0139      	.short	0x0139
 8013f8c:	0092008f 	.word	0x0092008f
 8013f90:	00960094 	.word	0x00960094
 8013f94:	009a0098 	.word	0x009a0098
 8013f98:	009e009c 	.word	0x009e009c
 8013f9c:	00a400a2 	.word	0x00a400a2
 8013fa0:	00aa00a8 	.word	0x00aa00a8
 8013fa4:	00ae00ac 	.word	0x00ae00ac
 8013fa8:	00b0012e 	.word	0x00b0012e
 8013fac:	00b400b2 	.word	0x00b400b2
 8013fb0:	00b800b6 	.word	0x00b800b6
 8013fb4:	00c000be 	.word	0x00c000be
 8013fb8:	00c800c6 	.word	0x00c800c6
 8013fbc:	00cc00ca 	.word	0x00cc00ca
 8013fc0:	00d200ce 	.word	0x00d200ce
 8013fc4:	00d800d6 	.word	0x00d800d6
 8013fc8:	00dc00da 	.word	0x00dc00da
 8013fcc:	00e000de 	.word	0x00e000de
 8013fd0:	00e400e2 	.word	0x00e400e2
 8013fd4:	012e012e 	.word	0x012e012e
 8013fd8:	012e012e 	.word	0x012e012e
 8013fdc:	012e012e 	.word	0x012e012e
 8013fe0:	012e012e 	.word	0x012e012e
 8013fe4:	00ec00e8 	.word	0x00ec00e8
 8013fe8:	012e012e 	.word	0x012e012e
 8013fec:	012e012e 	.word	0x012e012e
 8013ff0:	012e012e 	.word	0x012e012e
 8013ff4:	012e012e 	.word	0x012e012e
 8013ff8:	012e012e 	.word	0x012e012e
 8013ffc:	012e012e 	.word	0x012e012e
 8014000:	00ee012e 	.word	0x00ee012e
 8014004:	00f00108 	.word	0x00f00108
 8014008:	012e00f2 	.word	0x012e00f2
 801400c:	012e012e 	.word	0x012e012e
 8014010:	012e00f4 	.word	0x012e00f4
 8014014:	012e012e 	.word	0x012e012e
 8014018:	012e00f6 	.word	0x012e00f6
 801401c:	00fa012e 	.word	0x00fa012e
 8014020:	012e012e 	.word	0x012e012e
 8014024:	012e00fc 	.word	0x012e00fc
 8014028:	012e012e 	.word	0x012e012e
 801402c:	012e012e 	.word	0x012e012e
 8014030:	012e012e 	.word	0x012e012e
 8014034:	012e012e 	.word	0x012e012e
 8014038:	00fe012e 	.word	0x00fe012e
 801403c:	0100012e 	.word	0x0100012e
 8014040:	01040102 	.word	0x01040102
 8014044:	012e012e 	.word	0x012e012e
 8014048:	012e0126 	.word	0x012e0126
 801404c:	012e012e 	.word	0x012e012e
 8014050:	012e012e 	.word	0x012e012e
 8014054:	012e012e 	.word	0x012e012e
 8014058:	0114012e 	.word	0x0114012e
 801405c:	010a0106 	.word	0x010a0106
 8014060:	010e010c 	.word	0x010e010c
 8014064:	012e0110 	.word	0x012e0110
 8014068:	01160112 	.word	0x01160112
 801406c:	00ea011a 	.word	0x00ea011a
 8014070:	012c00c2 	.word	0x012c00c2
 8014074:	00d000ba 	.word	0x00d000ba
 8014078:	00a000bc 	.word	0x00a000bc
 801407c:	012a00a6 	.word	0x012a00a6
 8014080:	012e00f8 	.word	0x012e00f8
 8014084:	00c40118 	.word	0x00c40118
 8014088:	011c011e 	.word	0x011c011e
 801408c:	012e012e 	.word	0x012e012e
 8014090:	012e012e 	.word	0x012e012e
 8014094:	00d4012e 	.word	0x00d4012e
 8014098:	012e012e 	.word	0x012e012e
 801409c:	00e6012e 	.word	0x00e6012e
 80140a0:	01200128 	.word	0x01200128
 80140a4:	01240122 	.word	0x01240122
 80140a8:	4b55      	ldr	r3, [pc, #340]	; (8014200 <_strerror_r+0x288>)
 80140aa:	4618      	mov	r0, r3
 80140ac:	bd10      	pop	{r4, pc}
 80140ae:	4b55      	ldr	r3, [pc, #340]	; (8014204 <_strerror_r+0x28c>)
 80140b0:	e7fb      	b.n	80140aa <_strerror_r+0x132>
 80140b2:	4b55      	ldr	r3, [pc, #340]	; (8014208 <_strerror_r+0x290>)
 80140b4:	e7f9      	b.n	80140aa <_strerror_r+0x132>
 80140b6:	4b55      	ldr	r3, [pc, #340]	; (801420c <_strerror_r+0x294>)
 80140b8:	e7f7      	b.n	80140aa <_strerror_r+0x132>
 80140ba:	4b55      	ldr	r3, [pc, #340]	; (8014210 <_strerror_r+0x298>)
 80140bc:	e7f5      	b.n	80140aa <_strerror_r+0x132>
 80140be:	4b55      	ldr	r3, [pc, #340]	; (8014214 <_strerror_r+0x29c>)
 80140c0:	e7f3      	b.n	80140aa <_strerror_r+0x132>
 80140c2:	4b55      	ldr	r3, [pc, #340]	; (8014218 <_strerror_r+0x2a0>)
 80140c4:	e7f1      	b.n	80140aa <_strerror_r+0x132>
 80140c6:	4b55      	ldr	r3, [pc, #340]	; (801421c <_strerror_r+0x2a4>)
 80140c8:	e7ef      	b.n	80140aa <_strerror_r+0x132>
 80140ca:	4b55      	ldr	r3, [pc, #340]	; (8014220 <_strerror_r+0x2a8>)
 80140cc:	e7ed      	b.n	80140aa <_strerror_r+0x132>
 80140ce:	4b55      	ldr	r3, [pc, #340]	; (8014224 <_strerror_r+0x2ac>)
 80140d0:	e7eb      	b.n	80140aa <_strerror_r+0x132>
 80140d2:	4b55      	ldr	r3, [pc, #340]	; (8014228 <_strerror_r+0x2b0>)
 80140d4:	e7e9      	b.n	80140aa <_strerror_r+0x132>
 80140d6:	4b55      	ldr	r3, [pc, #340]	; (801422c <_strerror_r+0x2b4>)
 80140d8:	e7e7      	b.n	80140aa <_strerror_r+0x132>
 80140da:	4b55      	ldr	r3, [pc, #340]	; (8014230 <_strerror_r+0x2b8>)
 80140dc:	e7e5      	b.n	80140aa <_strerror_r+0x132>
 80140de:	4b55      	ldr	r3, [pc, #340]	; (8014234 <_strerror_r+0x2bc>)
 80140e0:	e7e3      	b.n	80140aa <_strerror_r+0x132>
 80140e2:	4b55      	ldr	r3, [pc, #340]	; (8014238 <_strerror_r+0x2c0>)
 80140e4:	e7e1      	b.n	80140aa <_strerror_r+0x132>
 80140e6:	4b55      	ldr	r3, [pc, #340]	; (801423c <_strerror_r+0x2c4>)
 80140e8:	e7df      	b.n	80140aa <_strerror_r+0x132>
 80140ea:	4b55      	ldr	r3, [pc, #340]	; (8014240 <_strerror_r+0x2c8>)
 80140ec:	e7dd      	b.n	80140aa <_strerror_r+0x132>
 80140ee:	4b55      	ldr	r3, [pc, #340]	; (8014244 <_strerror_r+0x2cc>)
 80140f0:	e7db      	b.n	80140aa <_strerror_r+0x132>
 80140f2:	4b55      	ldr	r3, [pc, #340]	; (8014248 <_strerror_r+0x2d0>)
 80140f4:	e7d9      	b.n	80140aa <_strerror_r+0x132>
 80140f6:	4b55      	ldr	r3, [pc, #340]	; (801424c <_strerror_r+0x2d4>)
 80140f8:	e7d7      	b.n	80140aa <_strerror_r+0x132>
 80140fa:	4b55      	ldr	r3, [pc, #340]	; (8014250 <_strerror_r+0x2d8>)
 80140fc:	e7d5      	b.n	80140aa <_strerror_r+0x132>
 80140fe:	4b55      	ldr	r3, [pc, #340]	; (8014254 <_strerror_r+0x2dc>)
 8014100:	e7d3      	b.n	80140aa <_strerror_r+0x132>
 8014102:	4b55      	ldr	r3, [pc, #340]	; (8014258 <_strerror_r+0x2e0>)
 8014104:	e7d1      	b.n	80140aa <_strerror_r+0x132>
 8014106:	4b55      	ldr	r3, [pc, #340]	; (801425c <_strerror_r+0x2e4>)
 8014108:	e7cf      	b.n	80140aa <_strerror_r+0x132>
 801410a:	4b55      	ldr	r3, [pc, #340]	; (8014260 <_strerror_r+0x2e8>)
 801410c:	e7cd      	b.n	80140aa <_strerror_r+0x132>
 801410e:	4b55      	ldr	r3, [pc, #340]	; (8014264 <_strerror_r+0x2ec>)
 8014110:	e7cb      	b.n	80140aa <_strerror_r+0x132>
 8014112:	4b55      	ldr	r3, [pc, #340]	; (8014268 <_strerror_r+0x2f0>)
 8014114:	e7c9      	b.n	80140aa <_strerror_r+0x132>
 8014116:	4b55      	ldr	r3, [pc, #340]	; (801426c <_strerror_r+0x2f4>)
 8014118:	e7c7      	b.n	80140aa <_strerror_r+0x132>
 801411a:	4b55      	ldr	r3, [pc, #340]	; (8014270 <_strerror_r+0x2f8>)
 801411c:	e7c5      	b.n	80140aa <_strerror_r+0x132>
 801411e:	4b55      	ldr	r3, [pc, #340]	; (8014274 <_strerror_r+0x2fc>)
 8014120:	e7c3      	b.n	80140aa <_strerror_r+0x132>
 8014122:	4b55      	ldr	r3, [pc, #340]	; (8014278 <_strerror_r+0x300>)
 8014124:	e7c1      	b.n	80140aa <_strerror_r+0x132>
 8014126:	4b55      	ldr	r3, [pc, #340]	; (801427c <_strerror_r+0x304>)
 8014128:	e7bf      	b.n	80140aa <_strerror_r+0x132>
 801412a:	4b55      	ldr	r3, [pc, #340]	; (8014280 <_strerror_r+0x308>)
 801412c:	e7bd      	b.n	80140aa <_strerror_r+0x132>
 801412e:	4b55      	ldr	r3, [pc, #340]	; (8014284 <_strerror_r+0x30c>)
 8014130:	e7bb      	b.n	80140aa <_strerror_r+0x132>
 8014132:	4b55      	ldr	r3, [pc, #340]	; (8014288 <_strerror_r+0x310>)
 8014134:	e7b9      	b.n	80140aa <_strerror_r+0x132>
 8014136:	4b55      	ldr	r3, [pc, #340]	; (801428c <_strerror_r+0x314>)
 8014138:	e7b7      	b.n	80140aa <_strerror_r+0x132>
 801413a:	4b55      	ldr	r3, [pc, #340]	; (8014290 <_strerror_r+0x318>)
 801413c:	e7b5      	b.n	80140aa <_strerror_r+0x132>
 801413e:	4b55      	ldr	r3, [pc, #340]	; (8014294 <_strerror_r+0x31c>)
 8014140:	e7b3      	b.n	80140aa <_strerror_r+0x132>
 8014142:	4b55      	ldr	r3, [pc, #340]	; (8014298 <_strerror_r+0x320>)
 8014144:	e7b1      	b.n	80140aa <_strerror_r+0x132>
 8014146:	4b55      	ldr	r3, [pc, #340]	; (801429c <_strerror_r+0x324>)
 8014148:	e7af      	b.n	80140aa <_strerror_r+0x132>
 801414a:	4b55      	ldr	r3, [pc, #340]	; (80142a0 <_strerror_r+0x328>)
 801414c:	e7ad      	b.n	80140aa <_strerror_r+0x132>
 801414e:	4b55      	ldr	r3, [pc, #340]	; (80142a4 <_strerror_r+0x32c>)
 8014150:	e7ab      	b.n	80140aa <_strerror_r+0x132>
 8014152:	4b55      	ldr	r3, [pc, #340]	; (80142a8 <_strerror_r+0x330>)
 8014154:	e7a9      	b.n	80140aa <_strerror_r+0x132>
 8014156:	4b55      	ldr	r3, [pc, #340]	; (80142ac <_strerror_r+0x334>)
 8014158:	e7a7      	b.n	80140aa <_strerror_r+0x132>
 801415a:	4b55      	ldr	r3, [pc, #340]	; (80142b0 <_strerror_r+0x338>)
 801415c:	e7a5      	b.n	80140aa <_strerror_r+0x132>
 801415e:	4b55      	ldr	r3, [pc, #340]	; (80142b4 <_strerror_r+0x33c>)
 8014160:	e7a3      	b.n	80140aa <_strerror_r+0x132>
 8014162:	4b55      	ldr	r3, [pc, #340]	; (80142b8 <_strerror_r+0x340>)
 8014164:	e7a1      	b.n	80140aa <_strerror_r+0x132>
 8014166:	4b55      	ldr	r3, [pc, #340]	; (80142bc <_strerror_r+0x344>)
 8014168:	e79f      	b.n	80140aa <_strerror_r+0x132>
 801416a:	4b55      	ldr	r3, [pc, #340]	; (80142c0 <_strerror_r+0x348>)
 801416c:	e79d      	b.n	80140aa <_strerror_r+0x132>
 801416e:	4b55      	ldr	r3, [pc, #340]	; (80142c4 <_strerror_r+0x34c>)
 8014170:	e79b      	b.n	80140aa <_strerror_r+0x132>
 8014172:	4b55      	ldr	r3, [pc, #340]	; (80142c8 <_strerror_r+0x350>)
 8014174:	e799      	b.n	80140aa <_strerror_r+0x132>
 8014176:	4b55      	ldr	r3, [pc, #340]	; (80142cc <_strerror_r+0x354>)
 8014178:	e797      	b.n	80140aa <_strerror_r+0x132>
 801417a:	4b55      	ldr	r3, [pc, #340]	; (80142d0 <_strerror_r+0x358>)
 801417c:	e795      	b.n	80140aa <_strerror_r+0x132>
 801417e:	4b55      	ldr	r3, [pc, #340]	; (80142d4 <_strerror_r+0x35c>)
 8014180:	e793      	b.n	80140aa <_strerror_r+0x132>
 8014182:	4b55      	ldr	r3, [pc, #340]	; (80142d8 <_strerror_r+0x360>)
 8014184:	e791      	b.n	80140aa <_strerror_r+0x132>
 8014186:	4b55      	ldr	r3, [pc, #340]	; (80142dc <_strerror_r+0x364>)
 8014188:	e78f      	b.n	80140aa <_strerror_r+0x132>
 801418a:	4b55      	ldr	r3, [pc, #340]	; (80142e0 <_strerror_r+0x368>)
 801418c:	e78d      	b.n	80140aa <_strerror_r+0x132>
 801418e:	4b55      	ldr	r3, [pc, #340]	; (80142e4 <_strerror_r+0x36c>)
 8014190:	e78b      	b.n	80140aa <_strerror_r+0x132>
 8014192:	4b55      	ldr	r3, [pc, #340]	; (80142e8 <_strerror_r+0x370>)
 8014194:	e789      	b.n	80140aa <_strerror_r+0x132>
 8014196:	4b55      	ldr	r3, [pc, #340]	; (80142ec <_strerror_r+0x374>)
 8014198:	e787      	b.n	80140aa <_strerror_r+0x132>
 801419a:	4b55      	ldr	r3, [pc, #340]	; (80142f0 <_strerror_r+0x378>)
 801419c:	e785      	b.n	80140aa <_strerror_r+0x132>
 801419e:	4b55      	ldr	r3, [pc, #340]	; (80142f4 <_strerror_r+0x37c>)
 80141a0:	e783      	b.n	80140aa <_strerror_r+0x132>
 80141a2:	4b55      	ldr	r3, [pc, #340]	; (80142f8 <_strerror_r+0x380>)
 80141a4:	e781      	b.n	80140aa <_strerror_r+0x132>
 80141a6:	4b55      	ldr	r3, [pc, #340]	; (80142fc <_strerror_r+0x384>)
 80141a8:	e77f      	b.n	80140aa <_strerror_r+0x132>
 80141aa:	4b55      	ldr	r3, [pc, #340]	; (8014300 <_strerror_r+0x388>)
 80141ac:	e77d      	b.n	80140aa <_strerror_r+0x132>
 80141ae:	4b55      	ldr	r3, [pc, #340]	; (8014304 <_strerror_r+0x38c>)
 80141b0:	e77b      	b.n	80140aa <_strerror_r+0x132>
 80141b2:	4b55      	ldr	r3, [pc, #340]	; (8014308 <_strerror_r+0x390>)
 80141b4:	e779      	b.n	80140aa <_strerror_r+0x132>
 80141b6:	4b55      	ldr	r3, [pc, #340]	; (801430c <_strerror_r+0x394>)
 80141b8:	e777      	b.n	80140aa <_strerror_r+0x132>
 80141ba:	4b55      	ldr	r3, [pc, #340]	; (8014310 <_strerror_r+0x398>)
 80141bc:	e775      	b.n	80140aa <_strerror_r+0x132>
 80141be:	4b55      	ldr	r3, [pc, #340]	; (8014314 <_strerror_r+0x39c>)
 80141c0:	e773      	b.n	80140aa <_strerror_r+0x132>
 80141c2:	4b55      	ldr	r3, [pc, #340]	; (8014318 <_strerror_r+0x3a0>)
 80141c4:	e771      	b.n	80140aa <_strerror_r+0x132>
 80141c6:	4b55      	ldr	r3, [pc, #340]	; (801431c <_strerror_r+0x3a4>)
 80141c8:	e76f      	b.n	80140aa <_strerror_r+0x132>
 80141ca:	4b55      	ldr	r3, [pc, #340]	; (8014320 <_strerror_r+0x3a8>)
 80141cc:	e76d      	b.n	80140aa <_strerror_r+0x132>
 80141ce:	4b55      	ldr	r3, [pc, #340]	; (8014324 <_strerror_r+0x3ac>)
 80141d0:	e76b      	b.n	80140aa <_strerror_r+0x132>
 80141d2:	4b55      	ldr	r3, [pc, #340]	; (8014328 <_strerror_r+0x3b0>)
 80141d4:	e769      	b.n	80140aa <_strerror_r+0x132>
 80141d6:	4b55      	ldr	r3, [pc, #340]	; (801432c <_strerror_r+0x3b4>)
 80141d8:	e767      	b.n	80140aa <_strerror_r+0x132>
 80141da:	4b55      	ldr	r3, [pc, #340]	; (8014330 <_strerror_r+0x3b8>)
 80141dc:	e765      	b.n	80140aa <_strerror_r+0x132>
 80141de:	4b55      	ldr	r3, [pc, #340]	; (8014334 <_strerror_r+0x3bc>)
 80141e0:	e763      	b.n	80140aa <_strerror_r+0x132>
 80141e2:	4b55      	ldr	r3, [pc, #340]	; (8014338 <_strerror_r+0x3c0>)
 80141e4:	e761      	b.n	80140aa <_strerror_r+0x132>
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	bf14      	ite	ne
 80141ea:	461a      	movne	r2, r3
 80141ec:	4622      	moveq	r2, r4
 80141ee:	f000 ff57 	bl	80150a0 <_user_strerror>
 80141f2:	4b52      	ldr	r3, [pc, #328]	; (801433c <_strerror_r+0x3c4>)
 80141f4:	2800      	cmp	r0, #0
 80141f6:	bf18      	it	ne
 80141f8:	4603      	movne	r3, r0
 80141fa:	e756      	b.n	80140aa <_strerror_r+0x132>
 80141fc:	4b50      	ldr	r3, [pc, #320]	; (8014340 <_strerror_r+0x3c8>)
 80141fe:	e754      	b.n	80140aa <_strerror_r+0x132>
 8014200:	08019425 	.word	0x08019425
 8014204:	0801942f 	.word	0x0801942f
 8014208:	08019449 	.word	0x08019449
 801420c:	08019459 	.word	0x08019459
 8014210:	08019471 	.word	0x08019471
 8014214:	0801947b 	.word	0x0801947b
 8014218:	08019495 	.word	0x08019495
 801421c:	080194a7 	.word	0x080194a7
 8014220:	080194b9 	.word	0x080194b9
 8014224:	080194d2 	.word	0x080194d2
 8014228:	080194e2 	.word	0x080194e2
 801422c:	080194ee 	.word	0x080194ee
 8014230:	0801950b 	.word	0x0801950b
 8014234:	0801951d 	.word	0x0801951d
 8014238:	0801952e 	.word	0x0801952e
 801423c:	08019540 	.word	0x08019540
 8014240:	0801954c 	.word	0x0801954c
 8014244:	08019564 	.word	0x08019564
 8014248:	08019570 	.word	0x08019570
 801424c:	08019582 	.word	0x08019582
 8014250:	08019591 	.word	0x08019591
 8014254:	080195a1 	.word	0x080195a1
 8014258:	080195ae 	.word	0x080195ae
 801425c:	080195cd 	.word	0x080195cd
 8014260:	080195dc 	.word	0x080195dc
 8014264:	080195ed 	.word	0x080195ed
 8014268:	08019611 	.word	0x08019611
 801426c:	0801962f 	.word	0x0801962f
 8014270:	0801964d 	.word	0x0801964d
 8014274:	0801966d 	.word	0x0801966d
 8014278:	08019684 	.word	0x08019684
 801427c:	08019693 	.word	0x08019693
 8014280:	080196a2 	.word	0x080196a2
 8014284:	080196b6 	.word	0x080196b6
 8014288:	080196ce 	.word	0x080196ce
 801428c:	080196dc 	.word	0x080196dc
 8014290:	080196e9 	.word	0x080196e9
 8014294:	080196ff 	.word	0x080196ff
 8014298:	0801970e 	.word	0x0801970e
 801429c:	0801971a 	.word	0x0801971a
 80142a0:	08019749 	.word	0x08019749
 80142a4:	0801975a 	.word	0x0801975a
 80142a8:	08019775 	.word	0x08019775
 80142ac:	08019788 	.word	0x08019788
 80142b0:	0801979e 	.word	0x0801979e
 80142b4:	080197a7 	.word	0x080197a7
 80142b8:	080197be 	.word	0x080197be
 80142bc:	080197c6 	.word	0x080197c6
 80142c0:	080197d3 	.word	0x080197d3
 80142c4:	080197e8 	.word	0x080197e8
 80142c8:	080197fc 	.word	0x080197fc
 80142cc:	08019814 	.word	0x08019814
 80142d0:	08019823 	.word	0x08019823
 80142d4:	08019834 	.word	0x08019834
 80142d8:	08019847 	.word	0x08019847
 80142dc:	08019853 	.word	0x08019853
 80142e0:	0801986c 	.word	0x0801986c
 80142e4:	08019880 	.word	0x08019880
 80142e8:	0801989b 	.word	0x0801989b
 80142ec:	080198b3 	.word	0x080198b3
 80142f0:	080198cd 	.word	0x080198cd
 80142f4:	080198d5 	.word	0x080198d5
 80142f8:	08019905 	.word	0x08019905
 80142fc:	08019924 	.word	0x08019924
 8014300:	08019943 	.word	0x08019943
 8014304:	0801995a 	.word	0x0801995a
 8014308:	0801996d 	.word	0x0801996d
 801430c:	08019986 	.word	0x08019986
 8014310:	0801999d 	.word	0x0801999d
 8014314:	080199b3 	.word	0x080199b3
 8014318:	080199d4 	.word	0x080199d4
 801431c:	080199ec 	.word	0x080199ec
 8014320:	08019a08 	.word	0x08019a08
 8014324:	08019a1b 	.word	0x08019a1b
 8014328:	08019a31 	.word	0x08019a31
 801432c:	08019a45 	.word	0x08019a45
 8014330:	08019a67 	.word	0x08019a67
 8014334:	08019a8d 	.word	0x08019a8d
 8014338:	08019a9e 	.word	0x08019a9e
 801433c:	08019f28 	.word	0x08019f28
 8014340:	08019ab3 	.word	0x08019ab3

08014344 <sulp>:
 8014344:	b570      	push	{r4, r5, r6, lr}
 8014346:	4604      	mov	r4, r0
 8014348:	460d      	mov	r5, r1
 801434a:	ec45 4b10 	vmov	d0, r4, r5
 801434e:	4616      	mov	r6, r2
 8014350:	f002 ff82 	bl	8017258 <__ulp>
 8014354:	ec51 0b10 	vmov	r0, r1, d0
 8014358:	b17e      	cbz	r6, 801437a <sulp+0x36>
 801435a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801435e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014362:	2b00      	cmp	r3, #0
 8014364:	dd09      	ble.n	801437a <sulp+0x36>
 8014366:	051b      	lsls	r3, r3, #20
 8014368:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801436c:	2400      	movs	r4, #0
 801436e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014372:	4622      	mov	r2, r4
 8014374:	462b      	mov	r3, r5
 8014376:	f7ec f93f 	bl	80005f8 <__aeabi_dmul>
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	0000      	movs	r0, r0
	...

08014380 <_strtod_l>:
 8014380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014384:	ed2d 8b02 	vpush	{d8}
 8014388:	b09d      	sub	sp, #116	; 0x74
 801438a:	461f      	mov	r7, r3
 801438c:	2300      	movs	r3, #0
 801438e:	9318      	str	r3, [sp, #96]	; 0x60
 8014390:	4ba2      	ldr	r3, [pc, #648]	; (801461c <_strtod_l+0x29c>)
 8014392:	9213      	str	r2, [sp, #76]	; 0x4c
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	9305      	str	r3, [sp, #20]
 8014398:	4604      	mov	r4, r0
 801439a:	4618      	mov	r0, r3
 801439c:	4688      	mov	r8, r1
 801439e:	f7eb ff17 	bl	80001d0 <strlen>
 80143a2:	f04f 0a00 	mov.w	sl, #0
 80143a6:	4605      	mov	r5, r0
 80143a8:	f04f 0b00 	mov.w	fp, #0
 80143ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80143b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143b2:	781a      	ldrb	r2, [r3, #0]
 80143b4:	2a2b      	cmp	r2, #43	; 0x2b
 80143b6:	d04e      	beq.n	8014456 <_strtod_l+0xd6>
 80143b8:	d83b      	bhi.n	8014432 <_strtod_l+0xb2>
 80143ba:	2a0d      	cmp	r2, #13
 80143bc:	d834      	bhi.n	8014428 <_strtod_l+0xa8>
 80143be:	2a08      	cmp	r2, #8
 80143c0:	d834      	bhi.n	801442c <_strtod_l+0xac>
 80143c2:	2a00      	cmp	r2, #0
 80143c4:	d03e      	beq.n	8014444 <_strtod_l+0xc4>
 80143c6:	2300      	movs	r3, #0
 80143c8:	930a      	str	r3, [sp, #40]	; 0x28
 80143ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80143cc:	7833      	ldrb	r3, [r6, #0]
 80143ce:	2b30      	cmp	r3, #48	; 0x30
 80143d0:	f040 80b0 	bne.w	8014534 <_strtod_l+0x1b4>
 80143d4:	7873      	ldrb	r3, [r6, #1]
 80143d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80143da:	2b58      	cmp	r3, #88	; 0x58
 80143dc:	d168      	bne.n	80144b0 <_strtod_l+0x130>
 80143de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143e0:	9301      	str	r3, [sp, #4]
 80143e2:	ab18      	add	r3, sp, #96	; 0x60
 80143e4:	9702      	str	r7, [sp, #8]
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	4a8d      	ldr	r2, [pc, #564]	; (8014620 <_strtod_l+0x2a0>)
 80143ea:	ab19      	add	r3, sp, #100	; 0x64
 80143ec:	a917      	add	r1, sp, #92	; 0x5c
 80143ee:	4620      	mov	r0, r4
 80143f0:	f002 f810 	bl	8016414 <__gethex>
 80143f4:	f010 0707 	ands.w	r7, r0, #7
 80143f8:	4605      	mov	r5, r0
 80143fa:	d005      	beq.n	8014408 <_strtod_l+0x88>
 80143fc:	2f06      	cmp	r7, #6
 80143fe:	d12c      	bne.n	801445a <_strtod_l+0xda>
 8014400:	3601      	adds	r6, #1
 8014402:	2300      	movs	r3, #0
 8014404:	9617      	str	r6, [sp, #92]	; 0x5c
 8014406:	930a      	str	r3, [sp, #40]	; 0x28
 8014408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801440a:	2b00      	cmp	r3, #0
 801440c:	f040 8590 	bne.w	8014f30 <_strtod_l+0xbb0>
 8014410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014412:	b1eb      	cbz	r3, 8014450 <_strtod_l+0xd0>
 8014414:	4652      	mov	r2, sl
 8014416:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801441a:	ec43 2b10 	vmov	d0, r2, r3
 801441e:	b01d      	add	sp, #116	; 0x74
 8014420:	ecbd 8b02 	vpop	{d8}
 8014424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014428:	2a20      	cmp	r2, #32
 801442a:	d1cc      	bne.n	80143c6 <_strtod_l+0x46>
 801442c:	3301      	adds	r3, #1
 801442e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014430:	e7be      	b.n	80143b0 <_strtod_l+0x30>
 8014432:	2a2d      	cmp	r2, #45	; 0x2d
 8014434:	d1c7      	bne.n	80143c6 <_strtod_l+0x46>
 8014436:	2201      	movs	r2, #1
 8014438:	920a      	str	r2, [sp, #40]	; 0x28
 801443a:	1c5a      	adds	r2, r3, #1
 801443c:	9217      	str	r2, [sp, #92]	; 0x5c
 801443e:	785b      	ldrb	r3, [r3, #1]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1c2      	bne.n	80143ca <_strtod_l+0x4a>
 8014444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014446:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801444a:	2b00      	cmp	r3, #0
 801444c:	f040 856e 	bne.w	8014f2c <_strtod_l+0xbac>
 8014450:	4652      	mov	r2, sl
 8014452:	465b      	mov	r3, fp
 8014454:	e7e1      	b.n	801441a <_strtod_l+0x9a>
 8014456:	2200      	movs	r2, #0
 8014458:	e7ee      	b.n	8014438 <_strtod_l+0xb8>
 801445a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801445c:	b13a      	cbz	r2, 801446e <_strtod_l+0xee>
 801445e:	2135      	movs	r1, #53	; 0x35
 8014460:	a81a      	add	r0, sp, #104	; 0x68
 8014462:	f003 f804 	bl	801746e <__copybits>
 8014466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014468:	4620      	mov	r0, r4
 801446a:	f002 fbc3 	bl	8016bf4 <_Bfree>
 801446e:	3f01      	subs	r7, #1
 8014470:	2f04      	cmp	r7, #4
 8014472:	d806      	bhi.n	8014482 <_strtod_l+0x102>
 8014474:	e8df f007 	tbb	[pc, r7]
 8014478:	1714030a 	.word	0x1714030a
 801447c:	0a          	.byte	0x0a
 801447d:	00          	.byte	0x00
 801447e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014482:	0728      	lsls	r0, r5, #28
 8014484:	d5c0      	bpl.n	8014408 <_strtod_l+0x88>
 8014486:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801448a:	e7bd      	b.n	8014408 <_strtod_l+0x88>
 801448c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014492:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014496:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801449a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801449e:	e7f0      	b.n	8014482 <_strtod_l+0x102>
 80144a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014624 <_strtod_l+0x2a4>
 80144a4:	e7ed      	b.n	8014482 <_strtod_l+0x102>
 80144a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80144aa:	f04f 3aff 	mov.w	sl, #4294967295
 80144ae:	e7e8      	b.n	8014482 <_strtod_l+0x102>
 80144b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144b2:	1c5a      	adds	r2, r3, #1
 80144b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80144b6:	785b      	ldrb	r3, [r3, #1]
 80144b8:	2b30      	cmp	r3, #48	; 0x30
 80144ba:	d0f9      	beq.n	80144b0 <_strtod_l+0x130>
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d0a3      	beq.n	8014408 <_strtod_l+0x88>
 80144c0:	2301      	movs	r3, #1
 80144c2:	f04f 0900 	mov.w	r9, #0
 80144c6:	9304      	str	r3, [sp, #16]
 80144c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144ca:	9308      	str	r3, [sp, #32]
 80144cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80144d0:	464f      	mov	r7, r9
 80144d2:	220a      	movs	r2, #10
 80144d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80144d6:	7806      	ldrb	r6, [r0, #0]
 80144d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80144dc:	b2d9      	uxtb	r1, r3
 80144de:	2909      	cmp	r1, #9
 80144e0:	d92a      	bls.n	8014538 <_strtod_l+0x1b8>
 80144e2:	9905      	ldr	r1, [sp, #20]
 80144e4:	462a      	mov	r2, r5
 80144e6:	f003 fbdf 	bl	8017ca8 <strncmp>
 80144ea:	b398      	cbz	r0, 8014554 <_strtod_l+0x1d4>
 80144ec:	2000      	movs	r0, #0
 80144ee:	4632      	mov	r2, r6
 80144f0:	463d      	mov	r5, r7
 80144f2:	9005      	str	r0, [sp, #20]
 80144f4:	4603      	mov	r3, r0
 80144f6:	2a65      	cmp	r2, #101	; 0x65
 80144f8:	d001      	beq.n	80144fe <_strtod_l+0x17e>
 80144fa:	2a45      	cmp	r2, #69	; 0x45
 80144fc:	d118      	bne.n	8014530 <_strtod_l+0x1b0>
 80144fe:	b91d      	cbnz	r5, 8014508 <_strtod_l+0x188>
 8014500:	9a04      	ldr	r2, [sp, #16]
 8014502:	4302      	orrs	r2, r0
 8014504:	d09e      	beq.n	8014444 <_strtod_l+0xc4>
 8014506:	2500      	movs	r5, #0
 8014508:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801450c:	f108 0201 	add.w	r2, r8, #1
 8014510:	9217      	str	r2, [sp, #92]	; 0x5c
 8014512:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014516:	2a2b      	cmp	r2, #43	; 0x2b
 8014518:	d075      	beq.n	8014606 <_strtod_l+0x286>
 801451a:	2a2d      	cmp	r2, #45	; 0x2d
 801451c:	d07b      	beq.n	8014616 <_strtod_l+0x296>
 801451e:	f04f 0c00 	mov.w	ip, #0
 8014522:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014526:	2909      	cmp	r1, #9
 8014528:	f240 8082 	bls.w	8014630 <_strtod_l+0x2b0>
 801452c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014530:	2600      	movs	r6, #0
 8014532:	e09d      	b.n	8014670 <_strtod_l+0x2f0>
 8014534:	2300      	movs	r3, #0
 8014536:	e7c4      	b.n	80144c2 <_strtod_l+0x142>
 8014538:	2f08      	cmp	r7, #8
 801453a:	bfd8      	it	le
 801453c:	9907      	ldrle	r1, [sp, #28]
 801453e:	f100 0001 	add.w	r0, r0, #1
 8014542:	bfda      	itte	le
 8014544:	fb02 3301 	mlale	r3, r2, r1, r3
 8014548:	9307      	strle	r3, [sp, #28]
 801454a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801454e:	3701      	adds	r7, #1
 8014550:	9017      	str	r0, [sp, #92]	; 0x5c
 8014552:	e7bf      	b.n	80144d4 <_strtod_l+0x154>
 8014554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014556:	195a      	adds	r2, r3, r5
 8014558:	9217      	str	r2, [sp, #92]	; 0x5c
 801455a:	5d5a      	ldrb	r2, [r3, r5]
 801455c:	2f00      	cmp	r7, #0
 801455e:	d037      	beq.n	80145d0 <_strtod_l+0x250>
 8014560:	9005      	str	r0, [sp, #20]
 8014562:	463d      	mov	r5, r7
 8014564:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014568:	2b09      	cmp	r3, #9
 801456a:	d912      	bls.n	8014592 <_strtod_l+0x212>
 801456c:	2301      	movs	r3, #1
 801456e:	e7c2      	b.n	80144f6 <_strtod_l+0x176>
 8014570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014572:	1c5a      	adds	r2, r3, #1
 8014574:	9217      	str	r2, [sp, #92]	; 0x5c
 8014576:	785a      	ldrb	r2, [r3, #1]
 8014578:	3001      	adds	r0, #1
 801457a:	2a30      	cmp	r2, #48	; 0x30
 801457c:	d0f8      	beq.n	8014570 <_strtod_l+0x1f0>
 801457e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014582:	2b08      	cmp	r3, #8
 8014584:	f200 84d9 	bhi.w	8014f3a <_strtod_l+0xbba>
 8014588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801458a:	9005      	str	r0, [sp, #20]
 801458c:	2000      	movs	r0, #0
 801458e:	9308      	str	r3, [sp, #32]
 8014590:	4605      	mov	r5, r0
 8014592:	3a30      	subs	r2, #48	; 0x30
 8014594:	f100 0301 	add.w	r3, r0, #1
 8014598:	d014      	beq.n	80145c4 <_strtod_l+0x244>
 801459a:	9905      	ldr	r1, [sp, #20]
 801459c:	4419      	add	r1, r3
 801459e:	9105      	str	r1, [sp, #20]
 80145a0:	462b      	mov	r3, r5
 80145a2:	eb00 0e05 	add.w	lr, r0, r5
 80145a6:	210a      	movs	r1, #10
 80145a8:	4573      	cmp	r3, lr
 80145aa:	d113      	bne.n	80145d4 <_strtod_l+0x254>
 80145ac:	182b      	adds	r3, r5, r0
 80145ae:	2b08      	cmp	r3, #8
 80145b0:	f105 0501 	add.w	r5, r5, #1
 80145b4:	4405      	add	r5, r0
 80145b6:	dc1c      	bgt.n	80145f2 <_strtod_l+0x272>
 80145b8:	9907      	ldr	r1, [sp, #28]
 80145ba:	230a      	movs	r3, #10
 80145bc:	fb03 2301 	mla	r3, r3, r1, r2
 80145c0:	9307      	str	r3, [sp, #28]
 80145c2:	2300      	movs	r3, #0
 80145c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145c6:	1c51      	adds	r1, r2, #1
 80145c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80145ca:	7852      	ldrb	r2, [r2, #1]
 80145cc:	4618      	mov	r0, r3
 80145ce:	e7c9      	b.n	8014564 <_strtod_l+0x1e4>
 80145d0:	4638      	mov	r0, r7
 80145d2:	e7d2      	b.n	801457a <_strtod_l+0x1fa>
 80145d4:	2b08      	cmp	r3, #8
 80145d6:	dc04      	bgt.n	80145e2 <_strtod_l+0x262>
 80145d8:	9e07      	ldr	r6, [sp, #28]
 80145da:	434e      	muls	r6, r1
 80145dc:	9607      	str	r6, [sp, #28]
 80145de:	3301      	adds	r3, #1
 80145e0:	e7e2      	b.n	80145a8 <_strtod_l+0x228>
 80145e2:	f103 0c01 	add.w	ip, r3, #1
 80145e6:	f1bc 0f10 	cmp.w	ip, #16
 80145ea:	bfd8      	it	le
 80145ec:	fb01 f909 	mulle.w	r9, r1, r9
 80145f0:	e7f5      	b.n	80145de <_strtod_l+0x25e>
 80145f2:	2d10      	cmp	r5, #16
 80145f4:	bfdc      	itt	le
 80145f6:	230a      	movle	r3, #10
 80145f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80145fc:	e7e1      	b.n	80145c2 <_strtod_l+0x242>
 80145fe:	2300      	movs	r3, #0
 8014600:	9305      	str	r3, [sp, #20]
 8014602:	2301      	movs	r3, #1
 8014604:	e77c      	b.n	8014500 <_strtod_l+0x180>
 8014606:	f04f 0c00 	mov.w	ip, #0
 801460a:	f108 0202 	add.w	r2, r8, #2
 801460e:	9217      	str	r2, [sp, #92]	; 0x5c
 8014610:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014614:	e785      	b.n	8014522 <_strtod_l+0x1a2>
 8014616:	f04f 0c01 	mov.w	ip, #1
 801461a:	e7f6      	b.n	801460a <_strtod_l+0x28a>
 801461c:	08019d6c 	.word	0x08019d6c
 8014620:	08019abc 	.word	0x08019abc
 8014624:	7ff00000 	.word	0x7ff00000
 8014628:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801462a:	1c51      	adds	r1, r2, #1
 801462c:	9117      	str	r1, [sp, #92]	; 0x5c
 801462e:	7852      	ldrb	r2, [r2, #1]
 8014630:	2a30      	cmp	r2, #48	; 0x30
 8014632:	d0f9      	beq.n	8014628 <_strtod_l+0x2a8>
 8014634:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014638:	2908      	cmp	r1, #8
 801463a:	f63f af79 	bhi.w	8014530 <_strtod_l+0x1b0>
 801463e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014644:	9206      	str	r2, [sp, #24]
 8014646:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014648:	1c51      	adds	r1, r2, #1
 801464a:	9117      	str	r1, [sp, #92]	; 0x5c
 801464c:	7852      	ldrb	r2, [r2, #1]
 801464e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014652:	2e09      	cmp	r6, #9
 8014654:	d937      	bls.n	80146c6 <_strtod_l+0x346>
 8014656:	9e06      	ldr	r6, [sp, #24]
 8014658:	1b89      	subs	r1, r1, r6
 801465a:	2908      	cmp	r1, #8
 801465c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014660:	dc02      	bgt.n	8014668 <_strtod_l+0x2e8>
 8014662:	4576      	cmp	r6, lr
 8014664:	bfa8      	it	ge
 8014666:	4676      	movge	r6, lr
 8014668:	f1bc 0f00 	cmp.w	ip, #0
 801466c:	d000      	beq.n	8014670 <_strtod_l+0x2f0>
 801466e:	4276      	negs	r6, r6
 8014670:	2d00      	cmp	r5, #0
 8014672:	d14d      	bne.n	8014710 <_strtod_l+0x390>
 8014674:	9904      	ldr	r1, [sp, #16]
 8014676:	4301      	orrs	r1, r0
 8014678:	f47f aec6 	bne.w	8014408 <_strtod_l+0x88>
 801467c:	2b00      	cmp	r3, #0
 801467e:	f47f aee1 	bne.w	8014444 <_strtod_l+0xc4>
 8014682:	2a69      	cmp	r2, #105	; 0x69
 8014684:	d027      	beq.n	80146d6 <_strtod_l+0x356>
 8014686:	dc24      	bgt.n	80146d2 <_strtod_l+0x352>
 8014688:	2a49      	cmp	r2, #73	; 0x49
 801468a:	d024      	beq.n	80146d6 <_strtod_l+0x356>
 801468c:	2a4e      	cmp	r2, #78	; 0x4e
 801468e:	f47f aed9 	bne.w	8014444 <_strtod_l+0xc4>
 8014692:	499f      	ldr	r1, [pc, #636]	; (8014910 <_strtod_l+0x590>)
 8014694:	a817      	add	r0, sp, #92	; 0x5c
 8014696:	f002 f915 	bl	80168c4 <__match>
 801469a:	2800      	cmp	r0, #0
 801469c:	f43f aed2 	beq.w	8014444 <_strtod_l+0xc4>
 80146a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2b28      	cmp	r3, #40	; 0x28
 80146a6:	d12d      	bne.n	8014704 <_strtod_l+0x384>
 80146a8:	499a      	ldr	r1, [pc, #616]	; (8014914 <_strtod_l+0x594>)
 80146aa:	aa1a      	add	r2, sp, #104	; 0x68
 80146ac:	a817      	add	r0, sp, #92	; 0x5c
 80146ae:	f002 f91d 	bl	80168ec <__hexnan>
 80146b2:	2805      	cmp	r0, #5
 80146b4:	d126      	bne.n	8014704 <_strtod_l+0x384>
 80146b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80146bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80146c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80146c4:	e6a0      	b.n	8014408 <_strtod_l+0x88>
 80146c6:	210a      	movs	r1, #10
 80146c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80146cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80146d0:	e7b9      	b.n	8014646 <_strtod_l+0x2c6>
 80146d2:	2a6e      	cmp	r2, #110	; 0x6e
 80146d4:	e7db      	b.n	801468e <_strtod_l+0x30e>
 80146d6:	4990      	ldr	r1, [pc, #576]	; (8014918 <_strtod_l+0x598>)
 80146d8:	a817      	add	r0, sp, #92	; 0x5c
 80146da:	f002 f8f3 	bl	80168c4 <__match>
 80146de:	2800      	cmp	r0, #0
 80146e0:	f43f aeb0 	beq.w	8014444 <_strtod_l+0xc4>
 80146e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146e6:	498d      	ldr	r1, [pc, #564]	; (801491c <_strtod_l+0x59c>)
 80146e8:	3b01      	subs	r3, #1
 80146ea:	a817      	add	r0, sp, #92	; 0x5c
 80146ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80146ee:	f002 f8e9 	bl	80168c4 <__match>
 80146f2:	b910      	cbnz	r0, 80146fa <_strtod_l+0x37a>
 80146f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146f6:	3301      	adds	r3, #1
 80146f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80146fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801492c <_strtod_l+0x5ac>
 80146fe:	f04f 0a00 	mov.w	sl, #0
 8014702:	e681      	b.n	8014408 <_strtod_l+0x88>
 8014704:	4886      	ldr	r0, [pc, #536]	; (8014920 <_strtod_l+0x5a0>)
 8014706:	f003 fab7 	bl	8017c78 <nan>
 801470a:	ec5b ab10 	vmov	sl, fp, d0
 801470e:	e67b      	b.n	8014408 <_strtod_l+0x88>
 8014710:	9b05      	ldr	r3, [sp, #20]
 8014712:	9807      	ldr	r0, [sp, #28]
 8014714:	1af3      	subs	r3, r6, r3
 8014716:	2f00      	cmp	r7, #0
 8014718:	bf08      	it	eq
 801471a:	462f      	moveq	r7, r5
 801471c:	2d10      	cmp	r5, #16
 801471e:	9306      	str	r3, [sp, #24]
 8014720:	46a8      	mov	r8, r5
 8014722:	bfa8      	it	ge
 8014724:	f04f 0810 	movge.w	r8, #16
 8014728:	f7eb feec 	bl	8000504 <__aeabi_ui2d>
 801472c:	2d09      	cmp	r5, #9
 801472e:	4682      	mov	sl, r0
 8014730:	468b      	mov	fp, r1
 8014732:	dd13      	ble.n	801475c <_strtod_l+0x3dc>
 8014734:	4b7b      	ldr	r3, [pc, #492]	; (8014924 <_strtod_l+0x5a4>)
 8014736:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801473a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801473e:	f7eb ff5b 	bl	80005f8 <__aeabi_dmul>
 8014742:	4682      	mov	sl, r0
 8014744:	4648      	mov	r0, r9
 8014746:	468b      	mov	fp, r1
 8014748:	f7eb fedc 	bl	8000504 <__aeabi_ui2d>
 801474c:	4602      	mov	r2, r0
 801474e:	460b      	mov	r3, r1
 8014750:	4650      	mov	r0, sl
 8014752:	4659      	mov	r1, fp
 8014754:	f7eb fd9a 	bl	800028c <__adddf3>
 8014758:	4682      	mov	sl, r0
 801475a:	468b      	mov	fp, r1
 801475c:	2d0f      	cmp	r5, #15
 801475e:	dc38      	bgt.n	80147d2 <_strtod_l+0x452>
 8014760:	9b06      	ldr	r3, [sp, #24]
 8014762:	2b00      	cmp	r3, #0
 8014764:	f43f ae50 	beq.w	8014408 <_strtod_l+0x88>
 8014768:	dd24      	ble.n	80147b4 <_strtod_l+0x434>
 801476a:	2b16      	cmp	r3, #22
 801476c:	dc0b      	bgt.n	8014786 <_strtod_l+0x406>
 801476e:	496d      	ldr	r1, [pc, #436]	; (8014924 <_strtod_l+0x5a4>)
 8014770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014778:	4652      	mov	r2, sl
 801477a:	465b      	mov	r3, fp
 801477c:	f7eb ff3c 	bl	80005f8 <__aeabi_dmul>
 8014780:	4682      	mov	sl, r0
 8014782:	468b      	mov	fp, r1
 8014784:	e640      	b.n	8014408 <_strtod_l+0x88>
 8014786:	9a06      	ldr	r2, [sp, #24]
 8014788:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801478c:	4293      	cmp	r3, r2
 801478e:	db20      	blt.n	80147d2 <_strtod_l+0x452>
 8014790:	4c64      	ldr	r4, [pc, #400]	; (8014924 <_strtod_l+0x5a4>)
 8014792:	f1c5 050f 	rsb	r5, r5, #15
 8014796:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801479a:	4652      	mov	r2, sl
 801479c:	465b      	mov	r3, fp
 801479e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147a2:	f7eb ff29 	bl	80005f8 <__aeabi_dmul>
 80147a6:	9b06      	ldr	r3, [sp, #24]
 80147a8:	1b5d      	subs	r5, r3, r5
 80147aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80147ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80147b2:	e7e3      	b.n	801477c <_strtod_l+0x3fc>
 80147b4:	9b06      	ldr	r3, [sp, #24]
 80147b6:	3316      	adds	r3, #22
 80147b8:	db0b      	blt.n	80147d2 <_strtod_l+0x452>
 80147ba:	9b05      	ldr	r3, [sp, #20]
 80147bc:	1b9e      	subs	r6, r3, r6
 80147be:	4b59      	ldr	r3, [pc, #356]	; (8014924 <_strtod_l+0x5a4>)
 80147c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80147c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80147c8:	4650      	mov	r0, sl
 80147ca:	4659      	mov	r1, fp
 80147cc:	f7ec f83e 	bl	800084c <__aeabi_ddiv>
 80147d0:	e7d6      	b.n	8014780 <_strtod_l+0x400>
 80147d2:	9b06      	ldr	r3, [sp, #24]
 80147d4:	eba5 0808 	sub.w	r8, r5, r8
 80147d8:	4498      	add	r8, r3
 80147da:	f1b8 0f00 	cmp.w	r8, #0
 80147de:	dd74      	ble.n	80148ca <_strtod_l+0x54a>
 80147e0:	f018 030f 	ands.w	r3, r8, #15
 80147e4:	d00a      	beq.n	80147fc <_strtod_l+0x47c>
 80147e6:	494f      	ldr	r1, [pc, #316]	; (8014924 <_strtod_l+0x5a4>)
 80147e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80147ec:	4652      	mov	r2, sl
 80147ee:	465b      	mov	r3, fp
 80147f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147f4:	f7eb ff00 	bl	80005f8 <__aeabi_dmul>
 80147f8:	4682      	mov	sl, r0
 80147fa:	468b      	mov	fp, r1
 80147fc:	f038 080f 	bics.w	r8, r8, #15
 8014800:	d04f      	beq.n	80148a2 <_strtod_l+0x522>
 8014802:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014806:	dd22      	ble.n	801484e <_strtod_l+0x4ce>
 8014808:	2500      	movs	r5, #0
 801480a:	462e      	mov	r6, r5
 801480c:	9507      	str	r5, [sp, #28]
 801480e:	9505      	str	r5, [sp, #20]
 8014810:	2322      	movs	r3, #34	; 0x22
 8014812:	f8df b118 	ldr.w	fp, [pc, #280]	; 801492c <_strtod_l+0x5ac>
 8014816:	6023      	str	r3, [r4, #0]
 8014818:	f04f 0a00 	mov.w	sl, #0
 801481c:	9b07      	ldr	r3, [sp, #28]
 801481e:	2b00      	cmp	r3, #0
 8014820:	f43f adf2 	beq.w	8014408 <_strtod_l+0x88>
 8014824:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014826:	4620      	mov	r0, r4
 8014828:	f002 f9e4 	bl	8016bf4 <_Bfree>
 801482c:	9905      	ldr	r1, [sp, #20]
 801482e:	4620      	mov	r0, r4
 8014830:	f002 f9e0 	bl	8016bf4 <_Bfree>
 8014834:	4631      	mov	r1, r6
 8014836:	4620      	mov	r0, r4
 8014838:	f002 f9dc 	bl	8016bf4 <_Bfree>
 801483c:	9907      	ldr	r1, [sp, #28]
 801483e:	4620      	mov	r0, r4
 8014840:	f002 f9d8 	bl	8016bf4 <_Bfree>
 8014844:	4629      	mov	r1, r5
 8014846:	4620      	mov	r0, r4
 8014848:	f002 f9d4 	bl	8016bf4 <_Bfree>
 801484c:	e5dc      	b.n	8014408 <_strtod_l+0x88>
 801484e:	4b36      	ldr	r3, [pc, #216]	; (8014928 <_strtod_l+0x5a8>)
 8014850:	9304      	str	r3, [sp, #16]
 8014852:	2300      	movs	r3, #0
 8014854:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014858:	4650      	mov	r0, sl
 801485a:	4659      	mov	r1, fp
 801485c:	4699      	mov	r9, r3
 801485e:	f1b8 0f01 	cmp.w	r8, #1
 8014862:	dc21      	bgt.n	80148a8 <_strtod_l+0x528>
 8014864:	b10b      	cbz	r3, 801486a <_strtod_l+0x4ea>
 8014866:	4682      	mov	sl, r0
 8014868:	468b      	mov	fp, r1
 801486a:	4b2f      	ldr	r3, [pc, #188]	; (8014928 <_strtod_l+0x5a8>)
 801486c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014870:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014874:	4652      	mov	r2, sl
 8014876:	465b      	mov	r3, fp
 8014878:	e9d9 0100 	ldrd	r0, r1, [r9]
 801487c:	f7eb febc 	bl	80005f8 <__aeabi_dmul>
 8014880:	4b2a      	ldr	r3, [pc, #168]	; (801492c <_strtod_l+0x5ac>)
 8014882:	460a      	mov	r2, r1
 8014884:	400b      	ands	r3, r1
 8014886:	492a      	ldr	r1, [pc, #168]	; (8014930 <_strtod_l+0x5b0>)
 8014888:	428b      	cmp	r3, r1
 801488a:	4682      	mov	sl, r0
 801488c:	d8bc      	bhi.n	8014808 <_strtod_l+0x488>
 801488e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014892:	428b      	cmp	r3, r1
 8014894:	bf86      	itte	hi
 8014896:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8014934 <_strtod_l+0x5b4>
 801489a:	f04f 3aff 	movhi.w	sl, #4294967295
 801489e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80148a2:	2300      	movs	r3, #0
 80148a4:	9304      	str	r3, [sp, #16]
 80148a6:	e084      	b.n	80149b2 <_strtod_l+0x632>
 80148a8:	f018 0f01 	tst.w	r8, #1
 80148ac:	d005      	beq.n	80148ba <_strtod_l+0x53a>
 80148ae:	9b04      	ldr	r3, [sp, #16]
 80148b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b4:	f7eb fea0 	bl	80005f8 <__aeabi_dmul>
 80148b8:	2301      	movs	r3, #1
 80148ba:	9a04      	ldr	r2, [sp, #16]
 80148bc:	3208      	adds	r2, #8
 80148be:	f109 0901 	add.w	r9, r9, #1
 80148c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80148c6:	9204      	str	r2, [sp, #16]
 80148c8:	e7c9      	b.n	801485e <_strtod_l+0x4de>
 80148ca:	d0ea      	beq.n	80148a2 <_strtod_l+0x522>
 80148cc:	f1c8 0800 	rsb	r8, r8, #0
 80148d0:	f018 020f 	ands.w	r2, r8, #15
 80148d4:	d00a      	beq.n	80148ec <_strtod_l+0x56c>
 80148d6:	4b13      	ldr	r3, [pc, #76]	; (8014924 <_strtod_l+0x5a4>)
 80148d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148dc:	4650      	mov	r0, sl
 80148de:	4659      	mov	r1, fp
 80148e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e4:	f7eb ffb2 	bl	800084c <__aeabi_ddiv>
 80148e8:	4682      	mov	sl, r0
 80148ea:	468b      	mov	fp, r1
 80148ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80148f0:	d0d7      	beq.n	80148a2 <_strtod_l+0x522>
 80148f2:	f1b8 0f1f 	cmp.w	r8, #31
 80148f6:	dd1f      	ble.n	8014938 <_strtod_l+0x5b8>
 80148f8:	2500      	movs	r5, #0
 80148fa:	462e      	mov	r6, r5
 80148fc:	9507      	str	r5, [sp, #28]
 80148fe:	9505      	str	r5, [sp, #20]
 8014900:	2322      	movs	r3, #34	; 0x22
 8014902:	f04f 0a00 	mov.w	sl, #0
 8014906:	f04f 0b00 	mov.w	fp, #0
 801490a:	6023      	str	r3, [r4, #0]
 801490c:	e786      	b.n	801481c <_strtod_l+0x49c>
 801490e:	bf00      	nop
 8014910:	080193f9 	.word	0x080193f9
 8014914:	08019ad0 	.word	0x08019ad0
 8014918:	080193f1 	.word	0x080193f1
 801491c:	08019c14 	.word	0x08019c14
 8014920:	08019f28 	.word	0x08019f28
 8014924:	08019e08 	.word	0x08019e08
 8014928:	08019de0 	.word	0x08019de0
 801492c:	7ff00000 	.word	0x7ff00000
 8014930:	7ca00000 	.word	0x7ca00000
 8014934:	7fefffff 	.word	0x7fefffff
 8014938:	f018 0310 	ands.w	r3, r8, #16
 801493c:	bf18      	it	ne
 801493e:	236a      	movne	r3, #106	; 0x6a
 8014940:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014cf0 <_strtod_l+0x970>
 8014944:	9304      	str	r3, [sp, #16]
 8014946:	4650      	mov	r0, sl
 8014948:	4659      	mov	r1, fp
 801494a:	2300      	movs	r3, #0
 801494c:	f018 0f01 	tst.w	r8, #1
 8014950:	d004      	beq.n	801495c <_strtod_l+0x5dc>
 8014952:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014956:	f7eb fe4f 	bl	80005f8 <__aeabi_dmul>
 801495a:	2301      	movs	r3, #1
 801495c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014960:	f109 0908 	add.w	r9, r9, #8
 8014964:	d1f2      	bne.n	801494c <_strtod_l+0x5cc>
 8014966:	b10b      	cbz	r3, 801496c <_strtod_l+0x5ec>
 8014968:	4682      	mov	sl, r0
 801496a:	468b      	mov	fp, r1
 801496c:	9b04      	ldr	r3, [sp, #16]
 801496e:	b1c3      	cbz	r3, 80149a2 <_strtod_l+0x622>
 8014970:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014974:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014978:	2b00      	cmp	r3, #0
 801497a:	4659      	mov	r1, fp
 801497c:	dd11      	ble.n	80149a2 <_strtod_l+0x622>
 801497e:	2b1f      	cmp	r3, #31
 8014980:	f340 8124 	ble.w	8014bcc <_strtod_l+0x84c>
 8014984:	2b34      	cmp	r3, #52	; 0x34
 8014986:	bfde      	ittt	le
 8014988:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801498c:	f04f 33ff 	movle.w	r3, #4294967295
 8014990:	fa03 f202 	lslle.w	r2, r3, r2
 8014994:	f04f 0a00 	mov.w	sl, #0
 8014998:	bfcc      	ite	gt
 801499a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801499e:	ea02 0b01 	andle.w	fp, r2, r1
 80149a2:	2200      	movs	r2, #0
 80149a4:	2300      	movs	r3, #0
 80149a6:	4650      	mov	r0, sl
 80149a8:	4659      	mov	r1, fp
 80149aa:	f7ec f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80149ae:	2800      	cmp	r0, #0
 80149b0:	d1a2      	bne.n	80148f8 <_strtod_l+0x578>
 80149b2:	9b07      	ldr	r3, [sp, #28]
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	9908      	ldr	r1, [sp, #32]
 80149b8:	462b      	mov	r3, r5
 80149ba:	463a      	mov	r2, r7
 80149bc:	4620      	mov	r0, r4
 80149be:	f002 f981 	bl	8016cc4 <__s2b>
 80149c2:	9007      	str	r0, [sp, #28]
 80149c4:	2800      	cmp	r0, #0
 80149c6:	f43f af1f 	beq.w	8014808 <_strtod_l+0x488>
 80149ca:	9b05      	ldr	r3, [sp, #20]
 80149cc:	1b9e      	subs	r6, r3, r6
 80149ce:	9b06      	ldr	r3, [sp, #24]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	bfb4      	ite	lt
 80149d4:	4633      	movlt	r3, r6
 80149d6:	2300      	movge	r3, #0
 80149d8:	930c      	str	r3, [sp, #48]	; 0x30
 80149da:	9b06      	ldr	r3, [sp, #24]
 80149dc:	2500      	movs	r5, #0
 80149de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80149e2:	9312      	str	r3, [sp, #72]	; 0x48
 80149e4:	462e      	mov	r6, r5
 80149e6:	9b07      	ldr	r3, [sp, #28]
 80149e8:	4620      	mov	r0, r4
 80149ea:	6859      	ldr	r1, [r3, #4]
 80149ec:	f002 f8c2 	bl	8016b74 <_Balloc>
 80149f0:	9005      	str	r0, [sp, #20]
 80149f2:	2800      	cmp	r0, #0
 80149f4:	f43f af0c 	beq.w	8014810 <_strtod_l+0x490>
 80149f8:	9b07      	ldr	r3, [sp, #28]
 80149fa:	691a      	ldr	r2, [r3, #16]
 80149fc:	3202      	adds	r2, #2
 80149fe:	f103 010c 	add.w	r1, r3, #12
 8014a02:	0092      	lsls	r2, r2, #2
 8014a04:	300c      	adds	r0, #12
 8014a06:	f002 f8a7 	bl	8016b58 <memcpy>
 8014a0a:	ec4b ab10 	vmov	d0, sl, fp
 8014a0e:	aa1a      	add	r2, sp, #104	; 0x68
 8014a10:	a919      	add	r1, sp, #100	; 0x64
 8014a12:	4620      	mov	r0, r4
 8014a14:	f002 fc9c 	bl	8017350 <__d2b>
 8014a18:	ec4b ab18 	vmov	d8, sl, fp
 8014a1c:	9018      	str	r0, [sp, #96]	; 0x60
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	f43f aef6 	beq.w	8014810 <_strtod_l+0x490>
 8014a24:	2101      	movs	r1, #1
 8014a26:	4620      	mov	r0, r4
 8014a28:	f002 f9e6 	bl	8016df8 <__i2b>
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	f43f aeee 	beq.w	8014810 <_strtod_l+0x490>
 8014a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a36:	9904      	ldr	r1, [sp, #16]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	bfab      	itete	ge
 8014a3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014a3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014a40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014a42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8014a46:	bfac      	ite	ge
 8014a48:	eb03 0902 	addge.w	r9, r3, r2
 8014a4c:	1ad7      	sublt	r7, r2, r3
 8014a4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014a50:	eba3 0801 	sub.w	r8, r3, r1
 8014a54:	4490      	add	r8, r2
 8014a56:	4ba1      	ldr	r3, [pc, #644]	; (8014cdc <_strtod_l+0x95c>)
 8014a58:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a5c:	4598      	cmp	r8, r3
 8014a5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a62:	f280 80c7 	bge.w	8014bf4 <_strtod_l+0x874>
 8014a66:	eba3 0308 	sub.w	r3, r3, r8
 8014a6a:	2b1f      	cmp	r3, #31
 8014a6c:	eba2 0203 	sub.w	r2, r2, r3
 8014a70:	f04f 0101 	mov.w	r1, #1
 8014a74:	f300 80b1 	bgt.w	8014bda <_strtod_l+0x85a>
 8014a78:	fa01 f303 	lsl.w	r3, r1, r3
 8014a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8014a7e:	2300      	movs	r3, #0
 8014a80:	9308      	str	r3, [sp, #32]
 8014a82:	eb09 0802 	add.w	r8, r9, r2
 8014a86:	9b04      	ldr	r3, [sp, #16]
 8014a88:	45c1      	cmp	r9, r8
 8014a8a:	4417      	add	r7, r2
 8014a8c:	441f      	add	r7, r3
 8014a8e:	464b      	mov	r3, r9
 8014a90:	bfa8      	it	ge
 8014a92:	4643      	movge	r3, r8
 8014a94:	42bb      	cmp	r3, r7
 8014a96:	bfa8      	it	ge
 8014a98:	463b      	movge	r3, r7
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	bfc2      	ittt	gt
 8014a9e:	eba8 0803 	subgt.w	r8, r8, r3
 8014aa2:	1aff      	subgt	r7, r7, r3
 8014aa4:	eba9 0903 	subgt.w	r9, r9, r3
 8014aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	dd17      	ble.n	8014ade <_strtod_l+0x75e>
 8014aae:	4631      	mov	r1, r6
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	f002 fa60 	bl	8016f78 <__pow5mult>
 8014ab8:	4606      	mov	r6, r0
 8014aba:	2800      	cmp	r0, #0
 8014abc:	f43f aea8 	beq.w	8014810 <_strtod_l+0x490>
 8014ac0:	4601      	mov	r1, r0
 8014ac2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f002 f9ad 	bl	8016e24 <__multiply>
 8014aca:	900b      	str	r0, [sp, #44]	; 0x2c
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f43f ae9f 	beq.w	8014810 <_strtod_l+0x490>
 8014ad2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f002 f88d 	bl	8016bf4 <_Bfree>
 8014ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014adc:	9318      	str	r3, [sp, #96]	; 0x60
 8014ade:	f1b8 0f00 	cmp.w	r8, #0
 8014ae2:	f300 808c 	bgt.w	8014bfe <_strtod_l+0x87e>
 8014ae6:	9b06      	ldr	r3, [sp, #24]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	dd08      	ble.n	8014afe <_strtod_l+0x77e>
 8014aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014aee:	9905      	ldr	r1, [sp, #20]
 8014af0:	4620      	mov	r0, r4
 8014af2:	f002 fa41 	bl	8016f78 <__pow5mult>
 8014af6:	9005      	str	r0, [sp, #20]
 8014af8:	2800      	cmp	r0, #0
 8014afa:	f43f ae89 	beq.w	8014810 <_strtod_l+0x490>
 8014afe:	2f00      	cmp	r7, #0
 8014b00:	dd08      	ble.n	8014b14 <_strtod_l+0x794>
 8014b02:	9905      	ldr	r1, [sp, #20]
 8014b04:	463a      	mov	r2, r7
 8014b06:	4620      	mov	r0, r4
 8014b08:	f002 fa90 	bl	801702c <__lshift>
 8014b0c:	9005      	str	r0, [sp, #20]
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	f43f ae7e 	beq.w	8014810 <_strtod_l+0x490>
 8014b14:	f1b9 0f00 	cmp.w	r9, #0
 8014b18:	dd08      	ble.n	8014b2c <_strtod_l+0x7ac>
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	464a      	mov	r2, r9
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f002 fa84 	bl	801702c <__lshift>
 8014b24:	4606      	mov	r6, r0
 8014b26:	2800      	cmp	r0, #0
 8014b28:	f43f ae72 	beq.w	8014810 <_strtod_l+0x490>
 8014b2c:	9a05      	ldr	r2, [sp, #20]
 8014b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b30:	4620      	mov	r0, r4
 8014b32:	f002 fb07 	bl	8017144 <__mdiff>
 8014b36:	4605      	mov	r5, r0
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	f43f ae69 	beq.w	8014810 <_strtod_l+0x490>
 8014b3e:	68c3      	ldr	r3, [r0, #12]
 8014b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b42:	2300      	movs	r3, #0
 8014b44:	60c3      	str	r3, [r0, #12]
 8014b46:	4631      	mov	r1, r6
 8014b48:	f002 fae0 	bl	801710c <__mcmp>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	da60      	bge.n	8014c12 <_strtod_l+0x892>
 8014b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b52:	ea53 030a 	orrs.w	r3, r3, sl
 8014b56:	f040 8082 	bne.w	8014c5e <_strtod_l+0x8de>
 8014b5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d17d      	bne.n	8014c5e <_strtod_l+0x8de>
 8014b62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b66:	0d1b      	lsrs	r3, r3, #20
 8014b68:	051b      	lsls	r3, r3, #20
 8014b6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014b6e:	d976      	bls.n	8014c5e <_strtod_l+0x8de>
 8014b70:	696b      	ldr	r3, [r5, #20]
 8014b72:	b913      	cbnz	r3, 8014b7a <_strtod_l+0x7fa>
 8014b74:	692b      	ldr	r3, [r5, #16]
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	dd71      	ble.n	8014c5e <_strtod_l+0x8de>
 8014b7a:	4629      	mov	r1, r5
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f002 fa54 	bl	801702c <__lshift>
 8014b84:	4631      	mov	r1, r6
 8014b86:	4605      	mov	r5, r0
 8014b88:	f002 fac0 	bl	801710c <__mcmp>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	dd66      	ble.n	8014c5e <_strtod_l+0x8de>
 8014b90:	9904      	ldr	r1, [sp, #16]
 8014b92:	4a53      	ldr	r2, [pc, #332]	; (8014ce0 <_strtod_l+0x960>)
 8014b94:	465b      	mov	r3, fp
 8014b96:	2900      	cmp	r1, #0
 8014b98:	f000 8081 	beq.w	8014c9e <_strtod_l+0x91e>
 8014b9c:	ea02 010b 	and.w	r1, r2, fp
 8014ba0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014ba4:	dc7b      	bgt.n	8014c9e <_strtod_l+0x91e>
 8014ba6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014baa:	f77f aea9 	ble.w	8014900 <_strtod_l+0x580>
 8014bae:	4b4d      	ldr	r3, [pc, #308]	; (8014ce4 <_strtod_l+0x964>)
 8014bb0:	4650      	mov	r0, sl
 8014bb2:	4659      	mov	r1, fp
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f7eb fd1f 	bl	80005f8 <__aeabi_dmul>
 8014bba:	460b      	mov	r3, r1
 8014bbc:	4303      	orrs	r3, r0
 8014bbe:	bf08      	it	eq
 8014bc0:	2322      	moveq	r3, #34	; 0x22
 8014bc2:	4682      	mov	sl, r0
 8014bc4:	468b      	mov	fp, r1
 8014bc6:	bf08      	it	eq
 8014bc8:	6023      	streq	r3, [r4, #0]
 8014bca:	e62b      	b.n	8014824 <_strtod_l+0x4a4>
 8014bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8014bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8014bd4:	ea03 0a0a 	and.w	sl, r3, sl
 8014bd8:	e6e3      	b.n	80149a2 <_strtod_l+0x622>
 8014bda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014bde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014be2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014be6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014bea:	fa01 f308 	lsl.w	r3, r1, r8
 8014bee:	9308      	str	r3, [sp, #32]
 8014bf0:	910d      	str	r1, [sp, #52]	; 0x34
 8014bf2:	e746      	b.n	8014a82 <_strtod_l+0x702>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	9308      	str	r3, [sp, #32]
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	930d      	str	r3, [sp, #52]	; 0x34
 8014bfc:	e741      	b.n	8014a82 <_strtod_l+0x702>
 8014bfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c00:	4642      	mov	r2, r8
 8014c02:	4620      	mov	r0, r4
 8014c04:	f002 fa12 	bl	801702c <__lshift>
 8014c08:	9018      	str	r0, [sp, #96]	; 0x60
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	f47f af6b 	bne.w	8014ae6 <_strtod_l+0x766>
 8014c10:	e5fe      	b.n	8014810 <_strtod_l+0x490>
 8014c12:	465f      	mov	r7, fp
 8014c14:	d16e      	bne.n	8014cf4 <_strtod_l+0x974>
 8014c16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c1c:	b342      	cbz	r2, 8014c70 <_strtod_l+0x8f0>
 8014c1e:	4a32      	ldr	r2, [pc, #200]	; (8014ce8 <_strtod_l+0x968>)
 8014c20:	4293      	cmp	r3, r2
 8014c22:	d128      	bne.n	8014c76 <_strtod_l+0x8f6>
 8014c24:	9b04      	ldr	r3, [sp, #16]
 8014c26:	4651      	mov	r1, sl
 8014c28:	b1eb      	cbz	r3, 8014c66 <_strtod_l+0x8e6>
 8014c2a:	4b2d      	ldr	r3, [pc, #180]	; (8014ce0 <_strtod_l+0x960>)
 8014c2c:	403b      	ands	r3, r7
 8014c2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c32:	f04f 32ff 	mov.w	r2, #4294967295
 8014c36:	d819      	bhi.n	8014c6c <_strtod_l+0x8ec>
 8014c38:	0d1b      	lsrs	r3, r3, #20
 8014c3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8014c42:	4299      	cmp	r1, r3
 8014c44:	d117      	bne.n	8014c76 <_strtod_l+0x8f6>
 8014c46:	4b29      	ldr	r3, [pc, #164]	; (8014cec <_strtod_l+0x96c>)
 8014c48:	429f      	cmp	r7, r3
 8014c4a:	d102      	bne.n	8014c52 <_strtod_l+0x8d2>
 8014c4c:	3101      	adds	r1, #1
 8014c4e:	f43f addf 	beq.w	8014810 <_strtod_l+0x490>
 8014c52:	4b23      	ldr	r3, [pc, #140]	; (8014ce0 <_strtod_l+0x960>)
 8014c54:	403b      	ands	r3, r7
 8014c56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014c5a:	f04f 0a00 	mov.w	sl, #0
 8014c5e:	9b04      	ldr	r3, [sp, #16]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d1a4      	bne.n	8014bae <_strtod_l+0x82e>
 8014c64:	e5de      	b.n	8014824 <_strtod_l+0x4a4>
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6a:	e7ea      	b.n	8014c42 <_strtod_l+0x8c2>
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	e7e8      	b.n	8014c42 <_strtod_l+0x8c2>
 8014c70:	ea53 030a 	orrs.w	r3, r3, sl
 8014c74:	d08c      	beq.n	8014b90 <_strtod_l+0x810>
 8014c76:	9b08      	ldr	r3, [sp, #32]
 8014c78:	b1db      	cbz	r3, 8014cb2 <_strtod_l+0x932>
 8014c7a:	423b      	tst	r3, r7
 8014c7c:	d0ef      	beq.n	8014c5e <_strtod_l+0x8de>
 8014c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c80:	9a04      	ldr	r2, [sp, #16]
 8014c82:	4650      	mov	r0, sl
 8014c84:	4659      	mov	r1, fp
 8014c86:	b1c3      	cbz	r3, 8014cba <_strtod_l+0x93a>
 8014c88:	f7ff fb5c 	bl	8014344 <sulp>
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	460b      	mov	r3, r1
 8014c90:	ec51 0b18 	vmov	r0, r1, d8
 8014c94:	f7eb fafa 	bl	800028c <__adddf3>
 8014c98:	4682      	mov	sl, r0
 8014c9a:	468b      	mov	fp, r1
 8014c9c:	e7df      	b.n	8014c5e <_strtod_l+0x8de>
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014ca4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014ca8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014cac:	f04f 3aff 	mov.w	sl, #4294967295
 8014cb0:	e7d5      	b.n	8014c5e <_strtod_l+0x8de>
 8014cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cb4:	ea13 0f0a 	tst.w	r3, sl
 8014cb8:	e7e0      	b.n	8014c7c <_strtod_l+0x8fc>
 8014cba:	f7ff fb43 	bl	8014344 <sulp>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	460b      	mov	r3, r1
 8014cc2:	ec51 0b18 	vmov	r0, r1, d8
 8014cc6:	f7eb fadf 	bl	8000288 <__aeabi_dsub>
 8014cca:	2200      	movs	r2, #0
 8014ccc:	2300      	movs	r3, #0
 8014cce:	4682      	mov	sl, r0
 8014cd0:	468b      	mov	fp, r1
 8014cd2:	f7eb fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d0c1      	beq.n	8014c5e <_strtod_l+0x8de>
 8014cda:	e611      	b.n	8014900 <_strtod_l+0x580>
 8014cdc:	fffffc02 	.word	0xfffffc02
 8014ce0:	7ff00000 	.word	0x7ff00000
 8014ce4:	39500000 	.word	0x39500000
 8014ce8:	000fffff 	.word	0x000fffff
 8014cec:	7fefffff 	.word	0x7fefffff
 8014cf0:	08019ae8 	.word	0x08019ae8
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	f002 fb86 	bl	8017408 <__ratio>
 8014cfc:	ec59 8b10 	vmov	r8, r9, d0
 8014d00:	ee10 0a10 	vmov	r0, s0
 8014d04:	2200      	movs	r2, #0
 8014d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d0a:	4649      	mov	r1, r9
 8014d0c:	f7eb fef0 	bl	8000af0 <__aeabi_dcmple>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	d07a      	beq.n	8014e0a <_strtod_l+0xa8a>
 8014d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d04a      	beq.n	8014db0 <_strtod_l+0xa30>
 8014d1a:	4b95      	ldr	r3, [pc, #596]	; (8014f70 <_strtod_l+0xbf0>)
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014f70 <_strtod_l+0xbf0>
 8014d26:	f04f 0800 	mov.w	r8, #0
 8014d2a:	4b92      	ldr	r3, [pc, #584]	; (8014f74 <_strtod_l+0xbf4>)
 8014d2c:	403b      	ands	r3, r7
 8014d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d32:	4b91      	ldr	r3, [pc, #580]	; (8014f78 <_strtod_l+0xbf8>)
 8014d34:	429a      	cmp	r2, r3
 8014d36:	f040 80b0 	bne.w	8014e9a <_strtod_l+0xb1a>
 8014d3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014d42:	ec4b ab10 	vmov	d0, sl, fp
 8014d46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d4a:	f002 fa85 	bl	8017258 <__ulp>
 8014d4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d52:	ec53 2b10 	vmov	r2, r3, d0
 8014d56:	f7eb fc4f 	bl	80005f8 <__aeabi_dmul>
 8014d5a:	4652      	mov	r2, sl
 8014d5c:	465b      	mov	r3, fp
 8014d5e:	f7eb fa95 	bl	800028c <__adddf3>
 8014d62:	460b      	mov	r3, r1
 8014d64:	4983      	ldr	r1, [pc, #524]	; (8014f74 <_strtod_l+0xbf4>)
 8014d66:	4a85      	ldr	r2, [pc, #532]	; (8014f7c <_strtod_l+0xbfc>)
 8014d68:	4019      	ands	r1, r3
 8014d6a:	4291      	cmp	r1, r2
 8014d6c:	4682      	mov	sl, r0
 8014d6e:	d960      	bls.n	8014e32 <_strtod_l+0xab2>
 8014d70:	ee18 3a90 	vmov	r3, s17
 8014d74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d104      	bne.n	8014d86 <_strtod_l+0xa06>
 8014d7c:	ee18 3a10 	vmov	r3, s16
 8014d80:	3301      	adds	r3, #1
 8014d82:	f43f ad45 	beq.w	8014810 <_strtod_l+0x490>
 8014d86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014f88 <_strtod_l+0xc08>
 8014d8a:	f04f 3aff 	mov.w	sl, #4294967295
 8014d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d90:	4620      	mov	r0, r4
 8014d92:	f001 ff2f 	bl	8016bf4 <_Bfree>
 8014d96:	9905      	ldr	r1, [sp, #20]
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f001 ff2b 	bl	8016bf4 <_Bfree>
 8014d9e:	4631      	mov	r1, r6
 8014da0:	4620      	mov	r0, r4
 8014da2:	f001 ff27 	bl	8016bf4 <_Bfree>
 8014da6:	4629      	mov	r1, r5
 8014da8:	4620      	mov	r0, r4
 8014daa:	f001 ff23 	bl	8016bf4 <_Bfree>
 8014dae:	e61a      	b.n	80149e6 <_strtod_l+0x666>
 8014db0:	f1ba 0f00 	cmp.w	sl, #0
 8014db4:	d11b      	bne.n	8014dee <_strtod_l+0xa6e>
 8014db6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dba:	b9f3      	cbnz	r3, 8014dfa <_strtod_l+0xa7a>
 8014dbc:	4b6c      	ldr	r3, [pc, #432]	; (8014f70 <_strtod_l+0xbf0>)
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	4640      	mov	r0, r8
 8014dc2:	4649      	mov	r1, r9
 8014dc4:	f7eb fe8a 	bl	8000adc <__aeabi_dcmplt>
 8014dc8:	b9d0      	cbnz	r0, 8014e00 <_strtod_l+0xa80>
 8014dca:	4640      	mov	r0, r8
 8014dcc:	4649      	mov	r1, r9
 8014dce:	4b6c      	ldr	r3, [pc, #432]	; (8014f80 <_strtod_l+0xc00>)
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f7eb fc11 	bl	80005f8 <__aeabi_dmul>
 8014dd6:	4680      	mov	r8, r0
 8014dd8:	4689      	mov	r9, r1
 8014dda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014dde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014de2:	9315      	str	r3, [sp, #84]	; 0x54
 8014de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014de8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014dec:	e79d      	b.n	8014d2a <_strtod_l+0x9aa>
 8014dee:	f1ba 0f01 	cmp.w	sl, #1
 8014df2:	d102      	bne.n	8014dfa <_strtod_l+0xa7a>
 8014df4:	2f00      	cmp	r7, #0
 8014df6:	f43f ad83 	beq.w	8014900 <_strtod_l+0x580>
 8014dfa:	4b62      	ldr	r3, [pc, #392]	; (8014f84 <_strtod_l+0xc04>)
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	e78e      	b.n	8014d1e <_strtod_l+0x99e>
 8014e00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014f80 <_strtod_l+0xc00>
 8014e04:	f04f 0800 	mov.w	r8, #0
 8014e08:	e7e7      	b.n	8014dda <_strtod_l+0xa5a>
 8014e0a:	4b5d      	ldr	r3, [pc, #372]	; (8014f80 <_strtod_l+0xc00>)
 8014e0c:	4640      	mov	r0, r8
 8014e0e:	4649      	mov	r1, r9
 8014e10:	2200      	movs	r2, #0
 8014e12:	f7eb fbf1 	bl	80005f8 <__aeabi_dmul>
 8014e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e18:	4680      	mov	r8, r0
 8014e1a:	4689      	mov	r9, r1
 8014e1c:	b933      	cbnz	r3, 8014e2c <_strtod_l+0xaac>
 8014e1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e22:	900e      	str	r0, [sp, #56]	; 0x38
 8014e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014e2a:	e7dd      	b.n	8014de8 <_strtod_l+0xa68>
 8014e2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014e30:	e7f9      	b.n	8014e26 <_strtod_l+0xaa6>
 8014e32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014e36:	9b04      	ldr	r3, [sp, #16]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d1a8      	bne.n	8014d8e <_strtod_l+0xa0e>
 8014e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e42:	0d1b      	lsrs	r3, r3, #20
 8014e44:	051b      	lsls	r3, r3, #20
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d1a1      	bne.n	8014d8e <_strtod_l+0xa0e>
 8014e4a:	4640      	mov	r0, r8
 8014e4c:	4649      	mov	r1, r9
 8014e4e:	f7eb ff33 	bl	8000cb8 <__aeabi_d2lz>
 8014e52:	f7eb fba3 	bl	800059c <__aeabi_l2d>
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	4640      	mov	r0, r8
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	f7eb fa13 	bl	8000288 <__aeabi_dsub>
 8014e62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e68:	ea43 030a 	orr.w	r3, r3, sl
 8014e6c:	4313      	orrs	r3, r2
 8014e6e:	4680      	mov	r8, r0
 8014e70:	4689      	mov	r9, r1
 8014e72:	d055      	beq.n	8014f20 <_strtod_l+0xba0>
 8014e74:	a336      	add	r3, pc, #216	; (adr r3, 8014f50 <_strtod_l+0xbd0>)
 8014e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7a:	f7eb fe2f 	bl	8000adc <__aeabi_dcmplt>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	f47f acd0 	bne.w	8014824 <_strtod_l+0x4a4>
 8014e84:	a334      	add	r3, pc, #208	; (adr r3, 8014f58 <_strtod_l+0xbd8>)
 8014e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8a:	4640      	mov	r0, r8
 8014e8c:	4649      	mov	r1, r9
 8014e8e:	f7eb fe43 	bl	8000b18 <__aeabi_dcmpgt>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	f43f af7b 	beq.w	8014d8e <_strtod_l+0xa0e>
 8014e98:	e4c4      	b.n	8014824 <_strtod_l+0x4a4>
 8014e9a:	9b04      	ldr	r3, [sp, #16]
 8014e9c:	b333      	cbz	r3, 8014eec <_strtod_l+0xb6c>
 8014e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ea0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014ea4:	d822      	bhi.n	8014eec <_strtod_l+0xb6c>
 8014ea6:	a32e      	add	r3, pc, #184	; (adr r3, 8014f60 <_strtod_l+0xbe0>)
 8014ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eac:	4640      	mov	r0, r8
 8014eae:	4649      	mov	r1, r9
 8014eb0:	f7eb fe1e 	bl	8000af0 <__aeabi_dcmple>
 8014eb4:	b1a0      	cbz	r0, 8014ee0 <_strtod_l+0xb60>
 8014eb6:	4649      	mov	r1, r9
 8014eb8:	4640      	mov	r0, r8
 8014eba:	f7eb fe75 	bl	8000ba8 <__aeabi_d2uiz>
 8014ebe:	2801      	cmp	r0, #1
 8014ec0:	bf38      	it	cc
 8014ec2:	2001      	movcc	r0, #1
 8014ec4:	f7eb fb1e 	bl	8000504 <__aeabi_ui2d>
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	4680      	mov	r8, r0
 8014ecc:	4689      	mov	r9, r1
 8014ece:	bb23      	cbnz	r3, 8014f1a <_strtod_l+0xb9a>
 8014ed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ed4:	9010      	str	r0, [sp, #64]	; 0x40
 8014ed6:	9311      	str	r3, [sp, #68]	; 0x44
 8014ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014edc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ee4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014ee8:	1a9b      	subs	r3, r3, r2
 8014eea:	9309      	str	r3, [sp, #36]	; 0x24
 8014eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8014ef4:	eef0 0a68 	vmov.f32	s1, s17
 8014ef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014efc:	f002 f9ac 	bl	8017258 <__ulp>
 8014f00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f04:	ec53 2b10 	vmov	r2, r3, d0
 8014f08:	f7eb fb76 	bl	80005f8 <__aeabi_dmul>
 8014f0c:	ec53 2b18 	vmov	r2, r3, d8
 8014f10:	f7eb f9bc 	bl	800028c <__adddf3>
 8014f14:	4682      	mov	sl, r0
 8014f16:	468b      	mov	fp, r1
 8014f18:	e78d      	b.n	8014e36 <_strtod_l+0xab6>
 8014f1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014f1e:	e7db      	b.n	8014ed8 <_strtod_l+0xb58>
 8014f20:	a311      	add	r3, pc, #68	; (adr r3, 8014f68 <_strtod_l+0xbe8>)
 8014f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f26:	f7eb fdd9 	bl	8000adc <__aeabi_dcmplt>
 8014f2a:	e7b2      	b.n	8014e92 <_strtod_l+0xb12>
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	f7ff ba6b 	b.w	8014410 <_strtod_l+0x90>
 8014f3a:	2a65      	cmp	r2, #101	; 0x65
 8014f3c:	f43f ab5f 	beq.w	80145fe <_strtod_l+0x27e>
 8014f40:	2a45      	cmp	r2, #69	; 0x45
 8014f42:	f43f ab5c 	beq.w	80145fe <_strtod_l+0x27e>
 8014f46:	2301      	movs	r3, #1
 8014f48:	f7ff bb94 	b.w	8014674 <_strtod_l+0x2f4>
 8014f4c:	f3af 8000 	nop.w
 8014f50:	94a03595 	.word	0x94a03595
 8014f54:	3fdfffff 	.word	0x3fdfffff
 8014f58:	35afe535 	.word	0x35afe535
 8014f5c:	3fe00000 	.word	0x3fe00000
 8014f60:	ffc00000 	.word	0xffc00000
 8014f64:	41dfffff 	.word	0x41dfffff
 8014f68:	94a03595 	.word	0x94a03595
 8014f6c:	3fcfffff 	.word	0x3fcfffff
 8014f70:	3ff00000 	.word	0x3ff00000
 8014f74:	7ff00000 	.word	0x7ff00000
 8014f78:	7fe00000 	.word	0x7fe00000
 8014f7c:	7c9fffff 	.word	0x7c9fffff
 8014f80:	3fe00000 	.word	0x3fe00000
 8014f84:	bff00000 	.word	0xbff00000
 8014f88:	7fefffff 	.word	0x7fefffff

08014f8c <_strtod_r>:
 8014f8c:	4b01      	ldr	r3, [pc, #4]	; (8014f94 <_strtod_r+0x8>)
 8014f8e:	f7ff b9f7 	b.w	8014380 <_strtod_l>
 8014f92:	bf00      	nop
 8014f94:	200001f8 	.word	0x200001f8

08014f98 <_strtol_l.constprop.0>:
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f9e:	d001      	beq.n	8014fa4 <_strtol_l.constprop.0+0xc>
 8014fa0:	2b24      	cmp	r3, #36	; 0x24
 8014fa2:	d906      	bls.n	8014fb2 <_strtol_l.constprop.0+0x1a>
 8014fa4:	f7fd ffa2 	bl	8012eec <__errno>
 8014fa8:	2316      	movs	r3, #22
 8014faa:	6003      	str	r3, [r0, #0]
 8014fac:	2000      	movs	r0, #0
 8014fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015098 <_strtol_l.constprop.0+0x100>
 8014fb6:	460d      	mov	r5, r1
 8014fb8:	462e      	mov	r6, r5
 8014fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014fc2:	f017 0708 	ands.w	r7, r7, #8
 8014fc6:	d1f7      	bne.n	8014fb8 <_strtol_l.constprop.0+0x20>
 8014fc8:	2c2d      	cmp	r4, #45	; 0x2d
 8014fca:	d132      	bne.n	8015032 <_strtol_l.constprop.0+0x9a>
 8014fcc:	782c      	ldrb	r4, [r5, #0]
 8014fce:	2701      	movs	r7, #1
 8014fd0:	1cb5      	adds	r5, r6, #2
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d05b      	beq.n	801508e <_strtol_l.constprop.0+0xf6>
 8014fd6:	2b10      	cmp	r3, #16
 8014fd8:	d109      	bne.n	8014fee <_strtol_l.constprop.0+0x56>
 8014fda:	2c30      	cmp	r4, #48	; 0x30
 8014fdc:	d107      	bne.n	8014fee <_strtol_l.constprop.0+0x56>
 8014fde:	782c      	ldrb	r4, [r5, #0]
 8014fe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014fe4:	2c58      	cmp	r4, #88	; 0x58
 8014fe6:	d14d      	bne.n	8015084 <_strtol_l.constprop.0+0xec>
 8014fe8:	786c      	ldrb	r4, [r5, #1]
 8014fea:	2310      	movs	r3, #16
 8014fec:	3502      	adds	r5, #2
 8014fee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014ff2:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ff6:	f04f 0c00 	mov.w	ip, #0
 8014ffa:	fbb8 f9f3 	udiv	r9, r8, r3
 8014ffe:	4666      	mov	r6, ip
 8015000:	fb03 8a19 	mls	sl, r3, r9, r8
 8015004:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015008:	f1be 0f09 	cmp.w	lr, #9
 801500c:	d816      	bhi.n	801503c <_strtol_l.constprop.0+0xa4>
 801500e:	4674      	mov	r4, lr
 8015010:	42a3      	cmp	r3, r4
 8015012:	dd24      	ble.n	801505e <_strtol_l.constprop.0+0xc6>
 8015014:	f1bc 0f00 	cmp.w	ip, #0
 8015018:	db1e      	blt.n	8015058 <_strtol_l.constprop.0+0xc0>
 801501a:	45b1      	cmp	r9, r6
 801501c:	d31c      	bcc.n	8015058 <_strtol_l.constprop.0+0xc0>
 801501e:	d101      	bne.n	8015024 <_strtol_l.constprop.0+0x8c>
 8015020:	45a2      	cmp	sl, r4
 8015022:	db19      	blt.n	8015058 <_strtol_l.constprop.0+0xc0>
 8015024:	fb06 4603 	mla	r6, r6, r3, r4
 8015028:	f04f 0c01 	mov.w	ip, #1
 801502c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015030:	e7e8      	b.n	8015004 <_strtol_l.constprop.0+0x6c>
 8015032:	2c2b      	cmp	r4, #43	; 0x2b
 8015034:	bf04      	itt	eq
 8015036:	782c      	ldrbeq	r4, [r5, #0]
 8015038:	1cb5      	addeq	r5, r6, #2
 801503a:	e7ca      	b.n	8014fd2 <_strtol_l.constprop.0+0x3a>
 801503c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015040:	f1be 0f19 	cmp.w	lr, #25
 8015044:	d801      	bhi.n	801504a <_strtol_l.constprop.0+0xb2>
 8015046:	3c37      	subs	r4, #55	; 0x37
 8015048:	e7e2      	b.n	8015010 <_strtol_l.constprop.0+0x78>
 801504a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801504e:	f1be 0f19 	cmp.w	lr, #25
 8015052:	d804      	bhi.n	801505e <_strtol_l.constprop.0+0xc6>
 8015054:	3c57      	subs	r4, #87	; 0x57
 8015056:	e7db      	b.n	8015010 <_strtol_l.constprop.0+0x78>
 8015058:	f04f 3cff 	mov.w	ip, #4294967295
 801505c:	e7e6      	b.n	801502c <_strtol_l.constprop.0+0x94>
 801505e:	f1bc 0f00 	cmp.w	ip, #0
 8015062:	da05      	bge.n	8015070 <_strtol_l.constprop.0+0xd8>
 8015064:	2322      	movs	r3, #34	; 0x22
 8015066:	6003      	str	r3, [r0, #0]
 8015068:	4646      	mov	r6, r8
 801506a:	b942      	cbnz	r2, 801507e <_strtol_l.constprop.0+0xe6>
 801506c:	4630      	mov	r0, r6
 801506e:	e79e      	b.n	8014fae <_strtol_l.constprop.0+0x16>
 8015070:	b107      	cbz	r7, 8015074 <_strtol_l.constprop.0+0xdc>
 8015072:	4276      	negs	r6, r6
 8015074:	2a00      	cmp	r2, #0
 8015076:	d0f9      	beq.n	801506c <_strtol_l.constprop.0+0xd4>
 8015078:	f1bc 0f00 	cmp.w	ip, #0
 801507c:	d000      	beq.n	8015080 <_strtol_l.constprop.0+0xe8>
 801507e:	1e69      	subs	r1, r5, #1
 8015080:	6011      	str	r1, [r2, #0]
 8015082:	e7f3      	b.n	801506c <_strtol_l.constprop.0+0xd4>
 8015084:	2430      	movs	r4, #48	; 0x30
 8015086:	2b00      	cmp	r3, #0
 8015088:	d1b1      	bne.n	8014fee <_strtol_l.constprop.0+0x56>
 801508a:	2308      	movs	r3, #8
 801508c:	e7af      	b.n	8014fee <_strtol_l.constprop.0+0x56>
 801508e:	2c30      	cmp	r4, #48	; 0x30
 8015090:	d0a5      	beq.n	8014fde <_strtol_l.constprop.0+0x46>
 8015092:	230a      	movs	r3, #10
 8015094:	e7ab      	b.n	8014fee <_strtol_l.constprop.0+0x56>
 8015096:	bf00      	nop
 8015098:	08019b11 	.word	0x08019b11

0801509c <_strtol_r>:
 801509c:	f7ff bf7c 	b.w	8014f98 <_strtol_l.constprop.0>

080150a0 <_user_strerror>:
 80150a0:	2000      	movs	r0, #0
 80150a2:	4770      	bx	lr

080150a4 <__swbuf_r>:
 80150a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150a6:	460e      	mov	r6, r1
 80150a8:	4614      	mov	r4, r2
 80150aa:	4605      	mov	r5, r0
 80150ac:	b118      	cbz	r0, 80150b6 <__swbuf_r+0x12>
 80150ae:	6983      	ldr	r3, [r0, #24]
 80150b0:	b90b      	cbnz	r3, 80150b6 <__swbuf_r+0x12>
 80150b2:	f001 f8ab 	bl	801620c <__sinit>
 80150b6:	4b21      	ldr	r3, [pc, #132]	; (801513c <__swbuf_r+0x98>)
 80150b8:	429c      	cmp	r4, r3
 80150ba:	d12b      	bne.n	8015114 <__swbuf_r+0x70>
 80150bc:	686c      	ldr	r4, [r5, #4]
 80150be:	69a3      	ldr	r3, [r4, #24]
 80150c0:	60a3      	str	r3, [r4, #8]
 80150c2:	89a3      	ldrh	r3, [r4, #12]
 80150c4:	071a      	lsls	r2, r3, #28
 80150c6:	d52f      	bpl.n	8015128 <__swbuf_r+0x84>
 80150c8:	6923      	ldr	r3, [r4, #16]
 80150ca:	b36b      	cbz	r3, 8015128 <__swbuf_r+0x84>
 80150cc:	6923      	ldr	r3, [r4, #16]
 80150ce:	6820      	ldr	r0, [r4, #0]
 80150d0:	1ac0      	subs	r0, r0, r3
 80150d2:	6963      	ldr	r3, [r4, #20]
 80150d4:	b2f6      	uxtb	r6, r6
 80150d6:	4283      	cmp	r3, r0
 80150d8:	4637      	mov	r7, r6
 80150da:	dc04      	bgt.n	80150e6 <__swbuf_r+0x42>
 80150dc:	4621      	mov	r1, r4
 80150de:	4628      	mov	r0, r5
 80150e0:	f000 ffc2 	bl	8016068 <_fflush_r>
 80150e4:	bb30      	cbnz	r0, 8015134 <__swbuf_r+0x90>
 80150e6:	68a3      	ldr	r3, [r4, #8]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	60a3      	str	r3, [r4, #8]
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	1c5a      	adds	r2, r3, #1
 80150f0:	6022      	str	r2, [r4, #0]
 80150f2:	701e      	strb	r6, [r3, #0]
 80150f4:	6963      	ldr	r3, [r4, #20]
 80150f6:	3001      	adds	r0, #1
 80150f8:	4283      	cmp	r3, r0
 80150fa:	d004      	beq.n	8015106 <__swbuf_r+0x62>
 80150fc:	89a3      	ldrh	r3, [r4, #12]
 80150fe:	07db      	lsls	r3, r3, #31
 8015100:	d506      	bpl.n	8015110 <__swbuf_r+0x6c>
 8015102:	2e0a      	cmp	r6, #10
 8015104:	d104      	bne.n	8015110 <__swbuf_r+0x6c>
 8015106:	4621      	mov	r1, r4
 8015108:	4628      	mov	r0, r5
 801510a:	f000 ffad 	bl	8016068 <_fflush_r>
 801510e:	b988      	cbnz	r0, 8015134 <__swbuf_r+0x90>
 8015110:	4638      	mov	r0, r7
 8015112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015114:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <__swbuf_r+0x9c>)
 8015116:	429c      	cmp	r4, r3
 8015118:	d101      	bne.n	801511e <__swbuf_r+0x7a>
 801511a:	68ac      	ldr	r4, [r5, #8]
 801511c:	e7cf      	b.n	80150be <__swbuf_r+0x1a>
 801511e:	4b09      	ldr	r3, [pc, #36]	; (8015144 <__swbuf_r+0xa0>)
 8015120:	429c      	cmp	r4, r3
 8015122:	bf08      	it	eq
 8015124:	68ec      	ldreq	r4, [r5, #12]
 8015126:	e7ca      	b.n	80150be <__swbuf_r+0x1a>
 8015128:	4621      	mov	r1, r4
 801512a:	4628      	mov	r0, r5
 801512c:	f000 f81e 	bl	801516c <__swsetup_r>
 8015130:	2800      	cmp	r0, #0
 8015132:	d0cb      	beq.n	80150cc <__swbuf_r+0x28>
 8015134:	f04f 37ff 	mov.w	r7, #4294967295
 8015138:	e7ea      	b.n	8015110 <__swbuf_r+0x6c>
 801513a:	bf00      	nop
 801513c:	08019cc4 	.word	0x08019cc4
 8015140:	08019ce4 	.word	0x08019ce4
 8015144:	08019ca4 	.word	0x08019ca4

08015148 <_write_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d07      	ldr	r5, [pc, #28]	; (8015168 <_write_r+0x20>)
 801514c:	4604      	mov	r4, r0
 801514e:	4608      	mov	r0, r1
 8015150:	4611      	mov	r1, r2
 8015152:	2200      	movs	r2, #0
 8015154:	602a      	str	r2, [r5, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	f7f0 fbed 	bl	8005936 <_write>
 801515c:	1c43      	adds	r3, r0, #1
 801515e:	d102      	bne.n	8015166 <_write_r+0x1e>
 8015160:	682b      	ldr	r3, [r5, #0]
 8015162:	b103      	cbz	r3, 8015166 <_write_r+0x1e>
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	200023cc 	.word	0x200023cc

0801516c <__swsetup_r>:
 801516c:	4b32      	ldr	r3, [pc, #200]	; (8015238 <__swsetup_r+0xcc>)
 801516e:	b570      	push	{r4, r5, r6, lr}
 8015170:	681d      	ldr	r5, [r3, #0]
 8015172:	4606      	mov	r6, r0
 8015174:	460c      	mov	r4, r1
 8015176:	b125      	cbz	r5, 8015182 <__swsetup_r+0x16>
 8015178:	69ab      	ldr	r3, [r5, #24]
 801517a:	b913      	cbnz	r3, 8015182 <__swsetup_r+0x16>
 801517c:	4628      	mov	r0, r5
 801517e:	f001 f845 	bl	801620c <__sinit>
 8015182:	4b2e      	ldr	r3, [pc, #184]	; (801523c <__swsetup_r+0xd0>)
 8015184:	429c      	cmp	r4, r3
 8015186:	d10f      	bne.n	80151a8 <__swsetup_r+0x3c>
 8015188:	686c      	ldr	r4, [r5, #4]
 801518a:	89a3      	ldrh	r3, [r4, #12]
 801518c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015190:	0719      	lsls	r1, r3, #28
 8015192:	d42c      	bmi.n	80151ee <__swsetup_r+0x82>
 8015194:	06dd      	lsls	r5, r3, #27
 8015196:	d411      	bmi.n	80151bc <__swsetup_r+0x50>
 8015198:	2309      	movs	r3, #9
 801519a:	6033      	str	r3, [r6, #0]
 801519c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151a0:	81a3      	strh	r3, [r4, #12]
 80151a2:	f04f 30ff 	mov.w	r0, #4294967295
 80151a6:	e03e      	b.n	8015226 <__swsetup_r+0xba>
 80151a8:	4b25      	ldr	r3, [pc, #148]	; (8015240 <__swsetup_r+0xd4>)
 80151aa:	429c      	cmp	r4, r3
 80151ac:	d101      	bne.n	80151b2 <__swsetup_r+0x46>
 80151ae:	68ac      	ldr	r4, [r5, #8]
 80151b0:	e7eb      	b.n	801518a <__swsetup_r+0x1e>
 80151b2:	4b24      	ldr	r3, [pc, #144]	; (8015244 <__swsetup_r+0xd8>)
 80151b4:	429c      	cmp	r4, r3
 80151b6:	bf08      	it	eq
 80151b8:	68ec      	ldreq	r4, [r5, #12]
 80151ba:	e7e6      	b.n	801518a <__swsetup_r+0x1e>
 80151bc:	0758      	lsls	r0, r3, #29
 80151be:	d512      	bpl.n	80151e6 <__swsetup_r+0x7a>
 80151c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151c2:	b141      	cbz	r1, 80151d6 <__swsetup_r+0x6a>
 80151c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151c8:	4299      	cmp	r1, r3
 80151ca:	d002      	beq.n	80151d2 <__swsetup_r+0x66>
 80151cc:	4630      	mov	r0, r6
 80151ce:	f002 f9a9 	bl	8017524 <_free_r>
 80151d2:	2300      	movs	r3, #0
 80151d4:	6363      	str	r3, [r4, #52]	; 0x34
 80151d6:	89a3      	ldrh	r3, [r4, #12]
 80151d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151dc:	81a3      	strh	r3, [r4, #12]
 80151de:	2300      	movs	r3, #0
 80151e0:	6063      	str	r3, [r4, #4]
 80151e2:	6923      	ldr	r3, [r4, #16]
 80151e4:	6023      	str	r3, [r4, #0]
 80151e6:	89a3      	ldrh	r3, [r4, #12]
 80151e8:	f043 0308 	orr.w	r3, r3, #8
 80151ec:	81a3      	strh	r3, [r4, #12]
 80151ee:	6923      	ldr	r3, [r4, #16]
 80151f0:	b94b      	cbnz	r3, 8015206 <__swsetup_r+0x9a>
 80151f2:	89a3      	ldrh	r3, [r4, #12]
 80151f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151fc:	d003      	beq.n	8015206 <__swsetup_r+0x9a>
 80151fe:	4621      	mov	r1, r4
 8015200:	4630      	mov	r0, r6
 8015202:	f001 fc4f 	bl	8016aa4 <__smakebuf_r>
 8015206:	89a0      	ldrh	r0, [r4, #12]
 8015208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801520c:	f010 0301 	ands.w	r3, r0, #1
 8015210:	d00a      	beq.n	8015228 <__swsetup_r+0xbc>
 8015212:	2300      	movs	r3, #0
 8015214:	60a3      	str	r3, [r4, #8]
 8015216:	6963      	ldr	r3, [r4, #20]
 8015218:	425b      	negs	r3, r3
 801521a:	61a3      	str	r3, [r4, #24]
 801521c:	6923      	ldr	r3, [r4, #16]
 801521e:	b943      	cbnz	r3, 8015232 <__swsetup_r+0xc6>
 8015220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015224:	d1ba      	bne.n	801519c <__swsetup_r+0x30>
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	0781      	lsls	r1, r0, #30
 801522a:	bf58      	it	pl
 801522c:	6963      	ldrpl	r3, [r4, #20]
 801522e:	60a3      	str	r3, [r4, #8]
 8015230:	e7f4      	b.n	801521c <__swsetup_r+0xb0>
 8015232:	2000      	movs	r0, #0
 8015234:	e7f7      	b.n	8015226 <__swsetup_r+0xba>
 8015236:	bf00      	nop
 8015238:	20000190 	.word	0x20000190
 801523c:	08019cc4 	.word	0x08019cc4
 8015240:	08019ce4 	.word	0x08019ce4
 8015244:	08019ca4 	.word	0x08019ca4

08015248 <_close_r>:
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	4d06      	ldr	r5, [pc, #24]	; (8015264 <_close_r+0x1c>)
 801524c:	2300      	movs	r3, #0
 801524e:	4604      	mov	r4, r0
 8015250:	4608      	mov	r0, r1
 8015252:	602b      	str	r3, [r5, #0]
 8015254:	f7f0 fb8b 	bl	800596e <_close>
 8015258:	1c43      	adds	r3, r0, #1
 801525a:	d102      	bne.n	8015262 <_close_r+0x1a>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	b103      	cbz	r3, 8015262 <_close_r+0x1a>
 8015260:	6023      	str	r3, [r4, #0]
 8015262:	bd38      	pop	{r3, r4, r5, pc}
 8015264:	200023cc 	.word	0x200023cc

08015268 <quorem>:
 8015268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801526c:	6903      	ldr	r3, [r0, #16]
 801526e:	690c      	ldr	r4, [r1, #16]
 8015270:	42a3      	cmp	r3, r4
 8015272:	4607      	mov	r7, r0
 8015274:	f2c0 8081 	blt.w	801537a <quorem+0x112>
 8015278:	3c01      	subs	r4, #1
 801527a:	f101 0814 	add.w	r8, r1, #20
 801527e:	f100 0514 	add.w	r5, r0, #20
 8015282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015286:	9301      	str	r3, [sp, #4]
 8015288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801528c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015290:	3301      	adds	r3, #1
 8015292:	429a      	cmp	r2, r3
 8015294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801529c:	fbb2 f6f3 	udiv	r6, r2, r3
 80152a0:	d331      	bcc.n	8015306 <quorem+0x9e>
 80152a2:	f04f 0e00 	mov.w	lr, #0
 80152a6:	4640      	mov	r0, r8
 80152a8:	46ac      	mov	ip, r5
 80152aa:	46f2      	mov	sl, lr
 80152ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80152b0:	b293      	uxth	r3, r2
 80152b2:	fb06 e303 	mla	r3, r6, r3, lr
 80152b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	ebaa 0303 	sub.w	r3, sl, r3
 80152c0:	f8dc a000 	ldr.w	sl, [ip]
 80152c4:	0c12      	lsrs	r2, r2, #16
 80152c6:	fa13 f38a 	uxtah	r3, r3, sl
 80152ca:	fb06 e202 	mla	r2, r6, r2, lr
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	9b00      	ldr	r3, [sp, #0]
 80152d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80152d6:	b292      	uxth	r2, r2
 80152d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80152dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80152e4:	4581      	cmp	r9, r0
 80152e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152ea:	f84c 3b04 	str.w	r3, [ip], #4
 80152ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80152f2:	d2db      	bcs.n	80152ac <quorem+0x44>
 80152f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80152f8:	b92b      	cbnz	r3, 8015306 <quorem+0x9e>
 80152fa:	9b01      	ldr	r3, [sp, #4]
 80152fc:	3b04      	subs	r3, #4
 80152fe:	429d      	cmp	r5, r3
 8015300:	461a      	mov	r2, r3
 8015302:	d32e      	bcc.n	8015362 <quorem+0xfa>
 8015304:	613c      	str	r4, [r7, #16]
 8015306:	4638      	mov	r0, r7
 8015308:	f001 ff00 	bl	801710c <__mcmp>
 801530c:	2800      	cmp	r0, #0
 801530e:	db24      	blt.n	801535a <quorem+0xf2>
 8015310:	3601      	adds	r6, #1
 8015312:	4628      	mov	r0, r5
 8015314:	f04f 0c00 	mov.w	ip, #0
 8015318:	f858 2b04 	ldr.w	r2, [r8], #4
 801531c:	f8d0 e000 	ldr.w	lr, [r0]
 8015320:	b293      	uxth	r3, r2
 8015322:	ebac 0303 	sub.w	r3, ip, r3
 8015326:	0c12      	lsrs	r2, r2, #16
 8015328:	fa13 f38e 	uxtah	r3, r3, lr
 801532c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015334:	b29b      	uxth	r3, r3
 8015336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801533a:	45c1      	cmp	r9, r8
 801533c:	f840 3b04 	str.w	r3, [r0], #4
 8015340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015344:	d2e8      	bcs.n	8015318 <quorem+0xb0>
 8015346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801534a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801534e:	b922      	cbnz	r2, 801535a <quorem+0xf2>
 8015350:	3b04      	subs	r3, #4
 8015352:	429d      	cmp	r5, r3
 8015354:	461a      	mov	r2, r3
 8015356:	d30a      	bcc.n	801536e <quorem+0x106>
 8015358:	613c      	str	r4, [r7, #16]
 801535a:	4630      	mov	r0, r6
 801535c:	b003      	add	sp, #12
 801535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015362:	6812      	ldr	r2, [r2, #0]
 8015364:	3b04      	subs	r3, #4
 8015366:	2a00      	cmp	r2, #0
 8015368:	d1cc      	bne.n	8015304 <quorem+0x9c>
 801536a:	3c01      	subs	r4, #1
 801536c:	e7c7      	b.n	80152fe <quorem+0x96>
 801536e:	6812      	ldr	r2, [r2, #0]
 8015370:	3b04      	subs	r3, #4
 8015372:	2a00      	cmp	r2, #0
 8015374:	d1f0      	bne.n	8015358 <quorem+0xf0>
 8015376:	3c01      	subs	r4, #1
 8015378:	e7eb      	b.n	8015352 <quorem+0xea>
 801537a:	2000      	movs	r0, #0
 801537c:	e7ee      	b.n	801535c <quorem+0xf4>
	...

08015380 <_dtoa_r>:
 8015380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015384:	ed2d 8b04 	vpush	{d8-d9}
 8015388:	ec57 6b10 	vmov	r6, r7, d0
 801538c:	b093      	sub	sp, #76	; 0x4c
 801538e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015394:	9106      	str	r1, [sp, #24]
 8015396:	ee10 aa10 	vmov	sl, s0
 801539a:	4604      	mov	r4, r0
 801539c:	9209      	str	r2, [sp, #36]	; 0x24
 801539e:	930c      	str	r3, [sp, #48]	; 0x30
 80153a0:	46bb      	mov	fp, r7
 80153a2:	b975      	cbnz	r5, 80153c2 <_dtoa_r+0x42>
 80153a4:	2010      	movs	r0, #16
 80153a6:	f001 fbbd 	bl	8016b24 <malloc>
 80153aa:	4602      	mov	r2, r0
 80153ac:	6260      	str	r0, [r4, #36]	; 0x24
 80153ae:	b920      	cbnz	r0, 80153ba <_dtoa_r+0x3a>
 80153b0:	4ba7      	ldr	r3, [pc, #668]	; (8015650 <_dtoa_r+0x2d0>)
 80153b2:	21ea      	movs	r1, #234	; 0xea
 80153b4:	48a7      	ldr	r0, [pc, #668]	; (8015654 <_dtoa_r+0x2d4>)
 80153b6:	f002 fc99 	bl	8017cec <__assert_func>
 80153ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80153be:	6005      	str	r5, [r0, #0]
 80153c0:	60c5      	str	r5, [r0, #12]
 80153c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153c4:	6819      	ldr	r1, [r3, #0]
 80153c6:	b151      	cbz	r1, 80153de <_dtoa_r+0x5e>
 80153c8:	685a      	ldr	r2, [r3, #4]
 80153ca:	604a      	str	r2, [r1, #4]
 80153cc:	2301      	movs	r3, #1
 80153ce:	4093      	lsls	r3, r2
 80153d0:	608b      	str	r3, [r1, #8]
 80153d2:	4620      	mov	r0, r4
 80153d4:	f001 fc0e 	bl	8016bf4 <_Bfree>
 80153d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153da:	2200      	movs	r2, #0
 80153dc:	601a      	str	r2, [r3, #0]
 80153de:	1e3b      	subs	r3, r7, #0
 80153e0:	bfaa      	itet	ge
 80153e2:	2300      	movge	r3, #0
 80153e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80153e8:	f8c8 3000 	strge.w	r3, [r8]
 80153ec:	4b9a      	ldr	r3, [pc, #616]	; (8015658 <_dtoa_r+0x2d8>)
 80153ee:	bfbc      	itt	lt
 80153f0:	2201      	movlt	r2, #1
 80153f2:	f8c8 2000 	strlt.w	r2, [r8]
 80153f6:	ea33 030b 	bics.w	r3, r3, fp
 80153fa:	d11b      	bne.n	8015434 <_dtoa_r+0xb4>
 80153fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8015402:	6013      	str	r3, [r2, #0]
 8015404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015408:	4333      	orrs	r3, r6
 801540a:	f000 8592 	beq.w	8015f32 <_dtoa_r+0xbb2>
 801540e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015410:	b963      	cbnz	r3, 801542c <_dtoa_r+0xac>
 8015412:	4b92      	ldr	r3, [pc, #584]	; (801565c <_dtoa_r+0x2dc>)
 8015414:	e022      	b.n	801545c <_dtoa_r+0xdc>
 8015416:	4b92      	ldr	r3, [pc, #584]	; (8015660 <_dtoa_r+0x2e0>)
 8015418:	9301      	str	r3, [sp, #4]
 801541a:	3308      	adds	r3, #8
 801541c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801541e:	6013      	str	r3, [r2, #0]
 8015420:	9801      	ldr	r0, [sp, #4]
 8015422:	b013      	add	sp, #76	; 0x4c
 8015424:	ecbd 8b04 	vpop	{d8-d9}
 8015428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542c:	4b8b      	ldr	r3, [pc, #556]	; (801565c <_dtoa_r+0x2dc>)
 801542e:	9301      	str	r3, [sp, #4]
 8015430:	3303      	adds	r3, #3
 8015432:	e7f3      	b.n	801541c <_dtoa_r+0x9c>
 8015434:	2200      	movs	r2, #0
 8015436:	2300      	movs	r3, #0
 8015438:	4650      	mov	r0, sl
 801543a:	4659      	mov	r1, fp
 801543c:	f7eb fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8015440:	ec4b ab19 	vmov	d9, sl, fp
 8015444:	4680      	mov	r8, r0
 8015446:	b158      	cbz	r0, 8015460 <_dtoa_r+0xe0>
 8015448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801544a:	2301      	movs	r3, #1
 801544c:	6013      	str	r3, [r2, #0]
 801544e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015450:	2b00      	cmp	r3, #0
 8015452:	f000 856b 	beq.w	8015f2c <_dtoa_r+0xbac>
 8015456:	4883      	ldr	r0, [pc, #524]	; (8015664 <_dtoa_r+0x2e4>)
 8015458:	6018      	str	r0, [r3, #0]
 801545a:	1e43      	subs	r3, r0, #1
 801545c:	9301      	str	r3, [sp, #4]
 801545e:	e7df      	b.n	8015420 <_dtoa_r+0xa0>
 8015460:	ec4b ab10 	vmov	d0, sl, fp
 8015464:	aa10      	add	r2, sp, #64	; 0x40
 8015466:	a911      	add	r1, sp, #68	; 0x44
 8015468:	4620      	mov	r0, r4
 801546a:	f001 ff71 	bl	8017350 <__d2b>
 801546e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015472:	ee08 0a10 	vmov	s16, r0
 8015476:	2d00      	cmp	r5, #0
 8015478:	f000 8084 	beq.w	8015584 <_dtoa_r+0x204>
 801547c:	ee19 3a90 	vmov	r3, s19
 8015480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015488:	4656      	mov	r6, sl
 801548a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801548e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015496:	4b74      	ldr	r3, [pc, #464]	; (8015668 <_dtoa_r+0x2e8>)
 8015498:	2200      	movs	r2, #0
 801549a:	4630      	mov	r0, r6
 801549c:	4639      	mov	r1, r7
 801549e:	f7ea fef3 	bl	8000288 <__aeabi_dsub>
 80154a2:	a365      	add	r3, pc, #404	; (adr r3, 8015638 <_dtoa_r+0x2b8>)
 80154a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a8:	f7eb f8a6 	bl	80005f8 <__aeabi_dmul>
 80154ac:	a364      	add	r3, pc, #400	; (adr r3, 8015640 <_dtoa_r+0x2c0>)
 80154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b2:	f7ea feeb 	bl	800028c <__adddf3>
 80154b6:	4606      	mov	r6, r0
 80154b8:	4628      	mov	r0, r5
 80154ba:	460f      	mov	r7, r1
 80154bc:	f7eb f832 	bl	8000524 <__aeabi_i2d>
 80154c0:	a361      	add	r3, pc, #388	; (adr r3, 8015648 <_dtoa_r+0x2c8>)
 80154c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c6:	f7eb f897 	bl	80005f8 <__aeabi_dmul>
 80154ca:	4602      	mov	r2, r0
 80154cc:	460b      	mov	r3, r1
 80154ce:	4630      	mov	r0, r6
 80154d0:	4639      	mov	r1, r7
 80154d2:	f7ea fedb 	bl	800028c <__adddf3>
 80154d6:	4606      	mov	r6, r0
 80154d8:	460f      	mov	r7, r1
 80154da:	f7eb fb3d 	bl	8000b58 <__aeabi_d2iz>
 80154de:	2200      	movs	r2, #0
 80154e0:	9000      	str	r0, [sp, #0]
 80154e2:	2300      	movs	r3, #0
 80154e4:	4630      	mov	r0, r6
 80154e6:	4639      	mov	r1, r7
 80154e8:	f7eb faf8 	bl	8000adc <__aeabi_dcmplt>
 80154ec:	b150      	cbz	r0, 8015504 <_dtoa_r+0x184>
 80154ee:	9800      	ldr	r0, [sp, #0]
 80154f0:	f7eb f818 	bl	8000524 <__aeabi_i2d>
 80154f4:	4632      	mov	r2, r6
 80154f6:	463b      	mov	r3, r7
 80154f8:	f7eb fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80154fc:	b910      	cbnz	r0, 8015504 <_dtoa_r+0x184>
 80154fe:	9b00      	ldr	r3, [sp, #0]
 8015500:	3b01      	subs	r3, #1
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	9b00      	ldr	r3, [sp, #0]
 8015506:	2b16      	cmp	r3, #22
 8015508:	d85a      	bhi.n	80155c0 <_dtoa_r+0x240>
 801550a:	9a00      	ldr	r2, [sp, #0]
 801550c:	4b57      	ldr	r3, [pc, #348]	; (801566c <_dtoa_r+0x2ec>)
 801550e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015516:	ec51 0b19 	vmov	r0, r1, d9
 801551a:	f7eb fadf 	bl	8000adc <__aeabi_dcmplt>
 801551e:	2800      	cmp	r0, #0
 8015520:	d050      	beq.n	80155c4 <_dtoa_r+0x244>
 8015522:	9b00      	ldr	r3, [sp, #0]
 8015524:	3b01      	subs	r3, #1
 8015526:	9300      	str	r3, [sp, #0]
 8015528:	2300      	movs	r3, #0
 801552a:	930b      	str	r3, [sp, #44]	; 0x2c
 801552c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801552e:	1b5d      	subs	r5, r3, r5
 8015530:	1e6b      	subs	r3, r5, #1
 8015532:	9305      	str	r3, [sp, #20]
 8015534:	bf45      	ittet	mi
 8015536:	f1c5 0301 	rsbmi	r3, r5, #1
 801553a:	9304      	strmi	r3, [sp, #16]
 801553c:	2300      	movpl	r3, #0
 801553e:	2300      	movmi	r3, #0
 8015540:	bf4c      	ite	mi
 8015542:	9305      	strmi	r3, [sp, #20]
 8015544:	9304      	strpl	r3, [sp, #16]
 8015546:	9b00      	ldr	r3, [sp, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	db3d      	blt.n	80155c8 <_dtoa_r+0x248>
 801554c:	9b05      	ldr	r3, [sp, #20]
 801554e:	9a00      	ldr	r2, [sp, #0]
 8015550:	920a      	str	r2, [sp, #40]	; 0x28
 8015552:	4413      	add	r3, r2
 8015554:	9305      	str	r3, [sp, #20]
 8015556:	2300      	movs	r3, #0
 8015558:	9307      	str	r3, [sp, #28]
 801555a:	9b06      	ldr	r3, [sp, #24]
 801555c:	2b09      	cmp	r3, #9
 801555e:	f200 8089 	bhi.w	8015674 <_dtoa_r+0x2f4>
 8015562:	2b05      	cmp	r3, #5
 8015564:	bfc4      	itt	gt
 8015566:	3b04      	subgt	r3, #4
 8015568:	9306      	strgt	r3, [sp, #24]
 801556a:	9b06      	ldr	r3, [sp, #24]
 801556c:	f1a3 0302 	sub.w	r3, r3, #2
 8015570:	bfcc      	ite	gt
 8015572:	2500      	movgt	r5, #0
 8015574:	2501      	movle	r5, #1
 8015576:	2b03      	cmp	r3, #3
 8015578:	f200 8087 	bhi.w	801568a <_dtoa_r+0x30a>
 801557c:	e8df f003 	tbb	[pc, r3]
 8015580:	59383a2d 	.word	0x59383a2d
 8015584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015588:	441d      	add	r5, r3
 801558a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801558e:	2b20      	cmp	r3, #32
 8015590:	bfc1      	itttt	gt
 8015592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801559a:	fa0b f303 	lslgt.w	r3, fp, r3
 801559e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80155a2:	bfda      	itte	le
 80155a4:	f1c3 0320 	rsble	r3, r3, #32
 80155a8:	fa06 f003 	lslle.w	r0, r6, r3
 80155ac:	4318      	orrgt	r0, r3
 80155ae:	f7ea ffa9 	bl	8000504 <__aeabi_ui2d>
 80155b2:	2301      	movs	r3, #1
 80155b4:	4606      	mov	r6, r0
 80155b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80155ba:	3d01      	subs	r5, #1
 80155bc:	930e      	str	r3, [sp, #56]	; 0x38
 80155be:	e76a      	b.n	8015496 <_dtoa_r+0x116>
 80155c0:	2301      	movs	r3, #1
 80155c2:	e7b2      	b.n	801552a <_dtoa_r+0x1aa>
 80155c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80155c6:	e7b1      	b.n	801552c <_dtoa_r+0x1ac>
 80155c8:	9b04      	ldr	r3, [sp, #16]
 80155ca:	9a00      	ldr	r2, [sp, #0]
 80155cc:	1a9b      	subs	r3, r3, r2
 80155ce:	9304      	str	r3, [sp, #16]
 80155d0:	4253      	negs	r3, r2
 80155d2:	9307      	str	r3, [sp, #28]
 80155d4:	2300      	movs	r3, #0
 80155d6:	930a      	str	r3, [sp, #40]	; 0x28
 80155d8:	e7bf      	b.n	801555a <_dtoa_r+0x1da>
 80155da:	2300      	movs	r3, #0
 80155dc:	9308      	str	r3, [sp, #32]
 80155de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	dc55      	bgt.n	8015690 <_dtoa_r+0x310>
 80155e4:	2301      	movs	r3, #1
 80155e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80155ea:	461a      	mov	r2, r3
 80155ec:	9209      	str	r2, [sp, #36]	; 0x24
 80155ee:	e00c      	b.n	801560a <_dtoa_r+0x28a>
 80155f0:	2301      	movs	r3, #1
 80155f2:	e7f3      	b.n	80155dc <_dtoa_r+0x25c>
 80155f4:	2300      	movs	r3, #0
 80155f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155f8:	9308      	str	r3, [sp, #32]
 80155fa:	9b00      	ldr	r3, [sp, #0]
 80155fc:	4413      	add	r3, r2
 80155fe:	9302      	str	r3, [sp, #8]
 8015600:	3301      	adds	r3, #1
 8015602:	2b01      	cmp	r3, #1
 8015604:	9303      	str	r3, [sp, #12]
 8015606:	bfb8      	it	lt
 8015608:	2301      	movlt	r3, #1
 801560a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801560c:	2200      	movs	r2, #0
 801560e:	6042      	str	r2, [r0, #4]
 8015610:	2204      	movs	r2, #4
 8015612:	f102 0614 	add.w	r6, r2, #20
 8015616:	429e      	cmp	r6, r3
 8015618:	6841      	ldr	r1, [r0, #4]
 801561a:	d93d      	bls.n	8015698 <_dtoa_r+0x318>
 801561c:	4620      	mov	r0, r4
 801561e:	f001 faa9 	bl	8016b74 <_Balloc>
 8015622:	9001      	str	r0, [sp, #4]
 8015624:	2800      	cmp	r0, #0
 8015626:	d13b      	bne.n	80156a0 <_dtoa_r+0x320>
 8015628:	4b11      	ldr	r3, [pc, #68]	; (8015670 <_dtoa_r+0x2f0>)
 801562a:	4602      	mov	r2, r0
 801562c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015630:	e6c0      	b.n	80153b4 <_dtoa_r+0x34>
 8015632:	2301      	movs	r3, #1
 8015634:	e7df      	b.n	80155f6 <_dtoa_r+0x276>
 8015636:	bf00      	nop
 8015638:	636f4361 	.word	0x636f4361
 801563c:	3fd287a7 	.word	0x3fd287a7
 8015640:	8b60c8b3 	.word	0x8b60c8b3
 8015644:	3fc68a28 	.word	0x3fc68a28
 8015648:	509f79fb 	.word	0x509f79fb
 801564c:	3fd34413 	.word	0x3fd34413
 8015650:	08019c1e 	.word	0x08019c1e
 8015654:	08019c35 	.word	0x08019c35
 8015658:	7ff00000 	.word	0x7ff00000
 801565c:	08019c1a 	.word	0x08019c1a
 8015660:	08019c11 	.word	0x08019c11
 8015664:	080193fd 	.word	0x080193fd
 8015668:	3ff80000 	.word	0x3ff80000
 801566c:	08019e08 	.word	0x08019e08
 8015670:	08019c90 	.word	0x08019c90
 8015674:	2501      	movs	r5, #1
 8015676:	2300      	movs	r3, #0
 8015678:	9306      	str	r3, [sp, #24]
 801567a:	9508      	str	r5, [sp, #32]
 801567c:	f04f 33ff 	mov.w	r3, #4294967295
 8015680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015684:	2200      	movs	r2, #0
 8015686:	2312      	movs	r3, #18
 8015688:	e7b0      	b.n	80155ec <_dtoa_r+0x26c>
 801568a:	2301      	movs	r3, #1
 801568c:	9308      	str	r3, [sp, #32]
 801568e:	e7f5      	b.n	801567c <_dtoa_r+0x2fc>
 8015690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015696:	e7b8      	b.n	801560a <_dtoa_r+0x28a>
 8015698:	3101      	adds	r1, #1
 801569a:	6041      	str	r1, [r0, #4]
 801569c:	0052      	lsls	r2, r2, #1
 801569e:	e7b8      	b.n	8015612 <_dtoa_r+0x292>
 80156a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156a2:	9a01      	ldr	r2, [sp, #4]
 80156a4:	601a      	str	r2, [r3, #0]
 80156a6:	9b03      	ldr	r3, [sp, #12]
 80156a8:	2b0e      	cmp	r3, #14
 80156aa:	f200 809d 	bhi.w	80157e8 <_dtoa_r+0x468>
 80156ae:	2d00      	cmp	r5, #0
 80156b0:	f000 809a 	beq.w	80157e8 <_dtoa_r+0x468>
 80156b4:	9b00      	ldr	r3, [sp, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	dd32      	ble.n	8015720 <_dtoa_r+0x3a0>
 80156ba:	4ab7      	ldr	r2, [pc, #732]	; (8015998 <_dtoa_r+0x618>)
 80156bc:	f003 030f 	and.w	r3, r3, #15
 80156c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80156c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80156c8:	9b00      	ldr	r3, [sp, #0]
 80156ca:	05d8      	lsls	r0, r3, #23
 80156cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80156d0:	d516      	bpl.n	8015700 <_dtoa_r+0x380>
 80156d2:	4bb2      	ldr	r3, [pc, #712]	; (801599c <_dtoa_r+0x61c>)
 80156d4:	ec51 0b19 	vmov	r0, r1, d9
 80156d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80156dc:	f7eb f8b6 	bl	800084c <__aeabi_ddiv>
 80156e0:	f007 070f 	and.w	r7, r7, #15
 80156e4:	4682      	mov	sl, r0
 80156e6:	468b      	mov	fp, r1
 80156e8:	2503      	movs	r5, #3
 80156ea:	4eac      	ldr	r6, [pc, #688]	; (801599c <_dtoa_r+0x61c>)
 80156ec:	b957      	cbnz	r7, 8015704 <_dtoa_r+0x384>
 80156ee:	4642      	mov	r2, r8
 80156f0:	464b      	mov	r3, r9
 80156f2:	4650      	mov	r0, sl
 80156f4:	4659      	mov	r1, fp
 80156f6:	f7eb f8a9 	bl	800084c <__aeabi_ddiv>
 80156fa:	4682      	mov	sl, r0
 80156fc:	468b      	mov	fp, r1
 80156fe:	e028      	b.n	8015752 <_dtoa_r+0x3d2>
 8015700:	2502      	movs	r5, #2
 8015702:	e7f2      	b.n	80156ea <_dtoa_r+0x36a>
 8015704:	07f9      	lsls	r1, r7, #31
 8015706:	d508      	bpl.n	801571a <_dtoa_r+0x39a>
 8015708:	4640      	mov	r0, r8
 801570a:	4649      	mov	r1, r9
 801570c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015710:	f7ea ff72 	bl	80005f8 <__aeabi_dmul>
 8015714:	3501      	adds	r5, #1
 8015716:	4680      	mov	r8, r0
 8015718:	4689      	mov	r9, r1
 801571a:	107f      	asrs	r7, r7, #1
 801571c:	3608      	adds	r6, #8
 801571e:	e7e5      	b.n	80156ec <_dtoa_r+0x36c>
 8015720:	f000 809b 	beq.w	801585a <_dtoa_r+0x4da>
 8015724:	9b00      	ldr	r3, [sp, #0]
 8015726:	4f9d      	ldr	r7, [pc, #628]	; (801599c <_dtoa_r+0x61c>)
 8015728:	425e      	negs	r6, r3
 801572a:	4b9b      	ldr	r3, [pc, #620]	; (8015998 <_dtoa_r+0x618>)
 801572c:	f006 020f 	and.w	r2, r6, #15
 8015730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015738:	ec51 0b19 	vmov	r0, r1, d9
 801573c:	f7ea ff5c 	bl	80005f8 <__aeabi_dmul>
 8015740:	1136      	asrs	r6, r6, #4
 8015742:	4682      	mov	sl, r0
 8015744:	468b      	mov	fp, r1
 8015746:	2300      	movs	r3, #0
 8015748:	2502      	movs	r5, #2
 801574a:	2e00      	cmp	r6, #0
 801574c:	d17a      	bne.n	8015844 <_dtoa_r+0x4c4>
 801574e:	2b00      	cmp	r3, #0
 8015750:	d1d3      	bne.n	80156fa <_dtoa_r+0x37a>
 8015752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015754:	2b00      	cmp	r3, #0
 8015756:	f000 8082 	beq.w	801585e <_dtoa_r+0x4de>
 801575a:	4b91      	ldr	r3, [pc, #580]	; (80159a0 <_dtoa_r+0x620>)
 801575c:	2200      	movs	r2, #0
 801575e:	4650      	mov	r0, sl
 8015760:	4659      	mov	r1, fp
 8015762:	f7eb f9bb 	bl	8000adc <__aeabi_dcmplt>
 8015766:	2800      	cmp	r0, #0
 8015768:	d079      	beq.n	801585e <_dtoa_r+0x4de>
 801576a:	9b03      	ldr	r3, [sp, #12]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d076      	beq.n	801585e <_dtoa_r+0x4de>
 8015770:	9b02      	ldr	r3, [sp, #8]
 8015772:	2b00      	cmp	r3, #0
 8015774:	dd36      	ble.n	80157e4 <_dtoa_r+0x464>
 8015776:	9b00      	ldr	r3, [sp, #0]
 8015778:	4650      	mov	r0, sl
 801577a:	4659      	mov	r1, fp
 801577c:	1e5f      	subs	r7, r3, #1
 801577e:	2200      	movs	r2, #0
 8015780:	4b88      	ldr	r3, [pc, #544]	; (80159a4 <_dtoa_r+0x624>)
 8015782:	f7ea ff39 	bl	80005f8 <__aeabi_dmul>
 8015786:	9e02      	ldr	r6, [sp, #8]
 8015788:	4682      	mov	sl, r0
 801578a:	468b      	mov	fp, r1
 801578c:	3501      	adds	r5, #1
 801578e:	4628      	mov	r0, r5
 8015790:	f7ea fec8 	bl	8000524 <__aeabi_i2d>
 8015794:	4652      	mov	r2, sl
 8015796:	465b      	mov	r3, fp
 8015798:	f7ea ff2e 	bl	80005f8 <__aeabi_dmul>
 801579c:	4b82      	ldr	r3, [pc, #520]	; (80159a8 <_dtoa_r+0x628>)
 801579e:	2200      	movs	r2, #0
 80157a0:	f7ea fd74 	bl	800028c <__adddf3>
 80157a4:	46d0      	mov	r8, sl
 80157a6:	46d9      	mov	r9, fp
 80157a8:	4682      	mov	sl, r0
 80157aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80157ae:	2e00      	cmp	r6, #0
 80157b0:	d158      	bne.n	8015864 <_dtoa_r+0x4e4>
 80157b2:	4b7e      	ldr	r3, [pc, #504]	; (80159ac <_dtoa_r+0x62c>)
 80157b4:	2200      	movs	r2, #0
 80157b6:	4640      	mov	r0, r8
 80157b8:	4649      	mov	r1, r9
 80157ba:	f7ea fd65 	bl	8000288 <__aeabi_dsub>
 80157be:	4652      	mov	r2, sl
 80157c0:	465b      	mov	r3, fp
 80157c2:	4680      	mov	r8, r0
 80157c4:	4689      	mov	r9, r1
 80157c6:	f7eb f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80157ca:	2800      	cmp	r0, #0
 80157cc:	f040 8295 	bne.w	8015cfa <_dtoa_r+0x97a>
 80157d0:	4652      	mov	r2, sl
 80157d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157d6:	4640      	mov	r0, r8
 80157d8:	4649      	mov	r1, r9
 80157da:	f7eb f97f 	bl	8000adc <__aeabi_dcmplt>
 80157de:	2800      	cmp	r0, #0
 80157e0:	f040 8289 	bne.w	8015cf6 <_dtoa_r+0x976>
 80157e4:	ec5b ab19 	vmov	sl, fp, d9
 80157e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f2c0 8148 	blt.w	8015a80 <_dtoa_r+0x700>
 80157f0:	9a00      	ldr	r2, [sp, #0]
 80157f2:	2a0e      	cmp	r2, #14
 80157f4:	f300 8144 	bgt.w	8015a80 <_dtoa_r+0x700>
 80157f8:	4b67      	ldr	r3, [pc, #412]	; (8015998 <_dtoa_r+0x618>)
 80157fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015804:	2b00      	cmp	r3, #0
 8015806:	f280 80d5 	bge.w	80159b4 <_dtoa_r+0x634>
 801580a:	9b03      	ldr	r3, [sp, #12]
 801580c:	2b00      	cmp	r3, #0
 801580e:	f300 80d1 	bgt.w	80159b4 <_dtoa_r+0x634>
 8015812:	f040 826f 	bne.w	8015cf4 <_dtoa_r+0x974>
 8015816:	4b65      	ldr	r3, [pc, #404]	; (80159ac <_dtoa_r+0x62c>)
 8015818:	2200      	movs	r2, #0
 801581a:	4640      	mov	r0, r8
 801581c:	4649      	mov	r1, r9
 801581e:	f7ea feeb 	bl	80005f8 <__aeabi_dmul>
 8015822:	4652      	mov	r2, sl
 8015824:	465b      	mov	r3, fp
 8015826:	f7eb f96d 	bl	8000b04 <__aeabi_dcmpge>
 801582a:	9e03      	ldr	r6, [sp, #12]
 801582c:	4637      	mov	r7, r6
 801582e:	2800      	cmp	r0, #0
 8015830:	f040 8245 	bne.w	8015cbe <_dtoa_r+0x93e>
 8015834:	9d01      	ldr	r5, [sp, #4]
 8015836:	2331      	movs	r3, #49	; 0x31
 8015838:	f805 3b01 	strb.w	r3, [r5], #1
 801583c:	9b00      	ldr	r3, [sp, #0]
 801583e:	3301      	adds	r3, #1
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	e240      	b.n	8015cc6 <_dtoa_r+0x946>
 8015844:	07f2      	lsls	r2, r6, #31
 8015846:	d505      	bpl.n	8015854 <_dtoa_r+0x4d4>
 8015848:	e9d7 2300 	ldrd	r2, r3, [r7]
 801584c:	f7ea fed4 	bl	80005f8 <__aeabi_dmul>
 8015850:	3501      	adds	r5, #1
 8015852:	2301      	movs	r3, #1
 8015854:	1076      	asrs	r6, r6, #1
 8015856:	3708      	adds	r7, #8
 8015858:	e777      	b.n	801574a <_dtoa_r+0x3ca>
 801585a:	2502      	movs	r5, #2
 801585c:	e779      	b.n	8015752 <_dtoa_r+0x3d2>
 801585e:	9f00      	ldr	r7, [sp, #0]
 8015860:	9e03      	ldr	r6, [sp, #12]
 8015862:	e794      	b.n	801578e <_dtoa_r+0x40e>
 8015864:	9901      	ldr	r1, [sp, #4]
 8015866:	4b4c      	ldr	r3, [pc, #304]	; (8015998 <_dtoa_r+0x618>)
 8015868:	4431      	add	r1, r6
 801586a:	910d      	str	r1, [sp, #52]	; 0x34
 801586c:	9908      	ldr	r1, [sp, #32]
 801586e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015876:	2900      	cmp	r1, #0
 8015878:	d043      	beq.n	8015902 <_dtoa_r+0x582>
 801587a:	494d      	ldr	r1, [pc, #308]	; (80159b0 <_dtoa_r+0x630>)
 801587c:	2000      	movs	r0, #0
 801587e:	f7ea ffe5 	bl	800084c <__aeabi_ddiv>
 8015882:	4652      	mov	r2, sl
 8015884:	465b      	mov	r3, fp
 8015886:	f7ea fcff 	bl	8000288 <__aeabi_dsub>
 801588a:	9d01      	ldr	r5, [sp, #4]
 801588c:	4682      	mov	sl, r0
 801588e:	468b      	mov	fp, r1
 8015890:	4649      	mov	r1, r9
 8015892:	4640      	mov	r0, r8
 8015894:	f7eb f960 	bl	8000b58 <__aeabi_d2iz>
 8015898:	4606      	mov	r6, r0
 801589a:	f7ea fe43 	bl	8000524 <__aeabi_i2d>
 801589e:	4602      	mov	r2, r0
 80158a0:	460b      	mov	r3, r1
 80158a2:	4640      	mov	r0, r8
 80158a4:	4649      	mov	r1, r9
 80158a6:	f7ea fcef 	bl	8000288 <__aeabi_dsub>
 80158aa:	3630      	adds	r6, #48	; 0x30
 80158ac:	f805 6b01 	strb.w	r6, [r5], #1
 80158b0:	4652      	mov	r2, sl
 80158b2:	465b      	mov	r3, fp
 80158b4:	4680      	mov	r8, r0
 80158b6:	4689      	mov	r9, r1
 80158b8:	f7eb f910 	bl	8000adc <__aeabi_dcmplt>
 80158bc:	2800      	cmp	r0, #0
 80158be:	d163      	bne.n	8015988 <_dtoa_r+0x608>
 80158c0:	4642      	mov	r2, r8
 80158c2:	464b      	mov	r3, r9
 80158c4:	4936      	ldr	r1, [pc, #216]	; (80159a0 <_dtoa_r+0x620>)
 80158c6:	2000      	movs	r0, #0
 80158c8:	f7ea fcde 	bl	8000288 <__aeabi_dsub>
 80158cc:	4652      	mov	r2, sl
 80158ce:	465b      	mov	r3, fp
 80158d0:	f7eb f904 	bl	8000adc <__aeabi_dcmplt>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	f040 80b5 	bne.w	8015a44 <_dtoa_r+0x6c4>
 80158da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158dc:	429d      	cmp	r5, r3
 80158de:	d081      	beq.n	80157e4 <_dtoa_r+0x464>
 80158e0:	4b30      	ldr	r3, [pc, #192]	; (80159a4 <_dtoa_r+0x624>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	4650      	mov	r0, sl
 80158e6:	4659      	mov	r1, fp
 80158e8:	f7ea fe86 	bl	80005f8 <__aeabi_dmul>
 80158ec:	4b2d      	ldr	r3, [pc, #180]	; (80159a4 <_dtoa_r+0x624>)
 80158ee:	4682      	mov	sl, r0
 80158f0:	468b      	mov	fp, r1
 80158f2:	4640      	mov	r0, r8
 80158f4:	4649      	mov	r1, r9
 80158f6:	2200      	movs	r2, #0
 80158f8:	f7ea fe7e 	bl	80005f8 <__aeabi_dmul>
 80158fc:	4680      	mov	r8, r0
 80158fe:	4689      	mov	r9, r1
 8015900:	e7c6      	b.n	8015890 <_dtoa_r+0x510>
 8015902:	4650      	mov	r0, sl
 8015904:	4659      	mov	r1, fp
 8015906:	f7ea fe77 	bl	80005f8 <__aeabi_dmul>
 801590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801590c:	9d01      	ldr	r5, [sp, #4]
 801590e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015910:	4682      	mov	sl, r0
 8015912:	468b      	mov	fp, r1
 8015914:	4649      	mov	r1, r9
 8015916:	4640      	mov	r0, r8
 8015918:	f7eb f91e 	bl	8000b58 <__aeabi_d2iz>
 801591c:	4606      	mov	r6, r0
 801591e:	f7ea fe01 	bl	8000524 <__aeabi_i2d>
 8015922:	3630      	adds	r6, #48	; 0x30
 8015924:	4602      	mov	r2, r0
 8015926:	460b      	mov	r3, r1
 8015928:	4640      	mov	r0, r8
 801592a:	4649      	mov	r1, r9
 801592c:	f7ea fcac 	bl	8000288 <__aeabi_dsub>
 8015930:	f805 6b01 	strb.w	r6, [r5], #1
 8015934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015936:	429d      	cmp	r5, r3
 8015938:	4680      	mov	r8, r0
 801593a:	4689      	mov	r9, r1
 801593c:	f04f 0200 	mov.w	r2, #0
 8015940:	d124      	bne.n	801598c <_dtoa_r+0x60c>
 8015942:	4b1b      	ldr	r3, [pc, #108]	; (80159b0 <_dtoa_r+0x630>)
 8015944:	4650      	mov	r0, sl
 8015946:	4659      	mov	r1, fp
 8015948:	f7ea fca0 	bl	800028c <__adddf3>
 801594c:	4602      	mov	r2, r0
 801594e:	460b      	mov	r3, r1
 8015950:	4640      	mov	r0, r8
 8015952:	4649      	mov	r1, r9
 8015954:	f7eb f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8015958:	2800      	cmp	r0, #0
 801595a:	d173      	bne.n	8015a44 <_dtoa_r+0x6c4>
 801595c:	4652      	mov	r2, sl
 801595e:	465b      	mov	r3, fp
 8015960:	4913      	ldr	r1, [pc, #76]	; (80159b0 <_dtoa_r+0x630>)
 8015962:	2000      	movs	r0, #0
 8015964:	f7ea fc90 	bl	8000288 <__aeabi_dsub>
 8015968:	4602      	mov	r2, r0
 801596a:	460b      	mov	r3, r1
 801596c:	4640      	mov	r0, r8
 801596e:	4649      	mov	r1, r9
 8015970:	f7eb f8b4 	bl	8000adc <__aeabi_dcmplt>
 8015974:	2800      	cmp	r0, #0
 8015976:	f43f af35 	beq.w	80157e4 <_dtoa_r+0x464>
 801597a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801597c:	1e6b      	subs	r3, r5, #1
 801597e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015984:	2b30      	cmp	r3, #48	; 0x30
 8015986:	d0f8      	beq.n	801597a <_dtoa_r+0x5fa>
 8015988:	9700      	str	r7, [sp, #0]
 801598a:	e049      	b.n	8015a20 <_dtoa_r+0x6a0>
 801598c:	4b05      	ldr	r3, [pc, #20]	; (80159a4 <_dtoa_r+0x624>)
 801598e:	f7ea fe33 	bl	80005f8 <__aeabi_dmul>
 8015992:	4680      	mov	r8, r0
 8015994:	4689      	mov	r9, r1
 8015996:	e7bd      	b.n	8015914 <_dtoa_r+0x594>
 8015998:	08019e08 	.word	0x08019e08
 801599c:	08019de0 	.word	0x08019de0
 80159a0:	3ff00000 	.word	0x3ff00000
 80159a4:	40240000 	.word	0x40240000
 80159a8:	401c0000 	.word	0x401c0000
 80159ac:	40140000 	.word	0x40140000
 80159b0:	3fe00000 	.word	0x3fe00000
 80159b4:	9d01      	ldr	r5, [sp, #4]
 80159b6:	4656      	mov	r6, sl
 80159b8:	465f      	mov	r7, fp
 80159ba:	4642      	mov	r2, r8
 80159bc:	464b      	mov	r3, r9
 80159be:	4630      	mov	r0, r6
 80159c0:	4639      	mov	r1, r7
 80159c2:	f7ea ff43 	bl	800084c <__aeabi_ddiv>
 80159c6:	f7eb f8c7 	bl	8000b58 <__aeabi_d2iz>
 80159ca:	4682      	mov	sl, r0
 80159cc:	f7ea fdaa 	bl	8000524 <__aeabi_i2d>
 80159d0:	4642      	mov	r2, r8
 80159d2:	464b      	mov	r3, r9
 80159d4:	f7ea fe10 	bl	80005f8 <__aeabi_dmul>
 80159d8:	4602      	mov	r2, r0
 80159da:	460b      	mov	r3, r1
 80159dc:	4630      	mov	r0, r6
 80159de:	4639      	mov	r1, r7
 80159e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80159e4:	f7ea fc50 	bl	8000288 <__aeabi_dsub>
 80159e8:	f805 6b01 	strb.w	r6, [r5], #1
 80159ec:	9e01      	ldr	r6, [sp, #4]
 80159ee:	9f03      	ldr	r7, [sp, #12]
 80159f0:	1bae      	subs	r6, r5, r6
 80159f2:	42b7      	cmp	r7, r6
 80159f4:	4602      	mov	r2, r0
 80159f6:	460b      	mov	r3, r1
 80159f8:	d135      	bne.n	8015a66 <_dtoa_r+0x6e6>
 80159fa:	f7ea fc47 	bl	800028c <__adddf3>
 80159fe:	4642      	mov	r2, r8
 8015a00:	464b      	mov	r3, r9
 8015a02:	4606      	mov	r6, r0
 8015a04:	460f      	mov	r7, r1
 8015a06:	f7eb f887 	bl	8000b18 <__aeabi_dcmpgt>
 8015a0a:	b9d0      	cbnz	r0, 8015a42 <_dtoa_r+0x6c2>
 8015a0c:	4642      	mov	r2, r8
 8015a0e:	464b      	mov	r3, r9
 8015a10:	4630      	mov	r0, r6
 8015a12:	4639      	mov	r1, r7
 8015a14:	f7eb f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a18:	b110      	cbz	r0, 8015a20 <_dtoa_r+0x6a0>
 8015a1a:	f01a 0f01 	tst.w	sl, #1
 8015a1e:	d110      	bne.n	8015a42 <_dtoa_r+0x6c2>
 8015a20:	4620      	mov	r0, r4
 8015a22:	ee18 1a10 	vmov	r1, s16
 8015a26:	f001 f8e5 	bl	8016bf4 <_Bfree>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	9800      	ldr	r0, [sp, #0]
 8015a2e:	702b      	strb	r3, [r5, #0]
 8015a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a32:	3001      	adds	r0, #1
 8015a34:	6018      	str	r0, [r3, #0]
 8015a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f43f acf1 	beq.w	8015420 <_dtoa_r+0xa0>
 8015a3e:	601d      	str	r5, [r3, #0]
 8015a40:	e4ee      	b.n	8015420 <_dtoa_r+0xa0>
 8015a42:	9f00      	ldr	r7, [sp, #0]
 8015a44:	462b      	mov	r3, r5
 8015a46:	461d      	mov	r5, r3
 8015a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a4c:	2a39      	cmp	r2, #57	; 0x39
 8015a4e:	d106      	bne.n	8015a5e <_dtoa_r+0x6de>
 8015a50:	9a01      	ldr	r2, [sp, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d1f7      	bne.n	8015a46 <_dtoa_r+0x6c6>
 8015a56:	9901      	ldr	r1, [sp, #4]
 8015a58:	2230      	movs	r2, #48	; 0x30
 8015a5a:	3701      	adds	r7, #1
 8015a5c:	700a      	strb	r2, [r1, #0]
 8015a5e:	781a      	ldrb	r2, [r3, #0]
 8015a60:	3201      	adds	r2, #1
 8015a62:	701a      	strb	r2, [r3, #0]
 8015a64:	e790      	b.n	8015988 <_dtoa_r+0x608>
 8015a66:	4ba6      	ldr	r3, [pc, #664]	; (8015d00 <_dtoa_r+0x980>)
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f7ea fdc5 	bl	80005f8 <__aeabi_dmul>
 8015a6e:	2200      	movs	r2, #0
 8015a70:	2300      	movs	r3, #0
 8015a72:	4606      	mov	r6, r0
 8015a74:	460f      	mov	r7, r1
 8015a76:	f7eb f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d09d      	beq.n	80159ba <_dtoa_r+0x63a>
 8015a7e:	e7cf      	b.n	8015a20 <_dtoa_r+0x6a0>
 8015a80:	9a08      	ldr	r2, [sp, #32]
 8015a82:	2a00      	cmp	r2, #0
 8015a84:	f000 80d7 	beq.w	8015c36 <_dtoa_r+0x8b6>
 8015a88:	9a06      	ldr	r2, [sp, #24]
 8015a8a:	2a01      	cmp	r2, #1
 8015a8c:	f300 80ba 	bgt.w	8015c04 <_dtoa_r+0x884>
 8015a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a92:	2a00      	cmp	r2, #0
 8015a94:	f000 80b2 	beq.w	8015bfc <_dtoa_r+0x87c>
 8015a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015a9c:	9e07      	ldr	r6, [sp, #28]
 8015a9e:	9d04      	ldr	r5, [sp, #16]
 8015aa0:	9a04      	ldr	r2, [sp, #16]
 8015aa2:	441a      	add	r2, r3
 8015aa4:	9204      	str	r2, [sp, #16]
 8015aa6:	9a05      	ldr	r2, [sp, #20]
 8015aa8:	2101      	movs	r1, #1
 8015aaa:	441a      	add	r2, r3
 8015aac:	4620      	mov	r0, r4
 8015aae:	9205      	str	r2, [sp, #20]
 8015ab0:	f001 f9a2 	bl	8016df8 <__i2b>
 8015ab4:	4607      	mov	r7, r0
 8015ab6:	2d00      	cmp	r5, #0
 8015ab8:	dd0c      	ble.n	8015ad4 <_dtoa_r+0x754>
 8015aba:	9b05      	ldr	r3, [sp, #20]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	dd09      	ble.n	8015ad4 <_dtoa_r+0x754>
 8015ac0:	42ab      	cmp	r3, r5
 8015ac2:	9a04      	ldr	r2, [sp, #16]
 8015ac4:	bfa8      	it	ge
 8015ac6:	462b      	movge	r3, r5
 8015ac8:	1ad2      	subs	r2, r2, r3
 8015aca:	9204      	str	r2, [sp, #16]
 8015acc:	9a05      	ldr	r2, [sp, #20]
 8015ace:	1aed      	subs	r5, r5, r3
 8015ad0:	1ad3      	subs	r3, r2, r3
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	9b07      	ldr	r3, [sp, #28]
 8015ad6:	b31b      	cbz	r3, 8015b20 <_dtoa_r+0x7a0>
 8015ad8:	9b08      	ldr	r3, [sp, #32]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f000 80af 	beq.w	8015c3e <_dtoa_r+0x8be>
 8015ae0:	2e00      	cmp	r6, #0
 8015ae2:	dd13      	ble.n	8015b0c <_dtoa_r+0x78c>
 8015ae4:	4639      	mov	r1, r7
 8015ae6:	4632      	mov	r2, r6
 8015ae8:	4620      	mov	r0, r4
 8015aea:	f001 fa45 	bl	8016f78 <__pow5mult>
 8015aee:	ee18 2a10 	vmov	r2, s16
 8015af2:	4601      	mov	r1, r0
 8015af4:	4607      	mov	r7, r0
 8015af6:	4620      	mov	r0, r4
 8015af8:	f001 f994 	bl	8016e24 <__multiply>
 8015afc:	ee18 1a10 	vmov	r1, s16
 8015b00:	4680      	mov	r8, r0
 8015b02:	4620      	mov	r0, r4
 8015b04:	f001 f876 	bl	8016bf4 <_Bfree>
 8015b08:	ee08 8a10 	vmov	s16, r8
 8015b0c:	9b07      	ldr	r3, [sp, #28]
 8015b0e:	1b9a      	subs	r2, r3, r6
 8015b10:	d006      	beq.n	8015b20 <_dtoa_r+0x7a0>
 8015b12:	ee18 1a10 	vmov	r1, s16
 8015b16:	4620      	mov	r0, r4
 8015b18:	f001 fa2e 	bl	8016f78 <__pow5mult>
 8015b1c:	ee08 0a10 	vmov	s16, r0
 8015b20:	2101      	movs	r1, #1
 8015b22:	4620      	mov	r0, r4
 8015b24:	f001 f968 	bl	8016df8 <__i2b>
 8015b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	4606      	mov	r6, r0
 8015b2e:	f340 8088 	ble.w	8015c42 <_dtoa_r+0x8c2>
 8015b32:	461a      	mov	r2, r3
 8015b34:	4601      	mov	r1, r0
 8015b36:	4620      	mov	r0, r4
 8015b38:	f001 fa1e 	bl	8016f78 <__pow5mult>
 8015b3c:	9b06      	ldr	r3, [sp, #24]
 8015b3e:	2b01      	cmp	r3, #1
 8015b40:	4606      	mov	r6, r0
 8015b42:	f340 8081 	ble.w	8015c48 <_dtoa_r+0x8c8>
 8015b46:	f04f 0800 	mov.w	r8, #0
 8015b4a:	6933      	ldr	r3, [r6, #16]
 8015b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b50:	6918      	ldr	r0, [r3, #16]
 8015b52:	f001 f901 	bl	8016d58 <__hi0bits>
 8015b56:	f1c0 0020 	rsb	r0, r0, #32
 8015b5a:	9b05      	ldr	r3, [sp, #20]
 8015b5c:	4418      	add	r0, r3
 8015b5e:	f010 001f 	ands.w	r0, r0, #31
 8015b62:	f000 8092 	beq.w	8015c8a <_dtoa_r+0x90a>
 8015b66:	f1c0 0320 	rsb	r3, r0, #32
 8015b6a:	2b04      	cmp	r3, #4
 8015b6c:	f340 808a 	ble.w	8015c84 <_dtoa_r+0x904>
 8015b70:	f1c0 001c 	rsb	r0, r0, #28
 8015b74:	9b04      	ldr	r3, [sp, #16]
 8015b76:	4403      	add	r3, r0
 8015b78:	9304      	str	r3, [sp, #16]
 8015b7a:	9b05      	ldr	r3, [sp, #20]
 8015b7c:	4403      	add	r3, r0
 8015b7e:	4405      	add	r5, r0
 8015b80:	9305      	str	r3, [sp, #20]
 8015b82:	9b04      	ldr	r3, [sp, #16]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	dd07      	ble.n	8015b98 <_dtoa_r+0x818>
 8015b88:	ee18 1a10 	vmov	r1, s16
 8015b8c:	461a      	mov	r2, r3
 8015b8e:	4620      	mov	r0, r4
 8015b90:	f001 fa4c 	bl	801702c <__lshift>
 8015b94:	ee08 0a10 	vmov	s16, r0
 8015b98:	9b05      	ldr	r3, [sp, #20]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	dd05      	ble.n	8015baa <_dtoa_r+0x82a>
 8015b9e:	4631      	mov	r1, r6
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f001 fa42 	bl	801702c <__lshift>
 8015ba8:	4606      	mov	r6, r0
 8015baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d06e      	beq.n	8015c8e <_dtoa_r+0x90e>
 8015bb0:	ee18 0a10 	vmov	r0, s16
 8015bb4:	4631      	mov	r1, r6
 8015bb6:	f001 faa9 	bl	801710c <__mcmp>
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	da67      	bge.n	8015c8e <_dtoa_r+0x90e>
 8015bbe:	9b00      	ldr	r3, [sp, #0]
 8015bc0:	3b01      	subs	r3, #1
 8015bc2:	ee18 1a10 	vmov	r1, s16
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	220a      	movs	r2, #10
 8015bca:	2300      	movs	r3, #0
 8015bcc:	4620      	mov	r0, r4
 8015bce:	f001 f833 	bl	8016c38 <__multadd>
 8015bd2:	9b08      	ldr	r3, [sp, #32]
 8015bd4:	ee08 0a10 	vmov	s16, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f000 81b1 	beq.w	8015f40 <_dtoa_r+0xbc0>
 8015bde:	2300      	movs	r3, #0
 8015be0:	4639      	mov	r1, r7
 8015be2:	220a      	movs	r2, #10
 8015be4:	4620      	mov	r0, r4
 8015be6:	f001 f827 	bl	8016c38 <__multadd>
 8015bea:	9b02      	ldr	r3, [sp, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	4607      	mov	r7, r0
 8015bf0:	f300 808e 	bgt.w	8015d10 <_dtoa_r+0x990>
 8015bf4:	9b06      	ldr	r3, [sp, #24]
 8015bf6:	2b02      	cmp	r3, #2
 8015bf8:	dc51      	bgt.n	8015c9e <_dtoa_r+0x91e>
 8015bfa:	e089      	b.n	8015d10 <_dtoa_r+0x990>
 8015bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015c02:	e74b      	b.n	8015a9c <_dtoa_r+0x71c>
 8015c04:	9b03      	ldr	r3, [sp, #12]
 8015c06:	1e5e      	subs	r6, r3, #1
 8015c08:	9b07      	ldr	r3, [sp, #28]
 8015c0a:	42b3      	cmp	r3, r6
 8015c0c:	bfbf      	itttt	lt
 8015c0e:	9b07      	ldrlt	r3, [sp, #28]
 8015c10:	9607      	strlt	r6, [sp, #28]
 8015c12:	1af2      	sublt	r2, r6, r3
 8015c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015c16:	bfb6      	itet	lt
 8015c18:	189b      	addlt	r3, r3, r2
 8015c1a:	1b9e      	subge	r6, r3, r6
 8015c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015c1e:	9b03      	ldr	r3, [sp, #12]
 8015c20:	bfb8      	it	lt
 8015c22:	2600      	movlt	r6, #0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	bfb7      	itett	lt
 8015c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015c30:	1a9d      	sublt	r5, r3, r2
 8015c32:	2300      	movlt	r3, #0
 8015c34:	e734      	b.n	8015aa0 <_dtoa_r+0x720>
 8015c36:	9e07      	ldr	r6, [sp, #28]
 8015c38:	9d04      	ldr	r5, [sp, #16]
 8015c3a:	9f08      	ldr	r7, [sp, #32]
 8015c3c:	e73b      	b.n	8015ab6 <_dtoa_r+0x736>
 8015c3e:	9a07      	ldr	r2, [sp, #28]
 8015c40:	e767      	b.n	8015b12 <_dtoa_r+0x792>
 8015c42:	9b06      	ldr	r3, [sp, #24]
 8015c44:	2b01      	cmp	r3, #1
 8015c46:	dc18      	bgt.n	8015c7a <_dtoa_r+0x8fa>
 8015c48:	f1ba 0f00 	cmp.w	sl, #0
 8015c4c:	d115      	bne.n	8015c7a <_dtoa_r+0x8fa>
 8015c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c52:	b993      	cbnz	r3, 8015c7a <_dtoa_r+0x8fa>
 8015c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c58:	0d1b      	lsrs	r3, r3, #20
 8015c5a:	051b      	lsls	r3, r3, #20
 8015c5c:	b183      	cbz	r3, 8015c80 <_dtoa_r+0x900>
 8015c5e:	9b04      	ldr	r3, [sp, #16]
 8015c60:	3301      	adds	r3, #1
 8015c62:	9304      	str	r3, [sp, #16]
 8015c64:	9b05      	ldr	r3, [sp, #20]
 8015c66:	3301      	adds	r3, #1
 8015c68:	9305      	str	r3, [sp, #20]
 8015c6a:	f04f 0801 	mov.w	r8, #1
 8015c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f47f af6a 	bne.w	8015b4a <_dtoa_r+0x7ca>
 8015c76:	2001      	movs	r0, #1
 8015c78:	e76f      	b.n	8015b5a <_dtoa_r+0x7da>
 8015c7a:	f04f 0800 	mov.w	r8, #0
 8015c7e:	e7f6      	b.n	8015c6e <_dtoa_r+0x8ee>
 8015c80:	4698      	mov	r8, r3
 8015c82:	e7f4      	b.n	8015c6e <_dtoa_r+0x8ee>
 8015c84:	f43f af7d 	beq.w	8015b82 <_dtoa_r+0x802>
 8015c88:	4618      	mov	r0, r3
 8015c8a:	301c      	adds	r0, #28
 8015c8c:	e772      	b.n	8015b74 <_dtoa_r+0x7f4>
 8015c8e:	9b03      	ldr	r3, [sp, #12]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	dc37      	bgt.n	8015d04 <_dtoa_r+0x984>
 8015c94:	9b06      	ldr	r3, [sp, #24]
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	dd34      	ble.n	8015d04 <_dtoa_r+0x984>
 8015c9a:	9b03      	ldr	r3, [sp, #12]
 8015c9c:	9302      	str	r3, [sp, #8]
 8015c9e:	9b02      	ldr	r3, [sp, #8]
 8015ca0:	b96b      	cbnz	r3, 8015cbe <_dtoa_r+0x93e>
 8015ca2:	4631      	mov	r1, r6
 8015ca4:	2205      	movs	r2, #5
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f000 ffc6 	bl	8016c38 <__multadd>
 8015cac:	4601      	mov	r1, r0
 8015cae:	4606      	mov	r6, r0
 8015cb0:	ee18 0a10 	vmov	r0, s16
 8015cb4:	f001 fa2a 	bl	801710c <__mcmp>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	f73f adbb 	bgt.w	8015834 <_dtoa_r+0x4b4>
 8015cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc0:	9d01      	ldr	r5, [sp, #4]
 8015cc2:	43db      	mvns	r3, r3
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	f04f 0800 	mov.w	r8, #0
 8015cca:	4631      	mov	r1, r6
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f000 ff91 	bl	8016bf4 <_Bfree>
 8015cd2:	2f00      	cmp	r7, #0
 8015cd4:	f43f aea4 	beq.w	8015a20 <_dtoa_r+0x6a0>
 8015cd8:	f1b8 0f00 	cmp.w	r8, #0
 8015cdc:	d005      	beq.n	8015cea <_dtoa_r+0x96a>
 8015cde:	45b8      	cmp	r8, r7
 8015ce0:	d003      	beq.n	8015cea <_dtoa_r+0x96a>
 8015ce2:	4641      	mov	r1, r8
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f000 ff85 	bl	8016bf4 <_Bfree>
 8015cea:	4639      	mov	r1, r7
 8015cec:	4620      	mov	r0, r4
 8015cee:	f000 ff81 	bl	8016bf4 <_Bfree>
 8015cf2:	e695      	b.n	8015a20 <_dtoa_r+0x6a0>
 8015cf4:	2600      	movs	r6, #0
 8015cf6:	4637      	mov	r7, r6
 8015cf8:	e7e1      	b.n	8015cbe <_dtoa_r+0x93e>
 8015cfa:	9700      	str	r7, [sp, #0]
 8015cfc:	4637      	mov	r7, r6
 8015cfe:	e599      	b.n	8015834 <_dtoa_r+0x4b4>
 8015d00:	40240000 	.word	0x40240000
 8015d04:	9b08      	ldr	r3, [sp, #32]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	f000 80ca 	beq.w	8015ea0 <_dtoa_r+0xb20>
 8015d0c:	9b03      	ldr	r3, [sp, #12]
 8015d0e:	9302      	str	r3, [sp, #8]
 8015d10:	2d00      	cmp	r5, #0
 8015d12:	dd05      	ble.n	8015d20 <_dtoa_r+0x9a0>
 8015d14:	4639      	mov	r1, r7
 8015d16:	462a      	mov	r2, r5
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f001 f987 	bl	801702c <__lshift>
 8015d1e:	4607      	mov	r7, r0
 8015d20:	f1b8 0f00 	cmp.w	r8, #0
 8015d24:	d05b      	beq.n	8015dde <_dtoa_r+0xa5e>
 8015d26:	6879      	ldr	r1, [r7, #4]
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f000 ff23 	bl	8016b74 <_Balloc>
 8015d2e:	4605      	mov	r5, r0
 8015d30:	b928      	cbnz	r0, 8015d3e <_dtoa_r+0x9be>
 8015d32:	4b87      	ldr	r3, [pc, #540]	; (8015f50 <_dtoa_r+0xbd0>)
 8015d34:	4602      	mov	r2, r0
 8015d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015d3a:	f7ff bb3b 	b.w	80153b4 <_dtoa_r+0x34>
 8015d3e:	693a      	ldr	r2, [r7, #16]
 8015d40:	3202      	adds	r2, #2
 8015d42:	0092      	lsls	r2, r2, #2
 8015d44:	f107 010c 	add.w	r1, r7, #12
 8015d48:	300c      	adds	r0, #12
 8015d4a:	f000 ff05 	bl	8016b58 <memcpy>
 8015d4e:	2201      	movs	r2, #1
 8015d50:	4629      	mov	r1, r5
 8015d52:	4620      	mov	r0, r4
 8015d54:	f001 f96a 	bl	801702c <__lshift>
 8015d58:	9b01      	ldr	r3, [sp, #4]
 8015d5a:	f103 0901 	add.w	r9, r3, #1
 8015d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015d62:	4413      	add	r3, r2
 8015d64:	9305      	str	r3, [sp, #20]
 8015d66:	f00a 0301 	and.w	r3, sl, #1
 8015d6a:	46b8      	mov	r8, r7
 8015d6c:	9304      	str	r3, [sp, #16]
 8015d6e:	4607      	mov	r7, r0
 8015d70:	4631      	mov	r1, r6
 8015d72:	ee18 0a10 	vmov	r0, s16
 8015d76:	f7ff fa77 	bl	8015268 <quorem>
 8015d7a:	4641      	mov	r1, r8
 8015d7c:	9002      	str	r0, [sp, #8]
 8015d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d82:	ee18 0a10 	vmov	r0, s16
 8015d86:	f001 f9c1 	bl	801710c <__mcmp>
 8015d8a:	463a      	mov	r2, r7
 8015d8c:	9003      	str	r0, [sp, #12]
 8015d8e:	4631      	mov	r1, r6
 8015d90:	4620      	mov	r0, r4
 8015d92:	f001 f9d7 	bl	8017144 <__mdiff>
 8015d96:	68c2      	ldr	r2, [r0, #12]
 8015d98:	f109 3bff 	add.w	fp, r9, #4294967295
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	bb02      	cbnz	r2, 8015de2 <_dtoa_r+0xa62>
 8015da0:	4601      	mov	r1, r0
 8015da2:	ee18 0a10 	vmov	r0, s16
 8015da6:	f001 f9b1 	bl	801710c <__mcmp>
 8015daa:	4602      	mov	r2, r0
 8015dac:	4629      	mov	r1, r5
 8015dae:	4620      	mov	r0, r4
 8015db0:	9207      	str	r2, [sp, #28]
 8015db2:	f000 ff1f 	bl	8016bf4 <_Bfree>
 8015db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015dba:	ea43 0102 	orr.w	r1, r3, r2
 8015dbe:	9b04      	ldr	r3, [sp, #16]
 8015dc0:	430b      	orrs	r3, r1
 8015dc2:	464d      	mov	r5, r9
 8015dc4:	d10f      	bne.n	8015de6 <_dtoa_r+0xa66>
 8015dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015dca:	d02a      	beq.n	8015e22 <_dtoa_r+0xaa2>
 8015dcc:	9b03      	ldr	r3, [sp, #12]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	dd02      	ble.n	8015dd8 <_dtoa_r+0xa58>
 8015dd2:	9b02      	ldr	r3, [sp, #8]
 8015dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015dd8:	f88b a000 	strb.w	sl, [fp]
 8015ddc:	e775      	b.n	8015cca <_dtoa_r+0x94a>
 8015dde:	4638      	mov	r0, r7
 8015de0:	e7ba      	b.n	8015d58 <_dtoa_r+0x9d8>
 8015de2:	2201      	movs	r2, #1
 8015de4:	e7e2      	b.n	8015dac <_dtoa_r+0xa2c>
 8015de6:	9b03      	ldr	r3, [sp, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	db04      	blt.n	8015df6 <_dtoa_r+0xa76>
 8015dec:	9906      	ldr	r1, [sp, #24]
 8015dee:	430b      	orrs	r3, r1
 8015df0:	9904      	ldr	r1, [sp, #16]
 8015df2:	430b      	orrs	r3, r1
 8015df4:	d122      	bne.n	8015e3c <_dtoa_r+0xabc>
 8015df6:	2a00      	cmp	r2, #0
 8015df8:	ddee      	ble.n	8015dd8 <_dtoa_r+0xa58>
 8015dfa:	ee18 1a10 	vmov	r1, s16
 8015dfe:	2201      	movs	r2, #1
 8015e00:	4620      	mov	r0, r4
 8015e02:	f001 f913 	bl	801702c <__lshift>
 8015e06:	4631      	mov	r1, r6
 8015e08:	ee08 0a10 	vmov	s16, r0
 8015e0c:	f001 f97e 	bl	801710c <__mcmp>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	dc03      	bgt.n	8015e1c <_dtoa_r+0xa9c>
 8015e14:	d1e0      	bne.n	8015dd8 <_dtoa_r+0xa58>
 8015e16:	f01a 0f01 	tst.w	sl, #1
 8015e1a:	d0dd      	beq.n	8015dd8 <_dtoa_r+0xa58>
 8015e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e20:	d1d7      	bne.n	8015dd2 <_dtoa_r+0xa52>
 8015e22:	2339      	movs	r3, #57	; 0x39
 8015e24:	f88b 3000 	strb.w	r3, [fp]
 8015e28:	462b      	mov	r3, r5
 8015e2a:	461d      	mov	r5, r3
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e32:	2a39      	cmp	r2, #57	; 0x39
 8015e34:	d071      	beq.n	8015f1a <_dtoa_r+0xb9a>
 8015e36:	3201      	adds	r2, #1
 8015e38:	701a      	strb	r2, [r3, #0]
 8015e3a:	e746      	b.n	8015cca <_dtoa_r+0x94a>
 8015e3c:	2a00      	cmp	r2, #0
 8015e3e:	dd07      	ble.n	8015e50 <_dtoa_r+0xad0>
 8015e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e44:	d0ed      	beq.n	8015e22 <_dtoa_r+0xaa2>
 8015e46:	f10a 0301 	add.w	r3, sl, #1
 8015e4a:	f88b 3000 	strb.w	r3, [fp]
 8015e4e:	e73c      	b.n	8015cca <_dtoa_r+0x94a>
 8015e50:	9b05      	ldr	r3, [sp, #20]
 8015e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015e56:	4599      	cmp	r9, r3
 8015e58:	d047      	beq.n	8015eea <_dtoa_r+0xb6a>
 8015e5a:	ee18 1a10 	vmov	r1, s16
 8015e5e:	2300      	movs	r3, #0
 8015e60:	220a      	movs	r2, #10
 8015e62:	4620      	mov	r0, r4
 8015e64:	f000 fee8 	bl	8016c38 <__multadd>
 8015e68:	45b8      	cmp	r8, r7
 8015e6a:	ee08 0a10 	vmov	s16, r0
 8015e6e:	f04f 0300 	mov.w	r3, #0
 8015e72:	f04f 020a 	mov.w	r2, #10
 8015e76:	4641      	mov	r1, r8
 8015e78:	4620      	mov	r0, r4
 8015e7a:	d106      	bne.n	8015e8a <_dtoa_r+0xb0a>
 8015e7c:	f000 fedc 	bl	8016c38 <__multadd>
 8015e80:	4680      	mov	r8, r0
 8015e82:	4607      	mov	r7, r0
 8015e84:	f109 0901 	add.w	r9, r9, #1
 8015e88:	e772      	b.n	8015d70 <_dtoa_r+0x9f0>
 8015e8a:	f000 fed5 	bl	8016c38 <__multadd>
 8015e8e:	4639      	mov	r1, r7
 8015e90:	4680      	mov	r8, r0
 8015e92:	2300      	movs	r3, #0
 8015e94:	220a      	movs	r2, #10
 8015e96:	4620      	mov	r0, r4
 8015e98:	f000 fece 	bl	8016c38 <__multadd>
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	e7f1      	b.n	8015e84 <_dtoa_r+0xb04>
 8015ea0:	9b03      	ldr	r3, [sp, #12]
 8015ea2:	9302      	str	r3, [sp, #8]
 8015ea4:	9d01      	ldr	r5, [sp, #4]
 8015ea6:	ee18 0a10 	vmov	r0, s16
 8015eaa:	4631      	mov	r1, r6
 8015eac:	f7ff f9dc 	bl	8015268 <quorem>
 8015eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015eb4:	9b01      	ldr	r3, [sp, #4]
 8015eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8015eba:	1aea      	subs	r2, r5, r3
 8015ebc:	9b02      	ldr	r3, [sp, #8]
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	dd09      	ble.n	8015ed6 <_dtoa_r+0xb56>
 8015ec2:	ee18 1a10 	vmov	r1, s16
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	220a      	movs	r2, #10
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f000 feb4 	bl	8016c38 <__multadd>
 8015ed0:	ee08 0a10 	vmov	s16, r0
 8015ed4:	e7e7      	b.n	8015ea6 <_dtoa_r+0xb26>
 8015ed6:	9b02      	ldr	r3, [sp, #8]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	bfc8      	it	gt
 8015edc:	461d      	movgt	r5, r3
 8015ede:	9b01      	ldr	r3, [sp, #4]
 8015ee0:	bfd8      	it	le
 8015ee2:	2501      	movle	r5, #1
 8015ee4:	441d      	add	r5, r3
 8015ee6:	f04f 0800 	mov.w	r8, #0
 8015eea:	ee18 1a10 	vmov	r1, s16
 8015eee:	2201      	movs	r2, #1
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f001 f89b 	bl	801702c <__lshift>
 8015ef6:	4631      	mov	r1, r6
 8015ef8:	ee08 0a10 	vmov	s16, r0
 8015efc:	f001 f906 	bl	801710c <__mcmp>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	dc91      	bgt.n	8015e28 <_dtoa_r+0xaa8>
 8015f04:	d102      	bne.n	8015f0c <_dtoa_r+0xb8c>
 8015f06:	f01a 0f01 	tst.w	sl, #1
 8015f0a:	d18d      	bne.n	8015e28 <_dtoa_r+0xaa8>
 8015f0c:	462b      	mov	r3, r5
 8015f0e:	461d      	mov	r5, r3
 8015f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f14:	2a30      	cmp	r2, #48	; 0x30
 8015f16:	d0fa      	beq.n	8015f0e <_dtoa_r+0xb8e>
 8015f18:	e6d7      	b.n	8015cca <_dtoa_r+0x94a>
 8015f1a:	9a01      	ldr	r2, [sp, #4]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d184      	bne.n	8015e2a <_dtoa_r+0xaaa>
 8015f20:	9b00      	ldr	r3, [sp, #0]
 8015f22:	3301      	adds	r3, #1
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	2331      	movs	r3, #49	; 0x31
 8015f28:	7013      	strb	r3, [r2, #0]
 8015f2a:	e6ce      	b.n	8015cca <_dtoa_r+0x94a>
 8015f2c:	4b09      	ldr	r3, [pc, #36]	; (8015f54 <_dtoa_r+0xbd4>)
 8015f2e:	f7ff ba95 	b.w	801545c <_dtoa_r+0xdc>
 8015f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f47f aa6e 	bne.w	8015416 <_dtoa_r+0x96>
 8015f3a:	4b07      	ldr	r3, [pc, #28]	; (8015f58 <_dtoa_r+0xbd8>)
 8015f3c:	f7ff ba8e 	b.w	801545c <_dtoa_r+0xdc>
 8015f40:	9b02      	ldr	r3, [sp, #8]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	dcae      	bgt.n	8015ea4 <_dtoa_r+0xb24>
 8015f46:	9b06      	ldr	r3, [sp, #24]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	f73f aea8 	bgt.w	8015c9e <_dtoa_r+0x91e>
 8015f4e:	e7a9      	b.n	8015ea4 <_dtoa_r+0xb24>
 8015f50:	08019c90 	.word	0x08019c90
 8015f54:	080193fc 	.word	0x080193fc
 8015f58:	08019c11 	.word	0x08019c11

08015f5c <__sflush_r>:
 8015f5c:	898a      	ldrh	r2, [r1, #12]
 8015f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f62:	4605      	mov	r5, r0
 8015f64:	0710      	lsls	r0, r2, #28
 8015f66:	460c      	mov	r4, r1
 8015f68:	d458      	bmi.n	801601c <__sflush_r+0xc0>
 8015f6a:	684b      	ldr	r3, [r1, #4]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	dc05      	bgt.n	8015f7c <__sflush_r+0x20>
 8015f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	dc02      	bgt.n	8015f7c <__sflush_r+0x20>
 8015f76:	2000      	movs	r0, #0
 8015f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f7e:	2e00      	cmp	r6, #0
 8015f80:	d0f9      	beq.n	8015f76 <__sflush_r+0x1a>
 8015f82:	2300      	movs	r3, #0
 8015f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f88:	682f      	ldr	r7, [r5, #0]
 8015f8a:	602b      	str	r3, [r5, #0]
 8015f8c:	d032      	beq.n	8015ff4 <__sflush_r+0x98>
 8015f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f90:	89a3      	ldrh	r3, [r4, #12]
 8015f92:	075a      	lsls	r2, r3, #29
 8015f94:	d505      	bpl.n	8015fa2 <__sflush_r+0x46>
 8015f96:	6863      	ldr	r3, [r4, #4]
 8015f98:	1ac0      	subs	r0, r0, r3
 8015f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f9c:	b10b      	cbz	r3, 8015fa2 <__sflush_r+0x46>
 8015f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015fa0:	1ac0      	subs	r0, r0, r3
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015fa8:	6a21      	ldr	r1, [r4, #32]
 8015faa:	4628      	mov	r0, r5
 8015fac:	47b0      	blx	r6
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	89a3      	ldrh	r3, [r4, #12]
 8015fb2:	d106      	bne.n	8015fc2 <__sflush_r+0x66>
 8015fb4:	6829      	ldr	r1, [r5, #0]
 8015fb6:	291d      	cmp	r1, #29
 8015fb8:	d82c      	bhi.n	8016014 <__sflush_r+0xb8>
 8015fba:	4a2a      	ldr	r2, [pc, #168]	; (8016064 <__sflush_r+0x108>)
 8015fbc:	40ca      	lsrs	r2, r1
 8015fbe:	07d6      	lsls	r6, r2, #31
 8015fc0:	d528      	bpl.n	8016014 <__sflush_r+0xb8>
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	6062      	str	r2, [r4, #4]
 8015fc6:	04d9      	lsls	r1, r3, #19
 8015fc8:	6922      	ldr	r2, [r4, #16]
 8015fca:	6022      	str	r2, [r4, #0]
 8015fcc:	d504      	bpl.n	8015fd8 <__sflush_r+0x7c>
 8015fce:	1c42      	adds	r2, r0, #1
 8015fd0:	d101      	bne.n	8015fd6 <__sflush_r+0x7a>
 8015fd2:	682b      	ldr	r3, [r5, #0]
 8015fd4:	b903      	cbnz	r3, 8015fd8 <__sflush_r+0x7c>
 8015fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8015fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015fda:	602f      	str	r7, [r5, #0]
 8015fdc:	2900      	cmp	r1, #0
 8015fde:	d0ca      	beq.n	8015f76 <__sflush_r+0x1a>
 8015fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fe4:	4299      	cmp	r1, r3
 8015fe6:	d002      	beq.n	8015fee <__sflush_r+0x92>
 8015fe8:	4628      	mov	r0, r5
 8015fea:	f001 fa9b 	bl	8017524 <_free_r>
 8015fee:	2000      	movs	r0, #0
 8015ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8015ff2:	e7c1      	b.n	8015f78 <__sflush_r+0x1c>
 8015ff4:	6a21      	ldr	r1, [r4, #32]
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	47b0      	blx	r6
 8015ffc:	1c41      	adds	r1, r0, #1
 8015ffe:	d1c7      	bne.n	8015f90 <__sflush_r+0x34>
 8016000:	682b      	ldr	r3, [r5, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d0c4      	beq.n	8015f90 <__sflush_r+0x34>
 8016006:	2b1d      	cmp	r3, #29
 8016008:	d001      	beq.n	801600e <__sflush_r+0xb2>
 801600a:	2b16      	cmp	r3, #22
 801600c:	d101      	bne.n	8016012 <__sflush_r+0xb6>
 801600e:	602f      	str	r7, [r5, #0]
 8016010:	e7b1      	b.n	8015f76 <__sflush_r+0x1a>
 8016012:	89a3      	ldrh	r3, [r4, #12]
 8016014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016018:	81a3      	strh	r3, [r4, #12]
 801601a:	e7ad      	b.n	8015f78 <__sflush_r+0x1c>
 801601c:	690f      	ldr	r7, [r1, #16]
 801601e:	2f00      	cmp	r7, #0
 8016020:	d0a9      	beq.n	8015f76 <__sflush_r+0x1a>
 8016022:	0793      	lsls	r3, r2, #30
 8016024:	680e      	ldr	r6, [r1, #0]
 8016026:	bf08      	it	eq
 8016028:	694b      	ldreq	r3, [r1, #20]
 801602a:	600f      	str	r7, [r1, #0]
 801602c:	bf18      	it	ne
 801602e:	2300      	movne	r3, #0
 8016030:	eba6 0807 	sub.w	r8, r6, r7
 8016034:	608b      	str	r3, [r1, #8]
 8016036:	f1b8 0f00 	cmp.w	r8, #0
 801603a:	dd9c      	ble.n	8015f76 <__sflush_r+0x1a>
 801603c:	6a21      	ldr	r1, [r4, #32]
 801603e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016040:	4643      	mov	r3, r8
 8016042:	463a      	mov	r2, r7
 8016044:	4628      	mov	r0, r5
 8016046:	47b0      	blx	r6
 8016048:	2800      	cmp	r0, #0
 801604a:	dc06      	bgt.n	801605a <__sflush_r+0xfe>
 801604c:	89a3      	ldrh	r3, [r4, #12]
 801604e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016052:	81a3      	strh	r3, [r4, #12]
 8016054:	f04f 30ff 	mov.w	r0, #4294967295
 8016058:	e78e      	b.n	8015f78 <__sflush_r+0x1c>
 801605a:	4407      	add	r7, r0
 801605c:	eba8 0800 	sub.w	r8, r8, r0
 8016060:	e7e9      	b.n	8016036 <__sflush_r+0xda>
 8016062:	bf00      	nop
 8016064:	20400001 	.word	0x20400001

08016068 <_fflush_r>:
 8016068:	b538      	push	{r3, r4, r5, lr}
 801606a:	690b      	ldr	r3, [r1, #16]
 801606c:	4605      	mov	r5, r0
 801606e:	460c      	mov	r4, r1
 8016070:	b913      	cbnz	r3, 8016078 <_fflush_r+0x10>
 8016072:	2500      	movs	r5, #0
 8016074:	4628      	mov	r0, r5
 8016076:	bd38      	pop	{r3, r4, r5, pc}
 8016078:	b118      	cbz	r0, 8016082 <_fflush_r+0x1a>
 801607a:	6983      	ldr	r3, [r0, #24]
 801607c:	b90b      	cbnz	r3, 8016082 <_fflush_r+0x1a>
 801607e:	f000 f8c5 	bl	801620c <__sinit>
 8016082:	4b14      	ldr	r3, [pc, #80]	; (80160d4 <_fflush_r+0x6c>)
 8016084:	429c      	cmp	r4, r3
 8016086:	d11b      	bne.n	80160c0 <_fflush_r+0x58>
 8016088:	686c      	ldr	r4, [r5, #4]
 801608a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d0ef      	beq.n	8016072 <_fflush_r+0xa>
 8016092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016094:	07d0      	lsls	r0, r2, #31
 8016096:	d404      	bmi.n	80160a2 <_fflush_r+0x3a>
 8016098:	0599      	lsls	r1, r3, #22
 801609a:	d402      	bmi.n	80160a2 <_fflush_r+0x3a>
 801609c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801609e:	f000 fcc6 	bl	8016a2e <__retarget_lock_acquire_recursive>
 80160a2:	4628      	mov	r0, r5
 80160a4:	4621      	mov	r1, r4
 80160a6:	f7ff ff59 	bl	8015f5c <__sflush_r>
 80160aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80160ac:	07da      	lsls	r2, r3, #31
 80160ae:	4605      	mov	r5, r0
 80160b0:	d4e0      	bmi.n	8016074 <_fflush_r+0xc>
 80160b2:	89a3      	ldrh	r3, [r4, #12]
 80160b4:	059b      	lsls	r3, r3, #22
 80160b6:	d4dd      	bmi.n	8016074 <_fflush_r+0xc>
 80160b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160ba:	f000 fcb9 	bl	8016a30 <__retarget_lock_release_recursive>
 80160be:	e7d9      	b.n	8016074 <_fflush_r+0xc>
 80160c0:	4b05      	ldr	r3, [pc, #20]	; (80160d8 <_fflush_r+0x70>)
 80160c2:	429c      	cmp	r4, r3
 80160c4:	d101      	bne.n	80160ca <_fflush_r+0x62>
 80160c6:	68ac      	ldr	r4, [r5, #8]
 80160c8:	e7df      	b.n	801608a <_fflush_r+0x22>
 80160ca:	4b04      	ldr	r3, [pc, #16]	; (80160dc <_fflush_r+0x74>)
 80160cc:	429c      	cmp	r4, r3
 80160ce:	bf08      	it	eq
 80160d0:	68ec      	ldreq	r4, [r5, #12]
 80160d2:	e7da      	b.n	801608a <_fflush_r+0x22>
 80160d4:	08019cc4 	.word	0x08019cc4
 80160d8:	08019ce4 	.word	0x08019ce4
 80160dc:	08019ca4 	.word	0x08019ca4

080160e0 <fileno>:
 80160e0:	b570      	push	{r4, r5, r6, lr}
 80160e2:	4e1a      	ldr	r6, [pc, #104]	; (801614c <fileno+0x6c>)
 80160e4:	6835      	ldr	r5, [r6, #0]
 80160e6:	4604      	mov	r4, r0
 80160e8:	b125      	cbz	r5, 80160f4 <fileno+0x14>
 80160ea:	69ab      	ldr	r3, [r5, #24]
 80160ec:	b913      	cbnz	r3, 80160f4 <fileno+0x14>
 80160ee:	4628      	mov	r0, r5
 80160f0:	f000 f88c 	bl	801620c <__sinit>
 80160f4:	4b16      	ldr	r3, [pc, #88]	; (8016150 <fileno+0x70>)
 80160f6:	429c      	cmp	r4, r3
 80160f8:	d118      	bne.n	801612c <fileno+0x4c>
 80160fa:	686c      	ldr	r4, [r5, #4]
 80160fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80160fe:	07d8      	lsls	r0, r3, #31
 8016100:	d405      	bmi.n	801610e <fileno+0x2e>
 8016102:	89a3      	ldrh	r3, [r4, #12]
 8016104:	0599      	lsls	r1, r3, #22
 8016106:	d402      	bmi.n	801610e <fileno+0x2e>
 8016108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801610a:	f000 fc90 	bl	8016a2e <__retarget_lock_acquire_recursive>
 801610e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016112:	b1ab      	cbz	r3, 8016140 <fileno+0x60>
 8016114:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8016118:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801611a:	07d2      	lsls	r2, r2, #31
 801611c:	d404      	bmi.n	8016128 <fileno+0x48>
 801611e:	059b      	lsls	r3, r3, #22
 8016120:	d402      	bmi.n	8016128 <fileno+0x48>
 8016122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016124:	f000 fc84 	bl	8016a30 <__retarget_lock_release_recursive>
 8016128:	4628      	mov	r0, r5
 801612a:	bd70      	pop	{r4, r5, r6, pc}
 801612c:	4b09      	ldr	r3, [pc, #36]	; (8016154 <fileno+0x74>)
 801612e:	429c      	cmp	r4, r3
 8016130:	d101      	bne.n	8016136 <fileno+0x56>
 8016132:	68ac      	ldr	r4, [r5, #8]
 8016134:	e7e2      	b.n	80160fc <fileno+0x1c>
 8016136:	4b08      	ldr	r3, [pc, #32]	; (8016158 <fileno+0x78>)
 8016138:	429c      	cmp	r4, r3
 801613a:	bf08      	it	eq
 801613c:	68ec      	ldreq	r4, [r5, #12]
 801613e:	e7dd      	b.n	80160fc <fileno+0x1c>
 8016140:	6832      	ldr	r2, [r6, #0]
 8016142:	2109      	movs	r1, #9
 8016144:	6011      	str	r1, [r2, #0]
 8016146:	f04f 35ff 	mov.w	r5, #4294967295
 801614a:	e7e5      	b.n	8016118 <fileno+0x38>
 801614c:	20000190 	.word	0x20000190
 8016150:	08019cc4 	.word	0x08019cc4
 8016154:	08019ce4 	.word	0x08019ce4
 8016158:	08019ca4 	.word	0x08019ca4

0801615c <std>:
 801615c:	2300      	movs	r3, #0
 801615e:	b510      	push	{r4, lr}
 8016160:	4604      	mov	r4, r0
 8016162:	e9c0 3300 	strd	r3, r3, [r0]
 8016166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801616a:	6083      	str	r3, [r0, #8]
 801616c:	8181      	strh	r1, [r0, #12]
 801616e:	6643      	str	r3, [r0, #100]	; 0x64
 8016170:	81c2      	strh	r2, [r0, #14]
 8016172:	6183      	str	r3, [r0, #24]
 8016174:	4619      	mov	r1, r3
 8016176:	2208      	movs	r2, #8
 8016178:	305c      	adds	r0, #92	; 0x5c
 801617a:	f7fc fee1 	bl	8012f40 <memset>
 801617e:	4b05      	ldr	r3, [pc, #20]	; (8016194 <std+0x38>)
 8016180:	6263      	str	r3, [r4, #36]	; 0x24
 8016182:	4b05      	ldr	r3, [pc, #20]	; (8016198 <std+0x3c>)
 8016184:	62a3      	str	r3, [r4, #40]	; 0x28
 8016186:	4b05      	ldr	r3, [pc, #20]	; (801619c <std+0x40>)
 8016188:	62e3      	str	r3, [r4, #44]	; 0x2c
 801618a:	4b05      	ldr	r3, [pc, #20]	; (80161a0 <std+0x44>)
 801618c:	6224      	str	r4, [r4, #32]
 801618e:	6323      	str	r3, [r4, #48]	; 0x30
 8016190:	bd10      	pop	{r4, pc}
 8016192:	bf00      	nop
 8016194:	08013ef1 	.word	0x08013ef1
 8016198:	08013f13 	.word	0x08013f13
 801619c:	08013f4b 	.word	0x08013f4b
 80161a0:	08013f6f 	.word	0x08013f6f

080161a4 <_cleanup_r>:
 80161a4:	4901      	ldr	r1, [pc, #4]	; (80161ac <_cleanup_r+0x8>)
 80161a6:	f000 b8af 	b.w	8016308 <_fwalk_reent>
 80161aa:	bf00      	nop
 80161ac:	08016069 	.word	0x08016069

080161b0 <__sfmoreglue>:
 80161b0:	b570      	push	{r4, r5, r6, lr}
 80161b2:	2268      	movs	r2, #104	; 0x68
 80161b4:	1e4d      	subs	r5, r1, #1
 80161b6:	4355      	muls	r5, r2
 80161b8:	460e      	mov	r6, r1
 80161ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80161be:	f001 fa1d 	bl	80175fc <_malloc_r>
 80161c2:	4604      	mov	r4, r0
 80161c4:	b140      	cbz	r0, 80161d8 <__sfmoreglue+0x28>
 80161c6:	2100      	movs	r1, #0
 80161c8:	e9c0 1600 	strd	r1, r6, [r0]
 80161cc:	300c      	adds	r0, #12
 80161ce:	60a0      	str	r0, [r4, #8]
 80161d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80161d4:	f7fc feb4 	bl	8012f40 <memset>
 80161d8:	4620      	mov	r0, r4
 80161da:	bd70      	pop	{r4, r5, r6, pc}

080161dc <__sfp_lock_acquire>:
 80161dc:	4801      	ldr	r0, [pc, #4]	; (80161e4 <__sfp_lock_acquire+0x8>)
 80161de:	f000 bc26 	b.w	8016a2e <__retarget_lock_acquire_recursive>
 80161e2:	bf00      	nop
 80161e4:	200023c1 	.word	0x200023c1

080161e8 <__sfp_lock_release>:
 80161e8:	4801      	ldr	r0, [pc, #4]	; (80161f0 <__sfp_lock_release+0x8>)
 80161ea:	f000 bc21 	b.w	8016a30 <__retarget_lock_release_recursive>
 80161ee:	bf00      	nop
 80161f0:	200023c1 	.word	0x200023c1

080161f4 <__sinit_lock_acquire>:
 80161f4:	4801      	ldr	r0, [pc, #4]	; (80161fc <__sinit_lock_acquire+0x8>)
 80161f6:	f000 bc1a 	b.w	8016a2e <__retarget_lock_acquire_recursive>
 80161fa:	bf00      	nop
 80161fc:	200023c2 	.word	0x200023c2

08016200 <__sinit_lock_release>:
 8016200:	4801      	ldr	r0, [pc, #4]	; (8016208 <__sinit_lock_release+0x8>)
 8016202:	f000 bc15 	b.w	8016a30 <__retarget_lock_release_recursive>
 8016206:	bf00      	nop
 8016208:	200023c2 	.word	0x200023c2

0801620c <__sinit>:
 801620c:	b510      	push	{r4, lr}
 801620e:	4604      	mov	r4, r0
 8016210:	f7ff fff0 	bl	80161f4 <__sinit_lock_acquire>
 8016214:	69a3      	ldr	r3, [r4, #24]
 8016216:	b11b      	cbz	r3, 8016220 <__sinit+0x14>
 8016218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801621c:	f7ff bff0 	b.w	8016200 <__sinit_lock_release>
 8016220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016224:	6523      	str	r3, [r4, #80]	; 0x50
 8016226:	4b13      	ldr	r3, [pc, #76]	; (8016274 <__sinit+0x68>)
 8016228:	4a13      	ldr	r2, [pc, #76]	; (8016278 <__sinit+0x6c>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	62a2      	str	r2, [r4, #40]	; 0x28
 801622e:	42a3      	cmp	r3, r4
 8016230:	bf04      	itt	eq
 8016232:	2301      	moveq	r3, #1
 8016234:	61a3      	streq	r3, [r4, #24]
 8016236:	4620      	mov	r0, r4
 8016238:	f000 f820 	bl	801627c <__sfp>
 801623c:	6060      	str	r0, [r4, #4]
 801623e:	4620      	mov	r0, r4
 8016240:	f000 f81c 	bl	801627c <__sfp>
 8016244:	60a0      	str	r0, [r4, #8]
 8016246:	4620      	mov	r0, r4
 8016248:	f000 f818 	bl	801627c <__sfp>
 801624c:	2200      	movs	r2, #0
 801624e:	60e0      	str	r0, [r4, #12]
 8016250:	2104      	movs	r1, #4
 8016252:	6860      	ldr	r0, [r4, #4]
 8016254:	f7ff ff82 	bl	801615c <std>
 8016258:	68a0      	ldr	r0, [r4, #8]
 801625a:	2201      	movs	r2, #1
 801625c:	2109      	movs	r1, #9
 801625e:	f7ff ff7d 	bl	801615c <std>
 8016262:	68e0      	ldr	r0, [r4, #12]
 8016264:	2202      	movs	r2, #2
 8016266:	2112      	movs	r1, #18
 8016268:	f7ff ff78 	bl	801615c <std>
 801626c:	2301      	movs	r3, #1
 801626e:	61a3      	str	r3, [r4, #24]
 8016270:	e7d2      	b.n	8016218 <__sinit+0xc>
 8016272:	bf00      	nop
 8016274:	080193e8 	.word	0x080193e8
 8016278:	080161a5 	.word	0x080161a5

0801627c <__sfp>:
 801627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801627e:	4607      	mov	r7, r0
 8016280:	f7ff ffac 	bl	80161dc <__sfp_lock_acquire>
 8016284:	4b1e      	ldr	r3, [pc, #120]	; (8016300 <__sfp+0x84>)
 8016286:	681e      	ldr	r6, [r3, #0]
 8016288:	69b3      	ldr	r3, [r6, #24]
 801628a:	b913      	cbnz	r3, 8016292 <__sfp+0x16>
 801628c:	4630      	mov	r0, r6
 801628e:	f7ff ffbd 	bl	801620c <__sinit>
 8016292:	3648      	adds	r6, #72	; 0x48
 8016294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016298:	3b01      	subs	r3, #1
 801629a:	d503      	bpl.n	80162a4 <__sfp+0x28>
 801629c:	6833      	ldr	r3, [r6, #0]
 801629e:	b30b      	cbz	r3, 80162e4 <__sfp+0x68>
 80162a0:	6836      	ldr	r6, [r6, #0]
 80162a2:	e7f7      	b.n	8016294 <__sfp+0x18>
 80162a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80162a8:	b9d5      	cbnz	r5, 80162e0 <__sfp+0x64>
 80162aa:	4b16      	ldr	r3, [pc, #88]	; (8016304 <__sfp+0x88>)
 80162ac:	60e3      	str	r3, [r4, #12]
 80162ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80162b2:	6665      	str	r5, [r4, #100]	; 0x64
 80162b4:	f000 fbba 	bl	8016a2c <__retarget_lock_init_recursive>
 80162b8:	f7ff ff96 	bl	80161e8 <__sfp_lock_release>
 80162bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80162c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80162c4:	6025      	str	r5, [r4, #0]
 80162c6:	61a5      	str	r5, [r4, #24]
 80162c8:	2208      	movs	r2, #8
 80162ca:	4629      	mov	r1, r5
 80162cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80162d0:	f7fc fe36 	bl	8012f40 <memset>
 80162d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80162d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80162dc:	4620      	mov	r0, r4
 80162de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e0:	3468      	adds	r4, #104	; 0x68
 80162e2:	e7d9      	b.n	8016298 <__sfp+0x1c>
 80162e4:	2104      	movs	r1, #4
 80162e6:	4638      	mov	r0, r7
 80162e8:	f7ff ff62 	bl	80161b0 <__sfmoreglue>
 80162ec:	4604      	mov	r4, r0
 80162ee:	6030      	str	r0, [r6, #0]
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d1d5      	bne.n	80162a0 <__sfp+0x24>
 80162f4:	f7ff ff78 	bl	80161e8 <__sfp_lock_release>
 80162f8:	230c      	movs	r3, #12
 80162fa:	603b      	str	r3, [r7, #0]
 80162fc:	e7ee      	b.n	80162dc <__sfp+0x60>
 80162fe:	bf00      	nop
 8016300:	080193e8 	.word	0x080193e8
 8016304:	ffff0001 	.word	0xffff0001

08016308 <_fwalk_reent>:
 8016308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801630c:	4606      	mov	r6, r0
 801630e:	4688      	mov	r8, r1
 8016310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016314:	2700      	movs	r7, #0
 8016316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801631a:	f1b9 0901 	subs.w	r9, r9, #1
 801631e:	d505      	bpl.n	801632c <_fwalk_reent+0x24>
 8016320:	6824      	ldr	r4, [r4, #0]
 8016322:	2c00      	cmp	r4, #0
 8016324:	d1f7      	bne.n	8016316 <_fwalk_reent+0xe>
 8016326:	4638      	mov	r0, r7
 8016328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801632c:	89ab      	ldrh	r3, [r5, #12]
 801632e:	2b01      	cmp	r3, #1
 8016330:	d907      	bls.n	8016342 <_fwalk_reent+0x3a>
 8016332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016336:	3301      	adds	r3, #1
 8016338:	d003      	beq.n	8016342 <_fwalk_reent+0x3a>
 801633a:	4629      	mov	r1, r5
 801633c:	4630      	mov	r0, r6
 801633e:	47c0      	blx	r8
 8016340:	4307      	orrs	r7, r0
 8016342:	3568      	adds	r5, #104	; 0x68
 8016344:	e7e9      	b.n	801631a <_fwalk_reent+0x12>

08016346 <rshift>:
 8016346:	6903      	ldr	r3, [r0, #16]
 8016348:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801634c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016350:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016354:	f100 0414 	add.w	r4, r0, #20
 8016358:	dd45      	ble.n	80163e6 <rshift+0xa0>
 801635a:	f011 011f 	ands.w	r1, r1, #31
 801635e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016362:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016366:	d10c      	bne.n	8016382 <rshift+0x3c>
 8016368:	f100 0710 	add.w	r7, r0, #16
 801636c:	4629      	mov	r1, r5
 801636e:	42b1      	cmp	r1, r6
 8016370:	d334      	bcc.n	80163dc <rshift+0x96>
 8016372:	1a9b      	subs	r3, r3, r2
 8016374:	009b      	lsls	r3, r3, #2
 8016376:	1eea      	subs	r2, r5, #3
 8016378:	4296      	cmp	r6, r2
 801637a:	bf38      	it	cc
 801637c:	2300      	movcc	r3, #0
 801637e:	4423      	add	r3, r4
 8016380:	e015      	b.n	80163ae <rshift+0x68>
 8016382:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016386:	f1c1 0820 	rsb	r8, r1, #32
 801638a:	40cf      	lsrs	r7, r1
 801638c:	f105 0e04 	add.w	lr, r5, #4
 8016390:	46a1      	mov	r9, r4
 8016392:	4576      	cmp	r6, lr
 8016394:	46f4      	mov	ip, lr
 8016396:	d815      	bhi.n	80163c4 <rshift+0x7e>
 8016398:	1a9a      	subs	r2, r3, r2
 801639a:	0092      	lsls	r2, r2, #2
 801639c:	3a04      	subs	r2, #4
 801639e:	3501      	adds	r5, #1
 80163a0:	42ae      	cmp	r6, r5
 80163a2:	bf38      	it	cc
 80163a4:	2200      	movcc	r2, #0
 80163a6:	18a3      	adds	r3, r4, r2
 80163a8:	50a7      	str	r7, [r4, r2]
 80163aa:	b107      	cbz	r7, 80163ae <rshift+0x68>
 80163ac:	3304      	adds	r3, #4
 80163ae:	1b1a      	subs	r2, r3, r4
 80163b0:	42a3      	cmp	r3, r4
 80163b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80163b6:	bf08      	it	eq
 80163b8:	2300      	moveq	r3, #0
 80163ba:	6102      	str	r2, [r0, #16]
 80163bc:	bf08      	it	eq
 80163be:	6143      	streq	r3, [r0, #20]
 80163c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163c4:	f8dc c000 	ldr.w	ip, [ip]
 80163c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80163cc:	ea4c 0707 	orr.w	r7, ip, r7
 80163d0:	f849 7b04 	str.w	r7, [r9], #4
 80163d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80163d8:	40cf      	lsrs	r7, r1
 80163da:	e7da      	b.n	8016392 <rshift+0x4c>
 80163dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80163e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80163e4:	e7c3      	b.n	801636e <rshift+0x28>
 80163e6:	4623      	mov	r3, r4
 80163e8:	e7e1      	b.n	80163ae <rshift+0x68>

080163ea <__hexdig_fun>:
 80163ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80163ee:	2b09      	cmp	r3, #9
 80163f0:	d802      	bhi.n	80163f8 <__hexdig_fun+0xe>
 80163f2:	3820      	subs	r0, #32
 80163f4:	b2c0      	uxtb	r0, r0
 80163f6:	4770      	bx	lr
 80163f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80163fc:	2b05      	cmp	r3, #5
 80163fe:	d801      	bhi.n	8016404 <__hexdig_fun+0x1a>
 8016400:	3847      	subs	r0, #71	; 0x47
 8016402:	e7f7      	b.n	80163f4 <__hexdig_fun+0xa>
 8016404:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016408:	2b05      	cmp	r3, #5
 801640a:	d801      	bhi.n	8016410 <__hexdig_fun+0x26>
 801640c:	3827      	subs	r0, #39	; 0x27
 801640e:	e7f1      	b.n	80163f4 <__hexdig_fun+0xa>
 8016410:	2000      	movs	r0, #0
 8016412:	4770      	bx	lr

08016414 <__gethex>:
 8016414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016418:	ed2d 8b02 	vpush	{d8}
 801641c:	b089      	sub	sp, #36	; 0x24
 801641e:	ee08 0a10 	vmov	s16, r0
 8016422:	9304      	str	r3, [sp, #16]
 8016424:	4bb4      	ldr	r3, [pc, #720]	; (80166f8 <__gethex+0x2e4>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	9301      	str	r3, [sp, #4]
 801642a:	4618      	mov	r0, r3
 801642c:	468b      	mov	fp, r1
 801642e:	4690      	mov	r8, r2
 8016430:	f7e9 fece 	bl	80001d0 <strlen>
 8016434:	9b01      	ldr	r3, [sp, #4]
 8016436:	f8db 2000 	ldr.w	r2, [fp]
 801643a:	4403      	add	r3, r0
 801643c:	4682      	mov	sl, r0
 801643e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016442:	9305      	str	r3, [sp, #20]
 8016444:	1c93      	adds	r3, r2, #2
 8016446:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801644a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801644e:	32fe      	adds	r2, #254	; 0xfe
 8016450:	18d1      	adds	r1, r2, r3
 8016452:	461f      	mov	r7, r3
 8016454:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016458:	9100      	str	r1, [sp, #0]
 801645a:	2830      	cmp	r0, #48	; 0x30
 801645c:	d0f8      	beq.n	8016450 <__gethex+0x3c>
 801645e:	f7ff ffc4 	bl	80163ea <__hexdig_fun>
 8016462:	4604      	mov	r4, r0
 8016464:	2800      	cmp	r0, #0
 8016466:	d13a      	bne.n	80164de <__gethex+0xca>
 8016468:	9901      	ldr	r1, [sp, #4]
 801646a:	4652      	mov	r2, sl
 801646c:	4638      	mov	r0, r7
 801646e:	f001 fc1b 	bl	8017ca8 <strncmp>
 8016472:	4605      	mov	r5, r0
 8016474:	2800      	cmp	r0, #0
 8016476:	d168      	bne.n	801654a <__gethex+0x136>
 8016478:	f817 000a 	ldrb.w	r0, [r7, sl]
 801647c:	eb07 060a 	add.w	r6, r7, sl
 8016480:	f7ff ffb3 	bl	80163ea <__hexdig_fun>
 8016484:	2800      	cmp	r0, #0
 8016486:	d062      	beq.n	801654e <__gethex+0x13a>
 8016488:	4633      	mov	r3, r6
 801648a:	7818      	ldrb	r0, [r3, #0]
 801648c:	2830      	cmp	r0, #48	; 0x30
 801648e:	461f      	mov	r7, r3
 8016490:	f103 0301 	add.w	r3, r3, #1
 8016494:	d0f9      	beq.n	801648a <__gethex+0x76>
 8016496:	f7ff ffa8 	bl	80163ea <__hexdig_fun>
 801649a:	2301      	movs	r3, #1
 801649c:	fab0 f480 	clz	r4, r0
 80164a0:	0964      	lsrs	r4, r4, #5
 80164a2:	4635      	mov	r5, r6
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	463a      	mov	r2, r7
 80164a8:	4616      	mov	r6, r2
 80164aa:	3201      	adds	r2, #1
 80164ac:	7830      	ldrb	r0, [r6, #0]
 80164ae:	f7ff ff9c 	bl	80163ea <__hexdig_fun>
 80164b2:	2800      	cmp	r0, #0
 80164b4:	d1f8      	bne.n	80164a8 <__gethex+0x94>
 80164b6:	9901      	ldr	r1, [sp, #4]
 80164b8:	4652      	mov	r2, sl
 80164ba:	4630      	mov	r0, r6
 80164bc:	f001 fbf4 	bl	8017ca8 <strncmp>
 80164c0:	b980      	cbnz	r0, 80164e4 <__gethex+0xd0>
 80164c2:	b94d      	cbnz	r5, 80164d8 <__gethex+0xc4>
 80164c4:	eb06 050a 	add.w	r5, r6, sl
 80164c8:	462a      	mov	r2, r5
 80164ca:	4616      	mov	r6, r2
 80164cc:	3201      	adds	r2, #1
 80164ce:	7830      	ldrb	r0, [r6, #0]
 80164d0:	f7ff ff8b 	bl	80163ea <__hexdig_fun>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	d1f8      	bne.n	80164ca <__gethex+0xb6>
 80164d8:	1bad      	subs	r5, r5, r6
 80164da:	00ad      	lsls	r5, r5, #2
 80164dc:	e004      	b.n	80164e8 <__gethex+0xd4>
 80164de:	2400      	movs	r4, #0
 80164e0:	4625      	mov	r5, r4
 80164e2:	e7e0      	b.n	80164a6 <__gethex+0x92>
 80164e4:	2d00      	cmp	r5, #0
 80164e6:	d1f7      	bne.n	80164d8 <__gethex+0xc4>
 80164e8:	7833      	ldrb	r3, [r6, #0]
 80164ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80164ee:	2b50      	cmp	r3, #80	; 0x50
 80164f0:	d13b      	bne.n	801656a <__gethex+0x156>
 80164f2:	7873      	ldrb	r3, [r6, #1]
 80164f4:	2b2b      	cmp	r3, #43	; 0x2b
 80164f6:	d02c      	beq.n	8016552 <__gethex+0x13e>
 80164f8:	2b2d      	cmp	r3, #45	; 0x2d
 80164fa:	d02e      	beq.n	801655a <__gethex+0x146>
 80164fc:	1c71      	adds	r1, r6, #1
 80164fe:	f04f 0900 	mov.w	r9, #0
 8016502:	7808      	ldrb	r0, [r1, #0]
 8016504:	f7ff ff71 	bl	80163ea <__hexdig_fun>
 8016508:	1e43      	subs	r3, r0, #1
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b18      	cmp	r3, #24
 801650e:	d82c      	bhi.n	801656a <__gethex+0x156>
 8016510:	f1a0 0210 	sub.w	r2, r0, #16
 8016514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016518:	f7ff ff67 	bl	80163ea <__hexdig_fun>
 801651c:	1e43      	subs	r3, r0, #1
 801651e:	b2db      	uxtb	r3, r3
 8016520:	2b18      	cmp	r3, #24
 8016522:	d91d      	bls.n	8016560 <__gethex+0x14c>
 8016524:	f1b9 0f00 	cmp.w	r9, #0
 8016528:	d000      	beq.n	801652c <__gethex+0x118>
 801652a:	4252      	negs	r2, r2
 801652c:	4415      	add	r5, r2
 801652e:	f8cb 1000 	str.w	r1, [fp]
 8016532:	b1e4      	cbz	r4, 801656e <__gethex+0x15a>
 8016534:	9b00      	ldr	r3, [sp, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	bf14      	ite	ne
 801653a:	2700      	movne	r7, #0
 801653c:	2706      	moveq	r7, #6
 801653e:	4638      	mov	r0, r7
 8016540:	b009      	add	sp, #36	; 0x24
 8016542:	ecbd 8b02 	vpop	{d8}
 8016546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654a:	463e      	mov	r6, r7
 801654c:	4625      	mov	r5, r4
 801654e:	2401      	movs	r4, #1
 8016550:	e7ca      	b.n	80164e8 <__gethex+0xd4>
 8016552:	f04f 0900 	mov.w	r9, #0
 8016556:	1cb1      	adds	r1, r6, #2
 8016558:	e7d3      	b.n	8016502 <__gethex+0xee>
 801655a:	f04f 0901 	mov.w	r9, #1
 801655e:	e7fa      	b.n	8016556 <__gethex+0x142>
 8016560:	230a      	movs	r3, #10
 8016562:	fb03 0202 	mla	r2, r3, r2, r0
 8016566:	3a10      	subs	r2, #16
 8016568:	e7d4      	b.n	8016514 <__gethex+0x100>
 801656a:	4631      	mov	r1, r6
 801656c:	e7df      	b.n	801652e <__gethex+0x11a>
 801656e:	1bf3      	subs	r3, r6, r7
 8016570:	3b01      	subs	r3, #1
 8016572:	4621      	mov	r1, r4
 8016574:	2b07      	cmp	r3, #7
 8016576:	dc0b      	bgt.n	8016590 <__gethex+0x17c>
 8016578:	ee18 0a10 	vmov	r0, s16
 801657c:	f000 fafa 	bl	8016b74 <_Balloc>
 8016580:	4604      	mov	r4, r0
 8016582:	b940      	cbnz	r0, 8016596 <__gethex+0x182>
 8016584:	4b5d      	ldr	r3, [pc, #372]	; (80166fc <__gethex+0x2e8>)
 8016586:	4602      	mov	r2, r0
 8016588:	21de      	movs	r1, #222	; 0xde
 801658a:	485d      	ldr	r0, [pc, #372]	; (8016700 <__gethex+0x2ec>)
 801658c:	f001 fbae 	bl	8017cec <__assert_func>
 8016590:	3101      	adds	r1, #1
 8016592:	105b      	asrs	r3, r3, #1
 8016594:	e7ee      	b.n	8016574 <__gethex+0x160>
 8016596:	f100 0914 	add.w	r9, r0, #20
 801659a:	f04f 0b00 	mov.w	fp, #0
 801659e:	f1ca 0301 	rsb	r3, sl, #1
 80165a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80165a6:	f8cd b000 	str.w	fp, [sp]
 80165aa:	9306      	str	r3, [sp, #24]
 80165ac:	42b7      	cmp	r7, r6
 80165ae:	d340      	bcc.n	8016632 <__gethex+0x21e>
 80165b0:	9802      	ldr	r0, [sp, #8]
 80165b2:	9b00      	ldr	r3, [sp, #0]
 80165b4:	f840 3b04 	str.w	r3, [r0], #4
 80165b8:	eba0 0009 	sub.w	r0, r0, r9
 80165bc:	1080      	asrs	r0, r0, #2
 80165be:	0146      	lsls	r6, r0, #5
 80165c0:	6120      	str	r0, [r4, #16]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f000 fbc8 	bl	8016d58 <__hi0bits>
 80165c8:	1a30      	subs	r0, r6, r0
 80165ca:	f8d8 6000 	ldr.w	r6, [r8]
 80165ce:	42b0      	cmp	r0, r6
 80165d0:	dd63      	ble.n	801669a <__gethex+0x286>
 80165d2:	1b87      	subs	r7, r0, r6
 80165d4:	4639      	mov	r1, r7
 80165d6:	4620      	mov	r0, r4
 80165d8:	f000 ff6c 	bl	80174b4 <__any_on>
 80165dc:	4682      	mov	sl, r0
 80165de:	b1a8      	cbz	r0, 801660c <__gethex+0x1f8>
 80165e0:	1e7b      	subs	r3, r7, #1
 80165e2:	1159      	asrs	r1, r3, #5
 80165e4:	f003 021f 	and.w	r2, r3, #31
 80165e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80165ec:	f04f 0a01 	mov.w	sl, #1
 80165f0:	fa0a f202 	lsl.w	r2, sl, r2
 80165f4:	420a      	tst	r2, r1
 80165f6:	d009      	beq.n	801660c <__gethex+0x1f8>
 80165f8:	4553      	cmp	r3, sl
 80165fa:	dd05      	ble.n	8016608 <__gethex+0x1f4>
 80165fc:	1eb9      	subs	r1, r7, #2
 80165fe:	4620      	mov	r0, r4
 8016600:	f000 ff58 	bl	80174b4 <__any_on>
 8016604:	2800      	cmp	r0, #0
 8016606:	d145      	bne.n	8016694 <__gethex+0x280>
 8016608:	f04f 0a02 	mov.w	sl, #2
 801660c:	4639      	mov	r1, r7
 801660e:	4620      	mov	r0, r4
 8016610:	f7ff fe99 	bl	8016346 <rshift>
 8016614:	443d      	add	r5, r7
 8016616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801661a:	42ab      	cmp	r3, r5
 801661c:	da4c      	bge.n	80166b8 <__gethex+0x2a4>
 801661e:	ee18 0a10 	vmov	r0, s16
 8016622:	4621      	mov	r1, r4
 8016624:	f000 fae6 	bl	8016bf4 <_Bfree>
 8016628:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801662a:	2300      	movs	r3, #0
 801662c:	6013      	str	r3, [r2, #0]
 801662e:	27a3      	movs	r7, #163	; 0xa3
 8016630:	e785      	b.n	801653e <__gethex+0x12a>
 8016632:	1e73      	subs	r3, r6, #1
 8016634:	9a05      	ldr	r2, [sp, #20]
 8016636:	9303      	str	r3, [sp, #12]
 8016638:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801663c:	4293      	cmp	r3, r2
 801663e:	d019      	beq.n	8016674 <__gethex+0x260>
 8016640:	f1bb 0f20 	cmp.w	fp, #32
 8016644:	d107      	bne.n	8016656 <__gethex+0x242>
 8016646:	9b02      	ldr	r3, [sp, #8]
 8016648:	9a00      	ldr	r2, [sp, #0]
 801664a:	f843 2b04 	str.w	r2, [r3], #4
 801664e:	9302      	str	r3, [sp, #8]
 8016650:	2300      	movs	r3, #0
 8016652:	9300      	str	r3, [sp, #0]
 8016654:	469b      	mov	fp, r3
 8016656:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801665a:	f7ff fec6 	bl	80163ea <__hexdig_fun>
 801665e:	9b00      	ldr	r3, [sp, #0]
 8016660:	f000 000f 	and.w	r0, r0, #15
 8016664:	fa00 f00b 	lsl.w	r0, r0, fp
 8016668:	4303      	orrs	r3, r0
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	f10b 0b04 	add.w	fp, fp, #4
 8016670:	9b03      	ldr	r3, [sp, #12]
 8016672:	e00d      	b.n	8016690 <__gethex+0x27c>
 8016674:	9b03      	ldr	r3, [sp, #12]
 8016676:	9a06      	ldr	r2, [sp, #24]
 8016678:	4413      	add	r3, r2
 801667a:	42bb      	cmp	r3, r7
 801667c:	d3e0      	bcc.n	8016640 <__gethex+0x22c>
 801667e:	4618      	mov	r0, r3
 8016680:	9901      	ldr	r1, [sp, #4]
 8016682:	9307      	str	r3, [sp, #28]
 8016684:	4652      	mov	r2, sl
 8016686:	f001 fb0f 	bl	8017ca8 <strncmp>
 801668a:	9b07      	ldr	r3, [sp, #28]
 801668c:	2800      	cmp	r0, #0
 801668e:	d1d7      	bne.n	8016640 <__gethex+0x22c>
 8016690:	461e      	mov	r6, r3
 8016692:	e78b      	b.n	80165ac <__gethex+0x198>
 8016694:	f04f 0a03 	mov.w	sl, #3
 8016698:	e7b8      	b.n	801660c <__gethex+0x1f8>
 801669a:	da0a      	bge.n	80166b2 <__gethex+0x29e>
 801669c:	1a37      	subs	r7, r6, r0
 801669e:	4621      	mov	r1, r4
 80166a0:	ee18 0a10 	vmov	r0, s16
 80166a4:	463a      	mov	r2, r7
 80166a6:	f000 fcc1 	bl	801702c <__lshift>
 80166aa:	1bed      	subs	r5, r5, r7
 80166ac:	4604      	mov	r4, r0
 80166ae:	f100 0914 	add.w	r9, r0, #20
 80166b2:	f04f 0a00 	mov.w	sl, #0
 80166b6:	e7ae      	b.n	8016616 <__gethex+0x202>
 80166b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80166bc:	42a8      	cmp	r0, r5
 80166be:	dd72      	ble.n	80167a6 <__gethex+0x392>
 80166c0:	1b45      	subs	r5, r0, r5
 80166c2:	42ae      	cmp	r6, r5
 80166c4:	dc36      	bgt.n	8016734 <__gethex+0x320>
 80166c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166ca:	2b02      	cmp	r3, #2
 80166cc:	d02a      	beq.n	8016724 <__gethex+0x310>
 80166ce:	2b03      	cmp	r3, #3
 80166d0:	d02c      	beq.n	801672c <__gethex+0x318>
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	d11c      	bne.n	8016710 <__gethex+0x2fc>
 80166d6:	42ae      	cmp	r6, r5
 80166d8:	d11a      	bne.n	8016710 <__gethex+0x2fc>
 80166da:	2e01      	cmp	r6, #1
 80166dc:	d112      	bne.n	8016704 <__gethex+0x2f0>
 80166de:	9a04      	ldr	r2, [sp, #16]
 80166e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80166e4:	6013      	str	r3, [r2, #0]
 80166e6:	2301      	movs	r3, #1
 80166e8:	6123      	str	r3, [r4, #16]
 80166ea:	f8c9 3000 	str.w	r3, [r9]
 80166ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166f0:	2762      	movs	r7, #98	; 0x62
 80166f2:	601c      	str	r4, [r3, #0]
 80166f4:	e723      	b.n	801653e <__gethex+0x12a>
 80166f6:	bf00      	nop
 80166f8:	08019d6c 	.word	0x08019d6c
 80166fc:	08019c90 	.word	0x08019c90
 8016700:	08019d04 	.word	0x08019d04
 8016704:	1e71      	subs	r1, r6, #1
 8016706:	4620      	mov	r0, r4
 8016708:	f000 fed4 	bl	80174b4 <__any_on>
 801670c:	2800      	cmp	r0, #0
 801670e:	d1e6      	bne.n	80166de <__gethex+0x2ca>
 8016710:	ee18 0a10 	vmov	r0, s16
 8016714:	4621      	mov	r1, r4
 8016716:	f000 fa6d 	bl	8016bf4 <_Bfree>
 801671a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801671c:	2300      	movs	r3, #0
 801671e:	6013      	str	r3, [r2, #0]
 8016720:	2750      	movs	r7, #80	; 0x50
 8016722:	e70c      	b.n	801653e <__gethex+0x12a>
 8016724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016726:	2b00      	cmp	r3, #0
 8016728:	d1f2      	bne.n	8016710 <__gethex+0x2fc>
 801672a:	e7d8      	b.n	80166de <__gethex+0x2ca>
 801672c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801672e:	2b00      	cmp	r3, #0
 8016730:	d1d5      	bne.n	80166de <__gethex+0x2ca>
 8016732:	e7ed      	b.n	8016710 <__gethex+0x2fc>
 8016734:	1e6f      	subs	r7, r5, #1
 8016736:	f1ba 0f00 	cmp.w	sl, #0
 801673a:	d131      	bne.n	80167a0 <__gethex+0x38c>
 801673c:	b127      	cbz	r7, 8016748 <__gethex+0x334>
 801673e:	4639      	mov	r1, r7
 8016740:	4620      	mov	r0, r4
 8016742:	f000 feb7 	bl	80174b4 <__any_on>
 8016746:	4682      	mov	sl, r0
 8016748:	117b      	asrs	r3, r7, #5
 801674a:	2101      	movs	r1, #1
 801674c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016750:	f007 071f 	and.w	r7, r7, #31
 8016754:	fa01 f707 	lsl.w	r7, r1, r7
 8016758:	421f      	tst	r7, r3
 801675a:	4629      	mov	r1, r5
 801675c:	4620      	mov	r0, r4
 801675e:	bf18      	it	ne
 8016760:	f04a 0a02 	orrne.w	sl, sl, #2
 8016764:	1b76      	subs	r6, r6, r5
 8016766:	f7ff fdee 	bl	8016346 <rshift>
 801676a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801676e:	2702      	movs	r7, #2
 8016770:	f1ba 0f00 	cmp.w	sl, #0
 8016774:	d048      	beq.n	8016808 <__gethex+0x3f4>
 8016776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801677a:	2b02      	cmp	r3, #2
 801677c:	d015      	beq.n	80167aa <__gethex+0x396>
 801677e:	2b03      	cmp	r3, #3
 8016780:	d017      	beq.n	80167b2 <__gethex+0x39e>
 8016782:	2b01      	cmp	r3, #1
 8016784:	d109      	bne.n	801679a <__gethex+0x386>
 8016786:	f01a 0f02 	tst.w	sl, #2
 801678a:	d006      	beq.n	801679a <__gethex+0x386>
 801678c:	f8d9 0000 	ldr.w	r0, [r9]
 8016790:	ea4a 0a00 	orr.w	sl, sl, r0
 8016794:	f01a 0f01 	tst.w	sl, #1
 8016798:	d10e      	bne.n	80167b8 <__gethex+0x3a4>
 801679a:	f047 0710 	orr.w	r7, r7, #16
 801679e:	e033      	b.n	8016808 <__gethex+0x3f4>
 80167a0:	f04f 0a01 	mov.w	sl, #1
 80167a4:	e7d0      	b.n	8016748 <__gethex+0x334>
 80167a6:	2701      	movs	r7, #1
 80167a8:	e7e2      	b.n	8016770 <__gethex+0x35c>
 80167aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167ac:	f1c3 0301 	rsb	r3, r3, #1
 80167b0:	9315      	str	r3, [sp, #84]	; 0x54
 80167b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d0f0      	beq.n	801679a <__gethex+0x386>
 80167b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80167bc:	f104 0314 	add.w	r3, r4, #20
 80167c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80167c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80167c8:	f04f 0c00 	mov.w	ip, #0
 80167cc:	4618      	mov	r0, r3
 80167ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80167d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80167d6:	d01c      	beq.n	8016812 <__gethex+0x3fe>
 80167d8:	3201      	adds	r2, #1
 80167da:	6002      	str	r2, [r0, #0]
 80167dc:	2f02      	cmp	r7, #2
 80167de:	f104 0314 	add.w	r3, r4, #20
 80167e2:	d13f      	bne.n	8016864 <__gethex+0x450>
 80167e4:	f8d8 2000 	ldr.w	r2, [r8]
 80167e8:	3a01      	subs	r2, #1
 80167ea:	42b2      	cmp	r2, r6
 80167ec:	d10a      	bne.n	8016804 <__gethex+0x3f0>
 80167ee:	1171      	asrs	r1, r6, #5
 80167f0:	2201      	movs	r2, #1
 80167f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80167f6:	f006 061f 	and.w	r6, r6, #31
 80167fa:	fa02 f606 	lsl.w	r6, r2, r6
 80167fe:	421e      	tst	r6, r3
 8016800:	bf18      	it	ne
 8016802:	4617      	movne	r7, r2
 8016804:	f047 0720 	orr.w	r7, r7, #32
 8016808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801680a:	601c      	str	r4, [r3, #0]
 801680c:	9b04      	ldr	r3, [sp, #16]
 801680e:	601d      	str	r5, [r3, #0]
 8016810:	e695      	b.n	801653e <__gethex+0x12a>
 8016812:	4299      	cmp	r1, r3
 8016814:	f843 cc04 	str.w	ip, [r3, #-4]
 8016818:	d8d8      	bhi.n	80167cc <__gethex+0x3b8>
 801681a:	68a3      	ldr	r3, [r4, #8]
 801681c:	459b      	cmp	fp, r3
 801681e:	db19      	blt.n	8016854 <__gethex+0x440>
 8016820:	6861      	ldr	r1, [r4, #4]
 8016822:	ee18 0a10 	vmov	r0, s16
 8016826:	3101      	adds	r1, #1
 8016828:	f000 f9a4 	bl	8016b74 <_Balloc>
 801682c:	4681      	mov	r9, r0
 801682e:	b918      	cbnz	r0, 8016838 <__gethex+0x424>
 8016830:	4b1a      	ldr	r3, [pc, #104]	; (801689c <__gethex+0x488>)
 8016832:	4602      	mov	r2, r0
 8016834:	2184      	movs	r1, #132	; 0x84
 8016836:	e6a8      	b.n	801658a <__gethex+0x176>
 8016838:	6922      	ldr	r2, [r4, #16]
 801683a:	3202      	adds	r2, #2
 801683c:	f104 010c 	add.w	r1, r4, #12
 8016840:	0092      	lsls	r2, r2, #2
 8016842:	300c      	adds	r0, #12
 8016844:	f000 f988 	bl	8016b58 <memcpy>
 8016848:	4621      	mov	r1, r4
 801684a:	ee18 0a10 	vmov	r0, s16
 801684e:	f000 f9d1 	bl	8016bf4 <_Bfree>
 8016852:	464c      	mov	r4, r9
 8016854:	6923      	ldr	r3, [r4, #16]
 8016856:	1c5a      	adds	r2, r3, #1
 8016858:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801685c:	6122      	str	r2, [r4, #16]
 801685e:	2201      	movs	r2, #1
 8016860:	615a      	str	r2, [r3, #20]
 8016862:	e7bb      	b.n	80167dc <__gethex+0x3c8>
 8016864:	6922      	ldr	r2, [r4, #16]
 8016866:	455a      	cmp	r2, fp
 8016868:	dd0b      	ble.n	8016882 <__gethex+0x46e>
 801686a:	2101      	movs	r1, #1
 801686c:	4620      	mov	r0, r4
 801686e:	f7ff fd6a 	bl	8016346 <rshift>
 8016872:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016876:	3501      	adds	r5, #1
 8016878:	42ab      	cmp	r3, r5
 801687a:	f6ff aed0 	blt.w	801661e <__gethex+0x20a>
 801687e:	2701      	movs	r7, #1
 8016880:	e7c0      	b.n	8016804 <__gethex+0x3f0>
 8016882:	f016 061f 	ands.w	r6, r6, #31
 8016886:	d0fa      	beq.n	801687e <__gethex+0x46a>
 8016888:	4453      	add	r3, sl
 801688a:	f1c6 0620 	rsb	r6, r6, #32
 801688e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016892:	f000 fa61 	bl	8016d58 <__hi0bits>
 8016896:	42b0      	cmp	r0, r6
 8016898:	dbe7      	blt.n	801686a <__gethex+0x456>
 801689a:	e7f0      	b.n	801687e <__gethex+0x46a>
 801689c:	08019c90 	.word	0x08019c90

080168a0 <L_shift>:
 80168a0:	f1c2 0208 	rsb	r2, r2, #8
 80168a4:	0092      	lsls	r2, r2, #2
 80168a6:	b570      	push	{r4, r5, r6, lr}
 80168a8:	f1c2 0620 	rsb	r6, r2, #32
 80168ac:	6843      	ldr	r3, [r0, #4]
 80168ae:	6804      	ldr	r4, [r0, #0]
 80168b0:	fa03 f506 	lsl.w	r5, r3, r6
 80168b4:	432c      	orrs	r4, r5
 80168b6:	40d3      	lsrs	r3, r2
 80168b8:	6004      	str	r4, [r0, #0]
 80168ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80168be:	4288      	cmp	r0, r1
 80168c0:	d3f4      	bcc.n	80168ac <L_shift+0xc>
 80168c2:	bd70      	pop	{r4, r5, r6, pc}

080168c4 <__match>:
 80168c4:	b530      	push	{r4, r5, lr}
 80168c6:	6803      	ldr	r3, [r0, #0]
 80168c8:	3301      	adds	r3, #1
 80168ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168ce:	b914      	cbnz	r4, 80168d6 <__match+0x12>
 80168d0:	6003      	str	r3, [r0, #0]
 80168d2:	2001      	movs	r0, #1
 80168d4:	bd30      	pop	{r4, r5, pc}
 80168d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80168de:	2d19      	cmp	r5, #25
 80168e0:	bf98      	it	ls
 80168e2:	3220      	addls	r2, #32
 80168e4:	42a2      	cmp	r2, r4
 80168e6:	d0f0      	beq.n	80168ca <__match+0x6>
 80168e8:	2000      	movs	r0, #0
 80168ea:	e7f3      	b.n	80168d4 <__match+0x10>

080168ec <__hexnan>:
 80168ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f0:	680b      	ldr	r3, [r1, #0]
 80168f2:	115e      	asrs	r6, r3, #5
 80168f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80168f8:	f013 031f 	ands.w	r3, r3, #31
 80168fc:	b087      	sub	sp, #28
 80168fe:	bf18      	it	ne
 8016900:	3604      	addne	r6, #4
 8016902:	2500      	movs	r5, #0
 8016904:	1f37      	subs	r7, r6, #4
 8016906:	4690      	mov	r8, r2
 8016908:	6802      	ldr	r2, [r0, #0]
 801690a:	9301      	str	r3, [sp, #4]
 801690c:	4682      	mov	sl, r0
 801690e:	f846 5c04 	str.w	r5, [r6, #-4]
 8016912:	46b9      	mov	r9, r7
 8016914:	463c      	mov	r4, r7
 8016916:	9502      	str	r5, [sp, #8]
 8016918:	46ab      	mov	fp, r5
 801691a:	7851      	ldrb	r1, [r2, #1]
 801691c:	1c53      	adds	r3, r2, #1
 801691e:	9303      	str	r3, [sp, #12]
 8016920:	b341      	cbz	r1, 8016974 <__hexnan+0x88>
 8016922:	4608      	mov	r0, r1
 8016924:	9205      	str	r2, [sp, #20]
 8016926:	9104      	str	r1, [sp, #16]
 8016928:	f7ff fd5f 	bl	80163ea <__hexdig_fun>
 801692c:	2800      	cmp	r0, #0
 801692e:	d14f      	bne.n	80169d0 <__hexnan+0xe4>
 8016930:	9904      	ldr	r1, [sp, #16]
 8016932:	9a05      	ldr	r2, [sp, #20]
 8016934:	2920      	cmp	r1, #32
 8016936:	d818      	bhi.n	801696a <__hexnan+0x7e>
 8016938:	9b02      	ldr	r3, [sp, #8]
 801693a:	459b      	cmp	fp, r3
 801693c:	dd13      	ble.n	8016966 <__hexnan+0x7a>
 801693e:	454c      	cmp	r4, r9
 8016940:	d206      	bcs.n	8016950 <__hexnan+0x64>
 8016942:	2d07      	cmp	r5, #7
 8016944:	dc04      	bgt.n	8016950 <__hexnan+0x64>
 8016946:	462a      	mov	r2, r5
 8016948:	4649      	mov	r1, r9
 801694a:	4620      	mov	r0, r4
 801694c:	f7ff ffa8 	bl	80168a0 <L_shift>
 8016950:	4544      	cmp	r4, r8
 8016952:	d950      	bls.n	80169f6 <__hexnan+0x10a>
 8016954:	2300      	movs	r3, #0
 8016956:	f1a4 0904 	sub.w	r9, r4, #4
 801695a:	f844 3c04 	str.w	r3, [r4, #-4]
 801695e:	f8cd b008 	str.w	fp, [sp, #8]
 8016962:	464c      	mov	r4, r9
 8016964:	461d      	mov	r5, r3
 8016966:	9a03      	ldr	r2, [sp, #12]
 8016968:	e7d7      	b.n	801691a <__hexnan+0x2e>
 801696a:	2929      	cmp	r1, #41	; 0x29
 801696c:	d156      	bne.n	8016a1c <__hexnan+0x130>
 801696e:	3202      	adds	r2, #2
 8016970:	f8ca 2000 	str.w	r2, [sl]
 8016974:	f1bb 0f00 	cmp.w	fp, #0
 8016978:	d050      	beq.n	8016a1c <__hexnan+0x130>
 801697a:	454c      	cmp	r4, r9
 801697c:	d206      	bcs.n	801698c <__hexnan+0xa0>
 801697e:	2d07      	cmp	r5, #7
 8016980:	dc04      	bgt.n	801698c <__hexnan+0xa0>
 8016982:	462a      	mov	r2, r5
 8016984:	4649      	mov	r1, r9
 8016986:	4620      	mov	r0, r4
 8016988:	f7ff ff8a 	bl	80168a0 <L_shift>
 801698c:	4544      	cmp	r4, r8
 801698e:	d934      	bls.n	80169fa <__hexnan+0x10e>
 8016990:	f1a8 0204 	sub.w	r2, r8, #4
 8016994:	4623      	mov	r3, r4
 8016996:	f853 1b04 	ldr.w	r1, [r3], #4
 801699a:	f842 1f04 	str.w	r1, [r2, #4]!
 801699e:	429f      	cmp	r7, r3
 80169a0:	d2f9      	bcs.n	8016996 <__hexnan+0xaa>
 80169a2:	1b3b      	subs	r3, r7, r4
 80169a4:	f023 0303 	bic.w	r3, r3, #3
 80169a8:	3304      	adds	r3, #4
 80169aa:	3401      	adds	r4, #1
 80169ac:	3e03      	subs	r6, #3
 80169ae:	42b4      	cmp	r4, r6
 80169b0:	bf88      	it	hi
 80169b2:	2304      	movhi	r3, #4
 80169b4:	4443      	add	r3, r8
 80169b6:	2200      	movs	r2, #0
 80169b8:	f843 2b04 	str.w	r2, [r3], #4
 80169bc:	429f      	cmp	r7, r3
 80169be:	d2fb      	bcs.n	80169b8 <__hexnan+0xcc>
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	b91b      	cbnz	r3, 80169cc <__hexnan+0xe0>
 80169c4:	4547      	cmp	r7, r8
 80169c6:	d127      	bne.n	8016a18 <__hexnan+0x12c>
 80169c8:	2301      	movs	r3, #1
 80169ca:	603b      	str	r3, [r7, #0]
 80169cc:	2005      	movs	r0, #5
 80169ce:	e026      	b.n	8016a1e <__hexnan+0x132>
 80169d0:	3501      	adds	r5, #1
 80169d2:	2d08      	cmp	r5, #8
 80169d4:	f10b 0b01 	add.w	fp, fp, #1
 80169d8:	dd06      	ble.n	80169e8 <__hexnan+0xfc>
 80169da:	4544      	cmp	r4, r8
 80169dc:	d9c3      	bls.n	8016966 <__hexnan+0x7a>
 80169de:	2300      	movs	r3, #0
 80169e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80169e4:	2501      	movs	r5, #1
 80169e6:	3c04      	subs	r4, #4
 80169e8:	6822      	ldr	r2, [r4, #0]
 80169ea:	f000 000f 	and.w	r0, r0, #15
 80169ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80169f2:	6022      	str	r2, [r4, #0]
 80169f4:	e7b7      	b.n	8016966 <__hexnan+0x7a>
 80169f6:	2508      	movs	r5, #8
 80169f8:	e7b5      	b.n	8016966 <__hexnan+0x7a>
 80169fa:	9b01      	ldr	r3, [sp, #4]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d0df      	beq.n	80169c0 <__hexnan+0xd4>
 8016a00:	f04f 32ff 	mov.w	r2, #4294967295
 8016a04:	f1c3 0320 	rsb	r3, r3, #32
 8016a08:	fa22 f303 	lsr.w	r3, r2, r3
 8016a0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016a10:	401a      	ands	r2, r3
 8016a12:	f846 2c04 	str.w	r2, [r6, #-4]
 8016a16:	e7d3      	b.n	80169c0 <__hexnan+0xd4>
 8016a18:	3f04      	subs	r7, #4
 8016a1a:	e7d1      	b.n	80169c0 <__hexnan+0xd4>
 8016a1c:	2004      	movs	r0, #4
 8016a1e:	b007      	add	sp, #28
 8016a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a24 <_localeconv_r>:
 8016a24:	4800      	ldr	r0, [pc, #0]	; (8016a28 <_localeconv_r+0x4>)
 8016a26:	4770      	bx	lr
 8016a28:	200002e8 	.word	0x200002e8

08016a2c <__retarget_lock_init_recursive>:
 8016a2c:	4770      	bx	lr

08016a2e <__retarget_lock_acquire_recursive>:
 8016a2e:	4770      	bx	lr

08016a30 <__retarget_lock_release_recursive>:
 8016a30:	4770      	bx	lr
	...

08016a34 <_lseek_r>:
 8016a34:	b538      	push	{r3, r4, r5, lr}
 8016a36:	4d07      	ldr	r5, [pc, #28]	; (8016a54 <_lseek_r+0x20>)
 8016a38:	4604      	mov	r4, r0
 8016a3a:	4608      	mov	r0, r1
 8016a3c:	4611      	mov	r1, r2
 8016a3e:	2200      	movs	r2, #0
 8016a40:	602a      	str	r2, [r5, #0]
 8016a42:	461a      	mov	r2, r3
 8016a44:	f7ee ffba 	bl	80059bc <_lseek>
 8016a48:	1c43      	adds	r3, r0, #1
 8016a4a:	d102      	bne.n	8016a52 <_lseek_r+0x1e>
 8016a4c:	682b      	ldr	r3, [r5, #0]
 8016a4e:	b103      	cbz	r3, 8016a52 <_lseek_r+0x1e>
 8016a50:	6023      	str	r3, [r4, #0]
 8016a52:	bd38      	pop	{r3, r4, r5, pc}
 8016a54:	200023cc 	.word	0x200023cc

08016a58 <__swhatbuf_r>:
 8016a58:	b570      	push	{r4, r5, r6, lr}
 8016a5a:	460e      	mov	r6, r1
 8016a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a60:	2900      	cmp	r1, #0
 8016a62:	b096      	sub	sp, #88	; 0x58
 8016a64:	4614      	mov	r4, r2
 8016a66:	461d      	mov	r5, r3
 8016a68:	da08      	bge.n	8016a7c <__swhatbuf_r+0x24>
 8016a6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	602a      	str	r2, [r5, #0]
 8016a72:	061a      	lsls	r2, r3, #24
 8016a74:	d410      	bmi.n	8016a98 <__swhatbuf_r+0x40>
 8016a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a7a:	e00e      	b.n	8016a9a <__swhatbuf_r+0x42>
 8016a7c:	466a      	mov	r2, sp
 8016a7e:	f001 f965 	bl	8017d4c <_fstat_r>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	dbf1      	blt.n	8016a6a <__swhatbuf_r+0x12>
 8016a86:	9a01      	ldr	r2, [sp, #4]
 8016a88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a90:	425a      	negs	r2, r3
 8016a92:	415a      	adcs	r2, r3
 8016a94:	602a      	str	r2, [r5, #0]
 8016a96:	e7ee      	b.n	8016a76 <__swhatbuf_r+0x1e>
 8016a98:	2340      	movs	r3, #64	; 0x40
 8016a9a:	2000      	movs	r0, #0
 8016a9c:	6023      	str	r3, [r4, #0]
 8016a9e:	b016      	add	sp, #88	; 0x58
 8016aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08016aa4 <__smakebuf_r>:
 8016aa4:	898b      	ldrh	r3, [r1, #12]
 8016aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016aa8:	079d      	lsls	r5, r3, #30
 8016aaa:	4606      	mov	r6, r0
 8016aac:	460c      	mov	r4, r1
 8016aae:	d507      	bpl.n	8016ac0 <__smakebuf_r+0x1c>
 8016ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ab4:	6023      	str	r3, [r4, #0]
 8016ab6:	6123      	str	r3, [r4, #16]
 8016ab8:	2301      	movs	r3, #1
 8016aba:	6163      	str	r3, [r4, #20]
 8016abc:	b002      	add	sp, #8
 8016abe:	bd70      	pop	{r4, r5, r6, pc}
 8016ac0:	ab01      	add	r3, sp, #4
 8016ac2:	466a      	mov	r2, sp
 8016ac4:	f7ff ffc8 	bl	8016a58 <__swhatbuf_r>
 8016ac8:	9900      	ldr	r1, [sp, #0]
 8016aca:	4605      	mov	r5, r0
 8016acc:	4630      	mov	r0, r6
 8016ace:	f000 fd95 	bl	80175fc <_malloc_r>
 8016ad2:	b948      	cbnz	r0, 8016ae8 <__smakebuf_r+0x44>
 8016ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ad8:	059a      	lsls	r2, r3, #22
 8016ada:	d4ef      	bmi.n	8016abc <__smakebuf_r+0x18>
 8016adc:	f023 0303 	bic.w	r3, r3, #3
 8016ae0:	f043 0302 	orr.w	r3, r3, #2
 8016ae4:	81a3      	strh	r3, [r4, #12]
 8016ae6:	e7e3      	b.n	8016ab0 <__smakebuf_r+0xc>
 8016ae8:	4b0d      	ldr	r3, [pc, #52]	; (8016b20 <__smakebuf_r+0x7c>)
 8016aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8016aec:	89a3      	ldrh	r3, [r4, #12]
 8016aee:	6020      	str	r0, [r4, #0]
 8016af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016af4:	81a3      	strh	r3, [r4, #12]
 8016af6:	9b00      	ldr	r3, [sp, #0]
 8016af8:	6163      	str	r3, [r4, #20]
 8016afa:	9b01      	ldr	r3, [sp, #4]
 8016afc:	6120      	str	r0, [r4, #16]
 8016afe:	b15b      	cbz	r3, 8016b18 <__smakebuf_r+0x74>
 8016b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b04:	4630      	mov	r0, r6
 8016b06:	f001 f933 	bl	8017d70 <_isatty_r>
 8016b0a:	b128      	cbz	r0, 8016b18 <__smakebuf_r+0x74>
 8016b0c:	89a3      	ldrh	r3, [r4, #12]
 8016b0e:	f023 0303 	bic.w	r3, r3, #3
 8016b12:	f043 0301 	orr.w	r3, r3, #1
 8016b16:	81a3      	strh	r3, [r4, #12]
 8016b18:	89a0      	ldrh	r0, [r4, #12]
 8016b1a:	4305      	orrs	r5, r0
 8016b1c:	81a5      	strh	r5, [r4, #12]
 8016b1e:	e7cd      	b.n	8016abc <__smakebuf_r+0x18>
 8016b20:	080161a5 	.word	0x080161a5

08016b24 <malloc>:
 8016b24:	4b02      	ldr	r3, [pc, #8]	; (8016b30 <malloc+0xc>)
 8016b26:	4601      	mov	r1, r0
 8016b28:	6818      	ldr	r0, [r3, #0]
 8016b2a:	f000 bd67 	b.w	80175fc <_malloc_r>
 8016b2e:	bf00      	nop
 8016b30:	20000190 	.word	0x20000190

08016b34 <__ascii_mbtowc>:
 8016b34:	b082      	sub	sp, #8
 8016b36:	b901      	cbnz	r1, 8016b3a <__ascii_mbtowc+0x6>
 8016b38:	a901      	add	r1, sp, #4
 8016b3a:	b142      	cbz	r2, 8016b4e <__ascii_mbtowc+0x1a>
 8016b3c:	b14b      	cbz	r3, 8016b52 <__ascii_mbtowc+0x1e>
 8016b3e:	7813      	ldrb	r3, [r2, #0]
 8016b40:	600b      	str	r3, [r1, #0]
 8016b42:	7812      	ldrb	r2, [r2, #0]
 8016b44:	1e10      	subs	r0, r2, #0
 8016b46:	bf18      	it	ne
 8016b48:	2001      	movne	r0, #1
 8016b4a:	b002      	add	sp, #8
 8016b4c:	4770      	bx	lr
 8016b4e:	4610      	mov	r0, r2
 8016b50:	e7fb      	b.n	8016b4a <__ascii_mbtowc+0x16>
 8016b52:	f06f 0001 	mvn.w	r0, #1
 8016b56:	e7f8      	b.n	8016b4a <__ascii_mbtowc+0x16>

08016b58 <memcpy>:
 8016b58:	440a      	add	r2, r1
 8016b5a:	4291      	cmp	r1, r2
 8016b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b60:	d100      	bne.n	8016b64 <memcpy+0xc>
 8016b62:	4770      	bx	lr
 8016b64:	b510      	push	{r4, lr}
 8016b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b6e:	4291      	cmp	r1, r2
 8016b70:	d1f9      	bne.n	8016b66 <memcpy+0xe>
 8016b72:	bd10      	pop	{r4, pc}

08016b74 <_Balloc>:
 8016b74:	b570      	push	{r4, r5, r6, lr}
 8016b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016b78:	4604      	mov	r4, r0
 8016b7a:	460d      	mov	r5, r1
 8016b7c:	b976      	cbnz	r6, 8016b9c <_Balloc+0x28>
 8016b7e:	2010      	movs	r0, #16
 8016b80:	f7ff ffd0 	bl	8016b24 <malloc>
 8016b84:	4602      	mov	r2, r0
 8016b86:	6260      	str	r0, [r4, #36]	; 0x24
 8016b88:	b920      	cbnz	r0, 8016b94 <_Balloc+0x20>
 8016b8a:	4b18      	ldr	r3, [pc, #96]	; (8016bec <_Balloc+0x78>)
 8016b8c:	4818      	ldr	r0, [pc, #96]	; (8016bf0 <_Balloc+0x7c>)
 8016b8e:	2166      	movs	r1, #102	; 0x66
 8016b90:	f001 f8ac 	bl	8017cec <__assert_func>
 8016b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b98:	6006      	str	r6, [r0, #0]
 8016b9a:	60c6      	str	r6, [r0, #12]
 8016b9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016b9e:	68f3      	ldr	r3, [r6, #12]
 8016ba0:	b183      	cbz	r3, 8016bc4 <_Balloc+0x50>
 8016ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ba4:	68db      	ldr	r3, [r3, #12]
 8016ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016baa:	b9b8      	cbnz	r0, 8016bdc <_Balloc+0x68>
 8016bac:	2101      	movs	r1, #1
 8016bae:	fa01 f605 	lsl.w	r6, r1, r5
 8016bb2:	1d72      	adds	r2, r6, #5
 8016bb4:	0092      	lsls	r2, r2, #2
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f000 fc9d 	bl	80174f6 <_calloc_r>
 8016bbc:	b160      	cbz	r0, 8016bd8 <_Balloc+0x64>
 8016bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016bc2:	e00e      	b.n	8016be2 <_Balloc+0x6e>
 8016bc4:	2221      	movs	r2, #33	; 0x21
 8016bc6:	2104      	movs	r1, #4
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f000 fc94 	bl	80174f6 <_calloc_r>
 8016bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bd0:	60f0      	str	r0, [r6, #12]
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d1e4      	bne.n	8016ba2 <_Balloc+0x2e>
 8016bd8:	2000      	movs	r0, #0
 8016bda:	bd70      	pop	{r4, r5, r6, pc}
 8016bdc:	6802      	ldr	r2, [r0, #0]
 8016bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016be2:	2300      	movs	r3, #0
 8016be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016be8:	e7f7      	b.n	8016bda <_Balloc+0x66>
 8016bea:	bf00      	nop
 8016bec:	08019c1e 	.word	0x08019c1e
 8016bf0:	08019d80 	.word	0x08019d80

08016bf4 <_Bfree>:
 8016bf4:	b570      	push	{r4, r5, r6, lr}
 8016bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	b976      	cbnz	r6, 8016c1c <_Bfree+0x28>
 8016bfe:	2010      	movs	r0, #16
 8016c00:	f7ff ff90 	bl	8016b24 <malloc>
 8016c04:	4602      	mov	r2, r0
 8016c06:	6268      	str	r0, [r5, #36]	; 0x24
 8016c08:	b920      	cbnz	r0, 8016c14 <_Bfree+0x20>
 8016c0a:	4b09      	ldr	r3, [pc, #36]	; (8016c30 <_Bfree+0x3c>)
 8016c0c:	4809      	ldr	r0, [pc, #36]	; (8016c34 <_Bfree+0x40>)
 8016c0e:	218a      	movs	r1, #138	; 0x8a
 8016c10:	f001 f86c 	bl	8017cec <__assert_func>
 8016c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016c18:	6006      	str	r6, [r0, #0]
 8016c1a:	60c6      	str	r6, [r0, #12]
 8016c1c:	b13c      	cbz	r4, 8016c2e <_Bfree+0x3a>
 8016c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016c20:	6862      	ldr	r2, [r4, #4]
 8016c22:	68db      	ldr	r3, [r3, #12]
 8016c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016c28:	6021      	str	r1, [r4, #0]
 8016c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016c2e:	bd70      	pop	{r4, r5, r6, pc}
 8016c30:	08019c1e 	.word	0x08019c1e
 8016c34:	08019d80 	.word	0x08019d80

08016c38 <__multadd>:
 8016c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c3c:	690d      	ldr	r5, [r1, #16]
 8016c3e:	4607      	mov	r7, r0
 8016c40:	460c      	mov	r4, r1
 8016c42:	461e      	mov	r6, r3
 8016c44:	f101 0c14 	add.w	ip, r1, #20
 8016c48:	2000      	movs	r0, #0
 8016c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8016c4e:	b299      	uxth	r1, r3
 8016c50:	fb02 6101 	mla	r1, r2, r1, r6
 8016c54:	0c1e      	lsrs	r6, r3, #16
 8016c56:	0c0b      	lsrs	r3, r1, #16
 8016c58:	fb02 3306 	mla	r3, r2, r6, r3
 8016c5c:	b289      	uxth	r1, r1
 8016c5e:	3001      	adds	r0, #1
 8016c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016c64:	4285      	cmp	r5, r0
 8016c66:	f84c 1b04 	str.w	r1, [ip], #4
 8016c6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016c6e:	dcec      	bgt.n	8016c4a <__multadd+0x12>
 8016c70:	b30e      	cbz	r6, 8016cb6 <__multadd+0x7e>
 8016c72:	68a3      	ldr	r3, [r4, #8]
 8016c74:	42ab      	cmp	r3, r5
 8016c76:	dc19      	bgt.n	8016cac <__multadd+0x74>
 8016c78:	6861      	ldr	r1, [r4, #4]
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	3101      	adds	r1, #1
 8016c7e:	f7ff ff79 	bl	8016b74 <_Balloc>
 8016c82:	4680      	mov	r8, r0
 8016c84:	b928      	cbnz	r0, 8016c92 <__multadd+0x5a>
 8016c86:	4602      	mov	r2, r0
 8016c88:	4b0c      	ldr	r3, [pc, #48]	; (8016cbc <__multadd+0x84>)
 8016c8a:	480d      	ldr	r0, [pc, #52]	; (8016cc0 <__multadd+0x88>)
 8016c8c:	21b5      	movs	r1, #181	; 0xb5
 8016c8e:	f001 f82d 	bl	8017cec <__assert_func>
 8016c92:	6922      	ldr	r2, [r4, #16]
 8016c94:	3202      	adds	r2, #2
 8016c96:	f104 010c 	add.w	r1, r4, #12
 8016c9a:	0092      	lsls	r2, r2, #2
 8016c9c:	300c      	adds	r0, #12
 8016c9e:	f7ff ff5b 	bl	8016b58 <memcpy>
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	4638      	mov	r0, r7
 8016ca6:	f7ff ffa5 	bl	8016bf4 <_Bfree>
 8016caa:	4644      	mov	r4, r8
 8016cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016cb0:	3501      	adds	r5, #1
 8016cb2:	615e      	str	r6, [r3, #20]
 8016cb4:	6125      	str	r5, [r4, #16]
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cbc:	08019c90 	.word	0x08019c90
 8016cc0:	08019d80 	.word	0x08019d80

08016cc4 <__s2b>:
 8016cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cc8:	460c      	mov	r4, r1
 8016cca:	4615      	mov	r5, r2
 8016ccc:	461f      	mov	r7, r3
 8016cce:	2209      	movs	r2, #9
 8016cd0:	3308      	adds	r3, #8
 8016cd2:	4606      	mov	r6, r0
 8016cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016cd8:	2100      	movs	r1, #0
 8016cda:	2201      	movs	r2, #1
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	db09      	blt.n	8016cf4 <__s2b+0x30>
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f7ff ff47 	bl	8016b74 <_Balloc>
 8016ce6:	b940      	cbnz	r0, 8016cfa <__s2b+0x36>
 8016ce8:	4602      	mov	r2, r0
 8016cea:	4b19      	ldr	r3, [pc, #100]	; (8016d50 <__s2b+0x8c>)
 8016cec:	4819      	ldr	r0, [pc, #100]	; (8016d54 <__s2b+0x90>)
 8016cee:	21ce      	movs	r1, #206	; 0xce
 8016cf0:	f000 fffc 	bl	8017cec <__assert_func>
 8016cf4:	0052      	lsls	r2, r2, #1
 8016cf6:	3101      	adds	r1, #1
 8016cf8:	e7f0      	b.n	8016cdc <__s2b+0x18>
 8016cfa:	9b08      	ldr	r3, [sp, #32]
 8016cfc:	6143      	str	r3, [r0, #20]
 8016cfe:	2d09      	cmp	r5, #9
 8016d00:	f04f 0301 	mov.w	r3, #1
 8016d04:	6103      	str	r3, [r0, #16]
 8016d06:	dd16      	ble.n	8016d36 <__s2b+0x72>
 8016d08:	f104 0909 	add.w	r9, r4, #9
 8016d0c:	46c8      	mov	r8, r9
 8016d0e:	442c      	add	r4, r5
 8016d10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016d14:	4601      	mov	r1, r0
 8016d16:	3b30      	subs	r3, #48	; 0x30
 8016d18:	220a      	movs	r2, #10
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f7ff ff8c 	bl	8016c38 <__multadd>
 8016d20:	45a0      	cmp	r8, r4
 8016d22:	d1f5      	bne.n	8016d10 <__s2b+0x4c>
 8016d24:	f1a5 0408 	sub.w	r4, r5, #8
 8016d28:	444c      	add	r4, r9
 8016d2a:	1b2d      	subs	r5, r5, r4
 8016d2c:	1963      	adds	r3, r4, r5
 8016d2e:	42bb      	cmp	r3, r7
 8016d30:	db04      	blt.n	8016d3c <__s2b+0x78>
 8016d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d36:	340a      	adds	r4, #10
 8016d38:	2509      	movs	r5, #9
 8016d3a:	e7f6      	b.n	8016d2a <__s2b+0x66>
 8016d3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016d40:	4601      	mov	r1, r0
 8016d42:	3b30      	subs	r3, #48	; 0x30
 8016d44:	220a      	movs	r2, #10
 8016d46:	4630      	mov	r0, r6
 8016d48:	f7ff ff76 	bl	8016c38 <__multadd>
 8016d4c:	e7ee      	b.n	8016d2c <__s2b+0x68>
 8016d4e:	bf00      	nop
 8016d50:	08019c90 	.word	0x08019c90
 8016d54:	08019d80 	.word	0x08019d80

08016d58 <__hi0bits>:
 8016d58:	0c03      	lsrs	r3, r0, #16
 8016d5a:	041b      	lsls	r3, r3, #16
 8016d5c:	b9d3      	cbnz	r3, 8016d94 <__hi0bits+0x3c>
 8016d5e:	0400      	lsls	r0, r0, #16
 8016d60:	2310      	movs	r3, #16
 8016d62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016d66:	bf04      	itt	eq
 8016d68:	0200      	lsleq	r0, r0, #8
 8016d6a:	3308      	addeq	r3, #8
 8016d6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016d70:	bf04      	itt	eq
 8016d72:	0100      	lsleq	r0, r0, #4
 8016d74:	3304      	addeq	r3, #4
 8016d76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016d7a:	bf04      	itt	eq
 8016d7c:	0080      	lsleq	r0, r0, #2
 8016d7e:	3302      	addeq	r3, #2
 8016d80:	2800      	cmp	r0, #0
 8016d82:	db05      	blt.n	8016d90 <__hi0bits+0x38>
 8016d84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016d88:	f103 0301 	add.w	r3, r3, #1
 8016d8c:	bf08      	it	eq
 8016d8e:	2320      	moveq	r3, #32
 8016d90:	4618      	mov	r0, r3
 8016d92:	4770      	bx	lr
 8016d94:	2300      	movs	r3, #0
 8016d96:	e7e4      	b.n	8016d62 <__hi0bits+0xa>

08016d98 <__lo0bits>:
 8016d98:	6803      	ldr	r3, [r0, #0]
 8016d9a:	f013 0207 	ands.w	r2, r3, #7
 8016d9e:	4601      	mov	r1, r0
 8016da0:	d00b      	beq.n	8016dba <__lo0bits+0x22>
 8016da2:	07da      	lsls	r2, r3, #31
 8016da4:	d423      	bmi.n	8016dee <__lo0bits+0x56>
 8016da6:	0798      	lsls	r0, r3, #30
 8016da8:	bf49      	itett	mi
 8016daa:	085b      	lsrmi	r3, r3, #1
 8016dac:	089b      	lsrpl	r3, r3, #2
 8016dae:	2001      	movmi	r0, #1
 8016db0:	600b      	strmi	r3, [r1, #0]
 8016db2:	bf5c      	itt	pl
 8016db4:	600b      	strpl	r3, [r1, #0]
 8016db6:	2002      	movpl	r0, #2
 8016db8:	4770      	bx	lr
 8016dba:	b298      	uxth	r0, r3
 8016dbc:	b9a8      	cbnz	r0, 8016dea <__lo0bits+0x52>
 8016dbe:	0c1b      	lsrs	r3, r3, #16
 8016dc0:	2010      	movs	r0, #16
 8016dc2:	b2da      	uxtb	r2, r3
 8016dc4:	b90a      	cbnz	r2, 8016dca <__lo0bits+0x32>
 8016dc6:	3008      	adds	r0, #8
 8016dc8:	0a1b      	lsrs	r3, r3, #8
 8016dca:	071a      	lsls	r2, r3, #28
 8016dcc:	bf04      	itt	eq
 8016dce:	091b      	lsreq	r3, r3, #4
 8016dd0:	3004      	addeq	r0, #4
 8016dd2:	079a      	lsls	r2, r3, #30
 8016dd4:	bf04      	itt	eq
 8016dd6:	089b      	lsreq	r3, r3, #2
 8016dd8:	3002      	addeq	r0, #2
 8016dda:	07da      	lsls	r2, r3, #31
 8016ddc:	d403      	bmi.n	8016de6 <__lo0bits+0x4e>
 8016dde:	085b      	lsrs	r3, r3, #1
 8016de0:	f100 0001 	add.w	r0, r0, #1
 8016de4:	d005      	beq.n	8016df2 <__lo0bits+0x5a>
 8016de6:	600b      	str	r3, [r1, #0]
 8016de8:	4770      	bx	lr
 8016dea:	4610      	mov	r0, r2
 8016dec:	e7e9      	b.n	8016dc2 <__lo0bits+0x2a>
 8016dee:	2000      	movs	r0, #0
 8016df0:	4770      	bx	lr
 8016df2:	2020      	movs	r0, #32
 8016df4:	4770      	bx	lr
	...

08016df8 <__i2b>:
 8016df8:	b510      	push	{r4, lr}
 8016dfa:	460c      	mov	r4, r1
 8016dfc:	2101      	movs	r1, #1
 8016dfe:	f7ff feb9 	bl	8016b74 <_Balloc>
 8016e02:	4602      	mov	r2, r0
 8016e04:	b928      	cbnz	r0, 8016e12 <__i2b+0x1a>
 8016e06:	4b05      	ldr	r3, [pc, #20]	; (8016e1c <__i2b+0x24>)
 8016e08:	4805      	ldr	r0, [pc, #20]	; (8016e20 <__i2b+0x28>)
 8016e0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016e0e:	f000 ff6d 	bl	8017cec <__assert_func>
 8016e12:	2301      	movs	r3, #1
 8016e14:	6144      	str	r4, [r0, #20]
 8016e16:	6103      	str	r3, [r0, #16]
 8016e18:	bd10      	pop	{r4, pc}
 8016e1a:	bf00      	nop
 8016e1c:	08019c90 	.word	0x08019c90
 8016e20:	08019d80 	.word	0x08019d80

08016e24 <__multiply>:
 8016e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e28:	4691      	mov	r9, r2
 8016e2a:	690a      	ldr	r2, [r1, #16]
 8016e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	bfb8      	it	lt
 8016e34:	460b      	movlt	r3, r1
 8016e36:	460c      	mov	r4, r1
 8016e38:	bfbc      	itt	lt
 8016e3a:	464c      	movlt	r4, r9
 8016e3c:	4699      	movlt	r9, r3
 8016e3e:	6927      	ldr	r7, [r4, #16]
 8016e40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016e44:	68a3      	ldr	r3, [r4, #8]
 8016e46:	6861      	ldr	r1, [r4, #4]
 8016e48:	eb07 060a 	add.w	r6, r7, sl
 8016e4c:	42b3      	cmp	r3, r6
 8016e4e:	b085      	sub	sp, #20
 8016e50:	bfb8      	it	lt
 8016e52:	3101      	addlt	r1, #1
 8016e54:	f7ff fe8e 	bl	8016b74 <_Balloc>
 8016e58:	b930      	cbnz	r0, 8016e68 <__multiply+0x44>
 8016e5a:	4602      	mov	r2, r0
 8016e5c:	4b44      	ldr	r3, [pc, #272]	; (8016f70 <__multiply+0x14c>)
 8016e5e:	4845      	ldr	r0, [pc, #276]	; (8016f74 <__multiply+0x150>)
 8016e60:	f240 115d 	movw	r1, #349	; 0x15d
 8016e64:	f000 ff42 	bl	8017cec <__assert_func>
 8016e68:	f100 0514 	add.w	r5, r0, #20
 8016e6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016e70:	462b      	mov	r3, r5
 8016e72:	2200      	movs	r2, #0
 8016e74:	4543      	cmp	r3, r8
 8016e76:	d321      	bcc.n	8016ebc <__multiply+0x98>
 8016e78:	f104 0314 	add.w	r3, r4, #20
 8016e7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016e80:	f109 0314 	add.w	r3, r9, #20
 8016e84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016e88:	9202      	str	r2, [sp, #8]
 8016e8a:	1b3a      	subs	r2, r7, r4
 8016e8c:	3a15      	subs	r2, #21
 8016e8e:	f022 0203 	bic.w	r2, r2, #3
 8016e92:	3204      	adds	r2, #4
 8016e94:	f104 0115 	add.w	r1, r4, #21
 8016e98:	428f      	cmp	r7, r1
 8016e9a:	bf38      	it	cc
 8016e9c:	2204      	movcc	r2, #4
 8016e9e:	9201      	str	r2, [sp, #4]
 8016ea0:	9a02      	ldr	r2, [sp, #8]
 8016ea2:	9303      	str	r3, [sp, #12]
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d80c      	bhi.n	8016ec2 <__multiply+0x9e>
 8016ea8:	2e00      	cmp	r6, #0
 8016eaa:	dd03      	ble.n	8016eb4 <__multiply+0x90>
 8016eac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d05a      	beq.n	8016f6a <__multiply+0x146>
 8016eb4:	6106      	str	r6, [r0, #16]
 8016eb6:	b005      	add	sp, #20
 8016eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebc:	f843 2b04 	str.w	r2, [r3], #4
 8016ec0:	e7d8      	b.n	8016e74 <__multiply+0x50>
 8016ec2:	f8b3 a000 	ldrh.w	sl, [r3]
 8016ec6:	f1ba 0f00 	cmp.w	sl, #0
 8016eca:	d024      	beq.n	8016f16 <__multiply+0xf2>
 8016ecc:	f104 0e14 	add.w	lr, r4, #20
 8016ed0:	46a9      	mov	r9, r5
 8016ed2:	f04f 0c00 	mov.w	ip, #0
 8016ed6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016eda:	f8d9 1000 	ldr.w	r1, [r9]
 8016ede:	fa1f fb82 	uxth.w	fp, r2
 8016ee2:	b289      	uxth	r1, r1
 8016ee4:	fb0a 110b 	mla	r1, sl, fp, r1
 8016ee8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016eec:	f8d9 2000 	ldr.w	r2, [r9]
 8016ef0:	4461      	add	r1, ip
 8016ef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016ef6:	fb0a c20b 	mla	r2, sl, fp, ip
 8016efa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016efe:	b289      	uxth	r1, r1
 8016f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016f04:	4577      	cmp	r7, lr
 8016f06:	f849 1b04 	str.w	r1, [r9], #4
 8016f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016f0e:	d8e2      	bhi.n	8016ed6 <__multiply+0xb2>
 8016f10:	9a01      	ldr	r2, [sp, #4]
 8016f12:	f845 c002 	str.w	ip, [r5, r2]
 8016f16:	9a03      	ldr	r2, [sp, #12]
 8016f18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016f1c:	3304      	adds	r3, #4
 8016f1e:	f1b9 0f00 	cmp.w	r9, #0
 8016f22:	d020      	beq.n	8016f66 <__multiply+0x142>
 8016f24:	6829      	ldr	r1, [r5, #0]
 8016f26:	f104 0c14 	add.w	ip, r4, #20
 8016f2a:	46ae      	mov	lr, r5
 8016f2c:	f04f 0a00 	mov.w	sl, #0
 8016f30:	f8bc b000 	ldrh.w	fp, [ip]
 8016f34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016f38:	fb09 220b 	mla	r2, r9, fp, r2
 8016f3c:	4492      	add	sl, r2
 8016f3e:	b289      	uxth	r1, r1
 8016f40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016f44:	f84e 1b04 	str.w	r1, [lr], #4
 8016f48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016f4c:	f8be 1000 	ldrh.w	r1, [lr]
 8016f50:	0c12      	lsrs	r2, r2, #16
 8016f52:	fb09 1102 	mla	r1, r9, r2, r1
 8016f56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016f5a:	4567      	cmp	r7, ip
 8016f5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016f60:	d8e6      	bhi.n	8016f30 <__multiply+0x10c>
 8016f62:	9a01      	ldr	r2, [sp, #4]
 8016f64:	50a9      	str	r1, [r5, r2]
 8016f66:	3504      	adds	r5, #4
 8016f68:	e79a      	b.n	8016ea0 <__multiply+0x7c>
 8016f6a:	3e01      	subs	r6, #1
 8016f6c:	e79c      	b.n	8016ea8 <__multiply+0x84>
 8016f6e:	bf00      	nop
 8016f70:	08019c90 	.word	0x08019c90
 8016f74:	08019d80 	.word	0x08019d80

08016f78 <__pow5mult>:
 8016f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f7c:	4615      	mov	r5, r2
 8016f7e:	f012 0203 	ands.w	r2, r2, #3
 8016f82:	4606      	mov	r6, r0
 8016f84:	460f      	mov	r7, r1
 8016f86:	d007      	beq.n	8016f98 <__pow5mult+0x20>
 8016f88:	4c25      	ldr	r4, [pc, #148]	; (8017020 <__pow5mult+0xa8>)
 8016f8a:	3a01      	subs	r2, #1
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016f92:	f7ff fe51 	bl	8016c38 <__multadd>
 8016f96:	4607      	mov	r7, r0
 8016f98:	10ad      	asrs	r5, r5, #2
 8016f9a:	d03d      	beq.n	8017018 <__pow5mult+0xa0>
 8016f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016f9e:	b97c      	cbnz	r4, 8016fc0 <__pow5mult+0x48>
 8016fa0:	2010      	movs	r0, #16
 8016fa2:	f7ff fdbf 	bl	8016b24 <malloc>
 8016fa6:	4602      	mov	r2, r0
 8016fa8:	6270      	str	r0, [r6, #36]	; 0x24
 8016faa:	b928      	cbnz	r0, 8016fb8 <__pow5mult+0x40>
 8016fac:	4b1d      	ldr	r3, [pc, #116]	; (8017024 <__pow5mult+0xac>)
 8016fae:	481e      	ldr	r0, [pc, #120]	; (8017028 <__pow5mult+0xb0>)
 8016fb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016fb4:	f000 fe9a 	bl	8017cec <__assert_func>
 8016fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016fbc:	6004      	str	r4, [r0, #0]
 8016fbe:	60c4      	str	r4, [r0, #12]
 8016fc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016fc8:	b94c      	cbnz	r4, 8016fde <__pow5mult+0x66>
 8016fca:	f240 2171 	movw	r1, #625	; 0x271
 8016fce:	4630      	mov	r0, r6
 8016fd0:	f7ff ff12 	bl	8016df8 <__i2b>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016fda:	4604      	mov	r4, r0
 8016fdc:	6003      	str	r3, [r0, #0]
 8016fde:	f04f 0900 	mov.w	r9, #0
 8016fe2:	07eb      	lsls	r3, r5, #31
 8016fe4:	d50a      	bpl.n	8016ffc <__pow5mult+0x84>
 8016fe6:	4639      	mov	r1, r7
 8016fe8:	4622      	mov	r2, r4
 8016fea:	4630      	mov	r0, r6
 8016fec:	f7ff ff1a 	bl	8016e24 <__multiply>
 8016ff0:	4639      	mov	r1, r7
 8016ff2:	4680      	mov	r8, r0
 8016ff4:	4630      	mov	r0, r6
 8016ff6:	f7ff fdfd 	bl	8016bf4 <_Bfree>
 8016ffa:	4647      	mov	r7, r8
 8016ffc:	106d      	asrs	r5, r5, #1
 8016ffe:	d00b      	beq.n	8017018 <__pow5mult+0xa0>
 8017000:	6820      	ldr	r0, [r4, #0]
 8017002:	b938      	cbnz	r0, 8017014 <__pow5mult+0x9c>
 8017004:	4622      	mov	r2, r4
 8017006:	4621      	mov	r1, r4
 8017008:	4630      	mov	r0, r6
 801700a:	f7ff ff0b 	bl	8016e24 <__multiply>
 801700e:	6020      	str	r0, [r4, #0]
 8017010:	f8c0 9000 	str.w	r9, [r0]
 8017014:	4604      	mov	r4, r0
 8017016:	e7e4      	b.n	8016fe2 <__pow5mult+0x6a>
 8017018:	4638      	mov	r0, r7
 801701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801701e:	bf00      	nop
 8017020:	08019ed0 	.word	0x08019ed0
 8017024:	08019c1e 	.word	0x08019c1e
 8017028:	08019d80 	.word	0x08019d80

0801702c <__lshift>:
 801702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017030:	460c      	mov	r4, r1
 8017032:	6849      	ldr	r1, [r1, #4]
 8017034:	6923      	ldr	r3, [r4, #16]
 8017036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801703a:	68a3      	ldr	r3, [r4, #8]
 801703c:	4607      	mov	r7, r0
 801703e:	4691      	mov	r9, r2
 8017040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017044:	f108 0601 	add.w	r6, r8, #1
 8017048:	42b3      	cmp	r3, r6
 801704a:	db0b      	blt.n	8017064 <__lshift+0x38>
 801704c:	4638      	mov	r0, r7
 801704e:	f7ff fd91 	bl	8016b74 <_Balloc>
 8017052:	4605      	mov	r5, r0
 8017054:	b948      	cbnz	r0, 801706a <__lshift+0x3e>
 8017056:	4602      	mov	r2, r0
 8017058:	4b2a      	ldr	r3, [pc, #168]	; (8017104 <__lshift+0xd8>)
 801705a:	482b      	ldr	r0, [pc, #172]	; (8017108 <__lshift+0xdc>)
 801705c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017060:	f000 fe44 	bl	8017cec <__assert_func>
 8017064:	3101      	adds	r1, #1
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	e7ee      	b.n	8017048 <__lshift+0x1c>
 801706a:	2300      	movs	r3, #0
 801706c:	f100 0114 	add.w	r1, r0, #20
 8017070:	f100 0210 	add.w	r2, r0, #16
 8017074:	4618      	mov	r0, r3
 8017076:	4553      	cmp	r3, sl
 8017078:	db37      	blt.n	80170ea <__lshift+0xbe>
 801707a:	6920      	ldr	r0, [r4, #16]
 801707c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017080:	f104 0314 	add.w	r3, r4, #20
 8017084:	f019 091f 	ands.w	r9, r9, #31
 8017088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801708c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017090:	d02f      	beq.n	80170f2 <__lshift+0xc6>
 8017092:	f1c9 0e20 	rsb	lr, r9, #32
 8017096:	468a      	mov	sl, r1
 8017098:	f04f 0c00 	mov.w	ip, #0
 801709c:	681a      	ldr	r2, [r3, #0]
 801709e:	fa02 f209 	lsl.w	r2, r2, r9
 80170a2:	ea42 020c 	orr.w	r2, r2, ip
 80170a6:	f84a 2b04 	str.w	r2, [sl], #4
 80170aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80170ae:	4298      	cmp	r0, r3
 80170b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80170b4:	d8f2      	bhi.n	801709c <__lshift+0x70>
 80170b6:	1b03      	subs	r3, r0, r4
 80170b8:	3b15      	subs	r3, #21
 80170ba:	f023 0303 	bic.w	r3, r3, #3
 80170be:	3304      	adds	r3, #4
 80170c0:	f104 0215 	add.w	r2, r4, #21
 80170c4:	4290      	cmp	r0, r2
 80170c6:	bf38      	it	cc
 80170c8:	2304      	movcc	r3, #4
 80170ca:	f841 c003 	str.w	ip, [r1, r3]
 80170ce:	f1bc 0f00 	cmp.w	ip, #0
 80170d2:	d001      	beq.n	80170d8 <__lshift+0xac>
 80170d4:	f108 0602 	add.w	r6, r8, #2
 80170d8:	3e01      	subs	r6, #1
 80170da:	4638      	mov	r0, r7
 80170dc:	612e      	str	r6, [r5, #16]
 80170de:	4621      	mov	r1, r4
 80170e0:	f7ff fd88 	bl	8016bf4 <_Bfree>
 80170e4:	4628      	mov	r0, r5
 80170e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80170ee:	3301      	adds	r3, #1
 80170f0:	e7c1      	b.n	8017076 <__lshift+0x4a>
 80170f2:	3904      	subs	r1, #4
 80170f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80170f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80170fc:	4298      	cmp	r0, r3
 80170fe:	d8f9      	bhi.n	80170f4 <__lshift+0xc8>
 8017100:	e7ea      	b.n	80170d8 <__lshift+0xac>
 8017102:	bf00      	nop
 8017104:	08019c90 	.word	0x08019c90
 8017108:	08019d80 	.word	0x08019d80

0801710c <__mcmp>:
 801710c:	b530      	push	{r4, r5, lr}
 801710e:	6902      	ldr	r2, [r0, #16]
 8017110:	690c      	ldr	r4, [r1, #16]
 8017112:	1b12      	subs	r2, r2, r4
 8017114:	d10e      	bne.n	8017134 <__mcmp+0x28>
 8017116:	f100 0314 	add.w	r3, r0, #20
 801711a:	3114      	adds	r1, #20
 801711c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017120:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017124:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017128:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801712c:	42a5      	cmp	r5, r4
 801712e:	d003      	beq.n	8017138 <__mcmp+0x2c>
 8017130:	d305      	bcc.n	801713e <__mcmp+0x32>
 8017132:	2201      	movs	r2, #1
 8017134:	4610      	mov	r0, r2
 8017136:	bd30      	pop	{r4, r5, pc}
 8017138:	4283      	cmp	r3, r0
 801713a:	d3f3      	bcc.n	8017124 <__mcmp+0x18>
 801713c:	e7fa      	b.n	8017134 <__mcmp+0x28>
 801713e:	f04f 32ff 	mov.w	r2, #4294967295
 8017142:	e7f7      	b.n	8017134 <__mcmp+0x28>

08017144 <__mdiff>:
 8017144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017148:	460c      	mov	r4, r1
 801714a:	4606      	mov	r6, r0
 801714c:	4611      	mov	r1, r2
 801714e:	4620      	mov	r0, r4
 8017150:	4690      	mov	r8, r2
 8017152:	f7ff ffdb 	bl	801710c <__mcmp>
 8017156:	1e05      	subs	r5, r0, #0
 8017158:	d110      	bne.n	801717c <__mdiff+0x38>
 801715a:	4629      	mov	r1, r5
 801715c:	4630      	mov	r0, r6
 801715e:	f7ff fd09 	bl	8016b74 <_Balloc>
 8017162:	b930      	cbnz	r0, 8017172 <__mdiff+0x2e>
 8017164:	4b3a      	ldr	r3, [pc, #232]	; (8017250 <__mdiff+0x10c>)
 8017166:	4602      	mov	r2, r0
 8017168:	f240 2132 	movw	r1, #562	; 0x232
 801716c:	4839      	ldr	r0, [pc, #228]	; (8017254 <__mdiff+0x110>)
 801716e:	f000 fdbd 	bl	8017cec <__assert_func>
 8017172:	2301      	movs	r3, #1
 8017174:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801717c:	bfa4      	itt	ge
 801717e:	4643      	movge	r3, r8
 8017180:	46a0      	movge	r8, r4
 8017182:	4630      	mov	r0, r6
 8017184:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017188:	bfa6      	itte	ge
 801718a:	461c      	movge	r4, r3
 801718c:	2500      	movge	r5, #0
 801718e:	2501      	movlt	r5, #1
 8017190:	f7ff fcf0 	bl	8016b74 <_Balloc>
 8017194:	b920      	cbnz	r0, 80171a0 <__mdiff+0x5c>
 8017196:	4b2e      	ldr	r3, [pc, #184]	; (8017250 <__mdiff+0x10c>)
 8017198:	4602      	mov	r2, r0
 801719a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801719e:	e7e5      	b.n	801716c <__mdiff+0x28>
 80171a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80171a4:	6926      	ldr	r6, [r4, #16]
 80171a6:	60c5      	str	r5, [r0, #12]
 80171a8:	f104 0914 	add.w	r9, r4, #20
 80171ac:	f108 0514 	add.w	r5, r8, #20
 80171b0:	f100 0e14 	add.w	lr, r0, #20
 80171b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80171b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80171bc:	f108 0210 	add.w	r2, r8, #16
 80171c0:	46f2      	mov	sl, lr
 80171c2:	2100      	movs	r1, #0
 80171c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80171c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80171cc:	fa1f f883 	uxth.w	r8, r3
 80171d0:	fa11 f18b 	uxtah	r1, r1, fp
 80171d4:	0c1b      	lsrs	r3, r3, #16
 80171d6:	eba1 0808 	sub.w	r8, r1, r8
 80171da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80171de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80171e2:	fa1f f888 	uxth.w	r8, r8
 80171e6:	1419      	asrs	r1, r3, #16
 80171e8:	454e      	cmp	r6, r9
 80171ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80171ee:	f84a 3b04 	str.w	r3, [sl], #4
 80171f2:	d8e7      	bhi.n	80171c4 <__mdiff+0x80>
 80171f4:	1b33      	subs	r3, r6, r4
 80171f6:	3b15      	subs	r3, #21
 80171f8:	f023 0303 	bic.w	r3, r3, #3
 80171fc:	3304      	adds	r3, #4
 80171fe:	3415      	adds	r4, #21
 8017200:	42a6      	cmp	r6, r4
 8017202:	bf38      	it	cc
 8017204:	2304      	movcc	r3, #4
 8017206:	441d      	add	r5, r3
 8017208:	4473      	add	r3, lr
 801720a:	469e      	mov	lr, r3
 801720c:	462e      	mov	r6, r5
 801720e:	4566      	cmp	r6, ip
 8017210:	d30e      	bcc.n	8017230 <__mdiff+0xec>
 8017212:	f10c 0203 	add.w	r2, ip, #3
 8017216:	1b52      	subs	r2, r2, r5
 8017218:	f022 0203 	bic.w	r2, r2, #3
 801721c:	3d03      	subs	r5, #3
 801721e:	45ac      	cmp	ip, r5
 8017220:	bf38      	it	cc
 8017222:	2200      	movcc	r2, #0
 8017224:	441a      	add	r2, r3
 8017226:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801722a:	b17b      	cbz	r3, 801724c <__mdiff+0x108>
 801722c:	6107      	str	r7, [r0, #16]
 801722e:	e7a3      	b.n	8017178 <__mdiff+0x34>
 8017230:	f856 8b04 	ldr.w	r8, [r6], #4
 8017234:	fa11 f288 	uxtah	r2, r1, r8
 8017238:	1414      	asrs	r4, r2, #16
 801723a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801723e:	b292      	uxth	r2, r2
 8017240:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017244:	f84e 2b04 	str.w	r2, [lr], #4
 8017248:	1421      	asrs	r1, r4, #16
 801724a:	e7e0      	b.n	801720e <__mdiff+0xca>
 801724c:	3f01      	subs	r7, #1
 801724e:	e7ea      	b.n	8017226 <__mdiff+0xe2>
 8017250:	08019c90 	.word	0x08019c90
 8017254:	08019d80 	.word	0x08019d80

08017258 <__ulp>:
 8017258:	b082      	sub	sp, #8
 801725a:	ed8d 0b00 	vstr	d0, [sp]
 801725e:	9b01      	ldr	r3, [sp, #4]
 8017260:	4912      	ldr	r1, [pc, #72]	; (80172ac <__ulp+0x54>)
 8017262:	4019      	ands	r1, r3
 8017264:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017268:	2900      	cmp	r1, #0
 801726a:	dd05      	ble.n	8017278 <__ulp+0x20>
 801726c:	2200      	movs	r2, #0
 801726e:	460b      	mov	r3, r1
 8017270:	ec43 2b10 	vmov	d0, r2, r3
 8017274:	b002      	add	sp, #8
 8017276:	4770      	bx	lr
 8017278:	4249      	negs	r1, r1
 801727a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801727e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017282:	f04f 0200 	mov.w	r2, #0
 8017286:	f04f 0300 	mov.w	r3, #0
 801728a:	da04      	bge.n	8017296 <__ulp+0x3e>
 801728c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017290:	fa41 f300 	asr.w	r3, r1, r0
 8017294:	e7ec      	b.n	8017270 <__ulp+0x18>
 8017296:	f1a0 0114 	sub.w	r1, r0, #20
 801729a:	291e      	cmp	r1, #30
 801729c:	bfda      	itte	le
 801729e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80172a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80172a6:	2101      	movgt	r1, #1
 80172a8:	460a      	mov	r2, r1
 80172aa:	e7e1      	b.n	8017270 <__ulp+0x18>
 80172ac:	7ff00000 	.word	0x7ff00000

080172b0 <__b2d>:
 80172b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172b2:	6905      	ldr	r5, [r0, #16]
 80172b4:	f100 0714 	add.w	r7, r0, #20
 80172b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80172bc:	1f2e      	subs	r6, r5, #4
 80172be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80172c2:	4620      	mov	r0, r4
 80172c4:	f7ff fd48 	bl	8016d58 <__hi0bits>
 80172c8:	f1c0 0320 	rsb	r3, r0, #32
 80172cc:	280a      	cmp	r0, #10
 80172ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801734c <__b2d+0x9c>
 80172d2:	600b      	str	r3, [r1, #0]
 80172d4:	dc14      	bgt.n	8017300 <__b2d+0x50>
 80172d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80172da:	fa24 f10e 	lsr.w	r1, r4, lr
 80172de:	42b7      	cmp	r7, r6
 80172e0:	ea41 030c 	orr.w	r3, r1, ip
 80172e4:	bf34      	ite	cc
 80172e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80172ea:	2100      	movcs	r1, #0
 80172ec:	3015      	adds	r0, #21
 80172ee:	fa04 f000 	lsl.w	r0, r4, r0
 80172f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80172f6:	ea40 0201 	orr.w	r2, r0, r1
 80172fa:	ec43 2b10 	vmov	d0, r2, r3
 80172fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017300:	42b7      	cmp	r7, r6
 8017302:	bf3a      	itte	cc
 8017304:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017308:	f1a5 0608 	subcc.w	r6, r5, #8
 801730c:	2100      	movcs	r1, #0
 801730e:	380b      	subs	r0, #11
 8017310:	d017      	beq.n	8017342 <__b2d+0x92>
 8017312:	f1c0 0c20 	rsb	ip, r0, #32
 8017316:	fa04 f500 	lsl.w	r5, r4, r0
 801731a:	42be      	cmp	r6, r7
 801731c:	fa21 f40c 	lsr.w	r4, r1, ip
 8017320:	ea45 0504 	orr.w	r5, r5, r4
 8017324:	bf8c      	ite	hi
 8017326:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801732a:	2400      	movls	r4, #0
 801732c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017330:	fa01 f000 	lsl.w	r0, r1, r0
 8017334:	fa24 f40c 	lsr.w	r4, r4, ip
 8017338:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801733c:	ea40 0204 	orr.w	r2, r0, r4
 8017340:	e7db      	b.n	80172fa <__b2d+0x4a>
 8017342:	ea44 030c 	orr.w	r3, r4, ip
 8017346:	460a      	mov	r2, r1
 8017348:	e7d7      	b.n	80172fa <__b2d+0x4a>
 801734a:	bf00      	nop
 801734c:	3ff00000 	.word	0x3ff00000

08017350 <__d2b>:
 8017350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017354:	4689      	mov	r9, r1
 8017356:	2101      	movs	r1, #1
 8017358:	ec57 6b10 	vmov	r6, r7, d0
 801735c:	4690      	mov	r8, r2
 801735e:	f7ff fc09 	bl	8016b74 <_Balloc>
 8017362:	4604      	mov	r4, r0
 8017364:	b930      	cbnz	r0, 8017374 <__d2b+0x24>
 8017366:	4602      	mov	r2, r0
 8017368:	4b25      	ldr	r3, [pc, #148]	; (8017400 <__d2b+0xb0>)
 801736a:	4826      	ldr	r0, [pc, #152]	; (8017404 <__d2b+0xb4>)
 801736c:	f240 310a 	movw	r1, #778	; 0x30a
 8017370:	f000 fcbc 	bl	8017cec <__assert_func>
 8017374:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801737c:	bb35      	cbnz	r5, 80173cc <__d2b+0x7c>
 801737e:	2e00      	cmp	r6, #0
 8017380:	9301      	str	r3, [sp, #4]
 8017382:	d028      	beq.n	80173d6 <__d2b+0x86>
 8017384:	4668      	mov	r0, sp
 8017386:	9600      	str	r6, [sp, #0]
 8017388:	f7ff fd06 	bl	8016d98 <__lo0bits>
 801738c:	9900      	ldr	r1, [sp, #0]
 801738e:	b300      	cbz	r0, 80173d2 <__d2b+0x82>
 8017390:	9a01      	ldr	r2, [sp, #4]
 8017392:	f1c0 0320 	rsb	r3, r0, #32
 8017396:	fa02 f303 	lsl.w	r3, r2, r3
 801739a:	430b      	orrs	r3, r1
 801739c:	40c2      	lsrs	r2, r0
 801739e:	6163      	str	r3, [r4, #20]
 80173a0:	9201      	str	r2, [sp, #4]
 80173a2:	9b01      	ldr	r3, [sp, #4]
 80173a4:	61a3      	str	r3, [r4, #24]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	bf14      	ite	ne
 80173aa:	2202      	movne	r2, #2
 80173ac:	2201      	moveq	r2, #1
 80173ae:	6122      	str	r2, [r4, #16]
 80173b0:	b1d5      	cbz	r5, 80173e8 <__d2b+0x98>
 80173b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80173b6:	4405      	add	r5, r0
 80173b8:	f8c9 5000 	str.w	r5, [r9]
 80173bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80173c0:	f8c8 0000 	str.w	r0, [r8]
 80173c4:	4620      	mov	r0, r4
 80173c6:	b003      	add	sp, #12
 80173c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80173d0:	e7d5      	b.n	801737e <__d2b+0x2e>
 80173d2:	6161      	str	r1, [r4, #20]
 80173d4:	e7e5      	b.n	80173a2 <__d2b+0x52>
 80173d6:	a801      	add	r0, sp, #4
 80173d8:	f7ff fcde 	bl	8016d98 <__lo0bits>
 80173dc:	9b01      	ldr	r3, [sp, #4]
 80173de:	6163      	str	r3, [r4, #20]
 80173e0:	2201      	movs	r2, #1
 80173e2:	6122      	str	r2, [r4, #16]
 80173e4:	3020      	adds	r0, #32
 80173e6:	e7e3      	b.n	80173b0 <__d2b+0x60>
 80173e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80173ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80173f0:	f8c9 0000 	str.w	r0, [r9]
 80173f4:	6918      	ldr	r0, [r3, #16]
 80173f6:	f7ff fcaf 	bl	8016d58 <__hi0bits>
 80173fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80173fe:	e7df      	b.n	80173c0 <__d2b+0x70>
 8017400:	08019c90 	.word	0x08019c90
 8017404:	08019d80 	.word	0x08019d80

08017408 <__ratio>:
 8017408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801740c:	4688      	mov	r8, r1
 801740e:	4669      	mov	r1, sp
 8017410:	4681      	mov	r9, r0
 8017412:	f7ff ff4d 	bl	80172b0 <__b2d>
 8017416:	a901      	add	r1, sp, #4
 8017418:	4640      	mov	r0, r8
 801741a:	ec55 4b10 	vmov	r4, r5, d0
 801741e:	f7ff ff47 	bl	80172b0 <__b2d>
 8017422:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017426:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801742a:	eba3 0c02 	sub.w	ip, r3, r2
 801742e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017432:	1a9b      	subs	r3, r3, r2
 8017434:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017438:	ec51 0b10 	vmov	r0, r1, d0
 801743c:	2b00      	cmp	r3, #0
 801743e:	bfd6      	itet	le
 8017440:	460a      	movle	r2, r1
 8017442:	462a      	movgt	r2, r5
 8017444:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017448:	468b      	mov	fp, r1
 801744a:	462f      	mov	r7, r5
 801744c:	bfd4      	ite	le
 801744e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017452:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017456:	4620      	mov	r0, r4
 8017458:	ee10 2a10 	vmov	r2, s0
 801745c:	465b      	mov	r3, fp
 801745e:	4639      	mov	r1, r7
 8017460:	f7e9 f9f4 	bl	800084c <__aeabi_ddiv>
 8017464:	ec41 0b10 	vmov	d0, r0, r1
 8017468:	b003      	add	sp, #12
 801746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801746e <__copybits>:
 801746e:	3901      	subs	r1, #1
 8017470:	b570      	push	{r4, r5, r6, lr}
 8017472:	1149      	asrs	r1, r1, #5
 8017474:	6914      	ldr	r4, [r2, #16]
 8017476:	3101      	adds	r1, #1
 8017478:	f102 0314 	add.w	r3, r2, #20
 801747c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017480:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017484:	1f05      	subs	r5, r0, #4
 8017486:	42a3      	cmp	r3, r4
 8017488:	d30c      	bcc.n	80174a4 <__copybits+0x36>
 801748a:	1aa3      	subs	r3, r4, r2
 801748c:	3b11      	subs	r3, #17
 801748e:	f023 0303 	bic.w	r3, r3, #3
 8017492:	3211      	adds	r2, #17
 8017494:	42a2      	cmp	r2, r4
 8017496:	bf88      	it	hi
 8017498:	2300      	movhi	r3, #0
 801749a:	4418      	add	r0, r3
 801749c:	2300      	movs	r3, #0
 801749e:	4288      	cmp	r0, r1
 80174a0:	d305      	bcc.n	80174ae <__copybits+0x40>
 80174a2:	bd70      	pop	{r4, r5, r6, pc}
 80174a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80174a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80174ac:	e7eb      	b.n	8017486 <__copybits+0x18>
 80174ae:	f840 3b04 	str.w	r3, [r0], #4
 80174b2:	e7f4      	b.n	801749e <__copybits+0x30>

080174b4 <__any_on>:
 80174b4:	f100 0214 	add.w	r2, r0, #20
 80174b8:	6900      	ldr	r0, [r0, #16]
 80174ba:	114b      	asrs	r3, r1, #5
 80174bc:	4298      	cmp	r0, r3
 80174be:	b510      	push	{r4, lr}
 80174c0:	db11      	blt.n	80174e6 <__any_on+0x32>
 80174c2:	dd0a      	ble.n	80174da <__any_on+0x26>
 80174c4:	f011 011f 	ands.w	r1, r1, #31
 80174c8:	d007      	beq.n	80174da <__any_on+0x26>
 80174ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80174ce:	fa24 f001 	lsr.w	r0, r4, r1
 80174d2:	fa00 f101 	lsl.w	r1, r0, r1
 80174d6:	428c      	cmp	r4, r1
 80174d8:	d10b      	bne.n	80174f2 <__any_on+0x3e>
 80174da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80174de:	4293      	cmp	r3, r2
 80174e0:	d803      	bhi.n	80174ea <__any_on+0x36>
 80174e2:	2000      	movs	r0, #0
 80174e4:	bd10      	pop	{r4, pc}
 80174e6:	4603      	mov	r3, r0
 80174e8:	e7f7      	b.n	80174da <__any_on+0x26>
 80174ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80174ee:	2900      	cmp	r1, #0
 80174f0:	d0f5      	beq.n	80174de <__any_on+0x2a>
 80174f2:	2001      	movs	r0, #1
 80174f4:	e7f6      	b.n	80174e4 <__any_on+0x30>

080174f6 <_calloc_r>:
 80174f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174f8:	fba1 2402 	umull	r2, r4, r1, r2
 80174fc:	b94c      	cbnz	r4, 8017512 <_calloc_r+0x1c>
 80174fe:	4611      	mov	r1, r2
 8017500:	9201      	str	r2, [sp, #4]
 8017502:	f000 f87b 	bl	80175fc <_malloc_r>
 8017506:	9a01      	ldr	r2, [sp, #4]
 8017508:	4605      	mov	r5, r0
 801750a:	b930      	cbnz	r0, 801751a <_calloc_r+0x24>
 801750c:	4628      	mov	r0, r5
 801750e:	b003      	add	sp, #12
 8017510:	bd30      	pop	{r4, r5, pc}
 8017512:	220c      	movs	r2, #12
 8017514:	6002      	str	r2, [r0, #0]
 8017516:	2500      	movs	r5, #0
 8017518:	e7f8      	b.n	801750c <_calloc_r+0x16>
 801751a:	4621      	mov	r1, r4
 801751c:	f7fb fd10 	bl	8012f40 <memset>
 8017520:	e7f4      	b.n	801750c <_calloc_r+0x16>
	...

08017524 <_free_r>:
 8017524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017526:	2900      	cmp	r1, #0
 8017528:	d044      	beq.n	80175b4 <_free_r+0x90>
 801752a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801752e:	9001      	str	r0, [sp, #4]
 8017530:	2b00      	cmp	r3, #0
 8017532:	f1a1 0404 	sub.w	r4, r1, #4
 8017536:	bfb8      	it	lt
 8017538:	18e4      	addlt	r4, r4, r3
 801753a:	f000 fc43 	bl	8017dc4 <__malloc_lock>
 801753e:	4a1e      	ldr	r2, [pc, #120]	; (80175b8 <_free_r+0x94>)
 8017540:	9801      	ldr	r0, [sp, #4]
 8017542:	6813      	ldr	r3, [r2, #0]
 8017544:	b933      	cbnz	r3, 8017554 <_free_r+0x30>
 8017546:	6063      	str	r3, [r4, #4]
 8017548:	6014      	str	r4, [r2, #0]
 801754a:	b003      	add	sp, #12
 801754c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017550:	f000 bc3e 	b.w	8017dd0 <__malloc_unlock>
 8017554:	42a3      	cmp	r3, r4
 8017556:	d908      	bls.n	801756a <_free_r+0x46>
 8017558:	6825      	ldr	r5, [r4, #0]
 801755a:	1961      	adds	r1, r4, r5
 801755c:	428b      	cmp	r3, r1
 801755e:	bf01      	itttt	eq
 8017560:	6819      	ldreq	r1, [r3, #0]
 8017562:	685b      	ldreq	r3, [r3, #4]
 8017564:	1949      	addeq	r1, r1, r5
 8017566:	6021      	streq	r1, [r4, #0]
 8017568:	e7ed      	b.n	8017546 <_free_r+0x22>
 801756a:	461a      	mov	r2, r3
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	b10b      	cbz	r3, 8017574 <_free_r+0x50>
 8017570:	42a3      	cmp	r3, r4
 8017572:	d9fa      	bls.n	801756a <_free_r+0x46>
 8017574:	6811      	ldr	r1, [r2, #0]
 8017576:	1855      	adds	r5, r2, r1
 8017578:	42a5      	cmp	r5, r4
 801757a:	d10b      	bne.n	8017594 <_free_r+0x70>
 801757c:	6824      	ldr	r4, [r4, #0]
 801757e:	4421      	add	r1, r4
 8017580:	1854      	adds	r4, r2, r1
 8017582:	42a3      	cmp	r3, r4
 8017584:	6011      	str	r1, [r2, #0]
 8017586:	d1e0      	bne.n	801754a <_free_r+0x26>
 8017588:	681c      	ldr	r4, [r3, #0]
 801758a:	685b      	ldr	r3, [r3, #4]
 801758c:	6053      	str	r3, [r2, #4]
 801758e:	4421      	add	r1, r4
 8017590:	6011      	str	r1, [r2, #0]
 8017592:	e7da      	b.n	801754a <_free_r+0x26>
 8017594:	d902      	bls.n	801759c <_free_r+0x78>
 8017596:	230c      	movs	r3, #12
 8017598:	6003      	str	r3, [r0, #0]
 801759a:	e7d6      	b.n	801754a <_free_r+0x26>
 801759c:	6825      	ldr	r5, [r4, #0]
 801759e:	1961      	adds	r1, r4, r5
 80175a0:	428b      	cmp	r3, r1
 80175a2:	bf04      	itt	eq
 80175a4:	6819      	ldreq	r1, [r3, #0]
 80175a6:	685b      	ldreq	r3, [r3, #4]
 80175a8:	6063      	str	r3, [r4, #4]
 80175aa:	bf04      	itt	eq
 80175ac:	1949      	addeq	r1, r1, r5
 80175ae:	6021      	streq	r1, [r4, #0]
 80175b0:	6054      	str	r4, [r2, #4]
 80175b2:	e7ca      	b.n	801754a <_free_r+0x26>
 80175b4:	b003      	add	sp, #12
 80175b6:	bd30      	pop	{r4, r5, pc}
 80175b8:	200023c4 	.word	0x200023c4

080175bc <sbrk_aligned>:
 80175bc:	b570      	push	{r4, r5, r6, lr}
 80175be:	4e0e      	ldr	r6, [pc, #56]	; (80175f8 <sbrk_aligned+0x3c>)
 80175c0:	460c      	mov	r4, r1
 80175c2:	6831      	ldr	r1, [r6, #0]
 80175c4:	4605      	mov	r5, r0
 80175c6:	b911      	cbnz	r1, 80175ce <sbrk_aligned+0x12>
 80175c8:	f000 fb5e 	bl	8017c88 <_sbrk_r>
 80175cc:	6030      	str	r0, [r6, #0]
 80175ce:	4621      	mov	r1, r4
 80175d0:	4628      	mov	r0, r5
 80175d2:	f000 fb59 	bl	8017c88 <_sbrk_r>
 80175d6:	1c43      	adds	r3, r0, #1
 80175d8:	d00a      	beq.n	80175f0 <sbrk_aligned+0x34>
 80175da:	1cc4      	adds	r4, r0, #3
 80175dc:	f024 0403 	bic.w	r4, r4, #3
 80175e0:	42a0      	cmp	r0, r4
 80175e2:	d007      	beq.n	80175f4 <sbrk_aligned+0x38>
 80175e4:	1a21      	subs	r1, r4, r0
 80175e6:	4628      	mov	r0, r5
 80175e8:	f000 fb4e 	bl	8017c88 <_sbrk_r>
 80175ec:	3001      	adds	r0, #1
 80175ee:	d101      	bne.n	80175f4 <sbrk_aligned+0x38>
 80175f0:	f04f 34ff 	mov.w	r4, #4294967295
 80175f4:	4620      	mov	r0, r4
 80175f6:	bd70      	pop	{r4, r5, r6, pc}
 80175f8:	200023c8 	.word	0x200023c8

080175fc <_malloc_r>:
 80175fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017600:	1ccd      	adds	r5, r1, #3
 8017602:	f025 0503 	bic.w	r5, r5, #3
 8017606:	3508      	adds	r5, #8
 8017608:	2d0c      	cmp	r5, #12
 801760a:	bf38      	it	cc
 801760c:	250c      	movcc	r5, #12
 801760e:	2d00      	cmp	r5, #0
 8017610:	4607      	mov	r7, r0
 8017612:	db01      	blt.n	8017618 <_malloc_r+0x1c>
 8017614:	42a9      	cmp	r1, r5
 8017616:	d905      	bls.n	8017624 <_malloc_r+0x28>
 8017618:	230c      	movs	r3, #12
 801761a:	603b      	str	r3, [r7, #0]
 801761c:	2600      	movs	r6, #0
 801761e:	4630      	mov	r0, r6
 8017620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017624:	4e2e      	ldr	r6, [pc, #184]	; (80176e0 <_malloc_r+0xe4>)
 8017626:	f000 fbcd 	bl	8017dc4 <__malloc_lock>
 801762a:	6833      	ldr	r3, [r6, #0]
 801762c:	461c      	mov	r4, r3
 801762e:	bb34      	cbnz	r4, 801767e <_malloc_r+0x82>
 8017630:	4629      	mov	r1, r5
 8017632:	4638      	mov	r0, r7
 8017634:	f7ff ffc2 	bl	80175bc <sbrk_aligned>
 8017638:	1c43      	adds	r3, r0, #1
 801763a:	4604      	mov	r4, r0
 801763c:	d14d      	bne.n	80176da <_malloc_r+0xde>
 801763e:	6834      	ldr	r4, [r6, #0]
 8017640:	4626      	mov	r6, r4
 8017642:	2e00      	cmp	r6, #0
 8017644:	d140      	bne.n	80176c8 <_malloc_r+0xcc>
 8017646:	6823      	ldr	r3, [r4, #0]
 8017648:	4631      	mov	r1, r6
 801764a:	4638      	mov	r0, r7
 801764c:	eb04 0803 	add.w	r8, r4, r3
 8017650:	f000 fb1a 	bl	8017c88 <_sbrk_r>
 8017654:	4580      	cmp	r8, r0
 8017656:	d13a      	bne.n	80176ce <_malloc_r+0xd2>
 8017658:	6821      	ldr	r1, [r4, #0]
 801765a:	3503      	adds	r5, #3
 801765c:	1a6d      	subs	r5, r5, r1
 801765e:	f025 0503 	bic.w	r5, r5, #3
 8017662:	3508      	adds	r5, #8
 8017664:	2d0c      	cmp	r5, #12
 8017666:	bf38      	it	cc
 8017668:	250c      	movcc	r5, #12
 801766a:	4629      	mov	r1, r5
 801766c:	4638      	mov	r0, r7
 801766e:	f7ff ffa5 	bl	80175bc <sbrk_aligned>
 8017672:	3001      	adds	r0, #1
 8017674:	d02b      	beq.n	80176ce <_malloc_r+0xd2>
 8017676:	6823      	ldr	r3, [r4, #0]
 8017678:	442b      	add	r3, r5
 801767a:	6023      	str	r3, [r4, #0]
 801767c:	e00e      	b.n	801769c <_malloc_r+0xa0>
 801767e:	6822      	ldr	r2, [r4, #0]
 8017680:	1b52      	subs	r2, r2, r5
 8017682:	d41e      	bmi.n	80176c2 <_malloc_r+0xc6>
 8017684:	2a0b      	cmp	r2, #11
 8017686:	d916      	bls.n	80176b6 <_malloc_r+0xba>
 8017688:	1961      	adds	r1, r4, r5
 801768a:	42a3      	cmp	r3, r4
 801768c:	6025      	str	r5, [r4, #0]
 801768e:	bf18      	it	ne
 8017690:	6059      	strne	r1, [r3, #4]
 8017692:	6863      	ldr	r3, [r4, #4]
 8017694:	bf08      	it	eq
 8017696:	6031      	streq	r1, [r6, #0]
 8017698:	5162      	str	r2, [r4, r5]
 801769a:	604b      	str	r3, [r1, #4]
 801769c:	4638      	mov	r0, r7
 801769e:	f104 060b 	add.w	r6, r4, #11
 80176a2:	f000 fb95 	bl	8017dd0 <__malloc_unlock>
 80176a6:	f026 0607 	bic.w	r6, r6, #7
 80176aa:	1d23      	adds	r3, r4, #4
 80176ac:	1af2      	subs	r2, r6, r3
 80176ae:	d0b6      	beq.n	801761e <_malloc_r+0x22>
 80176b0:	1b9b      	subs	r3, r3, r6
 80176b2:	50a3      	str	r3, [r4, r2]
 80176b4:	e7b3      	b.n	801761e <_malloc_r+0x22>
 80176b6:	6862      	ldr	r2, [r4, #4]
 80176b8:	42a3      	cmp	r3, r4
 80176ba:	bf0c      	ite	eq
 80176bc:	6032      	streq	r2, [r6, #0]
 80176be:	605a      	strne	r2, [r3, #4]
 80176c0:	e7ec      	b.n	801769c <_malloc_r+0xa0>
 80176c2:	4623      	mov	r3, r4
 80176c4:	6864      	ldr	r4, [r4, #4]
 80176c6:	e7b2      	b.n	801762e <_malloc_r+0x32>
 80176c8:	4634      	mov	r4, r6
 80176ca:	6876      	ldr	r6, [r6, #4]
 80176cc:	e7b9      	b.n	8017642 <_malloc_r+0x46>
 80176ce:	230c      	movs	r3, #12
 80176d0:	603b      	str	r3, [r7, #0]
 80176d2:	4638      	mov	r0, r7
 80176d4:	f000 fb7c 	bl	8017dd0 <__malloc_unlock>
 80176d8:	e7a1      	b.n	801761e <_malloc_r+0x22>
 80176da:	6025      	str	r5, [r4, #0]
 80176dc:	e7de      	b.n	801769c <_malloc_r+0xa0>
 80176de:	bf00      	nop
 80176e0:	200023c4 	.word	0x200023c4

080176e4 <__ssputs_r>:
 80176e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e8:	688e      	ldr	r6, [r1, #8]
 80176ea:	429e      	cmp	r6, r3
 80176ec:	4682      	mov	sl, r0
 80176ee:	460c      	mov	r4, r1
 80176f0:	4690      	mov	r8, r2
 80176f2:	461f      	mov	r7, r3
 80176f4:	d838      	bhi.n	8017768 <__ssputs_r+0x84>
 80176f6:	898a      	ldrh	r2, [r1, #12]
 80176f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176fc:	d032      	beq.n	8017764 <__ssputs_r+0x80>
 80176fe:	6825      	ldr	r5, [r4, #0]
 8017700:	6909      	ldr	r1, [r1, #16]
 8017702:	eba5 0901 	sub.w	r9, r5, r1
 8017706:	6965      	ldr	r5, [r4, #20]
 8017708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801770c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017710:	3301      	adds	r3, #1
 8017712:	444b      	add	r3, r9
 8017714:	106d      	asrs	r5, r5, #1
 8017716:	429d      	cmp	r5, r3
 8017718:	bf38      	it	cc
 801771a:	461d      	movcc	r5, r3
 801771c:	0553      	lsls	r3, r2, #21
 801771e:	d531      	bpl.n	8017784 <__ssputs_r+0xa0>
 8017720:	4629      	mov	r1, r5
 8017722:	f7ff ff6b 	bl	80175fc <_malloc_r>
 8017726:	4606      	mov	r6, r0
 8017728:	b950      	cbnz	r0, 8017740 <__ssputs_r+0x5c>
 801772a:	230c      	movs	r3, #12
 801772c:	f8ca 3000 	str.w	r3, [sl]
 8017730:	89a3      	ldrh	r3, [r4, #12]
 8017732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017736:	81a3      	strh	r3, [r4, #12]
 8017738:	f04f 30ff 	mov.w	r0, #4294967295
 801773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017740:	6921      	ldr	r1, [r4, #16]
 8017742:	464a      	mov	r2, r9
 8017744:	f7ff fa08 	bl	8016b58 <memcpy>
 8017748:	89a3      	ldrh	r3, [r4, #12]
 801774a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017752:	81a3      	strh	r3, [r4, #12]
 8017754:	6126      	str	r6, [r4, #16]
 8017756:	6165      	str	r5, [r4, #20]
 8017758:	444e      	add	r6, r9
 801775a:	eba5 0509 	sub.w	r5, r5, r9
 801775e:	6026      	str	r6, [r4, #0]
 8017760:	60a5      	str	r5, [r4, #8]
 8017762:	463e      	mov	r6, r7
 8017764:	42be      	cmp	r6, r7
 8017766:	d900      	bls.n	801776a <__ssputs_r+0x86>
 8017768:	463e      	mov	r6, r7
 801776a:	6820      	ldr	r0, [r4, #0]
 801776c:	4632      	mov	r2, r6
 801776e:	4641      	mov	r1, r8
 8017770:	f000 fb0e 	bl	8017d90 <memmove>
 8017774:	68a3      	ldr	r3, [r4, #8]
 8017776:	1b9b      	subs	r3, r3, r6
 8017778:	60a3      	str	r3, [r4, #8]
 801777a:	6823      	ldr	r3, [r4, #0]
 801777c:	4433      	add	r3, r6
 801777e:	6023      	str	r3, [r4, #0]
 8017780:	2000      	movs	r0, #0
 8017782:	e7db      	b.n	801773c <__ssputs_r+0x58>
 8017784:	462a      	mov	r2, r5
 8017786:	f000 fb29 	bl	8017ddc <_realloc_r>
 801778a:	4606      	mov	r6, r0
 801778c:	2800      	cmp	r0, #0
 801778e:	d1e1      	bne.n	8017754 <__ssputs_r+0x70>
 8017790:	6921      	ldr	r1, [r4, #16]
 8017792:	4650      	mov	r0, sl
 8017794:	f7ff fec6 	bl	8017524 <_free_r>
 8017798:	e7c7      	b.n	801772a <__ssputs_r+0x46>
	...

0801779c <_svfiprintf_r>:
 801779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a0:	4698      	mov	r8, r3
 80177a2:	898b      	ldrh	r3, [r1, #12]
 80177a4:	061b      	lsls	r3, r3, #24
 80177a6:	b09d      	sub	sp, #116	; 0x74
 80177a8:	4607      	mov	r7, r0
 80177aa:	460d      	mov	r5, r1
 80177ac:	4614      	mov	r4, r2
 80177ae:	d50e      	bpl.n	80177ce <_svfiprintf_r+0x32>
 80177b0:	690b      	ldr	r3, [r1, #16]
 80177b2:	b963      	cbnz	r3, 80177ce <_svfiprintf_r+0x32>
 80177b4:	2140      	movs	r1, #64	; 0x40
 80177b6:	f7ff ff21 	bl	80175fc <_malloc_r>
 80177ba:	6028      	str	r0, [r5, #0]
 80177bc:	6128      	str	r0, [r5, #16]
 80177be:	b920      	cbnz	r0, 80177ca <_svfiprintf_r+0x2e>
 80177c0:	230c      	movs	r3, #12
 80177c2:	603b      	str	r3, [r7, #0]
 80177c4:	f04f 30ff 	mov.w	r0, #4294967295
 80177c8:	e0d1      	b.n	801796e <_svfiprintf_r+0x1d2>
 80177ca:	2340      	movs	r3, #64	; 0x40
 80177cc:	616b      	str	r3, [r5, #20]
 80177ce:	2300      	movs	r3, #0
 80177d0:	9309      	str	r3, [sp, #36]	; 0x24
 80177d2:	2320      	movs	r3, #32
 80177d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80177dc:	2330      	movs	r3, #48	; 0x30
 80177de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017988 <_svfiprintf_r+0x1ec>
 80177e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177e6:	f04f 0901 	mov.w	r9, #1
 80177ea:	4623      	mov	r3, r4
 80177ec:	469a      	mov	sl, r3
 80177ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177f2:	b10a      	cbz	r2, 80177f8 <_svfiprintf_r+0x5c>
 80177f4:	2a25      	cmp	r2, #37	; 0x25
 80177f6:	d1f9      	bne.n	80177ec <_svfiprintf_r+0x50>
 80177f8:	ebba 0b04 	subs.w	fp, sl, r4
 80177fc:	d00b      	beq.n	8017816 <_svfiprintf_r+0x7a>
 80177fe:	465b      	mov	r3, fp
 8017800:	4622      	mov	r2, r4
 8017802:	4629      	mov	r1, r5
 8017804:	4638      	mov	r0, r7
 8017806:	f7ff ff6d 	bl	80176e4 <__ssputs_r>
 801780a:	3001      	adds	r0, #1
 801780c:	f000 80aa 	beq.w	8017964 <_svfiprintf_r+0x1c8>
 8017810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017812:	445a      	add	r2, fp
 8017814:	9209      	str	r2, [sp, #36]	; 0x24
 8017816:	f89a 3000 	ldrb.w	r3, [sl]
 801781a:	2b00      	cmp	r3, #0
 801781c:	f000 80a2 	beq.w	8017964 <_svfiprintf_r+0x1c8>
 8017820:	2300      	movs	r3, #0
 8017822:	f04f 32ff 	mov.w	r2, #4294967295
 8017826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801782a:	f10a 0a01 	add.w	sl, sl, #1
 801782e:	9304      	str	r3, [sp, #16]
 8017830:	9307      	str	r3, [sp, #28]
 8017832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017836:	931a      	str	r3, [sp, #104]	; 0x68
 8017838:	4654      	mov	r4, sl
 801783a:	2205      	movs	r2, #5
 801783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017840:	4851      	ldr	r0, [pc, #324]	; (8017988 <_svfiprintf_r+0x1ec>)
 8017842:	f7e8 fccd 	bl	80001e0 <memchr>
 8017846:	9a04      	ldr	r2, [sp, #16]
 8017848:	b9d8      	cbnz	r0, 8017882 <_svfiprintf_r+0xe6>
 801784a:	06d0      	lsls	r0, r2, #27
 801784c:	bf44      	itt	mi
 801784e:	2320      	movmi	r3, #32
 8017850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017854:	0711      	lsls	r1, r2, #28
 8017856:	bf44      	itt	mi
 8017858:	232b      	movmi	r3, #43	; 0x2b
 801785a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801785e:	f89a 3000 	ldrb.w	r3, [sl]
 8017862:	2b2a      	cmp	r3, #42	; 0x2a
 8017864:	d015      	beq.n	8017892 <_svfiprintf_r+0xf6>
 8017866:	9a07      	ldr	r2, [sp, #28]
 8017868:	4654      	mov	r4, sl
 801786a:	2000      	movs	r0, #0
 801786c:	f04f 0c0a 	mov.w	ip, #10
 8017870:	4621      	mov	r1, r4
 8017872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017876:	3b30      	subs	r3, #48	; 0x30
 8017878:	2b09      	cmp	r3, #9
 801787a:	d94e      	bls.n	801791a <_svfiprintf_r+0x17e>
 801787c:	b1b0      	cbz	r0, 80178ac <_svfiprintf_r+0x110>
 801787e:	9207      	str	r2, [sp, #28]
 8017880:	e014      	b.n	80178ac <_svfiprintf_r+0x110>
 8017882:	eba0 0308 	sub.w	r3, r0, r8
 8017886:	fa09 f303 	lsl.w	r3, r9, r3
 801788a:	4313      	orrs	r3, r2
 801788c:	9304      	str	r3, [sp, #16]
 801788e:	46a2      	mov	sl, r4
 8017890:	e7d2      	b.n	8017838 <_svfiprintf_r+0x9c>
 8017892:	9b03      	ldr	r3, [sp, #12]
 8017894:	1d19      	adds	r1, r3, #4
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	9103      	str	r1, [sp, #12]
 801789a:	2b00      	cmp	r3, #0
 801789c:	bfbb      	ittet	lt
 801789e:	425b      	neglt	r3, r3
 80178a0:	f042 0202 	orrlt.w	r2, r2, #2
 80178a4:	9307      	strge	r3, [sp, #28]
 80178a6:	9307      	strlt	r3, [sp, #28]
 80178a8:	bfb8      	it	lt
 80178aa:	9204      	strlt	r2, [sp, #16]
 80178ac:	7823      	ldrb	r3, [r4, #0]
 80178ae:	2b2e      	cmp	r3, #46	; 0x2e
 80178b0:	d10c      	bne.n	80178cc <_svfiprintf_r+0x130>
 80178b2:	7863      	ldrb	r3, [r4, #1]
 80178b4:	2b2a      	cmp	r3, #42	; 0x2a
 80178b6:	d135      	bne.n	8017924 <_svfiprintf_r+0x188>
 80178b8:	9b03      	ldr	r3, [sp, #12]
 80178ba:	1d1a      	adds	r2, r3, #4
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	9203      	str	r2, [sp, #12]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	bfb8      	it	lt
 80178c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80178c8:	3402      	adds	r4, #2
 80178ca:	9305      	str	r3, [sp, #20]
 80178cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017998 <_svfiprintf_r+0x1fc>
 80178d0:	7821      	ldrb	r1, [r4, #0]
 80178d2:	2203      	movs	r2, #3
 80178d4:	4650      	mov	r0, sl
 80178d6:	f7e8 fc83 	bl	80001e0 <memchr>
 80178da:	b140      	cbz	r0, 80178ee <_svfiprintf_r+0x152>
 80178dc:	2340      	movs	r3, #64	; 0x40
 80178de:	eba0 000a 	sub.w	r0, r0, sl
 80178e2:	fa03 f000 	lsl.w	r0, r3, r0
 80178e6:	9b04      	ldr	r3, [sp, #16]
 80178e8:	4303      	orrs	r3, r0
 80178ea:	3401      	adds	r4, #1
 80178ec:	9304      	str	r3, [sp, #16]
 80178ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178f2:	4826      	ldr	r0, [pc, #152]	; (801798c <_svfiprintf_r+0x1f0>)
 80178f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178f8:	2206      	movs	r2, #6
 80178fa:	f7e8 fc71 	bl	80001e0 <memchr>
 80178fe:	2800      	cmp	r0, #0
 8017900:	d038      	beq.n	8017974 <_svfiprintf_r+0x1d8>
 8017902:	4b23      	ldr	r3, [pc, #140]	; (8017990 <_svfiprintf_r+0x1f4>)
 8017904:	bb1b      	cbnz	r3, 801794e <_svfiprintf_r+0x1b2>
 8017906:	9b03      	ldr	r3, [sp, #12]
 8017908:	3307      	adds	r3, #7
 801790a:	f023 0307 	bic.w	r3, r3, #7
 801790e:	3308      	adds	r3, #8
 8017910:	9303      	str	r3, [sp, #12]
 8017912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017914:	4433      	add	r3, r6
 8017916:	9309      	str	r3, [sp, #36]	; 0x24
 8017918:	e767      	b.n	80177ea <_svfiprintf_r+0x4e>
 801791a:	fb0c 3202 	mla	r2, ip, r2, r3
 801791e:	460c      	mov	r4, r1
 8017920:	2001      	movs	r0, #1
 8017922:	e7a5      	b.n	8017870 <_svfiprintf_r+0xd4>
 8017924:	2300      	movs	r3, #0
 8017926:	3401      	adds	r4, #1
 8017928:	9305      	str	r3, [sp, #20]
 801792a:	4619      	mov	r1, r3
 801792c:	f04f 0c0a 	mov.w	ip, #10
 8017930:	4620      	mov	r0, r4
 8017932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017936:	3a30      	subs	r2, #48	; 0x30
 8017938:	2a09      	cmp	r2, #9
 801793a:	d903      	bls.n	8017944 <_svfiprintf_r+0x1a8>
 801793c:	2b00      	cmp	r3, #0
 801793e:	d0c5      	beq.n	80178cc <_svfiprintf_r+0x130>
 8017940:	9105      	str	r1, [sp, #20]
 8017942:	e7c3      	b.n	80178cc <_svfiprintf_r+0x130>
 8017944:	fb0c 2101 	mla	r1, ip, r1, r2
 8017948:	4604      	mov	r4, r0
 801794a:	2301      	movs	r3, #1
 801794c:	e7f0      	b.n	8017930 <_svfiprintf_r+0x194>
 801794e:	ab03      	add	r3, sp, #12
 8017950:	9300      	str	r3, [sp, #0]
 8017952:	462a      	mov	r2, r5
 8017954:	4b0f      	ldr	r3, [pc, #60]	; (8017994 <_svfiprintf_r+0x1f8>)
 8017956:	a904      	add	r1, sp, #16
 8017958:	4638      	mov	r0, r7
 801795a:	f7fb fb99 	bl	8013090 <_printf_float>
 801795e:	1c42      	adds	r2, r0, #1
 8017960:	4606      	mov	r6, r0
 8017962:	d1d6      	bne.n	8017912 <_svfiprintf_r+0x176>
 8017964:	89ab      	ldrh	r3, [r5, #12]
 8017966:	065b      	lsls	r3, r3, #25
 8017968:	f53f af2c 	bmi.w	80177c4 <_svfiprintf_r+0x28>
 801796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801796e:	b01d      	add	sp, #116	; 0x74
 8017970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017974:	ab03      	add	r3, sp, #12
 8017976:	9300      	str	r3, [sp, #0]
 8017978:	462a      	mov	r2, r5
 801797a:	4b06      	ldr	r3, [pc, #24]	; (8017994 <_svfiprintf_r+0x1f8>)
 801797c:	a904      	add	r1, sp, #16
 801797e:	4638      	mov	r0, r7
 8017980:	f7fb fe2a 	bl	80135d8 <_printf_i>
 8017984:	e7eb      	b.n	801795e <_svfiprintf_r+0x1c2>
 8017986:	bf00      	nop
 8017988:	08019edc 	.word	0x08019edc
 801798c:	08019ee6 	.word	0x08019ee6
 8017990:	08013091 	.word	0x08013091
 8017994:	080176e5 	.word	0x080176e5
 8017998:	08019ee2 	.word	0x08019ee2

0801799c <__sfputc_r>:
 801799c:	6893      	ldr	r3, [r2, #8]
 801799e:	3b01      	subs	r3, #1
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	b410      	push	{r4}
 80179a4:	6093      	str	r3, [r2, #8]
 80179a6:	da08      	bge.n	80179ba <__sfputc_r+0x1e>
 80179a8:	6994      	ldr	r4, [r2, #24]
 80179aa:	42a3      	cmp	r3, r4
 80179ac:	db01      	blt.n	80179b2 <__sfputc_r+0x16>
 80179ae:	290a      	cmp	r1, #10
 80179b0:	d103      	bne.n	80179ba <__sfputc_r+0x1e>
 80179b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179b6:	f7fd bb75 	b.w	80150a4 <__swbuf_r>
 80179ba:	6813      	ldr	r3, [r2, #0]
 80179bc:	1c58      	adds	r0, r3, #1
 80179be:	6010      	str	r0, [r2, #0]
 80179c0:	7019      	strb	r1, [r3, #0]
 80179c2:	4608      	mov	r0, r1
 80179c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179c8:	4770      	bx	lr

080179ca <__sfputs_r>:
 80179ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179cc:	4606      	mov	r6, r0
 80179ce:	460f      	mov	r7, r1
 80179d0:	4614      	mov	r4, r2
 80179d2:	18d5      	adds	r5, r2, r3
 80179d4:	42ac      	cmp	r4, r5
 80179d6:	d101      	bne.n	80179dc <__sfputs_r+0x12>
 80179d8:	2000      	movs	r0, #0
 80179da:	e007      	b.n	80179ec <__sfputs_r+0x22>
 80179dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179e0:	463a      	mov	r2, r7
 80179e2:	4630      	mov	r0, r6
 80179e4:	f7ff ffda 	bl	801799c <__sfputc_r>
 80179e8:	1c43      	adds	r3, r0, #1
 80179ea:	d1f3      	bne.n	80179d4 <__sfputs_r+0xa>
 80179ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179f0 <_vfiprintf_r>:
 80179f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f4:	460d      	mov	r5, r1
 80179f6:	b09d      	sub	sp, #116	; 0x74
 80179f8:	4614      	mov	r4, r2
 80179fa:	4698      	mov	r8, r3
 80179fc:	4606      	mov	r6, r0
 80179fe:	b118      	cbz	r0, 8017a08 <_vfiprintf_r+0x18>
 8017a00:	6983      	ldr	r3, [r0, #24]
 8017a02:	b90b      	cbnz	r3, 8017a08 <_vfiprintf_r+0x18>
 8017a04:	f7fe fc02 	bl	801620c <__sinit>
 8017a08:	4b89      	ldr	r3, [pc, #548]	; (8017c30 <_vfiprintf_r+0x240>)
 8017a0a:	429d      	cmp	r5, r3
 8017a0c:	d11b      	bne.n	8017a46 <_vfiprintf_r+0x56>
 8017a0e:	6875      	ldr	r5, [r6, #4]
 8017a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a12:	07d9      	lsls	r1, r3, #31
 8017a14:	d405      	bmi.n	8017a22 <_vfiprintf_r+0x32>
 8017a16:	89ab      	ldrh	r3, [r5, #12]
 8017a18:	059a      	lsls	r2, r3, #22
 8017a1a:	d402      	bmi.n	8017a22 <_vfiprintf_r+0x32>
 8017a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a1e:	f7ff f806 	bl	8016a2e <__retarget_lock_acquire_recursive>
 8017a22:	89ab      	ldrh	r3, [r5, #12]
 8017a24:	071b      	lsls	r3, r3, #28
 8017a26:	d501      	bpl.n	8017a2c <_vfiprintf_r+0x3c>
 8017a28:	692b      	ldr	r3, [r5, #16]
 8017a2a:	b9eb      	cbnz	r3, 8017a68 <_vfiprintf_r+0x78>
 8017a2c:	4629      	mov	r1, r5
 8017a2e:	4630      	mov	r0, r6
 8017a30:	f7fd fb9c 	bl	801516c <__swsetup_r>
 8017a34:	b1c0      	cbz	r0, 8017a68 <_vfiprintf_r+0x78>
 8017a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a38:	07dc      	lsls	r4, r3, #31
 8017a3a:	d50e      	bpl.n	8017a5a <_vfiprintf_r+0x6a>
 8017a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a40:	b01d      	add	sp, #116	; 0x74
 8017a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a46:	4b7b      	ldr	r3, [pc, #492]	; (8017c34 <_vfiprintf_r+0x244>)
 8017a48:	429d      	cmp	r5, r3
 8017a4a:	d101      	bne.n	8017a50 <_vfiprintf_r+0x60>
 8017a4c:	68b5      	ldr	r5, [r6, #8]
 8017a4e:	e7df      	b.n	8017a10 <_vfiprintf_r+0x20>
 8017a50:	4b79      	ldr	r3, [pc, #484]	; (8017c38 <_vfiprintf_r+0x248>)
 8017a52:	429d      	cmp	r5, r3
 8017a54:	bf08      	it	eq
 8017a56:	68f5      	ldreq	r5, [r6, #12]
 8017a58:	e7da      	b.n	8017a10 <_vfiprintf_r+0x20>
 8017a5a:	89ab      	ldrh	r3, [r5, #12]
 8017a5c:	0598      	lsls	r0, r3, #22
 8017a5e:	d4ed      	bmi.n	8017a3c <_vfiprintf_r+0x4c>
 8017a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a62:	f7fe ffe5 	bl	8016a30 <__retarget_lock_release_recursive>
 8017a66:	e7e9      	b.n	8017a3c <_vfiprintf_r+0x4c>
 8017a68:	2300      	movs	r3, #0
 8017a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017a6c:	2320      	movs	r3, #32
 8017a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a76:	2330      	movs	r3, #48	; 0x30
 8017a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c3c <_vfiprintf_r+0x24c>
 8017a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a80:	f04f 0901 	mov.w	r9, #1
 8017a84:	4623      	mov	r3, r4
 8017a86:	469a      	mov	sl, r3
 8017a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a8c:	b10a      	cbz	r2, 8017a92 <_vfiprintf_r+0xa2>
 8017a8e:	2a25      	cmp	r2, #37	; 0x25
 8017a90:	d1f9      	bne.n	8017a86 <_vfiprintf_r+0x96>
 8017a92:	ebba 0b04 	subs.w	fp, sl, r4
 8017a96:	d00b      	beq.n	8017ab0 <_vfiprintf_r+0xc0>
 8017a98:	465b      	mov	r3, fp
 8017a9a:	4622      	mov	r2, r4
 8017a9c:	4629      	mov	r1, r5
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	f7ff ff93 	bl	80179ca <__sfputs_r>
 8017aa4:	3001      	adds	r0, #1
 8017aa6:	f000 80aa 	beq.w	8017bfe <_vfiprintf_r+0x20e>
 8017aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017aac:	445a      	add	r2, fp
 8017aae:	9209      	str	r2, [sp, #36]	; 0x24
 8017ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	f000 80a2 	beq.w	8017bfe <_vfiprintf_r+0x20e>
 8017aba:	2300      	movs	r3, #0
 8017abc:	f04f 32ff 	mov.w	r2, #4294967295
 8017ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ac4:	f10a 0a01 	add.w	sl, sl, #1
 8017ac8:	9304      	str	r3, [sp, #16]
 8017aca:	9307      	str	r3, [sp, #28]
 8017acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8017ad2:	4654      	mov	r4, sl
 8017ad4:	2205      	movs	r2, #5
 8017ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ada:	4858      	ldr	r0, [pc, #352]	; (8017c3c <_vfiprintf_r+0x24c>)
 8017adc:	f7e8 fb80 	bl	80001e0 <memchr>
 8017ae0:	9a04      	ldr	r2, [sp, #16]
 8017ae2:	b9d8      	cbnz	r0, 8017b1c <_vfiprintf_r+0x12c>
 8017ae4:	06d1      	lsls	r1, r2, #27
 8017ae6:	bf44      	itt	mi
 8017ae8:	2320      	movmi	r3, #32
 8017aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017aee:	0713      	lsls	r3, r2, #28
 8017af0:	bf44      	itt	mi
 8017af2:	232b      	movmi	r3, #43	; 0x2b
 8017af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017af8:	f89a 3000 	ldrb.w	r3, [sl]
 8017afc:	2b2a      	cmp	r3, #42	; 0x2a
 8017afe:	d015      	beq.n	8017b2c <_vfiprintf_r+0x13c>
 8017b00:	9a07      	ldr	r2, [sp, #28]
 8017b02:	4654      	mov	r4, sl
 8017b04:	2000      	movs	r0, #0
 8017b06:	f04f 0c0a 	mov.w	ip, #10
 8017b0a:	4621      	mov	r1, r4
 8017b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b10:	3b30      	subs	r3, #48	; 0x30
 8017b12:	2b09      	cmp	r3, #9
 8017b14:	d94e      	bls.n	8017bb4 <_vfiprintf_r+0x1c4>
 8017b16:	b1b0      	cbz	r0, 8017b46 <_vfiprintf_r+0x156>
 8017b18:	9207      	str	r2, [sp, #28]
 8017b1a:	e014      	b.n	8017b46 <_vfiprintf_r+0x156>
 8017b1c:	eba0 0308 	sub.w	r3, r0, r8
 8017b20:	fa09 f303 	lsl.w	r3, r9, r3
 8017b24:	4313      	orrs	r3, r2
 8017b26:	9304      	str	r3, [sp, #16]
 8017b28:	46a2      	mov	sl, r4
 8017b2a:	e7d2      	b.n	8017ad2 <_vfiprintf_r+0xe2>
 8017b2c:	9b03      	ldr	r3, [sp, #12]
 8017b2e:	1d19      	adds	r1, r3, #4
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	9103      	str	r1, [sp, #12]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	bfbb      	ittet	lt
 8017b38:	425b      	neglt	r3, r3
 8017b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8017b3e:	9307      	strge	r3, [sp, #28]
 8017b40:	9307      	strlt	r3, [sp, #28]
 8017b42:	bfb8      	it	lt
 8017b44:	9204      	strlt	r2, [sp, #16]
 8017b46:	7823      	ldrb	r3, [r4, #0]
 8017b48:	2b2e      	cmp	r3, #46	; 0x2e
 8017b4a:	d10c      	bne.n	8017b66 <_vfiprintf_r+0x176>
 8017b4c:	7863      	ldrb	r3, [r4, #1]
 8017b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8017b50:	d135      	bne.n	8017bbe <_vfiprintf_r+0x1ce>
 8017b52:	9b03      	ldr	r3, [sp, #12]
 8017b54:	1d1a      	adds	r2, r3, #4
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	9203      	str	r2, [sp, #12]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bfb8      	it	lt
 8017b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b62:	3402      	adds	r4, #2
 8017b64:	9305      	str	r3, [sp, #20]
 8017b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c4c <_vfiprintf_r+0x25c>
 8017b6a:	7821      	ldrb	r1, [r4, #0]
 8017b6c:	2203      	movs	r2, #3
 8017b6e:	4650      	mov	r0, sl
 8017b70:	f7e8 fb36 	bl	80001e0 <memchr>
 8017b74:	b140      	cbz	r0, 8017b88 <_vfiprintf_r+0x198>
 8017b76:	2340      	movs	r3, #64	; 0x40
 8017b78:	eba0 000a 	sub.w	r0, r0, sl
 8017b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8017b80:	9b04      	ldr	r3, [sp, #16]
 8017b82:	4303      	orrs	r3, r0
 8017b84:	3401      	adds	r4, #1
 8017b86:	9304      	str	r3, [sp, #16]
 8017b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b8c:	482c      	ldr	r0, [pc, #176]	; (8017c40 <_vfiprintf_r+0x250>)
 8017b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b92:	2206      	movs	r2, #6
 8017b94:	f7e8 fb24 	bl	80001e0 <memchr>
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	d03f      	beq.n	8017c1c <_vfiprintf_r+0x22c>
 8017b9c:	4b29      	ldr	r3, [pc, #164]	; (8017c44 <_vfiprintf_r+0x254>)
 8017b9e:	bb1b      	cbnz	r3, 8017be8 <_vfiprintf_r+0x1f8>
 8017ba0:	9b03      	ldr	r3, [sp, #12]
 8017ba2:	3307      	adds	r3, #7
 8017ba4:	f023 0307 	bic.w	r3, r3, #7
 8017ba8:	3308      	adds	r3, #8
 8017baa:	9303      	str	r3, [sp, #12]
 8017bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bae:	443b      	add	r3, r7
 8017bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8017bb2:	e767      	b.n	8017a84 <_vfiprintf_r+0x94>
 8017bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bb8:	460c      	mov	r4, r1
 8017bba:	2001      	movs	r0, #1
 8017bbc:	e7a5      	b.n	8017b0a <_vfiprintf_r+0x11a>
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	3401      	adds	r4, #1
 8017bc2:	9305      	str	r3, [sp, #20]
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	f04f 0c0a 	mov.w	ip, #10
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bd0:	3a30      	subs	r2, #48	; 0x30
 8017bd2:	2a09      	cmp	r2, #9
 8017bd4:	d903      	bls.n	8017bde <_vfiprintf_r+0x1ee>
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d0c5      	beq.n	8017b66 <_vfiprintf_r+0x176>
 8017bda:	9105      	str	r1, [sp, #20]
 8017bdc:	e7c3      	b.n	8017b66 <_vfiprintf_r+0x176>
 8017bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8017be2:	4604      	mov	r4, r0
 8017be4:	2301      	movs	r3, #1
 8017be6:	e7f0      	b.n	8017bca <_vfiprintf_r+0x1da>
 8017be8:	ab03      	add	r3, sp, #12
 8017bea:	9300      	str	r3, [sp, #0]
 8017bec:	462a      	mov	r2, r5
 8017bee:	4b16      	ldr	r3, [pc, #88]	; (8017c48 <_vfiprintf_r+0x258>)
 8017bf0:	a904      	add	r1, sp, #16
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f7fb fa4c 	bl	8013090 <_printf_float>
 8017bf8:	4607      	mov	r7, r0
 8017bfa:	1c78      	adds	r0, r7, #1
 8017bfc:	d1d6      	bne.n	8017bac <_vfiprintf_r+0x1bc>
 8017bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c00:	07d9      	lsls	r1, r3, #31
 8017c02:	d405      	bmi.n	8017c10 <_vfiprintf_r+0x220>
 8017c04:	89ab      	ldrh	r3, [r5, #12]
 8017c06:	059a      	lsls	r2, r3, #22
 8017c08:	d402      	bmi.n	8017c10 <_vfiprintf_r+0x220>
 8017c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c0c:	f7fe ff10 	bl	8016a30 <__retarget_lock_release_recursive>
 8017c10:	89ab      	ldrh	r3, [r5, #12]
 8017c12:	065b      	lsls	r3, r3, #25
 8017c14:	f53f af12 	bmi.w	8017a3c <_vfiprintf_r+0x4c>
 8017c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c1a:	e711      	b.n	8017a40 <_vfiprintf_r+0x50>
 8017c1c:	ab03      	add	r3, sp, #12
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	462a      	mov	r2, r5
 8017c22:	4b09      	ldr	r3, [pc, #36]	; (8017c48 <_vfiprintf_r+0x258>)
 8017c24:	a904      	add	r1, sp, #16
 8017c26:	4630      	mov	r0, r6
 8017c28:	f7fb fcd6 	bl	80135d8 <_printf_i>
 8017c2c:	e7e4      	b.n	8017bf8 <_vfiprintf_r+0x208>
 8017c2e:	bf00      	nop
 8017c30:	08019cc4 	.word	0x08019cc4
 8017c34:	08019ce4 	.word	0x08019ce4
 8017c38:	08019ca4 	.word	0x08019ca4
 8017c3c:	08019edc 	.word	0x08019edc
 8017c40:	08019ee6 	.word	0x08019ee6
 8017c44:	08013091 	.word	0x08013091
 8017c48:	080179cb 	.word	0x080179cb
 8017c4c:	08019ee2 	.word	0x08019ee2

08017c50 <_read_r>:
 8017c50:	b538      	push	{r3, r4, r5, lr}
 8017c52:	4d07      	ldr	r5, [pc, #28]	; (8017c70 <_read_r+0x20>)
 8017c54:	4604      	mov	r4, r0
 8017c56:	4608      	mov	r0, r1
 8017c58:	4611      	mov	r1, r2
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	602a      	str	r2, [r5, #0]
 8017c5e:	461a      	mov	r2, r3
 8017c60:	f7ed fe4c 	bl	80058fc <_read>
 8017c64:	1c43      	adds	r3, r0, #1
 8017c66:	d102      	bne.n	8017c6e <_read_r+0x1e>
 8017c68:	682b      	ldr	r3, [r5, #0]
 8017c6a:	b103      	cbz	r3, 8017c6e <_read_r+0x1e>
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	200023cc 	.word	0x200023cc
 8017c74:	00000000 	.word	0x00000000

08017c78 <nan>:
 8017c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017c80 <nan+0x8>
 8017c7c:	4770      	bx	lr
 8017c7e:	bf00      	nop
 8017c80:	00000000 	.word	0x00000000
 8017c84:	7ff80000 	.word	0x7ff80000

08017c88 <_sbrk_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	4d06      	ldr	r5, [pc, #24]	; (8017ca4 <_sbrk_r+0x1c>)
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	4604      	mov	r4, r0
 8017c90:	4608      	mov	r0, r1
 8017c92:	602b      	str	r3, [r5, #0]
 8017c94:	f7ed fea0 	bl	80059d8 <_sbrk>
 8017c98:	1c43      	adds	r3, r0, #1
 8017c9a:	d102      	bne.n	8017ca2 <_sbrk_r+0x1a>
 8017c9c:	682b      	ldr	r3, [r5, #0]
 8017c9e:	b103      	cbz	r3, 8017ca2 <_sbrk_r+0x1a>
 8017ca0:	6023      	str	r3, [r4, #0]
 8017ca2:	bd38      	pop	{r3, r4, r5, pc}
 8017ca4:	200023cc 	.word	0x200023cc

08017ca8 <strncmp>:
 8017ca8:	b510      	push	{r4, lr}
 8017caa:	b17a      	cbz	r2, 8017ccc <strncmp+0x24>
 8017cac:	4603      	mov	r3, r0
 8017cae:	3901      	subs	r1, #1
 8017cb0:	1884      	adds	r4, r0, r2
 8017cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017cb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017cba:	4290      	cmp	r0, r2
 8017cbc:	d101      	bne.n	8017cc2 <strncmp+0x1a>
 8017cbe:	42a3      	cmp	r3, r4
 8017cc0:	d101      	bne.n	8017cc6 <strncmp+0x1e>
 8017cc2:	1a80      	subs	r0, r0, r2
 8017cc4:	bd10      	pop	{r4, pc}
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	d1f3      	bne.n	8017cb2 <strncmp+0xa>
 8017cca:	e7fa      	b.n	8017cc2 <strncmp+0x1a>
 8017ccc:	4610      	mov	r0, r2
 8017cce:	e7f9      	b.n	8017cc4 <strncmp+0x1c>

08017cd0 <__ascii_wctomb>:
 8017cd0:	b149      	cbz	r1, 8017ce6 <__ascii_wctomb+0x16>
 8017cd2:	2aff      	cmp	r2, #255	; 0xff
 8017cd4:	bf85      	ittet	hi
 8017cd6:	238a      	movhi	r3, #138	; 0x8a
 8017cd8:	6003      	strhi	r3, [r0, #0]
 8017cda:	700a      	strbls	r2, [r1, #0]
 8017cdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8017ce0:	bf98      	it	ls
 8017ce2:	2001      	movls	r0, #1
 8017ce4:	4770      	bx	lr
 8017ce6:	4608      	mov	r0, r1
 8017ce8:	4770      	bx	lr
	...

08017cec <__assert_func>:
 8017cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cee:	4614      	mov	r4, r2
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	4b09      	ldr	r3, [pc, #36]	; (8017d18 <__assert_func+0x2c>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	68d8      	ldr	r0, [r3, #12]
 8017cfa:	b14c      	cbz	r4, 8017d10 <__assert_func+0x24>
 8017cfc:	4b07      	ldr	r3, [pc, #28]	; (8017d1c <__assert_func+0x30>)
 8017cfe:	9100      	str	r1, [sp, #0]
 8017d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d04:	4906      	ldr	r1, [pc, #24]	; (8017d20 <__assert_func+0x34>)
 8017d06:	462b      	mov	r3, r5
 8017d08:	f000 f80e 	bl	8017d28 <fiprintf>
 8017d0c:	f000 f895 	bl	8017e3a <abort>
 8017d10:	4b04      	ldr	r3, [pc, #16]	; (8017d24 <__assert_func+0x38>)
 8017d12:	461c      	mov	r4, r3
 8017d14:	e7f3      	b.n	8017cfe <__assert_func+0x12>
 8017d16:	bf00      	nop
 8017d18:	20000190 	.word	0x20000190
 8017d1c:	08019eed 	.word	0x08019eed
 8017d20:	08019efa 	.word	0x08019efa
 8017d24:	08019f28 	.word	0x08019f28

08017d28 <fiprintf>:
 8017d28:	b40e      	push	{r1, r2, r3}
 8017d2a:	b503      	push	{r0, r1, lr}
 8017d2c:	4601      	mov	r1, r0
 8017d2e:	ab03      	add	r3, sp, #12
 8017d30:	4805      	ldr	r0, [pc, #20]	; (8017d48 <fiprintf+0x20>)
 8017d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d36:	6800      	ldr	r0, [r0, #0]
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	f7ff fe59 	bl	80179f0 <_vfiprintf_r>
 8017d3e:	b002      	add	sp, #8
 8017d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d44:	b003      	add	sp, #12
 8017d46:	4770      	bx	lr
 8017d48:	20000190 	.word	0x20000190

08017d4c <_fstat_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4d07      	ldr	r5, [pc, #28]	; (8017d6c <_fstat_r+0x20>)
 8017d50:	2300      	movs	r3, #0
 8017d52:	4604      	mov	r4, r0
 8017d54:	4608      	mov	r0, r1
 8017d56:	4611      	mov	r1, r2
 8017d58:	602b      	str	r3, [r5, #0]
 8017d5a:	f7ed fe14 	bl	8005986 <_fstat>
 8017d5e:	1c43      	adds	r3, r0, #1
 8017d60:	d102      	bne.n	8017d68 <_fstat_r+0x1c>
 8017d62:	682b      	ldr	r3, [r5, #0]
 8017d64:	b103      	cbz	r3, 8017d68 <_fstat_r+0x1c>
 8017d66:	6023      	str	r3, [r4, #0]
 8017d68:	bd38      	pop	{r3, r4, r5, pc}
 8017d6a:	bf00      	nop
 8017d6c:	200023cc 	.word	0x200023cc

08017d70 <_isatty_r>:
 8017d70:	b538      	push	{r3, r4, r5, lr}
 8017d72:	4d06      	ldr	r5, [pc, #24]	; (8017d8c <_isatty_r+0x1c>)
 8017d74:	2300      	movs	r3, #0
 8017d76:	4604      	mov	r4, r0
 8017d78:	4608      	mov	r0, r1
 8017d7a:	602b      	str	r3, [r5, #0]
 8017d7c:	f7ed fe13 	bl	80059a6 <_isatty>
 8017d80:	1c43      	adds	r3, r0, #1
 8017d82:	d102      	bne.n	8017d8a <_isatty_r+0x1a>
 8017d84:	682b      	ldr	r3, [r5, #0]
 8017d86:	b103      	cbz	r3, 8017d8a <_isatty_r+0x1a>
 8017d88:	6023      	str	r3, [r4, #0]
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	200023cc 	.word	0x200023cc

08017d90 <memmove>:
 8017d90:	4288      	cmp	r0, r1
 8017d92:	b510      	push	{r4, lr}
 8017d94:	eb01 0402 	add.w	r4, r1, r2
 8017d98:	d902      	bls.n	8017da0 <memmove+0x10>
 8017d9a:	4284      	cmp	r4, r0
 8017d9c:	4623      	mov	r3, r4
 8017d9e:	d807      	bhi.n	8017db0 <memmove+0x20>
 8017da0:	1e43      	subs	r3, r0, #1
 8017da2:	42a1      	cmp	r1, r4
 8017da4:	d008      	beq.n	8017db8 <memmove+0x28>
 8017da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017dae:	e7f8      	b.n	8017da2 <memmove+0x12>
 8017db0:	4402      	add	r2, r0
 8017db2:	4601      	mov	r1, r0
 8017db4:	428a      	cmp	r2, r1
 8017db6:	d100      	bne.n	8017dba <memmove+0x2a>
 8017db8:	bd10      	pop	{r4, pc}
 8017dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017dc2:	e7f7      	b.n	8017db4 <memmove+0x24>

08017dc4 <__malloc_lock>:
 8017dc4:	4801      	ldr	r0, [pc, #4]	; (8017dcc <__malloc_lock+0x8>)
 8017dc6:	f7fe be32 	b.w	8016a2e <__retarget_lock_acquire_recursive>
 8017dca:	bf00      	nop
 8017dcc:	200023c0 	.word	0x200023c0

08017dd0 <__malloc_unlock>:
 8017dd0:	4801      	ldr	r0, [pc, #4]	; (8017dd8 <__malloc_unlock+0x8>)
 8017dd2:	f7fe be2d 	b.w	8016a30 <__retarget_lock_release_recursive>
 8017dd6:	bf00      	nop
 8017dd8:	200023c0 	.word	0x200023c0

08017ddc <_realloc_r>:
 8017ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de0:	4680      	mov	r8, r0
 8017de2:	4614      	mov	r4, r2
 8017de4:	460e      	mov	r6, r1
 8017de6:	b921      	cbnz	r1, 8017df2 <_realloc_r+0x16>
 8017de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017dec:	4611      	mov	r1, r2
 8017dee:	f7ff bc05 	b.w	80175fc <_malloc_r>
 8017df2:	b92a      	cbnz	r2, 8017e00 <_realloc_r+0x24>
 8017df4:	f7ff fb96 	bl	8017524 <_free_r>
 8017df8:	4625      	mov	r5, r4
 8017dfa:	4628      	mov	r0, r5
 8017dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e00:	f000 f822 	bl	8017e48 <_malloc_usable_size_r>
 8017e04:	4284      	cmp	r4, r0
 8017e06:	4607      	mov	r7, r0
 8017e08:	d802      	bhi.n	8017e10 <_realloc_r+0x34>
 8017e0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e0e:	d812      	bhi.n	8017e36 <_realloc_r+0x5a>
 8017e10:	4621      	mov	r1, r4
 8017e12:	4640      	mov	r0, r8
 8017e14:	f7ff fbf2 	bl	80175fc <_malloc_r>
 8017e18:	4605      	mov	r5, r0
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d0ed      	beq.n	8017dfa <_realloc_r+0x1e>
 8017e1e:	42bc      	cmp	r4, r7
 8017e20:	4622      	mov	r2, r4
 8017e22:	4631      	mov	r1, r6
 8017e24:	bf28      	it	cs
 8017e26:	463a      	movcs	r2, r7
 8017e28:	f7fe fe96 	bl	8016b58 <memcpy>
 8017e2c:	4631      	mov	r1, r6
 8017e2e:	4640      	mov	r0, r8
 8017e30:	f7ff fb78 	bl	8017524 <_free_r>
 8017e34:	e7e1      	b.n	8017dfa <_realloc_r+0x1e>
 8017e36:	4635      	mov	r5, r6
 8017e38:	e7df      	b.n	8017dfa <_realloc_r+0x1e>

08017e3a <abort>:
 8017e3a:	b508      	push	{r3, lr}
 8017e3c:	2006      	movs	r0, #6
 8017e3e:	f000 f833 	bl	8017ea8 <raise>
 8017e42:	2001      	movs	r0, #1
 8017e44:	f7ed fd50 	bl	80058e8 <_exit>

08017e48 <_malloc_usable_size_r>:
 8017e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e4c:	1f18      	subs	r0, r3, #4
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	bfbc      	itt	lt
 8017e52:	580b      	ldrlt	r3, [r1, r0]
 8017e54:	18c0      	addlt	r0, r0, r3
 8017e56:	4770      	bx	lr

08017e58 <_raise_r>:
 8017e58:	291f      	cmp	r1, #31
 8017e5a:	b538      	push	{r3, r4, r5, lr}
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	460d      	mov	r5, r1
 8017e60:	d904      	bls.n	8017e6c <_raise_r+0x14>
 8017e62:	2316      	movs	r3, #22
 8017e64:	6003      	str	r3, [r0, #0]
 8017e66:	f04f 30ff 	mov.w	r0, #4294967295
 8017e6a:	bd38      	pop	{r3, r4, r5, pc}
 8017e6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e6e:	b112      	cbz	r2, 8017e76 <_raise_r+0x1e>
 8017e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e74:	b94b      	cbnz	r3, 8017e8a <_raise_r+0x32>
 8017e76:	4620      	mov	r0, r4
 8017e78:	f000 f830 	bl	8017edc <_getpid_r>
 8017e7c:	462a      	mov	r2, r5
 8017e7e:	4601      	mov	r1, r0
 8017e80:	4620      	mov	r0, r4
 8017e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e86:	f000 b817 	b.w	8017eb8 <_kill_r>
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d00a      	beq.n	8017ea4 <_raise_r+0x4c>
 8017e8e:	1c59      	adds	r1, r3, #1
 8017e90:	d103      	bne.n	8017e9a <_raise_r+0x42>
 8017e92:	2316      	movs	r3, #22
 8017e94:	6003      	str	r3, [r0, #0]
 8017e96:	2001      	movs	r0, #1
 8017e98:	e7e7      	b.n	8017e6a <_raise_r+0x12>
 8017e9a:	2400      	movs	r4, #0
 8017e9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	4798      	blx	r3
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	e7e0      	b.n	8017e6a <_raise_r+0x12>

08017ea8 <raise>:
 8017ea8:	4b02      	ldr	r3, [pc, #8]	; (8017eb4 <raise+0xc>)
 8017eaa:	4601      	mov	r1, r0
 8017eac:	6818      	ldr	r0, [r3, #0]
 8017eae:	f7ff bfd3 	b.w	8017e58 <_raise_r>
 8017eb2:	bf00      	nop
 8017eb4:	20000190 	.word	0x20000190

08017eb8 <_kill_r>:
 8017eb8:	b538      	push	{r3, r4, r5, lr}
 8017eba:	4d07      	ldr	r5, [pc, #28]	; (8017ed8 <_kill_r+0x20>)
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	4608      	mov	r0, r1
 8017ec2:	4611      	mov	r1, r2
 8017ec4:	602b      	str	r3, [r5, #0]
 8017ec6:	f7ed fcff 	bl	80058c8 <_kill>
 8017eca:	1c43      	adds	r3, r0, #1
 8017ecc:	d102      	bne.n	8017ed4 <_kill_r+0x1c>
 8017ece:	682b      	ldr	r3, [r5, #0]
 8017ed0:	b103      	cbz	r3, 8017ed4 <_kill_r+0x1c>
 8017ed2:	6023      	str	r3, [r4, #0]
 8017ed4:	bd38      	pop	{r3, r4, r5, pc}
 8017ed6:	bf00      	nop
 8017ed8:	200023cc 	.word	0x200023cc

08017edc <_getpid_r>:
 8017edc:	f7ed bcec 	b.w	80058b8 <_getpid>

08017ee0 <pow>:
 8017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee2:	ed2d 8b02 	vpush	{d8}
 8017ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8017eea:	eef0 8a60 	vmov.f32	s17, s1
 8017eee:	ec55 4b11 	vmov	r4, r5, d1
 8017ef2:	f000 f891 	bl	8018018 <__ieee754_pow>
 8017ef6:	4622      	mov	r2, r4
 8017ef8:	462b      	mov	r3, r5
 8017efa:	4620      	mov	r0, r4
 8017efc:	4629      	mov	r1, r5
 8017efe:	ec57 6b10 	vmov	r6, r7, d0
 8017f02:	f7e8 fe13 	bl	8000b2c <__aeabi_dcmpun>
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d13b      	bne.n	8017f82 <pow+0xa2>
 8017f0a:	ec51 0b18 	vmov	r0, r1, d8
 8017f0e:	2200      	movs	r2, #0
 8017f10:	2300      	movs	r3, #0
 8017f12:	f7e8 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f16:	b1b8      	cbz	r0, 8017f48 <pow+0x68>
 8017f18:	2200      	movs	r2, #0
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	4629      	mov	r1, r5
 8017f20:	f7e8 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f24:	2800      	cmp	r0, #0
 8017f26:	d146      	bne.n	8017fb6 <pow+0xd6>
 8017f28:	ec45 4b10 	vmov	d0, r4, r5
 8017f2c:	f000 fe8d 	bl	8018c4a <finite>
 8017f30:	b338      	cbz	r0, 8017f82 <pow+0xa2>
 8017f32:	2200      	movs	r2, #0
 8017f34:	2300      	movs	r3, #0
 8017f36:	4620      	mov	r0, r4
 8017f38:	4629      	mov	r1, r5
 8017f3a:	f7e8 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8017f3e:	b300      	cbz	r0, 8017f82 <pow+0xa2>
 8017f40:	f7fa ffd4 	bl	8012eec <__errno>
 8017f44:	2322      	movs	r3, #34	; 0x22
 8017f46:	e01b      	b.n	8017f80 <pow+0xa0>
 8017f48:	ec47 6b10 	vmov	d0, r6, r7
 8017f4c:	f000 fe7d 	bl	8018c4a <finite>
 8017f50:	b9e0      	cbnz	r0, 8017f8c <pow+0xac>
 8017f52:	eeb0 0a48 	vmov.f32	s0, s16
 8017f56:	eef0 0a68 	vmov.f32	s1, s17
 8017f5a:	f000 fe76 	bl	8018c4a <finite>
 8017f5e:	b1a8      	cbz	r0, 8017f8c <pow+0xac>
 8017f60:	ec45 4b10 	vmov	d0, r4, r5
 8017f64:	f000 fe71 	bl	8018c4a <finite>
 8017f68:	b180      	cbz	r0, 8017f8c <pow+0xac>
 8017f6a:	4632      	mov	r2, r6
 8017f6c:	463b      	mov	r3, r7
 8017f6e:	4630      	mov	r0, r6
 8017f70:	4639      	mov	r1, r7
 8017f72:	f7e8 fddb 	bl	8000b2c <__aeabi_dcmpun>
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d0e2      	beq.n	8017f40 <pow+0x60>
 8017f7a:	f7fa ffb7 	bl	8012eec <__errno>
 8017f7e:	2321      	movs	r3, #33	; 0x21
 8017f80:	6003      	str	r3, [r0, #0]
 8017f82:	ecbd 8b02 	vpop	{d8}
 8017f86:	ec47 6b10 	vmov	d0, r6, r7
 8017f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	2300      	movs	r3, #0
 8017f90:	4630      	mov	r0, r6
 8017f92:	4639      	mov	r1, r7
 8017f94:	f7e8 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d0f2      	beq.n	8017f82 <pow+0xa2>
 8017f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8017fa0:	eef0 0a68 	vmov.f32	s1, s17
 8017fa4:	f000 fe51 	bl	8018c4a <finite>
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	d0ea      	beq.n	8017f82 <pow+0xa2>
 8017fac:	ec45 4b10 	vmov	d0, r4, r5
 8017fb0:	f000 fe4b 	bl	8018c4a <finite>
 8017fb4:	e7c3      	b.n	8017f3e <pow+0x5e>
 8017fb6:	4f01      	ldr	r7, [pc, #4]	; (8017fbc <pow+0xdc>)
 8017fb8:	2600      	movs	r6, #0
 8017fba:	e7e2      	b.n	8017f82 <pow+0xa2>
 8017fbc:	3ff00000 	.word	0x3ff00000

08017fc0 <sqrt>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	ed2d 8b02 	vpush	{d8}
 8017fc6:	ec55 4b10 	vmov	r4, r5, d0
 8017fca:	f000 fd53 	bl	8018a74 <__ieee754_sqrt>
 8017fce:	4622      	mov	r2, r4
 8017fd0:	462b      	mov	r3, r5
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	4629      	mov	r1, r5
 8017fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8017fda:	eef0 8a60 	vmov.f32	s17, s1
 8017fde:	f7e8 fda5 	bl	8000b2c <__aeabi_dcmpun>
 8017fe2:	b990      	cbnz	r0, 801800a <sqrt+0x4a>
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	4620      	mov	r0, r4
 8017fea:	4629      	mov	r1, r5
 8017fec:	f7e8 fd76 	bl	8000adc <__aeabi_dcmplt>
 8017ff0:	b158      	cbz	r0, 801800a <sqrt+0x4a>
 8017ff2:	f7fa ff7b 	bl	8012eec <__errno>
 8017ff6:	2321      	movs	r3, #33	; 0x21
 8017ff8:	6003      	str	r3, [r0, #0]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	4610      	mov	r0, r2
 8018000:	4619      	mov	r1, r3
 8018002:	f7e8 fc23 	bl	800084c <__aeabi_ddiv>
 8018006:	ec41 0b18 	vmov	d8, r0, r1
 801800a:	eeb0 0a48 	vmov.f32	s0, s16
 801800e:	eef0 0a68 	vmov.f32	s1, s17
 8018012:	ecbd 8b02 	vpop	{d8}
 8018016:	bd38      	pop	{r3, r4, r5, pc}

08018018 <__ieee754_pow>:
 8018018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801c:	ed2d 8b06 	vpush	{d8-d10}
 8018020:	b089      	sub	sp, #36	; 0x24
 8018022:	ed8d 1b00 	vstr	d1, [sp]
 8018026:	e9dd 2900 	ldrd	r2, r9, [sp]
 801802a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801802e:	ea58 0102 	orrs.w	r1, r8, r2
 8018032:	ec57 6b10 	vmov	r6, r7, d0
 8018036:	d115      	bne.n	8018064 <__ieee754_pow+0x4c>
 8018038:	19b3      	adds	r3, r6, r6
 801803a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801803e:	4152      	adcs	r2, r2
 8018040:	4299      	cmp	r1, r3
 8018042:	4b89      	ldr	r3, [pc, #548]	; (8018268 <__ieee754_pow+0x250>)
 8018044:	4193      	sbcs	r3, r2
 8018046:	f080 84d2 	bcs.w	80189ee <__ieee754_pow+0x9d6>
 801804a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801804e:	4630      	mov	r0, r6
 8018050:	4639      	mov	r1, r7
 8018052:	f7e8 f91b 	bl	800028c <__adddf3>
 8018056:	ec41 0b10 	vmov	d0, r0, r1
 801805a:	b009      	add	sp, #36	; 0x24
 801805c:	ecbd 8b06 	vpop	{d8-d10}
 8018060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018064:	4b81      	ldr	r3, [pc, #516]	; (801826c <__ieee754_pow+0x254>)
 8018066:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801806a:	429c      	cmp	r4, r3
 801806c:	ee10 aa10 	vmov	sl, s0
 8018070:	463d      	mov	r5, r7
 8018072:	dc06      	bgt.n	8018082 <__ieee754_pow+0x6a>
 8018074:	d101      	bne.n	801807a <__ieee754_pow+0x62>
 8018076:	2e00      	cmp	r6, #0
 8018078:	d1e7      	bne.n	801804a <__ieee754_pow+0x32>
 801807a:	4598      	cmp	r8, r3
 801807c:	dc01      	bgt.n	8018082 <__ieee754_pow+0x6a>
 801807e:	d10f      	bne.n	80180a0 <__ieee754_pow+0x88>
 8018080:	b172      	cbz	r2, 80180a0 <__ieee754_pow+0x88>
 8018082:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8018086:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801808a:	ea55 050a 	orrs.w	r5, r5, sl
 801808e:	d1dc      	bne.n	801804a <__ieee754_pow+0x32>
 8018090:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018094:	18db      	adds	r3, r3, r3
 8018096:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801809a:	4152      	adcs	r2, r2
 801809c:	429d      	cmp	r5, r3
 801809e:	e7d0      	b.n	8018042 <__ieee754_pow+0x2a>
 80180a0:	2d00      	cmp	r5, #0
 80180a2:	da3b      	bge.n	801811c <__ieee754_pow+0x104>
 80180a4:	4b72      	ldr	r3, [pc, #456]	; (8018270 <__ieee754_pow+0x258>)
 80180a6:	4598      	cmp	r8, r3
 80180a8:	dc51      	bgt.n	801814e <__ieee754_pow+0x136>
 80180aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80180ae:	4598      	cmp	r8, r3
 80180b0:	f340 84ac 	ble.w	8018a0c <__ieee754_pow+0x9f4>
 80180b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80180b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80180bc:	2b14      	cmp	r3, #20
 80180be:	dd0f      	ble.n	80180e0 <__ieee754_pow+0xc8>
 80180c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80180c4:	fa22 f103 	lsr.w	r1, r2, r3
 80180c8:	fa01 f303 	lsl.w	r3, r1, r3
 80180cc:	4293      	cmp	r3, r2
 80180ce:	f040 849d 	bne.w	8018a0c <__ieee754_pow+0x9f4>
 80180d2:	f001 0101 	and.w	r1, r1, #1
 80180d6:	f1c1 0302 	rsb	r3, r1, #2
 80180da:	9304      	str	r3, [sp, #16]
 80180dc:	b182      	cbz	r2, 8018100 <__ieee754_pow+0xe8>
 80180de:	e05f      	b.n	80181a0 <__ieee754_pow+0x188>
 80180e0:	2a00      	cmp	r2, #0
 80180e2:	d15b      	bne.n	801819c <__ieee754_pow+0x184>
 80180e4:	f1c3 0314 	rsb	r3, r3, #20
 80180e8:	fa48 f103 	asr.w	r1, r8, r3
 80180ec:	fa01 f303 	lsl.w	r3, r1, r3
 80180f0:	4543      	cmp	r3, r8
 80180f2:	f040 8488 	bne.w	8018a06 <__ieee754_pow+0x9ee>
 80180f6:	f001 0101 	and.w	r1, r1, #1
 80180fa:	f1c1 0302 	rsb	r3, r1, #2
 80180fe:	9304      	str	r3, [sp, #16]
 8018100:	4b5c      	ldr	r3, [pc, #368]	; (8018274 <__ieee754_pow+0x25c>)
 8018102:	4598      	cmp	r8, r3
 8018104:	d132      	bne.n	801816c <__ieee754_pow+0x154>
 8018106:	f1b9 0f00 	cmp.w	r9, #0
 801810a:	f280 8478 	bge.w	80189fe <__ieee754_pow+0x9e6>
 801810e:	4959      	ldr	r1, [pc, #356]	; (8018274 <__ieee754_pow+0x25c>)
 8018110:	4632      	mov	r2, r6
 8018112:	463b      	mov	r3, r7
 8018114:	2000      	movs	r0, #0
 8018116:	f7e8 fb99 	bl	800084c <__aeabi_ddiv>
 801811a:	e79c      	b.n	8018056 <__ieee754_pow+0x3e>
 801811c:	2300      	movs	r3, #0
 801811e:	9304      	str	r3, [sp, #16]
 8018120:	2a00      	cmp	r2, #0
 8018122:	d13d      	bne.n	80181a0 <__ieee754_pow+0x188>
 8018124:	4b51      	ldr	r3, [pc, #324]	; (801826c <__ieee754_pow+0x254>)
 8018126:	4598      	cmp	r8, r3
 8018128:	d1ea      	bne.n	8018100 <__ieee754_pow+0xe8>
 801812a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801812e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018132:	ea53 030a 	orrs.w	r3, r3, sl
 8018136:	f000 845a 	beq.w	80189ee <__ieee754_pow+0x9d6>
 801813a:	4b4f      	ldr	r3, [pc, #316]	; (8018278 <__ieee754_pow+0x260>)
 801813c:	429c      	cmp	r4, r3
 801813e:	dd08      	ble.n	8018152 <__ieee754_pow+0x13a>
 8018140:	f1b9 0f00 	cmp.w	r9, #0
 8018144:	f2c0 8457 	blt.w	80189f6 <__ieee754_pow+0x9de>
 8018148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801814c:	e783      	b.n	8018056 <__ieee754_pow+0x3e>
 801814e:	2302      	movs	r3, #2
 8018150:	e7e5      	b.n	801811e <__ieee754_pow+0x106>
 8018152:	f1b9 0f00 	cmp.w	r9, #0
 8018156:	f04f 0000 	mov.w	r0, #0
 801815a:	f04f 0100 	mov.w	r1, #0
 801815e:	f6bf af7a 	bge.w	8018056 <__ieee754_pow+0x3e>
 8018162:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801816a:	e774      	b.n	8018056 <__ieee754_pow+0x3e>
 801816c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018170:	d106      	bne.n	8018180 <__ieee754_pow+0x168>
 8018172:	4632      	mov	r2, r6
 8018174:	463b      	mov	r3, r7
 8018176:	4630      	mov	r0, r6
 8018178:	4639      	mov	r1, r7
 801817a:	f7e8 fa3d 	bl	80005f8 <__aeabi_dmul>
 801817e:	e76a      	b.n	8018056 <__ieee754_pow+0x3e>
 8018180:	4b3e      	ldr	r3, [pc, #248]	; (801827c <__ieee754_pow+0x264>)
 8018182:	4599      	cmp	r9, r3
 8018184:	d10c      	bne.n	80181a0 <__ieee754_pow+0x188>
 8018186:	2d00      	cmp	r5, #0
 8018188:	db0a      	blt.n	80181a0 <__ieee754_pow+0x188>
 801818a:	ec47 6b10 	vmov	d0, r6, r7
 801818e:	b009      	add	sp, #36	; 0x24
 8018190:	ecbd 8b06 	vpop	{d8-d10}
 8018194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018198:	f000 bc6c 	b.w	8018a74 <__ieee754_sqrt>
 801819c:	2300      	movs	r3, #0
 801819e:	9304      	str	r3, [sp, #16]
 80181a0:	ec47 6b10 	vmov	d0, r6, r7
 80181a4:	f000 fd48 	bl	8018c38 <fabs>
 80181a8:	ec51 0b10 	vmov	r0, r1, d0
 80181ac:	f1ba 0f00 	cmp.w	sl, #0
 80181b0:	d129      	bne.n	8018206 <__ieee754_pow+0x1ee>
 80181b2:	b124      	cbz	r4, 80181be <__ieee754_pow+0x1a6>
 80181b4:	4b2f      	ldr	r3, [pc, #188]	; (8018274 <__ieee754_pow+0x25c>)
 80181b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d123      	bne.n	8018206 <__ieee754_pow+0x1ee>
 80181be:	f1b9 0f00 	cmp.w	r9, #0
 80181c2:	da05      	bge.n	80181d0 <__ieee754_pow+0x1b8>
 80181c4:	4602      	mov	r2, r0
 80181c6:	460b      	mov	r3, r1
 80181c8:	2000      	movs	r0, #0
 80181ca:	492a      	ldr	r1, [pc, #168]	; (8018274 <__ieee754_pow+0x25c>)
 80181cc:	f7e8 fb3e 	bl	800084c <__aeabi_ddiv>
 80181d0:	2d00      	cmp	r5, #0
 80181d2:	f6bf af40 	bge.w	8018056 <__ieee754_pow+0x3e>
 80181d6:	9b04      	ldr	r3, [sp, #16]
 80181d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80181dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80181e0:	4323      	orrs	r3, r4
 80181e2:	d108      	bne.n	80181f6 <__ieee754_pow+0x1de>
 80181e4:	4602      	mov	r2, r0
 80181e6:	460b      	mov	r3, r1
 80181e8:	4610      	mov	r0, r2
 80181ea:	4619      	mov	r1, r3
 80181ec:	f7e8 f84c 	bl	8000288 <__aeabi_dsub>
 80181f0:	4602      	mov	r2, r0
 80181f2:	460b      	mov	r3, r1
 80181f4:	e78f      	b.n	8018116 <__ieee754_pow+0xfe>
 80181f6:	9b04      	ldr	r3, [sp, #16]
 80181f8:	2b01      	cmp	r3, #1
 80181fa:	f47f af2c 	bne.w	8018056 <__ieee754_pow+0x3e>
 80181fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018202:	4619      	mov	r1, r3
 8018204:	e727      	b.n	8018056 <__ieee754_pow+0x3e>
 8018206:	0feb      	lsrs	r3, r5, #31
 8018208:	3b01      	subs	r3, #1
 801820a:	9306      	str	r3, [sp, #24]
 801820c:	9a06      	ldr	r2, [sp, #24]
 801820e:	9b04      	ldr	r3, [sp, #16]
 8018210:	4313      	orrs	r3, r2
 8018212:	d102      	bne.n	801821a <__ieee754_pow+0x202>
 8018214:	4632      	mov	r2, r6
 8018216:	463b      	mov	r3, r7
 8018218:	e7e6      	b.n	80181e8 <__ieee754_pow+0x1d0>
 801821a:	4b19      	ldr	r3, [pc, #100]	; (8018280 <__ieee754_pow+0x268>)
 801821c:	4598      	cmp	r8, r3
 801821e:	f340 80fb 	ble.w	8018418 <__ieee754_pow+0x400>
 8018222:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018226:	4598      	cmp	r8, r3
 8018228:	4b13      	ldr	r3, [pc, #76]	; (8018278 <__ieee754_pow+0x260>)
 801822a:	dd0c      	ble.n	8018246 <__ieee754_pow+0x22e>
 801822c:	429c      	cmp	r4, r3
 801822e:	dc0f      	bgt.n	8018250 <__ieee754_pow+0x238>
 8018230:	f1b9 0f00 	cmp.w	r9, #0
 8018234:	da0f      	bge.n	8018256 <__ieee754_pow+0x23e>
 8018236:	2000      	movs	r0, #0
 8018238:	b009      	add	sp, #36	; 0x24
 801823a:	ecbd 8b06 	vpop	{d8-d10}
 801823e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018242:	f000 bcf0 	b.w	8018c26 <__math_oflow>
 8018246:	429c      	cmp	r4, r3
 8018248:	dbf2      	blt.n	8018230 <__ieee754_pow+0x218>
 801824a:	4b0a      	ldr	r3, [pc, #40]	; (8018274 <__ieee754_pow+0x25c>)
 801824c:	429c      	cmp	r4, r3
 801824e:	dd19      	ble.n	8018284 <__ieee754_pow+0x26c>
 8018250:	f1b9 0f00 	cmp.w	r9, #0
 8018254:	dcef      	bgt.n	8018236 <__ieee754_pow+0x21e>
 8018256:	2000      	movs	r0, #0
 8018258:	b009      	add	sp, #36	; 0x24
 801825a:	ecbd 8b06 	vpop	{d8-d10}
 801825e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018262:	f000 bcd7 	b.w	8018c14 <__math_uflow>
 8018266:	bf00      	nop
 8018268:	fff00000 	.word	0xfff00000
 801826c:	7ff00000 	.word	0x7ff00000
 8018270:	433fffff 	.word	0x433fffff
 8018274:	3ff00000 	.word	0x3ff00000
 8018278:	3fefffff 	.word	0x3fefffff
 801827c:	3fe00000 	.word	0x3fe00000
 8018280:	41e00000 	.word	0x41e00000
 8018284:	4b60      	ldr	r3, [pc, #384]	; (8018408 <__ieee754_pow+0x3f0>)
 8018286:	2200      	movs	r2, #0
 8018288:	f7e7 fffe 	bl	8000288 <__aeabi_dsub>
 801828c:	a354      	add	r3, pc, #336	; (adr r3, 80183e0 <__ieee754_pow+0x3c8>)
 801828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018292:	4604      	mov	r4, r0
 8018294:	460d      	mov	r5, r1
 8018296:	f7e8 f9af 	bl	80005f8 <__aeabi_dmul>
 801829a:	a353      	add	r3, pc, #332	; (adr r3, 80183e8 <__ieee754_pow+0x3d0>)
 801829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a0:	4606      	mov	r6, r0
 80182a2:	460f      	mov	r7, r1
 80182a4:	4620      	mov	r0, r4
 80182a6:	4629      	mov	r1, r5
 80182a8:	f7e8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80182ac:	4b57      	ldr	r3, [pc, #348]	; (801840c <__ieee754_pow+0x3f4>)
 80182ae:	4682      	mov	sl, r0
 80182b0:	468b      	mov	fp, r1
 80182b2:	2200      	movs	r2, #0
 80182b4:	4620      	mov	r0, r4
 80182b6:	4629      	mov	r1, r5
 80182b8:	f7e8 f99e 	bl	80005f8 <__aeabi_dmul>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	a14b      	add	r1, pc, #300	; (adr r1, 80183f0 <__ieee754_pow+0x3d8>)
 80182c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182c6:	f7e7 ffdf 	bl	8000288 <__aeabi_dsub>
 80182ca:	4622      	mov	r2, r4
 80182cc:	462b      	mov	r3, r5
 80182ce:	f7e8 f993 	bl	80005f8 <__aeabi_dmul>
 80182d2:	4602      	mov	r2, r0
 80182d4:	460b      	mov	r3, r1
 80182d6:	2000      	movs	r0, #0
 80182d8:	494d      	ldr	r1, [pc, #308]	; (8018410 <__ieee754_pow+0x3f8>)
 80182da:	f7e7 ffd5 	bl	8000288 <__aeabi_dsub>
 80182de:	4622      	mov	r2, r4
 80182e0:	4680      	mov	r8, r0
 80182e2:	4689      	mov	r9, r1
 80182e4:	462b      	mov	r3, r5
 80182e6:	4620      	mov	r0, r4
 80182e8:	4629      	mov	r1, r5
 80182ea:	f7e8 f985 	bl	80005f8 <__aeabi_dmul>
 80182ee:	4602      	mov	r2, r0
 80182f0:	460b      	mov	r3, r1
 80182f2:	4640      	mov	r0, r8
 80182f4:	4649      	mov	r1, r9
 80182f6:	f7e8 f97f 	bl	80005f8 <__aeabi_dmul>
 80182fa:	a33f      	add	r3, pc, #252	; (adr r3, 80183f8 <__ieee754_pow+0x3e0>)
 80182fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018300:	f7e8 f97a 	bl	80005f8 <__aeabi_dmul>
 8018304:	4602      	mov	r2, r0
 8018306:	460b      	mov	r3, r1
 8018308:	4650      	mov	r0, sl
 801830a:	4659      	mov	r1, fp
 801830c:	f7e7 ffbc 	bl	8000288 <__aeabi_dsub>
 8018310:	4602      	mov	r2, r0
 8018312:	460b      	mov	r3, r1
 8018314:	4680      	mov	r8, r0
 8018316:	4689      	mov	r9, r1
 8018318:	4630      	mov	r0, r6
 801831a:	4639      	mov	r1, r7
 801831c:	f7e7 ffb6 	bl	800028c <__adddf3>
 8018320:	2000      	movs	r0, #0
 8018322:	4632      	mov	r2, r6
 8018324:	463b      	mov	r3, r7
 8018326:	4604      	mov	r4, r0
 8018328:	460d      	mov	r5, r1
 801832a:	f7e7 ffad 	bl	8000288 <__aeabi_dsub>
 801832e:	4602      	mov	r2, r0
 8018330:	460b      	mov	r3, r1
 8018332:	4640      	mov	r0, r8
 8018334:	4649      	mov	r1, r9
 8018336:	f7e7 ffa7 	bl	8000288 <__aeabi_dsub>
 801833a:	9b04      	ldr	r3, [sp, #16]
 801833c:	9a06      	ldr	r2, [sp, #24]
 801833e:	3b01      	subs	r3, #1
 8018340:	4313      	orrs	r3, r2
 8018342:	4682      	mov	sl, r0
 8018344:	468b      	mov	fp, r1
 8018346:	f040 81e7 	bne.w	8018718 <__ieee754_pow+0x700>
 801834a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018400 <__ieee754_pow+0x3e8>
 801834e:	eeb0 8a47 	vmov.f32	s16, s14
 8018352:	eef0 8a67 	vmov.f32	s17, s15
 8018356:	e9dd 6700 	ldrd	r6, r7, [sp]
 801835a:	2600      	movs	r6, #0
 801835c:	4632      	mov	r2, r6
 801835e:	463b      	mov	r3, r7
 8018360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018364:	f7e7 ff90 	bl	8000288 <__aeabi_dsub>
 8018368:	4622      	mov	r2, r4
 801836a:	462b      	mov	r3, r5
 801836c:	f7e8 f944 	bl	80005f8 <__aeabi_dmul>
 8018370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018374:	4680      	mov	r8, r0
 8018376:	4689      	mov	r9, r1
 8018378:	4650      	mov	r0, sl
 801837a:	4659      	mov	r1, fp
 801837c:	f7e8 f93c 	bl	80005f8 <__aeabi_dmul>
 8018380:	4602      	mov	r2, r0
 8018382:	460b      	mov	r3, r1
 8018384:	4640      	mov	r0, r8
 8018386:	4649      	mov	r1, r9
 8018388:	f7e7 ff80 	bl	800028c <__adddf3>
 801838c:	4632      	mov	r2, r6
 801838e:	463b      	mov	r3, r7
 8018390:	4680      	mov	r8, r0
 8018392:	4689      	mov	r9, r1
 8018394:	4620      	mov	r0, r4
 8018396:	4629      	mov	r1, r5
 8018398:	f7e8 f92e 	bl	80005f8 <__aeabi_dmul>
 801839c:	460b      	mov	r3, r1
 801839e:	4604      	mov	r4, r0
 80183a0:	460d      	mov	r5, r1
 80183a2:	4602      	mov	r2, r0
 80183a4:	4649      	mov	r1, r9
 80183a6:	4640      	mov	r0, r8
 80183a8:	f7e7 ff70 	bl	800028c <__adddf3>
 80183ac:	4b19      	ldr	r3, [pc, #100]	; (8018414 <__ieee754_pow+0x3fc>)
 80183ae:	4299      	cmp	r1, r3
 80183b0:	ec45 4b19 	vmov	d9, r4, r5
 80183b4:	4606      	mov	r6, r0
 80183b6:	460f      	mov	r7, r1
 80183b8:	468b      	mov	fp, r1
 80183ba:	f340 82f1 	ble.w	80189a0 <__ieee754_pow+0x988>
 80183be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80183c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80183c6:	4303      	orrs	r3, r0
 80183c8:	f000 81e4 	beq.w	8018794 <__ieee754_pow+0x77c>
 80183cc:	ec51 0b18 	vmov	r0, r1, d8
 80183d0:	2200      	movs	r2, #0
 80183d2:	2300      	movs	r3, #0
 80183d4:	f7e8 fb82 	bl	8000adc <__aeabi_dcmplt>
 80183d8:	3800      	subs	r0, #0
 80183da:	bf18      	it	ne
 80183dc:	2001      	movne	r0, #1
 80183de:	e72b      	b.n	8018238 <__ieee754_pow+0x220>
 80183e0:	60000000 	.word	0x60000000
 80183e4:	3ff71547 	.word	0x3ff71547
 80183e8:	f85ddf44 	.word	0xf85ddf44
 80183ec:	3e54ae0b 	.word	0x3e54ae0b
 80183f0:	55555555 	.word	0x55555555
 80183f4:	3fd55555 	.word	0x3fd55555
 80183f8:	652b82fe 	.word	0x652b82fe
 80183fc:	3ff71547 	.word	0x3ff71547
 8018400:	00000000 	.word	0x00000000
 8018404:	bff00000 	.word	0xbff00000
 8018408:	3ff00000 	.word	0x3ff00000
 801840c:	3fd00000 	.word	0x3fd00000
 8018410:	3fe00000 	.word	0x3fe00000
 8018414:	408fffff 	.word	0x408fffff
 8018418:	4bd5      	ldr	r3, [pc, #852]	; (8018770 <__ieee754_pow+0x758>)
 801841a:	402b      	ands	r3, r5
 801841c:	2200      	movs	r2, #0
 801841e:	b92b      	cbnz	r3, 801842c <__ieee754_pow+0x414>
 8018420:	4bd4      	ldr	r3, [pc, #848]	; (8018774 <__ieee754_pow+0x75c>)
 8018422:	f7e8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8018426:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801842a:	460c      	mov	r4, r1
 801842c:	1523      	asrs	r3, r4, #20
 801842e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018432:	4413      	add	r3, r2
 8018434:	9305      	str	r3, [sp, #20]
 8018436:	4bd0      	ldr	r3, [pc, #832]	; (8018778 <__ieee754_pow+0x760>)
 8018438:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801843c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018440:	429c      	cmp	r4, r3
 8018442:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018446:	dd08      	ble.n	801845a <__ieee754_pow+0x442>
 8018448:	4bcc      	ldr	r3, [pc, #816]	; (801877c <__ieee754_pow+0x764>)
 801844a:	429c      	cmp	r4, r3
 801844c:	f340 8162 	ble.w	8018714 <__ieee754_pow+0x6fc>
 8018450:	9b05      	ldr	r3, [sp, #20]
 8018452:	3301      	adds	r3, #1
 8018454:	9305      	str	r3, [sp, #20]
 8018456:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801845a:	2400      	movs	r4, #0
 801845c:	00e3      	lsls	r3, r4, #3
 801845e:	9307      	str	r3, [sp, #28]
 8018460:	4bc7      	ldr	r3, [pc, #796]	; (8018780 <__ieee754_pow+0x768>)
 8018462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018466:	ed93 7b00 	vldr	d7, [r3]
 801846a:	4629      	mov	r1, r5
 801846c:	ec53 2b17 	vmov	r2, r3, d7
 8018470:	eeb0 9a47 	vmov.f32	s18, s14
 8018474:	eef0 9a67 	vmov.f32	s19, s15
 8018478:	4682      	mov	sl, r0
 801847a:	f7e7 ff05 	bl	8000288 <__aeabi_dsub>
 801847e:	4652      	mov	r2, sl
 8018480:	4606      	mov	r6, r0
 8018482:	460f      	mov	r7, r1
 8018484:	462b      	mov	r3, r5
 8018486:	ec51 0b19 	vmov	r0, r1, d9
 801848a:	f7e7 feff 	bl	800028c <__adddf3>
 801848e:	4602      	mov	r2, r0
 8018490:	460b      	mov	r3, r1
 8018492:	2000      	movs	r0, #0
 8018494:	49bb      	ldr	r1, [pc, #748]	; (8018784 <__ieee754_pow+0x76c>)
 8018496:	f7e8 f9d9 	bl	800084c <__aeabi_ddiv>
 801849a:	ec41 0b1a 	vmov	d10, r0, r1
 801849e:	4602      	mov	r2, r0
 80184a0:	460b      	mov	r3, r1
 80184a2:	4630      	mov	r0, r6
 80184a4:	4639      	mov	r1, r7
 80184a6:	f7e8 f8a7 	bl	80005f8 <__aeabi_dmul>
 80184aa:	2300      	movs	r3, #0
 80184ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184b0:	9302      	str	r3, [sp, #8]
 80184b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80184b6:	46ab      	mov	fp, r5
 80184b8:	106d      	asrs	r5, r5, #1
 80184ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80184be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80184c2:	ec41 0b18 	vmov	d8, r0, r1
 80184c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80184ca:	2200      	movs	r2, #0
 80184cc:	4640      	mov	r0, r8
 80184ce:	4649      	mov	r1, r9
 80184d0:	4614      	mov	r4, r2
 80184d2:	461d      	mov	r5, r3
 80184d4:	f7e8 f890 	bl	80005f8 <__aeabi_dmul>
 80184d8:	4602      	mov	r2, r0
 80184da:	460b      	mov	r3, r1
 80184dc:	4630      	mov	r0, r6
 80184de:	4639      	mov	r1, r7
 80184e0:	f7e7 fed2 	bl	8000288 <__aeabi_dsub>
 80184e4:	ec53 2b19 	vmov	r2, r3, d9
 80184e8:	4606      	mov	r6, r0
 80184ea:	460f      	mov	r7, r1
 80184ec:	4620      	mov	r0, r4
 80184ee:	4629      	mov	r1, r5
 80184f0:	f7e7 feca 	bl	8000288 <__aeabi_dsub>
 80184f4:	4602      	mov	r2, r0
 80184f6:	460b      	mov	r3, r1
 80184f8:	4650      	mov	r0, sl
 80184fa:	4659      	mov	r1, fp
 80184fc:	f7e7 fec4 	bl	8000288 <__aeabi_dsub>
 8018500:	4642      	mov	r2, r8
 8018502:	464b      	mov	r3, r9
 8018504:	f7e8 f878 	bl	80005f8 <__aeabi_dmul>
 8018508:	4602      	mov	r2, r0
 801850a:	460b      	mov	r3, r1
 801850c:	4630      	mov	r0, r6
 801850e:	4639      	mov	r1, r7
 8018510:	f7e7 feba 	bl	8000288 <__aeabi_dsub>
 8018514:	ec53 2b1a 	vmov	r2, r3, d10
 8018518:	f7e8 f86e 	bl	80005f8 <__aeabi_dmul>
 801851c:	ec53 2b18 	vmov	r2, r3, d8
 8018520:	ec41 0b19 	vmov	d9, r0, r1
 8018524:	ec51 0b18 	vmov	r0, r1, d8
 8018528:	f7e8 f866 	bl	80005f8 <__aeabi_dmul>
 801852c:	a37c      	add	r3, pc, #496	; (adr r3, 8018720 <__ieee754_pow+0x708>)
 801852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018532:	4604      	mov	r4, r0
 8018534:	460d      	mov	r5, r1
 8018536:	f7e8 f85f 	bl	80005f8 <__aeabi_dmul>
 801853a:	a37b      	add	r3, pc, #492	; (adr r3, 8018728 <__ieee754_pow+0x710>)
 801853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018540:	f7e7 fea4 	bl	800028c <__adddf3>
 8018544:	4622      	mov	r2, r4
 8018546:	462b      	mov	r3, r5
 8018548:	f7e8 f856 	bl	80005f8 <__aeabi_dmul>
 801854c:	a378      	add	r3, pc, #480	; (adr r3, 8018730 <__ieee754_pow+0x718>)
 801854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018552:	f7e7 fe9b 	bl	800028c <__adddf3>
 8018556:	4622      	mov	r2, r4
 8018558:	462b      	mov	r3, r5
 801855a:	f7e8 f84d 	bl	80005f8 <__aeabi_dmul>
 801855e:	a376      	add	r3, pc, #472	; (adr r3, 8018738 <__ieee754_pow+0x720>)
 8018560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018564:	f7e7 fe92 	bl	800028c <__adddf3>
 8018568:	4622      	mov	r2, r4
 801856a:	462b      	mov	r3, r5
 801856c:	f7e8 f844 	bl	80005f8 <__aeabi_dmul>
 8018570:	a373      	add	r3, pc, #460	; (adr r3, 8018740 <__ieee754_pow+0x728>)
 8018572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018576:	f7e7 fe89 	bl	800028c <__adddf3>
 801857a:	4622      	mov	r2, r4
 801857c:	462b      	mov	r3, r5
 801857e:	f7e8 f83b 	bl	80005f8 <__aeabi_dmul>
 8018582:	a371      	add	r3, pc, #452	; (adr r3, 8018748 <__ieee754_pow+0x730>)
 8018584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018588:	f7e7 fe80 	bl	800028c <__adddf3>
 801858c:	4622      	mov	r2, r4
 801858e:	4606      	mov	r6, r0
 8018590:	460f      	mov	r7, r1
 8018592:	462b      	mov	r3, r5
 8018594:	4620      	mov	r0, r4
 8018596:	4629      	mov	r1, r5
 8018598:	f7e8 f82e 	bl	80005f8 <__aeabi_dmul>
 801859c:	4602      	mov	r2, r0
 801859e:	460b      	mov	r3, r1
 80185a0:	4630      	mov	r0, r6
 80185a2:	4639      	mov	r1, r7
 80185a4:	f7e8 f828 	bl	80005f8 <__aeabi_dmul>
 80185a8:	4642      	mov	r2, r8
 80185aa:	4604      	mov	r4, r0
 80185ac:	460d      	mov	r5, r1
 80185ae:	464b      	mov	r3, r9
 80185b0:	ec51 0b18 	vmov	r0, r1, d8
 80185b4:	f7e7 fe6a 	bl	800028c <__adddf3>
 80185b8:	ec53 2b19 	vmov	r2, r3, d9
 80185bc:	f7e8 f81c 	bl	80005f8 <__aeabi_dmul>
 80185c0:	4622      	mov	r2, r4
 80185c2:	462b      	mov	r3, r5
 80185c4:	f7e7 fe62 	bl	800028c <__adddf3>
 80185c8:	4642      	mov	r2, r8
 80185ca:	4682      	mov	sl, r0
 80185cc:	468b      	mov	fp, r1
 80185ce:	464b      	mov	r3, r9
 80185d0:	4640      	mov	r0, r8
 80185d2:	4649      	mov	r1, r9
 80185d4:	f7e8 f810 	bl	80005f8 <__aeabi_dmul>
 80185d8:	4b6b      	ldr	r3, [pc, #428]	; (8018788 <__ieee754_pow+0x770>)
 80185da:	2200      	movs	r2, #0
 80185dc:	4606      	mov	r6, r0
 80185de:	460f      	mov	r7, r1
 80185e0:	f7e7 fe54 	bl	800028c <__adddf3>
 80185e4:	4652      	mov	r2, sl
 80185e6:	465b      	mov	r3, fp
 80185e8:	f7e7 fe50 	bl	800028c <__adddf3>
 80185ec:	2000      	movs	r0, #0
 80185ee:	4604      	mov	r4, r0
 80185f0:	460d      	mov	r5, r1
 80185f2:	4602      	mov	r2, r0
 80185f4:	460b      	mov	r3, r1
 80185f6:	4640      	mov	r0, r8
 80185f8:	4649      	mov	r1, r9
 80185fa:	f7e7 fffd 	bl	80005f8 <__aeabi_dmul>
 80185fe:	4b62      	ldr	r3, [pc, #392]	; (8018788 <__ieee754_pow+0x770>)
 8018600:	4680      	mov	r8, r0
 8018602:	4689      	mov	r9, r1
 8018604:	2200      	movs	r2, #0
 8018606:	4620      	mov	r0, r4
 8018608:	4629      	mov	r1, r5
 801860a:	f7e7 fe3d 	bl	8000288 <__aeabi_dsub>
 801860e:	4632      	mov	r2, r6
 8018610:	463b      	mov	r3, r7
 8018612:	f7e7 fe39 	bl	8000288 <__aeabi_dsub>
 8018616:	4602      	mov	r2, r0
 8018618:	460b      	mov	r3, r1
 801861a:	4650      	mov	r0, sl
 801861c:	4659      	mov	r1, fp
 801861e:	f7e7 fe33 	bl	8000288 <__aeabi_dsub>
 8018622:	ec53 2b18 	vmov	r2, r3, d8
 8018626:	f7e7 ffe7 	bl	80005f8 <__aeabi_dmul>
 801862a:	4622      	mov	r2, r4
 801862c:	4606      	mov	r6, r0
 801862e:	460f      	mov	r7, r1
 8018630:	462b      	mov	r3, r5
 8018632:	ec51 0b19 	vmov	r0, r1, d9
 8018636:	f7e7 ffdf 	bl	80005f8 <__aeabi_dmul>
 801863a:	4602      	mov	r2, r0
 801863c:	460b      	mov	r3, r1
 801863e:	4630      	mov	r0, r6
 8018640:	4639      	mov	r1, r7
 8018642:	f7e7 fe23 	bl	800028c <__adddf3>
 8018646:	4606      	mov	r6, r0
 8018648:	460f      	mov	r7, r1
 801864a:	4602      	mov	r2, r0
 801864c:	460b      	mov	r3, r1
 801864e:	4640      	mov	r0, r8
 8018650:	4649      	mov	r1, r9
 8018652:	f7e7 fe1b 	bl	800028c <__adddf3>
 8018656:	a33e      	add	r3, pc, #248	; (adr r3, 8018750 <__ieee754_pow+0x738>)
 8018658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801865c:	2000      	movs	r0, #0
 801865e:	4604      	mov	r4, r0
 8018660:	460d      	mov	r5, r1
 8018662:	f7e7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8018666:	4642      	mov	r2, r8
 8018668:	ec41 0b18 	vmov	d8, r0, r1
 801866c:	464b      	mov	r3, r9
 801866e:	4620      	mov	r0, r4
 8018670:	4629      	mov	r1, r5
 8018672:	f7e7 fe09 	bl	8000288 <__aeabi_dsub>
 8018676:	4602      	mov	r2, r0
 8018678:	460b      	mov	r3, r1
 801867a:	4630      	mov	r0, r6
 801867c:	4639      	mov	r1, r7
 801867e:	f7e7 fe03 	bl	8000288 <__aeabi_dsub>
 8018682:	a335      	add	r3, pc, #212	; (adr r3, 8018758 <__ieee754_pow+0x740>)
 8018684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018688:	f7e7 ffb6 	bl	80005f8 <__aeabi_dmul>
 801868c:	a334      	add	r3, pc, #208	; (adr r3, 8018760 <__ieee754_pow+0x748>)
 801868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018692:	4606      	mov	r6, r0
 8018694:	460f      	mov	r7, r1
 8018696:	4620      	mov	r0, r4
 8018698:	4629      	mov	r1, r5
 801869a:	f7e7 ffad 	bl	80005f8 <__aeabi_dmul>
 801869e:	4602      	mov	r2, r0
 80186a0:	460b      	mov	r3, r1
 80186a2:	4630      	mov	r0, r6
 80186a4:	4639      	mov	r1, r7
 80186a6:	f7e7 fdf1 	bl	800028c <__adddf3>
 80186aa:	9a07      	ldr	r2, [sp, #28]
 80186ac:	4b37      	ldr	r3, [pc, #220]	; (801878c <__ieee754_pow+0x774>)
 80186ae:	4413      	add	r3, r2
 80186b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186b4:	f7e7 fdea 	bl	800028c <__adddf3>
 80186b8:	4682      	mov	sl, r0
 80186ba:	9805      	ldr	r0, [sp, #20]
 80186bc:	468b      	mov	fp, r1
 80186be:	f7e7 ff31 	bl	8000524 <__aeabi_i2d>
 80186c2:	9a07      	ldr	r2, [sp, #28]
 80186c4:	4b32      	ldr	r3, [pc, #200]	; (8018790 <__ieee754_pow+0x778>)
 80186c6:	4413      	add	r3, r2
 80186c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80186cc:	4606      	mov	r6, r0
 80186ce:	460f      	mov	r7, r1
 80186d0:	4652      	mov	r2, sl
 80186d2:	465b      	mov	r3, fp
 80186d4:	ec51 0b18 	vmov	r0, r1, d8
 80186d8:	f7e7 fdd8 	bl	800028c <__adddf3>
 80186dc:	4642      	mov	r2, r8
 80186de:	464b      	mov	r3, r9
 80186e0:	f7e7 fdd4 	bl	800028c <__adddf3>
 80186e4:	4632      	mov	r2, r6
 80186e6:	463b      	mov	r3, r7
 80186e8:	f7e7 fdd0 	bl	800028c <__adddf3>
 80186ec:	2000      	movs	r0, #0
 80186ee:	4632      	mov	r2, r6
 80186f0:	463b      	mov	r3, r7
 80186f2:	4604      	mov	r4, r0
 80186f4:	460d      	mov	r5, r1
 80186f6:	f7e7 fdc7 	bl	8000288 <__aeabi_dsub>
 80186fa:	4642      	mov	r2, r8
 80186fc:	464b      	mov	r3, r9
 80186fe:	f7e7 fdc3 	bl	8000288 <__aeabi_dsub>
 8018702:	ec53 2b18 	vmov	r2, r3, d8
 8018706:	f7e7 fdbf 	bl	8000288 <__aeabi_dsub>
 801870a:	4602      	mov	r2, r0
 801870c:	460b      	mov	r3, r1
 801870e:	4650      	mov	r0, sl
 8018710:	4659      	mov	r1, fp
 8018712:	e610      	b.n	8018336 <__ieee754_pow+0x31e>
 8018714:	2401      	movs	r4, #1
 8018716:	e6a1      	b.n	801845c <__ieee754_pow+0x444>
 8018718:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018768 <__ieee754_pow+0x750>
 801871c:	e617      	b.n	801834e <__ieee754_pow+0x336>
 801871e:	bf00      	nop
 8018720:	4a454eef 	.word	0x4a454eef
 8018724:	3fca7e28 	.word	0x3fca7e28
 8018728:	93c9db65 	.word	0x93c9db65
 801872c:	3fcd864a 	.word	0x3fcd864a
 8018730:	a91d4101 	.word	0xa91d4101
 8018734:	3fd17460 	.word	0x3fd17460
 8018738:	518f264d 	.word	0x518f264d
 801873c:	3fd55555 	.word	0x3fd55555
 8018740:	db6fabff 	.word	0xdb6fabff
 8018744:	3fdb6db6 	.word	0x3fdb6db6
 8018748:	33333303 	.word	0x33333303
 801874c:	3fe33333 	.word	0x3fe33333
 8018750:	e0000000 	.word	0xe0000000
 8018754:	3feec709 	.word	0x3feec709
 8018758:	dc3a03fd 	.word	0xdc3a03fd
 801875c:	3feec709 	.word	0x3feec709
 8018760:	145b01f5 	.word	0x145b01f5
 8018764:	be3e2fe0 	.word	0xbe3e2fe0
 8018768:	00000000 	.word	0x00000000
 801876c:	3ff00000 	.word	0x3ff00000
 8018770:	7ff00000 	.word	0x7ff00000
 8018774:	43400000 	.word	0x43400000
 8018778:	0003988e 	.word	0x0003988e
 801877c:	000bb679 	.word	0x000bb679
 8018780:	08019f30 	.word	0x08019f30
 8018784:	3ff00000 	.word	0x3ff00000
 8018788:	40080000 	.word	0x40080000
 801878c:	08019f50 	.word	0x08019f50
 8018790:	08019f40 	.word	0x08019f40
 8018794:	a3b5      	add	r3, pc, #724	; (adr r3, 8018a6c <__ieee754_pow+0xa54>)
 8018796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879a:	4640      	mov	r0, r8
 801879c:	4649      	mov	r1, r9
 801879e:	f7e7 fd75 	bl	800028c <__adddf3>
 80187a2:	4622      	mov	r2, r4
 80187a4:	ec41 0b1a 	vmov	d10, r0, r1
 80187a8:	462b      	mov	r3, r5
 80187aa:	4630      	mov	r0, r6
 80187ac:	4639      	mov	r1, r7
 80187ae:	f7e7 fd6b 	bl	8000288 <__aeabi_dsub>
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	ec51 0b1a 	vmov	r0, r1, d10
 80187ba:	f7e8 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80187be:	2800      	cmp	r0, #0
 80187c0:	f47f ae04 	bne.w	80183cc <__ieee754_pow+0x3b4>
 80187c4:	4aa4      	ldr	r2, [pc, #656]	; (8018a58 <__ieee754_pow+0xa40>)
 80187c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80187ca:	4293      	cmp	r3, r2
 80187cc:	f340 8108 	ble.w	80189e0 <__ieee754_pow+0x9c8>
 80187d0:	151b      	asrs	r3, r3, #20
 80187d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80187d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80187da:	fa4a f303 	asr.w	r3, sl, r3
 80187de:	445b      	add	r3, fp
 80187e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80187e4:	4e9d      	ldr	r6, [pc, #628]	; (8018a5c <__ieee754_pow+0xa44>)
 80187e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80187ea:	4116      	asrs	r6, r2
 80187ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80187f0:	2000      	movs	r0, #0
 80187f2:	ea23 0106 	bic.w	r1, r3, r6
 80187f6:	f1c2 0214 	rsb	r2, r2, #20
 80187fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80187fe:	fa4a fa02 	asr.w	sl, sl, r2
 8018802:	f1bb 0f00 	cmp.w	fp, #0
 8018806:	4602      	mov	r2, r0
 8018808:	460b      	mov	r3, r1
 801880a:	4620      	mov	r0, r4
 801880c:	4629      	mov	r1, r5
 801880e:	bfb8      	it	lt
 8018810:	f1ca 0a00 	rsblt	sl, sl, #0
 8018814:	f7e7 fd38 	bl	8000288 <__aeabi_dsub>
 8018818:	ec41 0b19 	vmov	d9, r0, r1
 801881c:	4642      	mov	r2, r8
 801881e:	464b      	mov	r3, r9
 8018820:	ec51 0b19 	vmov	r0, r1, d9
 8018824:	f7e7 fd32 	bl	800028c <__adddf3>
 8018828:	a37b      	add	r3, pc, #492	; (adr r3, 8018a18 <__ieee754_pow+0xa00>)
 801882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801882e:	2000      	movs	r0, #0
 8018830:	4604      	mov	r4, r0
 8018832:	460d      	mov	r5, r1
 8018834:	f7e7 fee0 	bl	80005f8 <__aeabi_dmul>
 8018838:	ec53 2b19 	vmov	r2, r3, d9
 801883c:	4606      	mov	r6, r0
 801883e:	460f      	mov	r7, r1
 8018840:	4620      	mov	r0, r4
 8018842:	4629      	mov	r1, r5
 8018844:	f7e7 fd20 	bl	8000288 <__aeabi_dsub>
 8018848:	4602      	mov	r2, r0
 801884a:	460b      	mov	r3, r1
 801884c:	4640      	mov	r0, r8
 801884e:	4649      	mov	r1, r9
 8018850:	f7e7 fd1a 	bl	8000288 <__aeabi_dsub>
 8018854:	a372      	add	r3, pc, #456	; (adr r3, 8018a20 <__ieee754_pow+0xa08>)
 8018856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801885a:	f7e7 fecd 	bl	80005f8 <__aeabi_dmul>
 801885e:	a372      	add	r3, pc, #456	; (adr r3, 8018a28 <__ieee754_pow+0xa10>)
 8018860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018864:	4680      	mov	r8, r0
 8018866:	4689      	mov	r9, r1
 8018868:	4620      	mov	r0, r4
 801886a:	4629      	mov	r1, r5
 801886c:	f7e7 fec4 	bl	80005f8 <__aeabi_dmul>
 8018870:	4602      	mov	r2, r0
 8018872:	460b      	mov	r3, r1
 8018874:	4640      	mov	r0, r8
 8018876:	4649      	mov	r1, r9
 8018878:	f7e7 fd08 	bl	800028c <__adddf3>
 801887c:	4604      	mov	r4, r0
 801887e:	460d      	mov	r5, r1
 8018880:	4602      	mov	r2, r0
 8018882:	460b      	mov	r3, r1
 8018884:	4630      	mov	r0, r6
 8018886:	4639      	mov	r1, r7
 8018888:	f7e7 fd00 	bl	800028c <__adddf3>
 801888c:	4632      	mov	r2, r6
 801888e:	463b      	mov	r3, r7
 8018890:	4680      	mov	r8, r0
 8018892:	4689      	mov	r9, r1
 8018894:	f7e7 fcf8 	bl	8000288 <__aeabi_dsub>
 8018898:	4602      	mov	r2, r0
 801889a:	460b      	mov	r3, r1
 801889c:	4620      	mov	r0, r4
 801889e:	4629      	mov	r1, r5
 80188a0:	f7e7 fcf2 	bl	8000288 <__aeabi_dsub>
 80188a4:	4642      	mov	r2, r8
 80188a6:	4606      	mov	r6, r0
 80188a8:	460f      	mov	r7, r1
 80188aa:	464b      	mov	r3, r9
 80188ac:	4640      	mov	r0, r8
 80188ae:	4649      	mov	r1, r9
 80188b0:	f7e7 fea2 	bl	80005f8 <__aeabi_dmul>
 80188b4:	a35e      	add	r3, pc, #376	; (adr r3, 8018a30 <__ieee754_pow+0xa18>)
 80188b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ba:	4604      	mov	r4, r0
 80188bc:	460d      	mov	r5, r1
 80188be:	f7e7 fe9b 	bl	80005f8 <__aeabi_dmul>
 80188c2:	a35d      	add	r3, pc, #372	; (adr r3, 8018a38 <__ieee754_pow+0xa20>)
 80188c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188c8:	f7e7 fcde 	bl	8000288 <__aeabi_dsub>
 80188cc:	4622      	mov	r2, r4
 80188ce:	462b      	mov	r3, r5
 80188d0:	f7e7 fe92 	bl	80005f8 <__aeabi_dmul>
 80188d4:	a35a      	add	r3, pc, #360	; (adr r3, 8018a40 <__ieee754_pow+0xa28>)
 80188d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188da:	f7e7 fcd7 	bl	800028c <__adddf3>
 80188de:	4622      	mov	r2, r4
 80188e0:	462b      	mov	r3, r5
 80188e2:	f7e7 fe89 	bl	80005f8 <__aeabi_dmul>
 80188e6:	a358      	add	r3, pc, #352	; (adr r3, 8018a48 <__ieee754_pow+0xa30>)
 80188e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ec:	f7e7 fccc 	bl	8000288 <__aeabi_dsub>
 80188f0:	4622      	mov	r2, r4
 80188f2:	462b      	mov	r3, r5
 80188f4:	f7e7 fe80 	bl	80005f8 <__aeabi_dmul>
 80188f8:	a355      	add	r3, pc, #340	; (adr r3, 8018a50 <__ieee754_pow+0xa38>)
 80188fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188fe:	f7e7 fcc5 	bl	800028c <__adddf3>
 8018902:	4622      	mov	r2, r4
 8018904:	462b      	mov	r3, r5
 8018906:	f7e7 fe77 	bl	80005f8 <__aeabi_dmul>
 801890a:	4602      	mov	r2, r0
 801890c:	460b      	mov	r3, r1
 801890e:	4640      	mov	r0, r8
 8018910:	4649      	mov	r1, r9
 8018912:	f7e7 fcb9 	bl	8000288 <__aeabi_dsub>
 8018916:	4604      	mov	r4, r0
 8018918:	460d      	mov	r5, r1
 801891a:	4602      	mov	r2, r0
 801891c:	460b      	mov	r3, r1
 801891e:	4640      	mov	r0, r8
 8018920:	4649      	mov	r1, r9
 8018922:	f7e7 fe69 	bl	80005f8 <__aeabi_dmul>
 8018926:	2200      	movs	r2, #0
 8018928:	ec41 0b19 	vmov	d9, r0, r1
 801892c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018930:	4620      	mov	r0, r4
 8018932:	4629      	mov	r1, r5
 8018934:	f7e7 fca8 	bl	8000288 <__aeabi_dsub>
 8018938:	4602      	mov	r2, r0
 801893a:	460b      	mov	r3, r1
 801893c:	ec51 0b19 	vmov	r0, r1, d9
 8018940:	f7e7 ff84 	bl	800084c <__aeabi_ddiv>
 8018944:	4632      	mov	r2, r6
 8018946:	4604      	mov	r4, r0
 8018948:	460d      	mov	r5, r1
 801894a:	463b      	mov	r3, r7
 801894c:	4640      	mov	r0, r8
 801894e:	4649      	mov	r1, r9
 8018950:	f7e7 fe52 	bl	80005f8 <__aeabi_dmul>
 8018954:	4632      	mov	r2, r6
 8018956:	463b      	mov	r3, r7
 8018958:	f7e7 fc98 	bl	800028c <__adddf3>
 801895c:	4602      	mov	r2, r0
 801895e:	460b      	mov	r3, r1
 8018960:	4620      	mov	r0, r4
 8018962:	4629      	mov	r1, r5
 8018964:	f7e7 fc90 	bl	8000288 <__aeabi_dsub>
 8018968:	4642      	mov	r2, r8
 801896a:	464b      	mov	r3, r9
 801896c:	f7e7 fc8c 	bl	8000288 <__aeabi_dsub>
 8018970:	460b      	mov	r3, r1
 8018972:	4602      	mov	r2, r0
 8018974:	493a      	ldr	r1, [pc, #232]	; (8018a60 <__ieee754_pow+0xa48>)
 8018976:	2000      	movs	r0, #0
 8018978:	f7e7 fc86 	bl	8000288 <__aeabi_dsub>
 801897c:	ec41 0b10 	vmov	d0, r0, r1
 8018980:	ee10 3a90 	vmov	r3, s1
 8018984:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801898c:	da2b      	bge.n	80189e6 <__ieee754_pow+0x9ce>
 801898e:	4650      	mov	r0, sl
 8018990:	f000 f966 	bl	8018c60 <scalbn>
 8018994:	ec51 0b10 	vmov	r0, r1, d0
 8018998:	ec53 2b18 	vmov	r2, r3, d8
 801899c:	f7ff bbed 	b.w	801817a <__ieee754_pow+0x162>
 80189a0:	4b30      	ldr	r3, [pc, #192]	; (8018a64 <__ieee754_pow+0xa4c>)
 80189a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80189a6:	429e      	cmp	r6, r3
 80189a8:	f77f af0c 	ble.w	80187c4 <__ieee754_pow+0x7ac>
 80189ac:	4b2e      	ldr	r3, [pc, #184]	; (8018a68 <__ieee754_pow+0xa50>)
 80189ae:	440b      	add	r3, r1
 80189b0:	4303      	orrs	r3, r0
 80189b2:	d009      	beq.n	80189c8 <__ieee754_pow+0x9b0>
 80189b4:	ec51 0b18 	vmov	r0, r1, d8
 80189b8:	2200      	movs	r2, #0
 80189ba:	2300      	movs	r3, #0
 80189bc:	f7e8 f88e 	bl	8000adc <__aeabi_dcmplt>
 80189c0:	3800      	subs	r0, #0
 80189c2:	bf18      	it	ne
 80189c4:	2001      	movne	r0, #1
 80189c6:	e447      	b.n	8018258 <__ieee754_pow+0x240>
 80189c8:	4622      	mov	r2, r4
 80189ca:	462b      	mov	r3, r5
 80189cc:	f7e7 fc5c 	bl	8000288 <__aeabi_dsub>
 80189d0:	4642      	mov	r2, r8
 80189d2:	464b      	mov	r3, r9
 80189d4:	f7e8 f896 	bl	8000b04 <__aeabi_dcmpge>
 80189d8:	2800      	cmp	r0, #0
 80189da:	f43f aef3 	beq.w	80187c4 <__ieee754_pow+0x7ac>
 80189de:	e7e9      	b.n	80189b4 <__ieee754_pow+0x99c>
 80189e0:	f04f 0a00 	mov.w	sl, #0
 80189e4:	e71a      	b.n	801881c <__ieee754_pow+0x804>
 80189e6:	ec51 0b10 	vmov	r0, r1, d0
 80189ea:	4619      	mov	r1, r3
 80189ec:	e7d4      	b.n	8018998 <__ieee754_pow+0x980>
 80189ee:	491c      	ldr	r1, [pc, #112]	; (8018a60 <__ieee754_pow+0xa48>)
 80189f0:	2000      	movs	r0, #0
 80189f2:	f7ff bb30 	b.w	8018056 <__ieee754_pow+0x3e>
 80189f6:	2000      	movs	r0, #0
 80189f8:	2100      	movs	r1, #0
 80189fa:	f7ff bb2c 	b.w	8018056 <__ieee754_pow+0x3e>
 80189fe:	4630      	mov	r0, r6
 8018a00:	4639      	mov	r1, r7
 8018a02:	f7ff bb28 	b.w	8018056 <__ieee754_pow+0x3e>
 8018a06:	9204      	str	r2, [sp, #16]
 8018a08:	f7ff bb7a 	b.w	8018100 <__ieee754_pow+0xe8>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	f7ff bb64 	b.w	80180da <__ieee754_pow+0xc2>
 8018a12:	bf00      	nop
 8018a14:	f3af 8000 	nop.w
 8018a18:	00000000 	.word	0x00000000
 8018a1c:	3fe62e43 	.word	0x3fe62e43
 8018a20:	fefa39ef 	.word	0xfefa39ef
 8018a24:	3fe62e42 	.word	0x3fe62e42
 8018a28:	0ca86c39 	.word	0x0ca86c39
 8018a2c:	be205c61 	.word	0xbe205c61
 8018a30:	72bea4d0 	.word	0x72bea4d0
 8018a34:	3e663769 	.word	0x3e663769
 8018a38:	c5d26bf1 	.word	0xc5d26bf1
 8018a3c:	3ebbbd41 	.word	0x3ebbbd41
 8018a40:	af25de2c 	.word	0xaf25de2c
 8018a44:	3f11566a 	.word	0x3f11566a
 8018a48:	16bebd93 	.word	0x16bebd93
 8018a4c:	3f66c16c 	.word	0x3f66c16c
 8018a50:	5555553e 	.word	0x5555553e
 8018a54:	3fc55555 	.word	0x3fc55555
 8018a58:	3fe00000 	.word	0x3fe00000
 8018a5c:	000fffff 	.word	0x000fffff
 8018a60:	3ff00000 	.word	0x3ff00000
 8018a64:	4090cbff 	.word	0x4090cbff
 8018a68:	3f6f3400 	.word	0x3f6f3400
 8018a6c:	652b82fe 	.word	0x652b82fe
 8018a70:	3c971547 	.word	0x3c971547

08018a74 <__ieee754_sqrt>:
 8018a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a78:	ec55 4b10 	vmov	r4, r5, d0
 8018a7c:	4e55      	ldr	r6, [pc, #340]	; (8018bd4 <__ieee754_sqrt+0x160>)
 8018a7e:	43ae      	bics	r6, r5
 8018a80:	ee10 0a10 	vmov	r0, s0
 8018a84:	ee10 3a10 	vmov	r3, s0
 8018a88:	462a      	mov	r2, r5
 8018a8a:	4629      	mov	r1, r5
 8018a8c:	d110      	bne.n	8018ab0 <__ieee754_sqrt+0x3c>
 8018a8e:	ee10 2a10 	vmov	r2, s0
 8018a92:	462b      	mov	r3, r5
 8018a94:	f7e7 fdb0 	bl	80005f8 <__aeabi_dmul>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	4629      	mov	r1, r5
 8018aa0:	f7e7 fbf4 	bl	800028c <__adddf3>
 8018aa4:	4604      	mov	r4, r0
 8018aa6:	460d      	mov	r5, r1
 8018aa8:	ec45 4b10 	vmov	d0, r4, r5
 8018aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab0:	2d00      	cmp	r5, #0
 8018ab2:	dc10      	bgt.n	8018ad6 <__ieee754_sqrt+0x62>
 8018ab4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018ab8:	4330      	orrs	r0, r6
 8018aba:	d0f5      	beq.n	8018aa8 <__ieee754_sqrt+0x34>
 8018abc:	b15d      	cbz	r5, 8018ad6 <__ieee754_sqrt+0x62>
 8018abe:	ee10 2a10 	vmov	r2, s0
 8018ac2:	462b      	mov	r3, r5
 8018ac4:	ee10 0a10 	vmov	r0, s0
 8018ac8:	f7e7 fbde 	bl	8000288 <__aeabi_dsub>
 8018acc:	4602      	mov	r2, r0
 8018ace:	460b      	mov	r3, r1
 8018ad0:	f7e7 febc 	bl	800084c <__aeabi_ddiv>
 8018ad4:	e7e6      	b.n	8018aa4 <__ieee754_sqrt+0x30>
 8018ad6:	1512      	asrs	r2, r2, #20
 8018ad8:	d074      	beq.n	8018bc4 <__ieee754_sqrt+0x150>
 8018ada:	07d4      	lsls	r4, r2, #31
 8018adc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018ae0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018ae8:	bf5e      	ittt	pl
 8018aea:	0fda      	lsrpl	r2, r3, #31
 8018aec:	005b      	lslpl	r3, r3, #1
 8018aee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018af2:	2400      	movs	r4, #0
 8018af4:	0fda      	lsrs	r2, r3, #31
 8018af6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018afa:	107f      	asrs	r7, r7, #1
 8018afc:	005b      	lsls	r3, r3, #1
 8018afe:	2516      	movs	r5, #22
 8018b00:	4620      	mov	r0, r4
 8018b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018b06:	1886      	adds	r6, r0, r2
 8018b08:	428e      	cmp	r6, r1
 8018b0a:	bfde      	ittt	le
 8018b0c:	1b89      	suble	r1, r1, r6
 8018b0e:	18b0      	addle	r0, r6, r2
 8018b10:	18a4      	addle	r4, r4, r2
 8018b12:	0049      	lsls	r1, r1, #1
 8018b14:	3d01      	subs	r5, #1
 8018b16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018b1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b22:	d1f0      	bne.n	8018b06 <__ieee754_sqrt+0x92>
 8018b24:	462a      	mov	r2, r5
 8018b26:	f04f 0e20 	mov.w	lr, #32
 8018b2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018b2e:	4281      	cmp	r1, r0
 8018b30:	eb06 0c05 	add.w	ip, r6, r5
 8018b34:	dc02      	bgt.n	8018b3c <__ieee754_sqrt+0xc8>
 8018b36:	d113      	bne.n	8018b60 <__ieee754_sqrt+0xec>
 8018b38:	459c      	cmp	ip, r3
 8018b3a:	d811      	bhi.n	8018b60 <__ieee754_sqrt+0xec>
 8018b3c:	f1bc 0f00 	cmp.w	ip, #0
 8018b40:	eb0c 0506 	add.w	r5, ip, r6
 8018b44:	da43      	bge.n	8018bce <__ieee754_sqrt+0x15a>
 8018b46:	2d00      	cmp	r5, #0
 8018b48:	db41      	blt.n	8018bce <__ieee754_sqrt+0x15a>
 8018b4a:	f100 0801 	add.w	r8, r0, #1
 8018b4e:	1a09      	subs	r1, r1, r0
 8018b50:	459c      	cmp	ip, r3
 8018b52:	bf88      	it	hi
 8018b54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018b58:	eba3 030c 	sub.w	r3, r3, ip
 8018b5c:	4432      	add	r2, r6
 8018b5e:	4640      	mov	r0, r8
 8018b60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018b64:	f1be 0e01 	subs.w	lr, lr, #1
 8018b68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018b74:	d1db      	bne.n	8018b2e <__ieee754_sqrt+0xba>
 8018b76:	430b      	orrs	r3, r1
 8018b78:	d006      	beq.n	8018b88 <__ieee754_sqrt+0x114>
 8018b7a:	1c50      	adds	r0, r2, #1
 8018b7c:	bf13      	iteet	ne
 8018b7e:	3201      	addne	r2, #1
 8018b80:	3401      	addeq	r4, #1
 8018b82:	4672      	moveq	r2, lr
 8018b84:	f022 0201 	bicne.w	r2, r2, #1
 8018b88:	1063      	asrs	r3, r4, #1
 8018b8a:	0852      	lsrs	r2, r2, #1
 8018b8c:	07e1      	lsls	r1, r4, #31
 8018b8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018b92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018b96:	bf48      	it	mi
 8018b98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018b9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018ba0:	4614      	mov	r4, r2
 8018ba2:	e781      	b.n	8018aa8 <__ieee754_sqrt+0x34>
 8018ba4:	0ad9      	lsrs	r1, r3, #11
 8018ba6:	3815      	subs	r0, #21
 8018ba8:	055b      	lsls	r3, r3, #21
 8018baa:	2900      	cmp	r1, #0
 8018bac:	d0fa      	beq.n	8018ba4 <__ieee754_sqrt+0x130>
 8018bae:	02cd      	lsls	r5, r1, #11
 8018bb0:	d50a      	bpl.n	8018bc8 <__ieee754_sqrt+0x154>
 8018bb2:	f1c2 0420 	rsb	r4, r2, #32
 8018bb6:	fa23 f404 	lsr.w	r4, r3, r4
 8018bba:	1e55      	subs	r5, r2, #1
 8018bbc:	4093      	lsls	r3, r2
 8018bbe:	4321      	orrs	r1, r4
 8018bc0:	1b42      	subs	r2, r0, r5
 8018bc2:	e78a      	b.n	8018ada <__ieee754_sqrt+0x66>
 8018bc4:	4610      	mov	r0, r2
 8018bc6:	e7f0      	b.n	8018baa <__ieee754_sqrt+0x136>
 8018bc8:	0049      	lsls	r1, r1, #1
 8018bca:	3201      	adds	r2, #1
 8018bcc:	e7ef      	b.n	8018bae <__ieee754_sqrt+0x13a>
 8018bce:	4680      	mov	r8, r0
 8018bd0:	e7bd      	b.n	8018b4e <__ieee754_sqrt+0xda>
 8018bd2:	bf00      	nop
 8018bd4:	7ff00000 	.word	0x7ff00000

08018bd8 <with_errno>:
 8018bd8:	b570      	push	{r4, r5, r6, lr}
 8018bda:	4604      	mov	r4, r0
 8018bdc:	460d      	mov	r5, r1
 8018bde:	4616      	mov	r6, r2
 8018be0:	f7fa f984 	bl	8012eec <__errno>
 8018be4:	4629      	mov	r1, r5
 8018be6:	6006      	str	r6, [r0, #0]
 8018be8:	4620      	mov	r0, r4
 8018bea:	bd70      	pop	{r4, r5, r6, pc}

08018bec <xflow>:
 8018bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bee:	4614      	mov	r4, r2
 8018bf0:	461d      	mov	r5, r3
 8018bf2:	b108      	cbz	r0, 8018bf8 <xflow+0xc>
 8018bf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8018bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c00:	4620      	mov	r0, r4
 8018c02:	4629      	mov	r1, r5
 8018c04:	f7e7 fcf8 	bl	80005f8 <__aeabi_dmul>
 8018c08:	2222      	movs	r2, #34	; 0x22
 8018c0a:	b003      	add	sp, #12
 8018c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c10:	f7ff bfe2 	b.w	8018bd8 <with_errno>

08018c14 <__math_uflow>:
 8018c14:	b508      	push	{r3, lr}
 8018c16:	2200      	movs	r2, #0
 8018c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018c1c:	f7ff ffe6 	bl	8018bec <xflow>
 8018c20:	ec41 0b10 	vmov	d0, r0, r1
 8018c24:	bd08      	pop	{r3, pc}

08018c26 <__math_oflow>:
 8018c26:	b508      	push	{r3, lr}
 8018c28:	2200      	movs	r2, #0
 8018c2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8018c2e:	f7ff ffdd 	bl	8018bec <xflow>
 8018c32:	ec41 0b10 	vmov	d0, r0, r1
 8018c36:	bd08      	pop	{r3, pc}

08018c38 <fabs>:
 8018c38:	ec51 0b10 	vmov	r0, r1, d0
 8018c3c:	ee10 2a10 	vmov	r2, s0
 8018c40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018c44:	ec43 2b10 	vmov	d0, r2, r3
 8018c48:	4770      	bx	lr

08018c4a <finite>:
 8018c4a:	b082      	sub	sp, #8
 8018c4c:	ed8d 0b00 	vstr	d0, [sp]
 8018c50:	9801      	ldr	r0, [sp, #4]
 8018c52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018c56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018c5a:	0fc0      	lsrs	r0, r0, #31
 8018c5c:	b002      	add	sp, #8
 8018c5e:	4770      	bx	lr

08018c60 <scalbn>:
 8018c60:	b570      	push	{r4, r5, r6, lr}
 8018c62:	ec55 4b10 	vmov	r4, r5, d0
 8018c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018c6a:	4606      	mov	r6, r0
 8018c6c:	462b      	mov	r3, r5
 8018c6e:	b99a      	cbnz	r2, 8018c98 <scalbn+0x38>
 8018c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018c74:	4323      	orrs	r3, r4
 8018c76:	d036      	beq.n	8018ce6 <scalbn+0x86>
 8018c78:	4b39      	ldr	r3, [pc, #228]	; (8018d60 <scalbn+0x100>)
 8018c7a:	4629      	mov	r1, r5
 8018c7c:	ee10 0a10 	vmov	r0, s0
 8018c80:	2200      	movs	r2, #0
 8018c82:	f7e7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8018c86:	4b37      	ldr	r3, [pc, #220]	; (8018d64 <scalbn+0x104>)
 8018c88:	429e      	cmp	r6, r3
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	460d      	mov	r5, r1
 8018c8e:	da10      	bge.n	8018cb2 <scalbn+0x52>
 8018c90:	a32b      	add	r3, pc, #172	; (adr r3, 8018d40 <scalbn+0xe0>)
 8018c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c96:	e03a      	b.n	8018d0e <scalbn+0xae>
 8018c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018c9c:	428a      	cmp	r2, r1
 8018c9e:	d10c      	bne.n	8018cba <scalbn+0x5a>
 8018ca0:	ee10 2a10 	vmov	r2, s0
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	4629      	mov	r1, r5
 8018ca8:	f7e7 faf0 	bl	800028c <__adddf3>
 8018cac:	4604      	mov	r4, r0
 8018cae:	460d      	mov	r5, r1
 8018cb0:	e019      	b.n	8018ce6 <scalbn+0x86>
 8018cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	3a36      	subs	r2, #54	; 0x36
 8018cba:	4432      	add	r2, r6
 8018cbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018cc0:	428a      	cmp	r2, r1
 8018cc2:	dd08      	ble.n	8018cd6 <scalbn+0x76>
 8018cc4:	2d00      	cmp	r5, #0
 8018cc6:	a120      	add	r1, pc, #128	; (adr r1, 8018d48 <scalbn+0xe8>)
 8018cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ccc:	da1c      	bge.n	8018d08 <scalbn+0xa8>
 8018cce:	a120      	add	r1, pc, #128	; (adr r1, 8018d50 <scalbn+0xf0>)
 8018cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018cd4:	e018      	b.n	8018d08 <scalbn+0xa8>
 8018cd6:	2a00      	cmp	r2, #0
 8018cd8:	dd08      	ble.n	8018cec <scalbn+0x8c>
 8018cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018ce6:	ec45 4b10 	vmov	d0, r4, r5
 8018cea:	bd70      	pop	{r4, r5, r6, pc}
 8018cec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018cf0:	da19      	bge.n	8018d26 <scalbn+0xc6>
 8018cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018cf6:	429e      	cmp	r6, r3
 8018cf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018cfc:	dd0a      	ble.n	8018d14 <scalbn+0xb4>
 8018cfe:	a112      	add	r1, pc, #72	; (adr r1, 8018d48 <scalbn+0xe8>)
 8018d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d1e2      	bne.n	8018cce <scalbn+0x6e>
 8018d08:	a30f      	add	r3, pc, #60	; (adr r3, 8018d48 <scalbn+0xe8>)
 8018d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0e:	f7e7 fc73 	bl	80005f8 <__aeabi_dmul>
 8018d12:	e7cb      	b.n	8018cac <scalbn+0x4c>
 8018d14:	a10a      	add	r1, pc, #40	; (adr r1, 8018d40 <scalbn+0xe0>)
 8018d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d0b8      	beq.n	8018c90 <scalbn+0x30>
 8018d1e:	a10e      	add	r1, pc, #56	; (adr r1, 8018d58 <scalbn+0xf8>)
 8018d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d24:	e7b4      	b.n	8018c90 <scalbn+0x30>
 8018d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018d2a:	3236      	adds	r2, #54	; 0x36
 8018d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018d30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018d34:	4620      	mov	r0, r4
 8018d36:	4b0c      	ldr	r3, [pc, #48]	; (8018d68 <scalbn+0x108>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	e7e8      	b.n	8018d0e <scalbn+0xae>
 8018d3c:	f3af 8000 	nop.w
 8018d40:	c2f8f359 	.word	0xc2f8f359
 8018d44:	01a56e1f 	.word	0x01a56e1f
 8018d48:	8800759c 	.word	0x8800759c
 8018d4c:	7e37e43c 	.word	0x7e37e43c
 8018d50:	8800759c 	.word	0x8800759c
 8018d54:	fe37e43c 	.word	0xfe37e43c
 8018d58:	c2f8f359 	.word	0xc2f8f359
 8018d5c:	81a56e1f 	.word	0x81a56e1f
 8018d60:	43500000 	.word	0x43500000
 8018d64:	ffff3cb0 	.word	0xffff3cb0
 8018d68:	3c900000 	.word	0x3c900000

08018d6c <_init>:
 8018d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d6e:	bf00      	nop
 8018d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d72:	bc08      	pop	{r3}
 8018d74:	469e      	mov	lr, r3
 8018d76:	4770      	bx	lr

08018d78 <_fini>:
 8018d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d7a:	bf00      	nop
 8018d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d7e:	bc08      	pop	{r3}
 8018d80:	469e      	mov	lr, r3
 8018d82:	4770      	bx	lr
