
IMU_take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c60  08006c60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08006cd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006cd8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d78  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  00034e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00037398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00038748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5c6  00000000  00000000  00039a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c3b  00000000  00000000  00055fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2ba1  00000000  00000000  0006ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  0011d7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006720 	.word	0x08006720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006720 	.word	0x08006720

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f9fd 	bl	8000980 <null_ptr_check>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800058a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d143      	bne.n	800061a <bmi08a_init+0xa6>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7b1b      	ldrb	r3, [r3, #12]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10c      	bne.n	80005b4 <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	739a      	strb	r2, [r3, #14]
//            printf("Dev correct\n\r");
            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 80005a0:	f107 010e 	add.w	r1, r7, #14
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fa0d 	bl	80009c8 <get_regs>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e002      	b.n	80005ba <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 80005ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d12b      	bne.n	800061a <bmi08a_init+0xa6>
        {
        	chip_id = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73bb      	strb	r3, [r7, #14]
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 80005c6:	f107 010e 	add.w	r1, r7, #14
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f9fa 	bl	80009c8 <get_regs>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80005d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d11c      	bne.n	800061a <bmi08a_init+0xa6>
            {
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <bmi08a_init+0xb4>)
 80005e6:	f005 f897 	bl	8005718 <iprintf>
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7b5b      	ldrb	r3, [r3, #13]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d106      	bne.n	8000600 <bmi08a_init+0x8c>
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d103      	bne.n	8000600 <bmi08a_init+0x8c>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 80005f8:	7bba      	ldrb	r2, [r7, #14]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	e00c      	b.n	800061a <bmi08a_init+0xa6>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7b5b      	ldrb	r3, [r3, #13]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d106      	bne.n	8000616 <bmi08a_init+0xa2>
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b1e      	cmp	r3, #30
 800060c:	d103      	bne.n	8000616 <bmi08a_init+0xa2>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 800060e:	7bba      	ldrb	r2, [r7, #14]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e001      	b.n	800061a <bmi08a_init+0xa6>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000616:	23fd      	movs	r3, #253	; 0xfd
 8000618:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	08006738 	.word	0x08006738

0800062c <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800063c:	6838      	ldr	r0, [r7, #0]
 800063e:	f000 f99f 	bl	8000980 <null_ptr_check>
 8000642:	4603      	mov	r3, r0
 8000644:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8000646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d111      	bne.n	8000672 <bmi08a_get_regs+0x46>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00e      	beq.n	8000672 <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 800065a:	7bf8      	ldrb	r0, [r7, #15]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	f000 f9b1 	bl	80009c8 <get_regs>
 8000666:	4603      	mov	r3, r0
 8000668:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800066a:	e004      	b.n	8000676 <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 800066c:	23f9      	movs	r3, #249	; 0xf9
 800066e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000670:	e001      	b.n	8000676 <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8000672:	23ff      	movs	r3, #255	; 0xff
 8000674:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000692:	6838      	ldr	r0, [r7, #0]
 8000694:	f000 f974 	bl	8000980 <null_ptr_check>
 8000698:	4603      	mov	r3, r0
 800069a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800069c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d12c      	bne.n	80006fe <bmi08a_set_regs+0x7c>
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d029      	beq.n	80006fe <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d023      	beq.n	80006f8 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 80006b0:	7bf8      	ldrb	r0, [r7, #15]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	f000 f9d6 	bl	8000a68 <set_regs>
 80006bc:	4603      	mov	r3, r0
 80006be:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	7bdb      	ldrb	r3, [r3, #15]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d108      	bne.n	80006da <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	6852      	ldr	r2, [r2, #4]
 80006d0:	4611      	mov	r1, r2
 80006d2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80006d6:	4798      	blx	r3
        if (len > 0)
 80006d8:	e013      	b.n	8000702 <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	7bdb      	ldrb	r3, [r3, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d107      	bne.n	80006f2 <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	6852      	ldr	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2002      	movs	r0, #2
 80006ee:	4798      	blx	r3
        if (len > 0)
 80006f0:	e007      	b.n	8000702 <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 80006f2:	23fb      	movs	r3, #251	; 0xfb
 80006f4:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80006f6:	e004      	b.n	8000702 <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80006f8:	23f9      	movs	r3, #249	; 0xf9
 80006fa:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80006fc:	e001      	b.n	8000702 <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8000716:	2300      	movs	r3, #0
 8000718:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 800071a:	2300      	movs	r3, #0
 800071c:	75bb      	strb	r3, [r7, #22]
 800071e:	2300      	movs	r3, #0
 8000720:	757b      	strb	r3, [r7, #21]
 8000722:	2300      	movs	r3, #0
 8000724:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f92a 	bl	8000980 <null_ptr_check>
 800072c:	4603      	mov	r3, r0
 800072e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d171      	bne.n	800081c <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7c9b      	ldrb	r3, [r3, #18]
 800073c:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7c5b      	ldrb	r3, [r3, #17]
 8000742:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7c1b      	ldrb	r3, [r3, #16]
 8000748:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d902      	bls.n	8000756 <bmi08a_set_meas_conf+0x48>
 8000750:	7cfb      	ldrb	r3, [r7, #19]
 8000752:	2b0c      	cmp	r3, #12
 8000754:	d901      	bls.n	800075a <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8000756:	2301      	movs	r3, #1
 8000758:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 800075a:	7cbb      	ldrb	r3, [r7, #18]
 800075c:	2b0a      	cmp	r3, #10
 800075e:	d901      	bls.n	8000764 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 8000760:	2301      	movs	r3, #1
 8000762:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7b5b      	ldrb	r3, [r3, #13]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 800076c:	7c7b      	ldrb	r3, [r7, #17]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d901      	bls.n	8000776 <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8000772:	2301      	movs	r3, #1
 8000774:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7b5b      	ldrb	r3, [r3, #13]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d104      	bne.n	8000788 <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 800077e:	7c7b      	ldrb	r3, [r7, #17]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d901      	bls.n	8000788 <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8000784:	2301      	movs	r3, #1
 8000786:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 8000788:	7dbb      	ldrb	r3, [r7, #22]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d144      	bne.n	8000818 <bmi08a_set_meas_conf+0x10a>
 800078e:	7d7b      	ldrb	r3, [r7, #21]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d141      	bne.n	8000818 <bmi08a_set_meas_conf+0x10a>
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d13e      	bne.n	8000818 <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2202      	movs	r2, #2
 80007a2:	2040      	movs	r0, #64	; 0x40
 80007a4:	f7ff ff42 	bl	800062c <bmi08a_get_regs>
 80007a8:	4603      	mov	r3, r0
 80007aa:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80007ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d133      	bne.n	800081c <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 80007b4:	7b3b      	ldrb	r3, [r7, #12]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f023 030f 	bic.w	r3, r3, #15
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 80007d0:	7b3b      	ldrb	r3, [r7, #12]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	b25a      	sxtb	r2, r3
 80007da:	7cbb      	ldrb	r3, [r7, #18]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f023 0303 	bic.w	r3, r3, #3
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8000804:	f107 010c 	add.w	r1, r7, #12
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2202      	movs	r2, #2
 800080c:	2040      	movs	r0, #64	; 0x40
 800080e:	f000 f92b 	bl	8000a68 <set_regs>
 8000812:	4603      	mov	r3, r0
 8000814:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8000816:	e001      	b.n	800081c <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8000818:	23f8      	movs	r3, #248	; 0xf8
 800081a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800081c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8000830:	2300      	movs	r3, #0
 8000832:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f8a3 	bl	8000980 <null_ptr_check>
 800083a:	4603      	mov	r3, r0
 800083c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d143      	bne.n	80008ce <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7bdb      	ldrb	r3, [r3, #15]
 800084a:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 8000852:	2300      	movs	r3, #0
 8000854:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 8000856:	2304      	movs	r3, #4
 8000858:	737b      	strb	r3, [r7, #13]
 800085a:	e009      	b.n	8000870 <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d104      	bne.n	800086c <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 8000862:	2303      	movs	r3, #3
 8000864:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	737b      	strb	r3, [r7, #13]
 800086a:	e001      	b.n	8000870 <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 800086c:	23fb      	movs	r3, #251	; 0xfb
 800086e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 8000870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d12a      	bne.n	80008ce <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 8000878:	f107 010c 	add.w	r1, r7, #12
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	207c      	movs	r0, #124	; 0x7c
 8000882:	f000 f8f1 	bl	8000a68 <set_regs>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11d      	bne.n	80008ce <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	6852      	ldr	r2, [r2, #4]
 800089a:	4611      	mov	r1, r2
 800089c:	f241 3088 	movw	r0, #5000	; 0x1388
 80008a0:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	1c59      	adds	r1, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	207d      	movs	r0, #125	; 0x7d
 80008ae:	f000 f8db 	bl	8000a68 <set_regs>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d107      	bne.n	80008ce <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	6852      	ldr	r2, [r2, #4]
 80008c6:	4611      	mov	r1, r2
 80008c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80008cc:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80008e6:	6838      	ldr	r0, [r7, #0]
 80008e8:	f000 f84a 	bl	8000980 <null_ptr_check>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 80008f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d13a      	bne.n	800096e <bmi08a_set_int_config+0x92>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d037      	beq.n	800096e <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d82f      	bhi.n	8000966 <bmi08a_set_int_config+0x8a>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <bmi08a_set_int_config+0x30>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000921 	.word	0x08000921
 8000910:	0800092f 	.word	0x0800092f
 8000914:	0800093d 	.word	0x0800093d
 8000918:	0800094b 	.word	0x0800094b
 800091c:	08000959 	.word	0x08000959
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f95b 	bl	8000bde <set_accel_data_ready_int>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
                break;
 800092c:	e01e      	b.n	800096c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 800092e:	6839      	ldr	r1, [r7, #0]
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f9b2 	bl	8000c9a <set_accel_sync_data_ready_int>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
                break;
 800093a:	e017      	b.n	800096c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 800093c:	6839      	ldr	r1, [r7, #0]
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f9f0 	bl	8000d24 <set_accel_sync_input>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
                break;
 8000948:	e010      	b.n	800096c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 fa03 	bl	8000d58 <set_fifo_wm_int>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
                break;
 8000956:	e009      	b.n	800096c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8000958:	6839      	ldr	r1, [r7, #0]
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fa5a 	bl	8000e14 <set_fifo_full_int>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
                break;
 8000964:	e002      	b.n	800096c <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8000966:	23f8      	movs	r3, #248	; 0xf8
 8000968:	73fb      	strb	r3, [r7, #15]
                break;
 800096a:	bf00      	nop
        switch (int_config->int_type)
 800096c:	e001      	b.n	8000972 <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop

08000980 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00f      	beq.n	80009ae <null_ptr_check+0x2e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00b      	beq.n	80009ae <null_ptr_check+0x2e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <null_ptr_check+0x2e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e001      	b.n	80009b8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b0a7      	sub	sp, #156	; 0x9c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4603      	mov	r3, r0
 80009d6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	7b1b      	ldrb	r3, [r3, #12]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d103      	bne.n	80009ee <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ec:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	6a1c      	ldr	r4, [r3, #32]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	7b9b      	ldrb	r3, [r3, #14]
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	441a      	add	r2, r3
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f107 0114 	add.w	r1, r7, #20
 8000a04:	7bf8      	ldrb	r0, [r7, #15]
 8000a06:	47a0      	blx	r4
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d11c      	bne.n	8000a56 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000a22:	e012      	b.n	8000a4a <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 8000a24:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	7b92      	ldrb	r2, [r2, #14]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	440b      	add	r3, r1
 8000a36:	3298      	adds	r2, #152	; 0x98
 8000a38:	443a      	add	r2, r7
 8000a3a:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000a3e:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8000a40:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000a44:	3301      	adds	r3, #1
 8000a46:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000a4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8e7      	bhi.n	8000a24 <get_regs+0x5c>
 8000a54:	e002      	b.n	8000a5c <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8000a56:	23fe      	movs	r3, #254	; 0xfe
 8000a58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 8000a5c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	379c      	adds	r7, #156	; 0x9c
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}

08000a68 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7b1b      	ldrb	r3, [r3, #12]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d103      	bne.n	8000a8c <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a8a:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	7bf8      	ldrb	r0, [r7, #15]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	47a0      	blx	r4
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 8000ab0:	23fe      	movs	r3, #254	; 0xfe
 8000ab2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73bb      	strb	r3, [r7, #14]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <set_int_pin_config+0x20>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d003      	beq.n	8000ae6 <set_int_pin_config+0x26>
 8000ade:	e005      	b.n	8000aec <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 8000ae0:	2353      	movs	r3, #83	; 0x53
 8000ae2:	73bb      	strb	r3, [r7, #14]
            break;
 8000ae4:	e005      	b.n	8000af2 <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 8000ae6:	2354      	movs	r3, #84	; 0x54
 8000ae8:	73bb      	strb	r3, [r7, #14]
            break;
 8000aea:	e002      	b.n	8000af2 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	737b      	strb	r3, [r7, #13]
            break;
 8000af0:	bf00      	nop
    }

    if (!is_channel_invalid)
 8000af2:	7b7b      	ldrb	r3, [r7, #13]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d16a      	bne.n	8000bce <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 8000af8:	f107 010c 	add.w	r1, r7, #12
 8000afc:	7bb8      	ldrb	r0, [r7, #14]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2201      	movs	r2, #1
 8000b02:	f7ff ff61 	bl	80009c8 <get_regs>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d15f      	bne.n	8000bd2 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8000b12:	7b3b      	ldrb	r3, [r7, #12]
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f023 0302 	bic.w	r3, r3, #2
 8000b1a:	b25a      	sxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8000b32:	7b3b      	ldrb	r3, [r7, #12]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	f023 0304 	bic.w	r3, r3, #4
 8000b3a:	b25a      	sxtb	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d11a      	bne.n	8000b90 <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 8000b5a:	7b3b      	ldrb	r3, [r7, #12]
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	f023 0310 	bic.w	r3, r3, #16
 8000b6c:	b25a      	sxtb	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 8000b84:	7b3b      	ldrb	r3, [r7, #12]
 8000b86:	f023 0308 	bic.w	r3, r3, #8
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	733b      	strb	r3, [r7, #12]
 8000b8e:	e014      	b.n	8000bba <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	f023 0308 	bic.w	r3, r3, #8
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	f023 0310 	bic.w	r3, r3, #16
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	7bb8      	ldrb	r0, [r7, #14]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f7ff fd5d 	bl	8000682 <bmi08a_set_regs>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e001      	b.n	8000bd2 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 8000bce:	23fb      	movs	r3, #251	; 0xfb
 8000bd0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8000be8:	2300      	movs	r3, #0
 8000bea:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000bec:	f107 010d 	add.w	r1, r7, #13
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2058      	movs	r0, #88	; 0x58
 8000bf6:	f7ff fee7 	bl	80009c8 <get_regs>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d143      	bne.n	8000c8e <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <set_accel_data_ready_int+0x3c>
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d010      	beq.n	8000c3a <set_accel_data_ready_int+0x5c>
 8000c18:	e01f      	b.n	8000c5a <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	f023 0304 	bic.w	r3, r3, #4
 8000c22:	b25a      	sxtb	r2, r3
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	737b      	strb	r3, [r7, #13]
                break;
 8000c38:	e012      	b.n	8000c60 <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	019b      	lsls	r3, r3, #6
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	737b      	strb	r3, [r7, #13]
                break;
 8000c58:	e002      	b.n	8000c60 <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8000c5a:	23fb      	movs	r3, #251	; 0xfb
 8000c5c:	73fb      	strb	r3, [r7, #15]
                break;
 8000c5e:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8000c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d112      	bne.n	8000c8e <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff28 	bl	8000ac0 <set_int_pin_config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d108      	bne.n	8000c8e <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000c7c:	f107 010d 	add.w	r1, r7, #13
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	2058      	movs	r0, #88	; 0x58
 8000c86:	f7ff fcfc 	bl	8000682 <bmi08a_set_regs>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ca8:	6838      	ldr	r0, [r7, #0]
 8000caa:	f7ff fe69 	bl	8000980 <null_ptr_check>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d12e      	bne.n	8000d18 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <set_accel_sync_data_ready_int+0x32>
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d003      	beq.n	8000cd2 <set_accel_sync_data_ready_int+0x38>
 8000cca:	e005      	b.n	8000cd8 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 8000ccc:	2356      	movs	r3, #86	; 0x56
 8000cce:	73bb      	strb	r3, [r7, #14]
                break;
 8000cd0:	e005      	b.n	8000cde <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 8000cd2:	2357      	movs	r3, #87	; 0x57
 8000cd4:	73bb      	strb	r3, [r7, #14]
                break;
 8000cd6:	e002      	b.n	8000cde <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8000cd8:	23fb      	movs	r3, #251	; 0xfb
 8000cda:	73fb      	strb	r3, [r7, #15]
                break;
 8000cdc:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d118      	bne.n	8000d18 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	791b      	ldrb	r3, [r3, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8000cf2:	f107 010d 	add.w	r1, r7, #13
 8000cf6:	7bb8      	ldrb	r0, [r7, #14]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f7ff fcc1 	bl	8000682 <bmi08a_set_regs>
 8000d00:	4603      	mov	r3, r0
 8000d02:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fed6 	bl	8000ac0 <set_int_pin_config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f7ff fe26 	bl	8000980 <null_ptr_check>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff febc 	bl	8000ac0 <set_int_pin_config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8000d62:	2300      	movs	r3, #0
 8000d64:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000d66:	f107 010d 	add.w	r1, r7, #13
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2058      	movs	r0, #88	; 0x58
 8000d70:	f7ff fe2a 	bl	80009c8 <get_regs>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d143      	bne.n	8000e08 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <set_fifo_wm_int+0x3c>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d010      	beq.n	8000db4 <set_fifo_wm_int+0x5c>
 8000d92:	e01f      	b.n	8000dd4 <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	f023 0302 	bic.w	r3, r3, #2
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]
                break;
 8000db2:	e012      	b.n	8000dda <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f023 0320 	bic.w	r3, r3, #32
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	737b      	strb	r3, [r7, #13]
                break;
 8000dd2:	e002      	b.n	8000dda <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8000dd4:	23fb      	movs	r3, #251	; 0xfb
 8000dd6:	73fb      	strb	r3, [r7, #15]
                break;
 8000dd8:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d112      	bne.n	8000e08 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fe6b 	bl	8000ac0 <set_int_pin_config>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d108      	bne.n	8000e08 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000df6:	f107 010d 	add.w	r1, r7, #13
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2058      	movs	r0, #88	; 0x58
 8000e00:	f7ff fc3f 	bl	8000682 <bmi08a_set_regs>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000e22:	f107 010d 	add.w	r1, r7, #13
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2058      	movs	r0, #88	; 0x58
 8000e2c:	f7ff fdcc 	bl	80009c8 <get_regs>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d142      	bne.n	8000ec2 <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <set_fifo_full_int+0x3c>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d00f      	beq.n	8000e6e <set_fifo_full_int+0x5a>
 8000e4e:	e01e      	b.n	8000e8e <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 8000e50:	7b7b      	ldrb	r3, [r7, #13]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	737b      	strb	r3, [r7, #13]
                break;
 8000e6c:	e012      	b.n	8000e94 <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 8000e6e:	7b7b      	ldrb	r3, [r7, #13]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	f023 0310 	bic.w	r3, r3, #16
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	737b      	strb	r3, [r7, #13]
                break;
 8000e8c:	e002      	b.n	8000e94 <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8000e8e:	23fb      	movs	r3, #251	; 0xfb
 8000e90:	73fb      	strb	r3, [r7, #15]
                break;
 8000e92:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d112      	bne.n	8000ec2 <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fe0e 	bl	8000ac0 <set_int_pin_config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8000eb0:	f107 010d 	add.w	r1, r7, #13
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2058      	movs	r0, #88	; 0x58
 8000eba:	f7ff fbe2 	bl	8000682 <bmi08a_set_regs>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f99a 	bl	8001214 <null_ptr_check>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d115      	bne.n	8000f18 <bmi08g_init+0x4a>
    {
        /* Read gyro chip id */
        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8000eec:	f107 010e 	add.w	r1, r7, #14
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f9b1 	bl	800125c <get_regs>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <bmi08g_init+0x4a>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d103      	bne.n	8000f14 <bmi08g_init+0x46>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8000f0c:	7bba      	ldrb	r2, [r7, #14]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	705a      	strb	r2, [r3, #1]
 8000f12:	e001      	b.n	8000f18 <bmi08g_init+0x4a>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8000f14:	23fd      	movs	r3, #253	; 0xfd
 8000f16:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f000 f96d 	bl	8001214 <null_ptr_check>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8000f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <bmi08g_get_regs+0x46>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00e      	beq.n	8000f6a <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8000f52:	7bf8      	ldrb	r0, [r7, #15]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	f000 f97f 	bl	800125c <get_regs>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000f62:	e004      	b.n	8000f6e <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8000f64:	23f9      	movs	r3, #249	; 0xf9
 8000f66:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000f68:	e001      	b.n	8000f6e <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8000f6a:	23ff      	movs	r3, #255	; 0xff
 8000f6c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	f000 f942 	bl	8001214 <null_ptr_check>
 8000f90:	4603      	mov	r3, r0
 8000f92:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8000f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d130      	bne.n	8000ffe <bmi08g_set_regs+0x84>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d02d      	beq.n	8000ffe <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d027      	beq.n	8000ff8 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8000fa8:	7bf8      	ldrb	r0, [r7, #15]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	f000 f980 	bl	80012b4 <set_regs>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	7cdb      	ldrb	r3, [r3, #19]
 8000fbc:	2b80      	cmp	r3, #128	; 0x80
 8000fbe:	d003      	beq.n	8000fc8 <bmi08g_set_regs+0x4e>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	7cdb      	ldrb	r3, [r3, #19]
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d108      	bne.n	8000fda <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	6892      	ldr	r2, [r2, #8]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000fd6:	4798      	blx	r3
        if (len > 0)
 8000fd8:	e013      	b.n	8001002 <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	7cdb      	ldrb	r3, [r3, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d107      	bne.n	8000ff2 <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	6892      	ldr	r2, [r2, #8]
 8000fea:	4611      	mov	r1, r2
 8000fec:	2002      	movs	r0, #2
 8000fee:	4798      	blx	r3
        if (len > 0)
 8000ff0:	e007      	b.n	8001002 <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8000ff2:	23fb      	movs	r3, #251	; 0xfb
 8000ff4:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000ff6:	e004      	b.n	8001002 <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8000ff8:	23f9      	movs	r3, #249	; 0xf9
 8000ffa:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000ffc:	e001      	b.n	8001002 <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001016:	2300      	movs	r3, #0
 8001018:	73bb      	strb	r3, [r7, #14]
 800101a:	2300      	movs	r3, #0
 800101c:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f8f8 	bl	8001214 <null_ptr_check>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d166      	bne.n	80010fe <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7d9b      	ldrb	r3, [r3, #22]
 8001034:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7d1b      	ldrb	r3, [r3, #20]
 800103a:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d901      	bls.n	8001046 <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001042:	2301      	movs	r3, #1
 8001044:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d901      	bls.n	8001050 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 800104c:	2301      	movs	r3, #1
 800104e:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d14f      	bne.n	80010f6 <bmi08g_set_meas_conf+0xe8>
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d14c      	bne.n	80010f6 <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 800105c:	f107 010a 	add.w	r1, r7, #10
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	2010      	movs	r0, #16
 8001066:	f7ff ff5d 	bl	8000f24 <bmi08g_get_regs>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d142      	bne.n	80010fc <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8001076:	7abb      	ldrb	r3, [r7, #10]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	b25a      	sxtb	r2, r3
 8001080:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b25b      	sxtb	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001092:	f107 010a 	add.w	r1, r7, #10
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff ff6d 	bl	8000f7a <bmi08g_set_regs>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d127      	bne.n	80010fc <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 80010ac:	f107 010a 	add.w	r1, r7, #10
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	200f      	movs	r0, #15
 80010b6:	f7ff ff35 	bl	8000f24 <bmi08g_get_regs>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11a      	bne.n	80010fc <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 80010e2:	f107 010a 	add.w	r1, r7, #10
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff ff45 	bl	8000f7a <bmi08g_set_regs>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 80010f4:	e002      	b.n	80010fc <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 80010f6:	23f8      	movs	r3, #248	; 0xf8
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e000      	b.n	80010fe <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 80010fc:	bf00      	nop
        }
    }

    return rslt;
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001112:	2301      	movs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f87c 	bl	8001214 <null_ptr_check>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d13a      	bne.n	800119e <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	2011      	movs	r0, #17
 8001132:	f7ff fef7 	bl	8000f24 <bmi08g_get_regs>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d12d      	bne.n	800119e <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7cdb      	ldrb	r3, [r3, #19]
 8001146:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	2b80      	cmp	r3, #128	; 0x80
 800114c:	d104      	bne.n	8001158 <bmi08g_set_power_mode+0x4e>
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	2b20      	cmp	r3, #32
 8001152:	d101      	bne.n	8001158 <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d104      	bne.n	8001168 <bmi08g_set_power_mode+0x5e>
 800115e:	7b3b      	ldrb	r3, [r7, #12]
 8001160:	2b80      	cmp	r3, #128	; 0x80
 8001162:	d101      	bne.n	8001168 <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 800116e:	f107 010d 	add.w	r1, r7, #13
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	2011      	movs	r0, #17
 8001178:	f7ff feff 	bl	8000f7a <bmi08g_set_regs>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10a      	bne.n	800119e <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6892      	ldr	r2, [r2, #8]
 8001190:	4611      	mov	r1, r2
 8001192:	f247 5030 	movw	r0, #30000	; 0x7530
 8001196:	4798      	blx	r3
 8001198:	e001      	b.n	800119e <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 800119a:	23fb      	movs	r3, #251	; 0xfb
 800119c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f000 f82d 	bl	8001214 <null_ptr_check>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d11e      	bne.n	8001204 <bmi08g_set_int_config+0x5a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01b      	beq.n	8001204 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <bmi08g_set_int_config+0x36>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db11      	blt.n	80011fc <bmi08g_set_int_config+0x52>
 80011d8:	3b01      	subs	r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d80e      	bhi.n	80011fc <bmi08g_set_int_config+0x52>
 80011de:	e006      	b.n	80011ee <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 80011e0:	6839      	ldr	r1, [r7, #0]
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f8be 	bl	8001364 <set_gyro_data_ready_int>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
                break;
 80011ec:	e009      	b.n	8001202 <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f929 	bl	8001448 <set_fifo_int>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
                break;
 80011fa:	e002      	b.n	8001202 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 80011fc:	23f8      	movs	r3, #248	; 0xf8
 80011fe:	73fb      	strb	r3, [r7, #15]
                break;
 8001200:	bf00      	nop
        switch (int_config->int_type)
 8001202:	e001      	b.n	8001208 <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00f      	beq.n	8001242 <null_ptr_check+0x2e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <null_ptr_check+0x2e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <null_ptr_check+0x2e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001242:	23ff      	movs	r3, #255	; 0xff
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e001      	b.n	800124c <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	7b1b      	ldrb	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d103      	bne.n	8001280 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800127e:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6a1c      	ldr	r4, [r3, #32]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	7bf8      	ldrb	r0, [r7, #15]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	47a0      	blx	r4
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 80012a4:	23fe      	movs	r3, #254	; 0xfe
 80012a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}

080012b4 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	7b1b      	ldrb	r3, [r3, #12]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d103      	bne.n	80012dc <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012da:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d113      	bne.n	800130a <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	7bf8      	ldrb	r0, [r7, #15]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	47a0      	blx	r4
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001306:	23fe      	movs	r3, #254	; 0xfe
 8001308:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d923      	bls.n	8001358 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001310:	2300      	movs	r3, #0
 8001312:	75bb      	strb	r3, [r7, #22]
 8001314:	e01c      	b.n	8001350 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800131a:	7dbb      	ldrb	r3, [r7, #22]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	18d1      	adds	r1, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	7bf8      	ldrb	r0, [r7, #15]
 8001326:	2201      	movs	r2, #1
 8001328:	47a0      	blx	r4
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001344:	23fe      	movs	r3, #254	; 0xfe
 8001346:	75fb      	strb	r3, [r7, #23]
                break;
 8001348:	e006      	b.n	8001358 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	3301      	adds	r3, #1
 800134e:	75bb      	strb	r3, [r7, #22]
 8001350:	7dbb      	ldrb	r3, [r7, #22]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8de      	bhi.n	8001316 <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}

08001364 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 800136e:	2300      	movs	r3, #0
 8001370:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001372:	f107 010c 	add.w	r1, r7, #12
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	2018      	movs	r0, #24
 800137c:	f7ff ff6e 	bl	800125c <get_regs>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d157      	bne.n	800143c <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <set_gyro_data_ready_int+0x3c>
 800139a:	2b01      	cmp	r3, #1
 800139c:	d00f      	beq.n	80013be <set_gyro_data_ready_int+0x5a>
 800139e:	e01b      	b.n	80013d8 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 80013a0:	7b3b      	ldrb	r3, [r7, #12]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	733b      	strb	r3, [r7, #12]
                break;
 80013bc:	e00f      	b.n	80013de <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	733b      	strb	r3, [r7, #12]
                break;
 80013d6:	e002      	b.n	80013de <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80013d8:	23fb      	movs	r3, #251	; 0xfb
 80013da:	73fb      	strb	r3, [r7, #15]
                break;
 80013dc:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d12a      	bne.n	800143c <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 80013e6:	7b3b      	ldrb	r3, [r7, #12]
 80013e8:	f003 0381 	and.w	r3, r3, #129	; 0x81
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	737b      	strb	r3, [r7, #13]
 80013f4:	e001      	b.n	80013fa <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	2018      	movs	r0, #24
 8001404:	f7ff fdb9 	bl	8000f7a <bmi08g_set_regs>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800140c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d113      	bne.n	800143c <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f88c 	bl	8001534 <set_int_pin_config>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	1c59      	adds	r1, r3, #1
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	2015      	movs	r0, #21
 8001434:	f7ff fda1 	bl	8000f7a <bmi08g_set_regs>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001452:	2300      	movs	r3, #0
 8001454:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001456:	f107 010c 	add.w	r1, r7, #12
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	2018      	movs	r0, #24
 8001460:	f7ff fefc 	bl	800125c <get_regs>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d15b      	bne.n	8001528 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <set_fifo_int+0x3c>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d010      	beq.n	80014a4 <set_fifo_int+0x5c>
 8001482:	e01f      	b.n	80014c4 <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	b25a      	sxtb	r2, r3
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	733b      	strb	r3, [r7, #12]
                break;
 80014a2:	e012      	b.n	80014ca <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 80014a4:	7b3b      	ldrb	r3, [r7, #12]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f023 0320 	bic.w	r3, r3, #32
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	733b      	strb	r3, [r7, #12]
                break;
 80014c2:	e002      	b.n	80014ca <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80014c4:	23fb      	movs	r3, #251	; 0xfb
 80014c6:	73fb      	strb	r3, [r7, #15]
                break;
 80014c8:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d12a      	bne.n	8001528 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 80014d2:	7b3b      	ldrb	r3, [r7, #12]
 80014d4:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	737b      	strb	r3, [r7, #13]
 80014e0:	e001      	b.n	80014e6 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	2018      	movs	r0, #24
 80014f0:	f7ff fd43 	bl	8000f7a <bmi08g_set_regs>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d113      	bne.n	8001528 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f816 	bl	8001534 <set_int_pin_config>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	1c59      	adds	r1, r3, #1
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	2015      	movs	r0, #21
 8001520:	f7ff fd2b 	bl	8000f7a <bmi08g_set_regs>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 800153e:	f107 010e 	add.w	r1, r7, #14
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	2016      	movs	r0, #22
 8001548:	f7ff fe88 	bl	800125c <get_regs>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d150      	bne.n	80015fa <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <set_int_pin_config+0x32>
 8001560:	2b01      	cmp	r3, #1
 8001562:	d020      	beq.n	80015a6 <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 8001564:	e040      	b.n	80015e8 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	789b      	ldrb	r3, [r3, #2]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b25b      	sxtb	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b25b      	sxtb	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	f023 0302 	bic.w	r3, r3, #2
 800158c:	b25a      	sxtb	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	78db      	ldrb	r3, [r3, #3]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	b25b      	sxtb	r3, r3
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	73bb      	strb	r3, [r7, #14]
                break;
 80015a4:	e020      	b.n	80015e8 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	789b      	ldrb	r3, [r3, #2]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	f023 0308 	bic.w	r3, r3, #8
 80015ce:	b25a      	sxtb	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	73bb      	strb	r3, [r7, #14]
                break;
 80015e6:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 80015e8:	f107 010e 	add.w	r1, r7, #14
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	2016      	movs	r0, #22
 80015f2:	f7ff fcc2 	bl	8000f7a <bmi08g_set_regs>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	2201      	movs	r2, #1
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <__io_putchar+0x20>)
 800161a:	f003 fbad 	bl	8004d78 <HAL_UART_Transmit>
}
 800161e:	bf00      	nop
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000013c 	.word	0x2000013c

0800162c <init_bmi08x_get_data>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x_get_data(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 8001632:	483a      	ldr	r0, [pc, #232]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001634:	f7fe ff9e 	bl	8000574 <bmi08a_init>
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4619      	mov	r1, r3
 8001642:	4837      	ldr	r0, [pc, #220]	; (8001720 <init_bmi08x_get_data+0xf4>)
 8001644:	f000 fba0 	bl	8001d88 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <init_bmi08x_get_data+0x3a>
		rslt = bmi08g_init(&bmi08xdev);
 8001650:	4832      	ldr	r0, [pc, #200]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001652:	f7ff fc3c 	bl	8000ece <bmi08g_init>
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	4619      	mov	r1, r3
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <init_bmi08x_get_data+0xf8>)
 8001662:	f000 fb91 	bl	8001d88 <bmi08x_error_codes_print_result>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d14f      	bne.n	800170e <init_bmi08x_get_data+0xe2>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001670:	220c      	movs	r2, #12
 8001672:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001676:	7b5b      	ldrb	r3, [r3, #13]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d103      	bne.n	8001684 <init_bmi08x_get_data+0x58>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <init_bmi08x_get_data+0xf0>)
 800167e:	2203      	movs	r2, #3
 8001680:	741a      	strb	r2, [r3, #16]
 8001682:	e006      	b.n	8001692 <init_bmi08x_get_data+0x66>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001686:	7b5b      	ldrb	r3, [r3, #13]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <init_bmi08x_get_data+0x66>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <init_bmi08x_get_data+0xf0>)
 800168e:	2203      	movs	r2, #3
 8001690:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <init_bmi08x_get_data+0xf0>)
 8001694:	2200      	movs	r2, #0
 8001696:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <init_bmi08x_get_data+0xf0>)
 800169a:	220a      	movs	r2, #10
 800169c:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016a0:	f7ff f8c2 	bl	8000828 <bmi08a_set_power_mode>
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4619      	mov	r1, r3
 80016ae:	481e      	ldr	r0, [pc, #120]	; (8001728 <init_bmi08x_get_data+0xfc>)
 80016b0:	f000 fb6a 	bl	8001d88 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016b6:	f7ff f82a 	bl	800070e <bmi08a_set_meas_conf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <init_bmi08x_get_data+0x100>)
 80016c6:	f000 fb5f 	bl	8001d88 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_250_DPS;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016d8:	2201      	movs	r2, #1
 80016da:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016e4:	f7ff fd11 	bl	800110a <bmi08g_set_power_mode>
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4619      	mov	r1, r3
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <init_bmi08x_get_data+0x104>)
 80016f4:	f000 fb48 	bl	8001d88 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <init_bmi08x_get_data+0xf0>)
 80016fa:	f7ff fc88 	bl	800100e <bmi08g_set_meas_conf>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	4619      	mov	r1, r3
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <init_bmi08x_get_data+0x108>)
 800170a:	f000 fb3d 	bl	8001d88 <bmi08x_error_codes_print_result>
	}

	return rslt;
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001c0 	.word	0x200001c0
 8001720:	0800674c 	.word	0x0800674c
 8001724:	08006758 	.word	0x08006758
 8001728:	08006764 	.word	0x08006764
 800172c:	0800677c 	.word	0x0800677c
 8001730:	08006794 	.word	0x08006794
 8001734:	080067ac 	.word	0x080067ac

08001738 <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 8001756:	2201      	movs	r2, #1
 8001758:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 800175c:	2201      	movs	r2, #1
 800175e:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 8001760:	4920      	ldr	r1, [pc, #128]	; (80017e4 <enable_bmi08x_interrupt+0xac>)
 8001762:	481f      	ldr	r0, [pc, #124]	; (80017e0 <enable_bmi08x_interrupt+0xa8>)
 8001764:	f7ff f8ba 	bl	80008dc <bmi08a_set_int_config>
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4619      	mov	r1, r3
 8001772:	481d      	ldr	r0, [pc, #116]	; (80017e8 <enable_bmi08x_interrupt+0xb0>)
 8001774:	f000 fb08 	bl	8001d88 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d128      	bne.n	80017d2 <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 8001788:	2200      	movs	r2, #0
 800178a:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 800178e:	2200      	movs	r2, #0
 8001790:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 8001794:	2201      	movs	r2, #1
 8001796:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 800179a:	2201      	movs	r2, #1
 800179c:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 800179e:	4911      	ldr	r1, [pc, #68]	; (80017e4 <enable_bmi08x_interrupt+0xac>)
 80017a0:	4812      	ldr	r0, [pc, #72]	; (80017ec <enable_bmi08x_interrupt+0xb4>)
 80017a2:	f7ff fd02 	bl	80011aa <bmi08g_set_int_config>
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	4619      	mov	r1, r3
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <enable_bmi08x_interrupt+0xb8>)
 80017b2:	f000 fae9 	bl	8001d88 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 80017b6:	1db9      	adds	r1, r7, #6
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <enable_bmi08x_interrupt+0xac>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	2018      	movs	r0, #24
 80017be:	f7ff fbb1 	bl	8000f24 <bmi08g_get_regs>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <enable_bmi08x_interrupt+0xbc>)
 80017ce:	f000 fadb 	bl	8001d88 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001f0 	.word	0x200001f0
 80017e4:	200001c0 	.word	0x200001c0
 80017e8:	08006910 	.word	0x08006910
 80017ec:	200001f8 	.word	0x200001f8
 80017f0:	08006928 	.word	0x08006928
 80017f4:	08006940 	.word	0x08006940

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f000 fd59 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f837 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 f943 	bl	8001a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800180a:	f000 f911 	bl	8001a30 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800180e:	f000 f883 	bl	8001918 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001812:	f000 f8bf 	bl	8001994 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  int8_t rslt;
  	float x = 0.0, y = 0.0, z = 0.0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  	 * Sensor variant given as parameter
  	 *          For BMI085 : BMI085_VARIANT
  	 *          For BMI088 : BMI088_VARIANT
  	 */
  //	HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
  	printf("Hello\n\r");
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <main+0x68>)
 800182a:	f003 ff75 	bl	8005718 <iprintf>
//  	init_handle(&bmi085_handle);

  	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI085_VARIANT);
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <main+0x6c>)
 8001834:	f000 fa56 	bl	8001ce4 <bmi08x_interface_init>
 8001838:	4603      	mov	r3, r0
 800183a:	70fb      	strb	r3, [r7, #3]
  	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 800183c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001840:	4619      	mov	r1, r3
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <main+0x70>)
 8001844:	f000 faa0 	bl	8001d88 <bmi08x_error_codes_print_result>

//  	bmi08a_soft_reset(&bmi08xdev);
  	/* Initialize the sensors */
  	init_bmi08x_get_data();
 8001848:	f7ff fef0 	bl	800162c <init_bmi08x_get_data>

  	/* Enable data ready interrupts */
  //	enable_bmi08x_data_synchronization_interrupt();
  //	uint32_t start_time = HAL_GetTick();
  	enable_bmi08x_interrupt();
 800184c:	f7ff ff74 	bl	8001738 <enable_bmi08x_interrupt>

  	printf("Accel data range : 16G for BMI085 and 24G for BMI088\n");
 8001850:	4806      	ldr	r0, [pc, #24]	; (800186c <main+0x74>)
 8001852:	f003 ffe7 	bl	8005824 <puts>
  	printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n");
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <main+0x78>)
 8001858:	f003 ffe4 	bl	8005824 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800185c:	e7fe      	b.n	800185c <main+0x64>
 800185e:	bf00      	nop
 8001860:	08006970 	.word	0x08006970
 8001864:	200001c0 	.word	0x200001c0
 8001868:	08006978 	.word	0x08006978
 800186c:	08006990 	.word	0x08006990
 8001870:	080069c8 	.word	0x080069c8

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b096      	sub	sp, #88	; 0x58
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2244      	movs	r2, #68	; 0x44
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f003 ff40 	bl	8005708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	463b      	mov	r3, r7
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001896:	f44f 7000 	mov.w	r0, #512	; 0x200
 800189a:	f001 f829 	bl	80028f0 <HAL_PWREx_ControlVoltageScaling>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018a4:	f000 fb18 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018a8:	2310      	movs	r3, #16
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018bc:	2301      	movs	r3, #1
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
 80018c4:	2310      	movs	r3, #16
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f861 	bl	800299c <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80018e0:	f000 fafa 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2303      	movs	r3, #3
 80018ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80018f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fcae 	bl	8003260 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800190a:	f000 fae5 	bl	8001ed8 <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	3758      	adds	r7, #88	; 0x58
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_SPI1_Init+0x74>)
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <MX_SPI1_Init+0x78>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_SPI1_Init+0x74>)
 8001924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_SPI1_Init+0x74>)
 8001932:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001936:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_SPI1_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_SPI1_Init+0x74>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_SPI1_Init+0x74>)
 800194e:	2218      	movs	r2, #24
 8001950:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_SPI1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_SPI1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_SPI1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_SPI1_Init+0x74>)
 8001966:	2207      	movs	r2, #7
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_SPI1_Init+0x74>)
 8001972:	2208      	movs	r2, #8
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_SPI1_Init+0x74>)
 8001978:	f002 f81c 	bl	80039b4 <HAL_SPI_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001982:	f000 faa9 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000008c 	.word	0x2000008c
 8001990:	40013000 	.word	0x40013000

08001994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019bc:	2203      	movs	r2, #3
 80019be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff-1;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019c8:	f06f 0201 	mvn.w	r2, #1
 80019cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019dc:	f002 fefa 	bl	80047d4 <HAL_TIM_Base_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019e6:	f000 fa77 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019f8:	f002 ff43 	bl	8004882 <HAL_TIM_ConfigClockSource>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a02:	f000 fa69 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_TIM2_Init+0x98>)
 8001a14:	f003 f8fc 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a1e:	f000 fa5b 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200000f0 	.word	0x200000f0

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_USART2_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a74:	f003 f932 	bl	8004cdc <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f000 fa2b 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000013c 	.word	0x2000013c
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a40      	ldr	r2, [pc, #256]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a3a      	ldr	r2, [pc, #232]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <MX_GPIO_Init+0x134>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	21b0      	movs	r1, #176	; 0xb0
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f000 fec9 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <MX_GPIO_Init+0x138>)
 8001b1a:	f000 fec3 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BMI085_NSSg_Pin|BMI085_NSSa_Pin, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b24:	4829      	ldr	r0, [pc, #164]	; (8001bcc <MX_GPIO_Init+0x13c>)
 8001b26:	f000 febd 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4822      	ldr	r0, [pc, #136]	; (8001bcc <MX_GPIO_Init+0x13c>)
 8001b42:	f000 fd3d 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001b46:	23b0      	movs	r3, #176	; 0xb0
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f000 fd2e 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001b64:	2340      	movs	r3, #64	; 0x40
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7a:	f000 fd21 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <MX_GPIO_Init+0x138>)
 8001b98:	f000 fd12 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI085_NSSg_Pin BMI085_NSSa_Pin */
  GPIO_InitStruct.Pin = BMI085_NSSg_Pin|BMI085_NSSa_Pin;
 8001b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_GPIO_Init+0x13c>)
 8001bb6:	f000 fd03 	bl	80025c0 <HAL_GPIO_Init>

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800

08001bd0 <bmi08x_spi_read>:

/* USER CODE BEGIN 4 */

BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8001be6:	8afb      	ldrh	r3, [r7, #22]
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4812      	ldr	r0, [pc, #72]	; (8001c38 <bmi08x_spi_read+0x68>)
 8001bee:	f000 fe59 	bl	80028a4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK){
 8001bf2:	f107 010f 	add.w	r1, r7, #15
 8001bf6:	2332      	movs	r3, #50	; 0x32
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <bmi08x_spi_read+0x6c>)
 8001bfc:	f001 ff7d 	bl	8003afa <HAL_SPI_Transmit>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <bmi08x_spi_read+0x3a>
		return 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e012      	b.n	8001c30 <bmi08x_spi_read+0x60>
	}
	if(HAL_SPI_Receive(&hspi1, reg_data, len, 50) != HAL_OK){
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	2332      	movs	r3, #50	; 0x32
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	480a      	ldr	r0, [pc, #40]	; (8001c3c <bmi08x_spi_read+0x6c>)
 8001c14:	f002 f8df 	bl	8003dd6 <HAL_SPI_Receive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <bmi08x_spi_read+0x52>
			return 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e006      	b.n	8001c30 <bmi08x_spi_read+0x60>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8001c22:	8afb      	ldrh	r3, [r7, #22]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4619      	mov	r1, r3
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <bmi08x_spi_read+0x68>)
 8001c2a:	f000 fe3b 	bl	80028a4 <HAL_GPIO_WritePin>
	return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	2000008c 	.word	0x2000008c

08001c40 <bmi08x_spi_write>:


BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8001c56:	8afb      	ldrh	r3, [r7, #22]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <bmi08x_spi_write+0x68>)
 8001c5e:	f000 fe21 	bl	80028a4 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK){
 8001c62:	f107 010f 	add.w	r1, r7, #15
 8001c66:	2332      	movs	r3, #50	; 0x32
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <bmi08x_spi_write+0x6c>)
 8001c6c:	f001 ff45 	bl	8003afa <HAL_SPI_Transmit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <bmi08x_spi_write+0x3a>
		return 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e011      	b.n	8001c9e <bmi08x_spi_write+0x5e>
	}
	if(HAL_SPI_Transmit(&hspi1, reg_data, 1, 5) != HAL_OK){
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <bmi08x_spi_write+0x6c>)
 8001c82:	f001 ff3a 	bl	8003afa <HAL_SPI_Transmit>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <bmi08x_spi_write+0x50>
			return 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e006      	b.n	8001c9e <bmi08x_spi_write+0x5e>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8001c90:	8afb      	ldrh	r3, [r7, #22]
 8001c92:	2201      	movs	r2, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <bmi08x_spi_write+0x68>)
 8001c98:	f000 fe04 	bl	80028a4 <HAL_GPIO_WritePin>
	return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	2000008c 	.word	0x2000008c

08001cb0 <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <bmi08x_delay_us+0x30>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period)
 8001cc2:	bf00      	nop
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <bmi08x_delay_us+0x30>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f9      	bhi.n	8001cc4 <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200000f0 	.word	0x200000f0

08001ce4 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d032      	beq.n	8001d64 <bmi08x_interface_init+0x80>

#if defined(PC)
        setbuf(stdout, NULL);
#endif

		HAL_Delay(10);
 8001cfe:	200a      	movs	r0, #10
 8001d00:	f000 fb54 	bl	80023ac <HAL_Delay>

		/* Bus configuration : I2C */
		if (intf == BMI08X_I2C_INTF) {
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <bmi08x_interface_init+0x54>
//            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
//            coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);
		}
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		else if (intf == BMI08X_SPI_INTF) {
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d113      	bne.n	8001d38 <bmi08x_interface_init+0x54>

			bmi08x->intf = BMI08X_SPI_INTF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <bmi08x_interface_init+0x90>)
 8001d1a:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <bmi08x_interface_init+0x94>)
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085_NSSa_Pin;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <bmi08x_interface_init+0x98>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085_NSSg_Pin;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <bmi08x_interface_init+0x9c>)
 8001d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d30:	801a      	strh	r2, [r3, #0]

			/* CSB1 pin is made high for selecting SPI protocol (accelerometer)*/
			// Done through STM32CubeIDE
//			HAL_GPIO_WritePin(GPIOC, BMI085_NSSa_Pin, GPIO_PIN_SET);
			HAL_Delay(10);
 8001d32:	200a      	movs	r0, #10
 8001d34:	f000 fb3a 	bl	80023ac <HAL_Delay>
//			HAL_Delay(10);
//            coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	78ba      	ldrb	r2, [r7, #2]
 8001d3c:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <bmi08x_interface_init+0x98>)
 8001d42:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <bmi08x_interface_init+0x9c>)
 8001d48:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <bmi08x_interface_init+0xa0>)
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = BMI08X_READ_WRITE_LEN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	222e      	movs	r2, #46	; 0x2e
 8001d54:	771a      	strb	r2, [r3, #28]

//        coines_delay_usec(10000);
		HAL_Delay(10);
 8001d56:	200a      	movs	r0, #10
 8001d58:	f000 fb28 	bl	80023ac <HAL_Delay>

//        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);

//        coines_delay_usec(10000);
		HAL_Delay(10);
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f000 fb25 	bl	80023ac <HAL_Delay>
 8001d62:	e001      	b.n	8001d68 <bmi08x_interface_init+0x84>
	} else {
		rslt = BMI08X_E_NULL_PTR;
 8001d64:	23ff      	movs	r3, #255	; 0xff
 8001d66:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08001bd1 	.word	0x08001bd1
 8001d78:	08001c41 	.word	0x08001c41
 8001d7c:	200001fe 	.word	0x200001fe
 8001d80:	20000200 	.word	0x20000200
 8001d84:	08001cb1 	.word	0x08001cb1

08001d88 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8001d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8081 	beq.w	8001ea0 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4841      	ldr	r0, [pc, #260]	; (8001ea8 <bmi08x_error_codes_print_result+0x120>)
 8001da2:	f003 fcb9 	bl	8005718 <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d106      	bne.n	8001dbe <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8001db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db4:	4619      	mov	r1, r3
 8001db6:	483d      	ldr	r0, [pc, #244]	; (8001eac <bmi08x_error_codes_print_result+0x124>)
 8001db8:	f003 fcae 	bl	8005718 <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8001dbc:	e070      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	f113 0f02 	cmn.w	r3, #2
 8001dc6:	d106      	bne.n	8001dd6 <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8001dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4838      	ldr	r0, [pc, #224]	; (8001eb0 <bmi08x_error_codes_print_result+0x128>)
 8001dd0:	f003 fca2 	bl	8005718 <iprintf>
}
 8001dd4:	e064      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8001dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dda:	f113 0f03 	cmn.w	r3, #3
 8001dde:	d106      	bne.n	8001dee <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8001de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4833      	ldr	r0, [pc, #204]	; (8001eb4 <bmi08x_error_codes_print_result+0x12c>)
 8001de8:	f003 fc96 	bl	8005718 <iprintf>
}
 8001dec:	e058      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8001dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df2:	f113 0f04 	cmn.w	r3, #4
 8001df6:	d106      	bne.n	8001e06 <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8001df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482e      	ldr	r0, [pc, #184]	; (8001eb8 <bmi08x_error_codes_print_result+0x130>)
 8001e00:	f003 fc8a 	bl	8005718 <iprintf>
}
 8001e04:	e04c      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	f113 0f05 	cmn.w	r3, #5
 8001e0e:	d106      	bne.n	8001e1e <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8001e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4829      	ldr	r0, [pc, #164]	; (8001ebc <bmi08x_error_codes_print_result+0x134>)
 8001e18:	f003 fc7e 	bl	8005718 <iprintf>
}
 8001e1c:	e040      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8001e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e22:	f113 0f06 	cmn.w	r3, #6
 8001e26:	d106      	bne.n	8001e36 <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8001e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <bmi08x_error_codes_print_result+0x138>)
 8001e30:	f003 fc72 	bl	8005718 <iprintf>
}
 8001e34:	e034      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8001e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3a:	f113 0f07 	cmn.w	r3, #7
 8001e3e:	d106      	bne.n	8001e4e <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8001e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e44:	4619      	mov	r1, r3
 8001e46:	481f      	ldr	r0, [pc, #124]	; (8001ec4 <bmi08x_error_codes_print_result+0x13c>)
 8001e48:	f003 fc66 	bl	8005718 <iprintf>
}
 8001e4c:	e028      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8001e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e52:	f113 0f08 	cmn.w	r3, #8
 8001e56:	d106      	bne.n	8001e66 <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8001e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481a      	ldr	r0, [pc, #104]	; (8001ec8 <bmi08x_error_codes_print_result+0x140>)
 8001e60:	f003 fc5a 	bl	8005718 <iprintf>
}
 8001e64:	e01c      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8001e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6a:	f113 0f09 	cmn.w	r3, #9
 8001e6e:	d106      	bne.n	8001e7e <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8001e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4815      	ldr	r0, [pc, #84]	; (8001ecc <bmi08x_error_codes_print_result+0x144>)
 8001e78:	f003 fc4e 	bl	8005718 <iprintf>
}
 8001e7c:	e010      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8001e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d106      	bne.n	8001e94 <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8001e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <bmi08x_error_codes_print_result+0x148>)
 8001e8e:	f003 fc43 	bl	8005718 <iprintf>
}
 8001e92:	e005      	b.n	8001ea0 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8001e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <bmi08x_error_codes_print_result+0x14c>)
 8001e9c:	f003 fc3c 	bl	8005718 <iprintf>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	080069fc 	.word	0x080069fc
 8001eac:	08006a00 	.word	0x08006a00
 8001eb0:	08006a1c 	.word	0x08006a1c
 8001eb4:	08006a44 	.word	0x08006a44
 8001eb8:	08006a64 	.word	0x08006a64
 8001ebc:	08006a80 	.word	0x08006a80
 8001ec0:	08006aa0 	.word	0x08006aa0
 8001ec4:	08006ac4 	.word	0x08006ac4
 8001ec8:	08006af0 	.word	0x08006af0
 8001ecc:	08006b10 	.word	0x08006b10
 8001ed0:	08006b38 	.word	0x08006b38
 8001ed4:	08006b54 	.word	0x08006b54

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_MspInit+0x44>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_MspInit+0x44>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_MspInit+0x44>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x44>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x44>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x44>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <HAL_SPI_MspInit+0x80>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d129      	bne.n	8001fa2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f58:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_SPI_MspInit+0x84>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f7e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f90:	2305      	movs	r3, #5
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f000 fb0f 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40013000 	.word	0x40013000
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d10b      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_TIM_Base_MspInit+0x38>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0x38>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_TIM_Base_MspInit+0x38>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b096      	sub	sp, #88	; 0x58
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	2234      	movs	r2, #52	; 0x34
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fb79 	bl	8005708 <memset>
  if(huart->Instance==USART2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_UART_MspInit+0xa8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d136      	bne.n	800208e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fb3b 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002038:	f7ff ff4e 	bl	8001ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_UART_MspInit+0xac>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_UART_MspInit+0xac>)
 8002042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002046:	6593      	str	r3, [r2, #88]	; 0x58
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_UART_MspInit+0xac>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_UART_MspInit+0xac>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_UART_MspInit+0xac>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_UART_MspInit+0xac>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800206c:	230c      	movs	r3, #12
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207c:	2307      	movs	r3, #7
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208a:	f000 fa99 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3758      	adds	r7, #88	; 0x58
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40004400 	.word	0x40004400
 800209c:	40021000 	.word	0x40021000

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler+0x4>

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ec:	f000 f93e 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
  }

  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fa5d 	bl	8001608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
  }
  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f003 fa58 	bl	80056b4 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000a000 	.word	0x2000a000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000204 	.word	0x20000204
 8002238:	20000220 	.word	0x20000220

0800223c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002264:	f7ff ffea 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <LoopForever+0x6>)
  ldr r1, =_edata
 800226a:	490d      	ldr	r1, [pc, #52]	; (80022a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <LoopForever+0xe>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002280:	4c0a      	ldr	r4, [pc, #40]	; (80022ac <LoopForever+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228e:	f003 fa17 	bl	80056c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002292:	f7ff fab1 	bl	80017f8 <main>

08002296 <LoopForever>:

LoopForever:
    b LoopForever
 8002296:	e7fe      	b.n	8002296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002298:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022a4:	08006c68 	.word	0x08006c68
  ldr r2, =_sbss
 80022a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022ac:	2000021c 	.word	0x2000021c

080022b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC1_2_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_Init+0x3c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_Init+0x3c>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ca:	2003      	movs	r0, #3
 80022cc:	f000 f944 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d0:	2000      	movs	r0, #0
 80022d2:	f000 f80f 	bl	80022f4 <HAL_InitTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	e001      	b.n	80022e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e2:	f7ff fdff 	bl	8001ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_InitTick+0x6c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x70>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f941 	bl	80025a6 <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d809      	bhi.n	8002344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 f919 	bl	800256e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_InitTick+0x74>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e007      	b.n	8002354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e004      	b.n	8002354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e001      	b.n	8002354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008
 8002390:	20000208 	.word	0x20000208

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000208 	.word	0x20000208

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff47 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff5c 	bl	800243c <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffb0 	bl	8002514 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e14e      	b.n	800286e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8140 	beq.w	8002868 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x40>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 809a 	beq.w	8002868 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b55      	ldr	r3, [pc, #340]	; (800288c <HAL_GPIO_Init+0x2cc>)
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	4a54      	ldr	r2, [pc, #336]	; (800288c <HAL_GPIO_Init+0x2cc>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6613      	str	r3, [r2, #96]	; 0x60
 8002740:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_GPIO_Init+0x2cc>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002776:	d013      	beq.n	80027a0 <HAL_GPIO_Init+0x1e0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a46      	ldr	r2, [pc, #280]	; (8002894 <HAL_GPIO_Init+0x2d4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00d      	beq.n	800279c <HAL_GPIO_Init+0x1dc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a45      	ldr	r2, [pc, #276]	; (8002898 <HAL_GPIO_Init+0x2d8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <HAL_GPIO_Init+0x1d8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a44      	ldr	r2, [pc, #272]	; (800289c <HAL_GPIO_Init+0x2dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_GPIO_Init+0x1d4>
 8002790:	2303      	movs	r3, #3
 8002792:	e006      	b.n	80027a2 <HAL_GPIO_Init+0x1e2>
 8002794:	2307      	movs	r3, #7
 8002796:	e004      	b.n	80027a2 <HAL_GPIO_Init+0x1e2>
 8002798:	2302      	movs	r3, #2
 800279a:	e002      	b.n	80027a2 <HAL_GPIO_Init+0x1e2>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_GPIO_Init+0x1e2>
 80027a0:	2300      	movs	r3, #0
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	4093      	lsls	r3, r2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b2:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c0:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e4:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800280e:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f47f aea9 	bne.w	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	48000400 	.word	0x48000400
 8002898:	48000800 	.word	0x48000800
 800289c:	48000c00 	.word	0x48000c00
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_PWREx_GetVoltageRange+0x18>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40007000 	.word	0x40007000

080028f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fe:	d130      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290c:	d038      	beq.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2232      	movs	r2, #50	; 0x32
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002934:	e002      	b.n	800293c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b01      	subs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002948:	d102      	bne.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x60>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f2      	bne.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295c:	d110      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e00f      	b.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d007      	beq.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000
 8002994:	20000000 	.word	0x20000000
 8002998:	431bde83 	.word	0x431bde83

0800299c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f000 bc4f 	b.w	800324e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b0:	4b97      	ldr	r3, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ba:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80e6 	beq.w	8002b9e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4c>
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	f040 808d 	bne.w	8002afa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 8089 	bne.w	8002afa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029e8:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_RCC_OscConfig+0x66>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f000 bc26 	b.w	800324e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCC_OscConfig+0x80>
 8002a12:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_OscConfig+0x8c>
 8002a1c:	4b7c      	ldr	r3, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d224      	bcs.n	8002a76 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fdd9 	bl	80035e8 <RCC_SetFlashLatencyFromMSIRange>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f000 bc06 	b.w	800324e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a42:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4968      	ldr	r1, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e025      	b.n	8002ac2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4960      	ldr	r1, [pc, #384]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a94:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	495b      	ldr	r1, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd98 	bl	80035e8 <RCC_SetFlashLatencyFromMSIRange>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e3c5      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac2:	f000 fccd 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4950      	ldr	r1, [pc, #320]	; (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fc04 	bl	80022f4 <HAL_InitTick>
 8002aec:	4603      	mov	r3, r0
 8002aee:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d052      	beq.n	8002b9c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	e3a9      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d032      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0e:	f7ff fc41 	bl	8002394 <HAL_GetTick>
 8002b12:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b16:	f7ff fc3d 	bl	8002394 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e392      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	4930      	ldr	r1, [pc, #192]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	492b      	ldr	r1, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	e01a      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fc0e 	bl	8002394 <HAL_GetTick>
 8002b78:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fc0a 	bl	8002394 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e35f      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e0>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d073      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x220>
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d063      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d15f      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e33c      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x250>
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e025      	b.n	8002c38 <HAL_RCC_OscConfig+0x29c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d114      	bne.n	8002c20 <HAL_RCC_OscConfig+0x284>
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e013      	b.n	8002c38 <HAL_RCC_OscConfig+0x29c>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08006b78 	.word	0x08006b78
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8b      	ldr	r2, [pc, #556]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7ff fba8 	bl	8002394 <HAL_GetTick>
 8002c44:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff fba4 	bl	8002394 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e2f9      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2ac>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb94 	bl	8002394 <HAL_GetTick>
 8002c6c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff fb90 	bl	8002394 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2e5      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x314>
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x32c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2c2      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	4962      	ldr	r1, [pc, #392]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	e040      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d023      	beq.n	8002d2e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fb4f 	bl	8002394 <HAL_GetTick>
 8002cf6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7ff fb4b 	bl	8002394 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e2a0      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	494e      	ldr	r1, [pc, #312]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	e018      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4b      	ldr	r2, [pc, #300]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7ff fb2b 	bl	8002394 <HAL_GetTick>
 8002d3e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7ff fb27 	bl	8002394 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e27c      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8082 	beq.w	8002e72 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d05f      	beq.n	8002e36 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d037      	beq.n	8002dfc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e254      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dbe:	f7ff fae9 	bl	8002394 <HAL_GetTick>
 8002dc2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff fae5 	bl	8002394 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b11      	cmp	r3, #17
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e23a      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	f023 0210 	bic.w	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	491a      	ldr	r1, [pc, #104]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7ff fac2 	bl	8002394 <HAL_GetTick>
 8002e10:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7ff fabe 	bl	8002394 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b11      	cmp	r3, #17
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e213      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCC_OscConfig+0x478>
 8002e34:	e01d      	b.n	8002e72 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7ff faa5 	bl	8002394 <HAL_GetTick>
 8002e4a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7ff faa1 	bl	8002394 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b11      	cmp	r3, #17
 8002e5a:	d903      	bls.n	8002e64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1f6      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
 8002e60:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e64:	4ba9      	ldr	r3, [pc, #676]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ed      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80bd 	beq.w	8002ffa <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e86:	4ba1      	ldr	r3, [pc, #644]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b9e      	ldr	r3, [pc, #632]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a9d      	ldr	r2, [pc, #628]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9e:	4b9b      	ldr	r3, [pc, #620]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b97      	ldr	r3, [pc, #604]	; (8003110 <HAL_RCC_OscConfig+0x774>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ebc:	4b94      	ldr	r3, [pc, #592]	; (8003110 <HAL_RCC_OscConfig+0x774>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a93      	ldr	r2, [pc, #588]	; (8003110 <HAL_RCC_OscConfig+0x774>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff fa64 	bl	8002394 <HAL_GetTick>
 8002ecc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7ff fa60 	bl	8002394 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1b5      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee2:	4b8b      	ldr	r3, [pc, #556]	; (8003110 <HAL_RCC_OscConfig+0x774>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002efa:	4b84      	ldr	r3, [pc, #528]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	497f      	ldr	r1, [pc, #508]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f20:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a79      	ldr	r2, [pc, #484]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f30:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	4a75      	ldr	r2, [pc, #468]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f40:	e018      	b.n	8002f74 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	4a70      	ldr	r2, [pc, #448]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f52:	e00f      	b.n	8002f74 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f54:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	4a6c      	ldr	r2, [pc, #432]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f64:	4b69      	ldr	r3, [pc, #420]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a68      	ldr	r2, [pc, #416]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7ff fa0a 	bl	8002394 <HAL_GetTick>
 8002f80:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7ff fa06 	bl	8002394 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e159      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ed      	beq.n	8002f84 <HAL_RCC_OscConfig+0x5e8>
 8002fa8:	e01d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7ff f9f3 	bl	8002394 <HAL_GetTick>
 8002fae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7ff f9ef 	bl	8002394 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e142      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ed      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002fd6:	4b4d      	ldr	r3, [pc, #308]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4a4b      	ldr	r2, [pc, #300]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03c      	beq.n	8003080 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01c      	beq.n	8003048 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8003010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003014:	4a3d      	ldr	r2, [pc, #244]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7ff f9b9 	bl	8002394 <HAL_GetTick>
 8003022:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003026:	f7ff f9b5 	bl	8002394 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10a      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003038:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x770>)
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ef      	beq.n	8003026 <HAL_RCC_OscConfig+0x68a>
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <HAL_RCC_OscConfig+0x770>)
 800304a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800304e:	4a2f      	ldr	r2, [pc, #188]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7ff f99c 	bl	8002394 <HAL_GetTick>
 800305c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003060:	f7ff f998 	bl	8002394 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0ed      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8003074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ef      	bne.n	8003060 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80e1 	beq.w	800324c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	2b02      	cmp	r3, #2
 8003090:	f040 80b5 	bne.w	80031fe <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d124      	bne.n	80030f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	3b01      	subs	r3, #1
 80030b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11b      	bne.n	80030f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d113      	bne.n	80030f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	3b01      	subs	r3, #1
 80030d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d05f      	beq.n	80031b2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d05a      	beq.n	80031ae <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_RCC_OscConfig+0x770>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a03      	ldr	r2, [pc, #12]	; (800310c <HAL_RCC_OscConfig+0x770>)
 80030fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003104:	f7ff f946 	bl	8002394 <HAL_GetTick>
 8003108:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	e00c      	b.n	8003126 <HAL_RCC_OscConfig+0x78a>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff f93e 	bl	8002394 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e093      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCC_OscConfig+0x8c0>)
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003142:	3a01      	subs	r2, #1
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800314c:	0212      	lsls	r2, r2, #8
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003154:	0852      	lsrs	r2, r2, #1
 8003156:	3a01      	subs	r2, #1
 8003158:	0552      	lsls	r2, r2, #21
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0652      	lsls	r2, r2, #25
 8003166:	430a      	orrs	r2, r1
 8003168:	493b      	ldr	r1, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800316e:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a39      	ldr	r2, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a36      	ldr	r2, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003184:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003186:	f7ff f905 	bl	8002394 <HAL_GetTick>
 800318a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7ff f901 	bl	8002394 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e056      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ac:	e04e      	b.n	800324c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e04d      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d146      	bne.n	800324c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a25      	ldr	r2, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d6:	f7ff f8dd 	bl	8002394 <HAL_GetTick>
 80031da:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7ff f8d9 	bl	8002394 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e02e      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x842>
 80031fc:	e026      	b.n	800324c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d021      	beq.n	8003248 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff f8c0 	bl	8002394 <HAL_GetTick>
 8003214:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7ff f8bc 	bl	8002394 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_RCC_OscConfig+0x8bc>)
 800323c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003240:	f023 0303 	bic.w	r3, r3, #3
 8003244:	60d3      	str	r3, [r2, #12]
 8003246:	e001      	b.n	800324c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	f99f808c 	.word	0xf99f808c

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0e7      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b75      	ldr	r3, [pc, #468]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4970      	ldr	r1, [pc, #448]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b6e      	ldr	r3, [pc, #440]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cf      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	429a      	cmp	r2, r3
 80032be:	d908      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4960      	ldr	r1, [pc, #384]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04c      	beq.n	8003378 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0a6      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e09a      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003316:	4b4e      	ldr	r3, [pc, #312]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e08e      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003326:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e086      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b46      	ldr	r3, [pc, #280]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4943      	ldr	r1, [pc, #268]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003348:	f7ff f824 	bl	8002394 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7ff f820 	bl	8002394 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e06e      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	429a      	cmp	r2, r3
 8003392:	d208      	bcs.n	80033a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	492b      	ldr	r1, [pc, #172]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d210      	bcs.n	80033d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0207 	bic.w	r2, r3, #7
 80033bc:	4923      	ldr	r1, [pc, #140]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e036      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4918      	ldr	r1, [pc, #96]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4910      	ldr	r1, [pc, #64]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003414:	f000 f824 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	490b      	ldr	r1, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x1f4>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1fc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe ff5b 	bl	80022f4 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	72fb      	strb	r3, [r7, #11]

  return status;
 8003442:	7afb      	ldrb	r3, [r7, #11]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	08006b78 	.word	0x08006b78
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d121      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d11e      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034bc:	4a2b      	ldr	r2, [pc, #172]	; (800356c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d102      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e004      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 80034e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d134      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0xa6>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xac>
 8003504:	e005      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	e005      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 800350e:	617b      	str	r3, [r7, #20]
      break;
 8003510:	e002      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	617b      	str	r3, [r7, #20]
      break;
 8003516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	0e5b      	lsrs	r3, r3, #25
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	3301      	adds	r3, #1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	08006b90 	.word	0x08006b90
 8003570:	00f42400 	.word	0x00f42400
 8003574:	007a1200 	.word	0x007a1200

08003578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_RCC_GetHCLKFreq+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000000 	.word	0x20000000

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003594:	f7ff fff0 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08006b88 	.word	0x08006b88

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c0:	f7ff ffda 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4904      	ldr	r1, [pc, #16]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	08006b88 	.word	0x08006b88

080035e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003600:	f7ff f968 	bl	80028d4 <HAL_PWREx_GetVoltageRange>
 8003604:	6178      	str	r0, [r7, #20]
 8003606:	e014      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003620:	f7ff f958 	bl	80028d4 <HAL_PWREx_GetVoltageRange>
 8003624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d10b      	bne.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d919      	bls.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2ba0      	cmp	r3, #160	; 0xa0
 8003644:	d902      	bls.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003646:	2302      	movs	r3, #2
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	e013      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800364c:	2301      	movs	r3, #1
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e010      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d902      	bls.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003658:	2303      	movs	r3, #3
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e00a      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d102      	bne.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003664:	2302      	movs	r3, #2
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e004      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b70      	cmp	r3, #112	; 0x70
 800366e:	d101      	bne.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	4909      	ldr	r1, [pc, #36]	; (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40022000 	.word	0x40022000

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b4:	2300      	movs	r3, #0
 80036b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 809e 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	4a3f      	ldr	r2, [pc, #252]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58
 80036ec:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fc:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a39      	ldr	r2, [pc, #228]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003708:	f7fe fe44 	bl	8002394 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe fe40 	bl	8002394 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	74fb      	strb	r3, [r7, #19]
        break;
 8003722:	e005      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ef      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d15a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01e      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	429a      	cmp	r2, r3
 8003750:	d019      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d016      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fe00 	bl	8002394 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	e00b      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe fdfc 	bl	8002394 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
            break;
 80037ae:	e006      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ec      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4904      	ldr	r1, [pc, #16]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037da:	e009      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f0:	7c7b      	ldrb	r3, [r7, #17]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b6e      	ldr	r3, [pc, #440]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a6d      	ldr	r2, [pc, #436]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380e:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4964      	ldr	r1, [pc, #400]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003830:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 020c 	bic.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	495c      	ldr	r1, [pc, #368]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003852:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4953      	ldr	r1, [pc, #332]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003874:	4b4e      	ldr	r3, [pc, #312]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	494b      	ldr	r1, [pc, #300]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4942      	ldr	r1, [pc, #264]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038b8:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	493a      	ldr	r1, [pc, #232]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4931      	ldr	r1, [pc, #196]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	4929      	ldr	r1, [pc, #164]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4920      	ldr	r1, [pc, #128]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	4918      	ldr	r1, [pc, #96]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395e:	d105      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003996:	d105      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800399e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e095      	b.n	8003af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d6:	d009      	beq.n	80039ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
 80039de:	e005      	b.n	80039ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe fa90 	bl	8001f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a2c:	d902      	bls.n	8003a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	e002      	b.n	8003a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a42:	d007      	beq.n	8003a54 <HAL_SPI_Init+0xa0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	ea42 0103 	orr.w	r1, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	f003 0204 	and.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b088      	sub	sp, #32
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_SPI_Transmit+0x22>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e158      	b.n	8003dce <HAL_SPI_Transmit+0x2d4>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b24:	f7fe fc36 	bl	8002394 <HAL_GetTick>
 8003b28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b3e:	e13d      	b.n	8003dbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x52>
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b50:	e134      	b.n	8003dbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	d10f      	bne.n	8003bbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be4:	d94b      	bls.n	8003c7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_Transmit+0xfa>
 8003bee:	8afb      	ldrh	r3, [r7, #22]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d13e      	bne.n	8003c72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c18:	e02b      	b.n	8003c72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d112      	bne.n	8003c4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4c:	e011      	b.n	8003c72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fe fba1 	bl	8002394 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d803      	bhi.n	8003c66 <HAL_SPI_Transmit+0x16c>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Transmit+0x172>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c70:	e0a4      	b.n	8003dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ce      	bne.n	8003c1a <HAL_SPI_Transmit+0x120>
 8003c7c:	e07c      	b.n	8003d78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Transmit+0x192>
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d170      	bne.n	8003d6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d912      	bls.n	8003cbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b02      	subs	r3, #2
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cba:	e058      	b.n	8003d6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ce2:	e044      	b.n	8003d6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d12b      	bne.n	8003d4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d912      	bls.n	8003d22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b02      	subs	r3, #2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d20:	e025      	b.n	8003d6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d48:	e011      	b.n	8003d6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4a:	f7fe fb23 	bl	8002394 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d803      	bhi.n	8003d62 <HAL_SPI_Transmit+0x268>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d102      	bne.n	8003d68 <HAL_SPI_Transmit+0x26e>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d6c:	e026      	b.n	8003dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1b5      	bne.n	8003ce4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fce3 	bl	8004748 <SPI_EndRxTxTransaction>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e000      	b.n	8003dbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b088      	sub	sp, #32
 8003dda:	af02      	add	r7, sp, #8
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df2:	d112      	bne.n	8003e1a <HAL_SPI_Receive+0x44>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10e      	bne.n	8003e1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f910 	bl	8004036 <HAL_SPI_TransmitReceive>
 8003e16:	4603      	mov	r3, r0
 8003e18:	e109      	b.n	800402e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_SPI_Receive+0x52>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e102      	b.n	800402e <HAL_SPI_Receive+0x258>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e30:	f7fe fab0 	bl	8002394 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e46:	e0e9      	b.n	800401c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Receive+0x7e>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e58:	e0e0      	b.n	800401c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea4:	d908      	bls.n	8003eb8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e007      	b.n	8003ec8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d007      	beq.n	8003f10 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f18:	d867      	bhi.n	8003fea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f1a:	e030      	b.n	8003f7e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d117      	bne.n	8003f5a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f103 020c 	add.w	r2, r3, #12
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	7812      	ldrb	r2, [r2, #0]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f58:	e011      	b.n	8003f7e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fe fa1b 	bl	8002394 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d803      	bhi.n	8003f72 <HAL_SPI_Receive+0x19c>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Receive+0x1a2>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f7c:	e04e      	b.n	800401c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1c8      	bne.n	8003f1c <HAL_SPI_Receive+0x146>
 8003f8a:	e034      	b.n	8003ff6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d115      	bne.n	8003fc6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fc4:	e011      	b.n	8003fea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc6:	f7fe f9e5 	bl	8002394 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_Receive+0x208>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Receive+0x20e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fe8:	e018      	b.n	800401c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ca      	bne.n	8003f8c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb4c 	bl	8004698 <SPI_EndRxTransaction>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
 8004018:	e000      	b.n	800401c <HAL_SPI_Receive+0x246>
  }

error :
 800401a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800402c:	7dfb      	ldrb	r3, [r7, #23]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b08a      	sub	sp, #40	; 0x28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004044:	2301      	movs	r3, #1
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_SPI_TransmitReceive+0x26>
 8004058:	2302      	movs	r3, #2
 800405a:	e1fb      	b.n	8004454 <HAL_SPI_TransmitReceive+0x41e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004064:	f7fe f996 	bl	8002394 <HAL_GetTick>
 8004068:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004070:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004080:	7efb      	ldrb	r3, [r7, #27]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d00e      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x6e>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408c:	d106      	bne.n	800409c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <HAL_SPI_TransmitReceive+0x66>
 8004096:	7efb      	ldrb	r3, [r7, #27]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d003      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040a2:	e1cd      	b.n	8004440 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x80>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x80>
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040bc:	e1c0      	b.n	8004440 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d003      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2205      	movs	r2, #5
 80040ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	887a      	ldrh	r2, [r7, #2]
 80040fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004114:	d802      	bhi.n	800411c <HAL_SPI_TransmitReceive+0xe6>
 8004116:	8a3b      	ldrh	r3, [r7, #16]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d908      	bls.n	800412e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	e007      	b.n	800413e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800413c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d007      	beq.n	800415c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004164:	d97c      	bls.n	8004260 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x13e>
 800416e:	8a7b      	ldrh	r3, [r7, #18]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d169      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004198:	e056      	b.n	8004248 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d11b      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x1aa>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x1aa>
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d113      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d11c      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x1f2>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	b292      	uxth	r2, r2
 8004206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004224:	2301      	movs	r3, #1
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004228:	f7fe f8b4 	bl	8002394 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004234:	429a      	cmp	r2, r3
 8004236:	d807      	bhi.n	8004248 <HAL_SPI_TransmitReceive+0x212>
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d003      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004246:	e0fb      	b.n	8004440 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1a3      	bne.n	800419a <HAL_SPI_TransmitReceive+0x164>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d19d      	bne.n	800419a <HAL_SPI_TransmitReceive+0x164>
 800425e:	e0df      	b.n	8004420 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x23a>
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 80cb 	bne.w	8004406 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d912      	bls.n	80042a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b02      	subs	r3, #2
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800429e:	e0b2      	b.n	8004406 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c6:	e09e      	b.n	8004406 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d134      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x30a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02f      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x30a>
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d12c      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d912      	bls.n	8004316 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	1c9a      	adds	r2, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b02      	subs	r3, #2
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004314:	e012      	b.n	800433c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d148      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x3aa>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d042      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d923      	bls.n	80043ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	b292      	uxth	r2, r2
 8004372:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b02      	subs	r3, #2
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d81f      	bhi.n	80043dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	e016      	b.n	80043dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f103 020c 	add.w	r2, r3, #12
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e0:	f7fd ffd8 	bl	8002394 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d803      	bhi.n	80043f8 <HAL_SPI_TransmitReceive+0x3c2>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d102      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x3c8>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004404:	e01c      	b.n	8004440 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af5b 	bne.w	80042c8 <HAL_SPI_TransmitReceive+0x292>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	f47f af54 	bne.w	80042c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f98f 	bl	8004748 <SPI_EndRxTxTransaction>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	661a      	str	r2, [r3, #96]	; 0x60
 800443c:	e000      	b.n	8004440 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800443e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004454:	4618      	mov	r0, r3
 8004456:	3728      	adds	r7, #40	; 0x28
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800446c:	f7fd ff92 	bl	8002394 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4413      	add	r3, r2
 800447a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800447c:	f7fd ff8a 	bl	8002394 <HAL_GetTick>
 8004480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	0d1b      	lsrs	r3, r3, #20
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004492:	e054      	b.n	800453e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d050      	beq.n	800453e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800449c:	f7fd ff7a 	bl	8002394 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d902      	bls.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d13d      	bne.n	800452e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d111      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d004      	beq.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d107      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f8:	d10f      	bne.n	800451a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e017      	b.n	800455e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3b01      	subs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d19b      	bne.n	8004494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000000 	.word	0x20000000

0800456c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800457e:	f7fd ff09 	bl	8002394 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	4413      	add	r3, r2
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800458e:	f7fd ff01 	bl	8002394 <HAL_GetTick>
 8004592:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00da      	lsls	r2, r3, #3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	0d1b      	lsrs	r3, r3, #20
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045b4:	e060      	b.n	8004678 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045bc:	d107      	bne.n	80045ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d050      	beq.n	8004678 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d6:	f7fd fedd 	bl	8002394 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d902      	bls.n	80045ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d13d      	bne.n	8004668 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004604:	d111      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460e:	d004      	beq.n	800461a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d107      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004632:	d10f      	bne.n	8004654 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e010      	b.n	800468a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3b01      	subs	r3, #1
 8004676:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d196      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3728      	adds	r7, #40	; 0x28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000

08004698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ac:	d111      	bne.n	80046d2 <SPI_EndRxTransaction+0x3a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	d004      	beq.n	80046c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d107      	bne.n	80046d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff febd 	bl	800445c <SPI_WaitFlagStateUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e023      	b.n	8004740 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004700:	d11d      	bne.n	800473e <SPI_EndRxTransaction+0xa6>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d004      	beq.n	8004716 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d113      	bne.n	800473e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ff22 	bl	800456c <SPI_WaitFifoStateUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e000      	b.n	8004740 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff ff03 	bl	800456c <SPI_WaitFifoStateUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e027      	b.n	80047cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fe68 	bl	800445c <SPI_WaitFlagStateUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e014      	b.n	80047cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fedc 	bl	800456c <SPI_WaitFifoStateUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e000      	b.n	80047cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e049      	b.n	800487a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fbda 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 f8fe 	bl	8004a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_ConfigClockSource+0x1c>
 800489a:	2302      	movs	r3, #2
 800489c:	e0b6      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x18a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048da:	d03e      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xd8>
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	f200 8087 	bhi.w	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e8:	f000 8086 	beq.w	80049f8 <HAL_TIM_ConfigClockSource+0x176>
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d87f      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 80048f2:	2b70      	cmp	r3, #112	; 0x70
 80048f4:	d01a      	beq.n	800492c <HAL_TIM_ConfigClockSource+0xaa>
 80048f6:	2b70      	cmp	r3, #112	; 0x70
 80048f8:	d87b      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 80048fa:	2b60      	cmp	r3, #96	; 0x60
 80048fc:	d050      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x11e>
 80048fe:	2b60      	cmp	r3, #96	; 0x60
 8004900:	d877      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 8004902:	2b50      	cmp	r3, #80	; 0x50
 8004904:	d03c      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0xfe>
 8004906:	2b50      	cmp	r3, #80	; 0x50
 8004908:	d873      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d058      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0x13e>
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d86f      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d064      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d86b      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d060      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0x15e>
 800491e:	2b20      	cmp	r3, #32
 8004920:	d867      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d05c      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004926:	2b10      	cmp	r3, #16
 8004928:	d05a      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0x15e>
 800492a:	e062      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f000 f948 	bl	8004bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800494e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
      break;
 8004958:	e04f      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f000 f931 	bl	8004bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800497c:	609a      	str	r2, [r3, #8]
      break;
 800497e:	e03c      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	461a      	mov	r2, r3
 800498e:	f000 f8a5 	bl	8004adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2150      	movs	r1, #80	; 0x50
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8fe 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 800499e:	e02c      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f000 f8c4 	bl	8004b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2160      	movs	r1, #96	; 0x60
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f8ee 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049be:	e01c      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	461a      	mov	r2, r3
 80049ce:	f000 f885 	bl	8004adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f8de 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049de:	e00c      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 f8d5 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049f0:	e003      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
      break;
 80049f6:	e000      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <TIM_Base_SetConfig+0xbc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x20>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <TIM_Base_SetConfig+0xbc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <TIM_Base_SetConfig+0x52>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d007      	beq.n	8004a66 <TIM_Base_SetConfig+0x52>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <TIM_Base_SetConfig+0xc0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_Base_SetConfig+0x52>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <TIM_Base_SetConfig+0xc4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ad0 <TIM_Base_SetConfig+0xbc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0xa0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <TIM_Base_SetConfig+0xc0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0xa0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <TIM_Base_SetConfig+0xc4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40012c00 	.word	0x40012c00
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40014400 	.word	0x40014400

08004adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 030a 	bic.w	r3, r3, #10
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0210 	bic.w	r2, r3, #16
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	031b      	lsls	r3, r3, #12
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	021a      	lsls	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e04f      	b.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d108      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d004      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000

08004cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e040      	b.n	8004d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd f976 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	; 0x24
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8c0 	bl	8004ea0 <UART_SetConfig>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e022      	b.n	8004d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb0e 	bl	8005354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fb95 	bl	8005498 <UART_CheckIdleState>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	f040 8082 	bne.w	8004e96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_Transmit+0x26>
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07a      	b.n	8004e98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x38>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e073      	b.n	8004e98 <HAL_UART_Transmit+0x120>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2221      	movs	r2, #33	; 0x21
 8004dc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc6:	f7fd fae5 	bl	8002394 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d108      	bne.n	8004df8 <HAL_UART_Transmit+0x80>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e08:	e02d      	b.n	8004e66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fb88 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e039      	b.n	8004e98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	881a      	ldrh	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e36:	b292      	uxth	r2, r2
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e008      	b.n	8004e54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3301      	adds	r3, #1
 8004e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1cb      	bne.n	8004e0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fb54 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e005      	b.n	8004e98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b08a      	sub	sp, #40	; 0x28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b9e      	ldr	r3, [pc, #632]	; (8005148 <UART_SetConfig+0x2a8>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a93      	ldr	r2, [pc, #588]	; (800514c <UART_SetConfig+0x2ac>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a8a      	ldr	r2, [pc, #552]	; (8005150 <UART_SetConfig+0x2b0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d126      	bne.n	8004f78 <UART_SetConfig+0xd8>
 8004f2a:	4b8a      	ldr	r3, [pc, #552]	; (8005154 <UART_SetConfig+0x2b4>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d81b      	bhi.n	8004f70 <UART_SetConfig+0xd0>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0xa0>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f61 	.word	0x08004f61
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e0ab      	b.n	80050b0 <UART_SetConfig+0x210>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e0a7      	b.n	80050b0 <UART_SetConfig+0x210>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e0a3      	b.n	80050b0 <UART_SetConfig+0x210>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e09f      	b.n	80050b0 <UART_SetConfig+0x210>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e09b      	b.n	80050b0 <UART_SetConfig+0x210>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a76      	ldr	r2, [pc, #472]	; (8005158 <UART_SetConfig+0x2b8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d138      	bne.n	8004ff4 <UART_SetConfig+0x154>
 8004f82:	4b74      	ldr	r3, [pc, #464]	; (8005154 <UART_SetConfig+0x2b4>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d82d      	bhi.n	8004fec <UART_SetConfig+0x14c>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0xf8>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	08004fed 	.word	0x08004fed
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e06d      	b.n	80050b0 <UART_SetConfig+0x210>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e069      	b.n	80050b0 <UART_SetConfig+0x210>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e065      	b.n	80050b0 <UART_SetConfig+0x210>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e061      	b.n	80050b0 <UART_SetConfig+0x210>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e05d      	b.n	80050b0 <UART_SetConfig+0x210>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <UART_SetConfig+0x2bc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d125      	bne.n	800504a <UART_SetConfig+0x1aa>
 8004ffe:	4b55      	ldr	r3, [pc, #340]	; (8005154 <UART_SetConfig+0x2b4>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d016      	beq.n	800503a <UART_SetConfig+0x19a>
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d818      	bhi.n	8005042 <UART_SetConfig+0x1a2>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d00a      	beq.n	800502a <UART_SetConfig+0x18a>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d814      	bhi.n	8005042 <UART_SetConfig+0x1a2>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <UART_SetConfig+0x182>
 800501c:	2b10      	cmp	r3, #16
 800501e:	d008      	beq.n	8005032 <UART_SetConfig+0x192>
 8005020:	e00f      	b.n	8005042 <UART_SetConfig+0x1a2>
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005028:	e042      	b.n	80050b0 <UART_SetConfig+0x210>
 800502a:	2302      	movs	r3, #2
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005030:	e03e      	b.n	80050b0 <UART_SetConfig+0x210>
 8005032:	2304      	movs	r3, #4
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005038:	e03a      	b.n	80050b0 <UART_SetConfig+0x210>
 800503a:	2308      	movs	r3, #8
 800503c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005040:	e036      	b.n	80050b0 <UART_SetConfig+0x210>
 8005042:	2310      	movs	r3, #16
 8005044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005048:	e032      	b.n	80050b0 <UART_SetConfig+0x210>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3f      	ldr	r2, [pc, #252]	; (800514c <UART_SetConfig+0x2ac>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d12a      	bne.n	80050aa <UART_SetConfig+0x20a>
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <UART_SetConfig+0x2b4>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005062:	d01a      	beq.n	800509a <UART_SetConfig+0x1fa>
 8005064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005068:	d81b      	bhi.n	80050a2 <UART_SetConfig+0x202>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d00c      	beq.n	800508a <UART_SetConfig+0x1ea>
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005074:	d815      	bhi.n	80050a2 <UART_SetConfig+0x202>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <UART_SetConfig+0x1e2>
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d008      	beq.n	8005092 <UART_SetConfig+0x1f2>
 8005080:	e00f      	b.n	80050a2 <UART_SetConfig+0x202>
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005088:	e012      	b.n	80050b0 <UART_SetConfig+0x210>
 800508a:	2302      	movs	r3, #2
 800508c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005090:	e00e      	b.n	80050b0 <UART_SetConfig+0x210>
 8005092:	2304      	movs	r3, #4
 8005094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005098:	e00a      	b.n	80050b0 <UART_SetConfig+0x210>
 800509a:	2308      	movs	r3, #8
 800509c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a0:	e006      	b.n	80050b0 <UART_SetConfig+0x210>
 80050a2:	2310      	movs	r3, #16
 80050a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a8:	e002      	b.n	80050b0 <UART_SetConfig+0x210>
 80050aa:	2310      	movs	r3, #16
 80050ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <UART_SetConfig+0x2ac>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f040 808a 	bne.w	80051d0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d824      	bhi.n	800510e <UART_SetConfig+0x26e>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x22c>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	080050ff 	.word	0x080050ff
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	0800510f 	.word	0x0800510f
 80050ec:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fe fa4e 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80050f4:	61f8      	str	r0, [r7, #28]
        break;
 80050f6:	e010      	b.n	800511a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <UART_SetConfig+0x2c0>)
 80050fa:	61fb      	str	r3, [r7, #28]
        break;
 80050fc:	e00d      	b.n	800511a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7fe f9af 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8005102:	61f8      	str	r0, [r7, #28]
        break;
 8005104:	e009      	b.n	800511a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e005      	b.n	800511a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8109 	beq.w	8005334 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	429a      	cmp	r2, r3
 8005130:	d305      	bcc.n	800513e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d912      	bls.n	8005164 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005144:	e0f6      	b.n	8005334 <UART_SetConfig+0x494>
 8005146:	bf00      	nop
 8005148:	efff69f3 	.word	0xefff69f3
 800514c:	40008000 	.word	0x40008000
 8005150:	40013800 	.word	0x40013800
 8005154:	40021000 	.word	0x40021000
 8005158:	40004400 	.word	0x40004400
 800515c:	40004800 	.word	0x40004800
 8005160:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2200      	movs	r2, #0
 8005168:	461c      	mov	r4, r3
 800516a:	4615      	mov	r5, r2
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	022b      	lsls	r3, r5, #8
 8005176:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800517a:	0222      	lsls	r2, r4, #8
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	6849      	ldr	r1, [r1, #4]
 8005180:	0849      	lsrs	r1, r1, #1
 8005182:	2000      	movs	r0, #0
 8005184:	4688      	mov	r8, r1
 8005186:	4681      	mov	r9, r0
 8005188:	eb12 0a08 	adds.w	sl, r2, r8
 800518c:	eb43 0b09 	adc.w	fp, r3, r9
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800519e:	4650      	mov	r0, sl
 80051a0:	4659      	mov	r1, fp
 80051a2:	f7fb f865 	bl	8000270 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4613      	mov	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d308      	bcc.n	80051c8 <UART_SetConfig+0x328>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051bc:	d204      	bcs.n	80051c8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e0b5      	b.n	8005334 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051ce:	e0b1      	b.n	8005334 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	d15d      	bne.n	8005296 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80051da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d827      	bhi.n	8005232 <UART_SetConfig+0x392>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x348>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	08005233 	.word	0x08005233
 80051f8:	08005223 	.word	0x08005223
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005233 	.word	0x08005233
 8005204:	08005233 	.word	0x08005233
 8005208:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe f9c0 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8005210:	61f8      	str	r0, [r7, #28]
        break;
 8005212:	e014      	b.n	800523e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fe f9d2 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8005218:	61f8      	str	r0, [r7, #28]
        break;
 800521a:	e010      	b.n	800523e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b4c      	ldr	r3, [pc, #304]	; (8005350 <UART_SetConfig+0x4b0>)
 800521e:	61fb      	str	r3, [r7, #28]
        break;
 8005220:	e00d      	b.n	800523e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe f91d 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8005226:	61f8      	str	r0, [r7, #28]
        break;
 8005228:	e009      	b.n	800523e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	61fb      	str	r3, [r7, #28]
        break;
 8005230:	e005      	b.n	800523e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800523c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d077      	beq.n	8005334 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005a      	lsls	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	441a      	add	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b0f      	cmp	r3, #15
 800525e:	d916      	bls.n	800528e <UART_SetConfig+0x3ee>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d212      	bcs.n	800528e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f023 030f 	bic.w	r3, r3, #15
 8005270:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	b29a      	uxth	r2, r3
 800527e:	8afb      	ldrh	r3, [r7, #22]
 8005280:	4313      	orrs	r3, r2
 8005282:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	8afa      	ldrh	r2, [r7, #22]
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	e052      	b.n	8005334 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005294:	e04e      	b.n	8005334 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800529a:	2b08      	cmp	r3, #8
 800529c:	d827      	bhi.n	80052ee <UART_SetConfig+0x44e>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x404>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe f962 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fe f974 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 80052d4:	61f8      	str	r0, [r7, #28]
        break;
 80052d6:	e010      	b.n	80052fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <UART_SetConfig+0x4b0>)
 80052da:	61fb      	str	r3, [r7, #28]
        break;
 80052dc:	e00d      	b.n	80052fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fe f8bf 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 80052e2:	61f8      	str	r0, [r7, #28]
        break;
 80052e4:	e009      	b.n	80052fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ea:	61fb      	str	r3, [r7, #28]
        break;
 80052ec:	e005      	b.n	80052fa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f8:	bf00      	nop
    }

    if (pclk != 0U)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d019      	beq.n	8005334 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	085a      	lsrs	r2, r3, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	441a      	add	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d909      	bls.n	800532e <UART_SetConfig+0x48e>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d205      	bcs.n	800532e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e002      	b.n	8005334 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005340:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005344:	4618      	mov	r0, r3
 8005346:	3728      	adds	r7, #40	; 0x28
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	00f42400 	.word	0x00f42400

08005354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d10a      	bne.n	800546a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a8:	f7fc ff74 	bl	8002394 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f82d 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e023      	b.n	8005522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d10e      	bne.n	8005506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f817 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00d      	b.n	8005522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b09c      	sub	sp, #112	; 0x70
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	e0a5      	b.n	8005688 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	f000 80a1 	beq.w	8005688 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005546:	f7fc ff25 	bl	8002394 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <UART_WaitOnFlagUntilTimeout+0x32>
 8005556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005558:	2b00      	cmp	r3, #0
 800555a:	d13e      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005570:	667b      	str	r3, [r7, #100]	; 0x64
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800557c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e6      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	663b      	str	r3, [r7, #96]	; 0x60
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e067      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d04f      	beq.n	8005688 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f6:	d147      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005600:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e6      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	613b      	str	r3, [r7, #16]
   return(result);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	66bb      	str	r3, [r7, #104]	; 0x68
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005654:	623a      	str	r2, [r7, #32]
 8005656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	69f9      	ldr	r1, [r7, #28]
 800565a:	6a3a      	ldr	r2, [r7, #32]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	61bb      	str	r3, [r7, #24]
   return(result);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e010      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	429a      	cmp	r2, r3
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	f43f af4a 	beq.w	800553c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3770      	adds	r7, #112	; 0x70
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <__errno>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <__errno+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <__libc_init_array>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4d0d      	ldr	r5, [pc, #52]	; (80056f8 <__libc_init_array+0x38>)
 80056c4:	4c0d      	ldr	r4, [pc, #52]	; (80056fc <__libc_init_array+0x3c>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	2600      	movs	r6, #0
 80056cc:	42a6      	cmp	r6, r4
 80056ce:	d109      	bne.n	80056e4 <__libc_init_array+0x24>
 80056d0:	4d0b      	ldr	r5, [pc, #44]	; (8005700 <__libc_init_array+0x40>)
 80056d2:	4c0c      	ldr	r4, [pc, #48]	; (8005704 <__libc_init_array+0x44>)
 80056d4:	f001 f824 	bl	8006720 <_init>
 80056d8:	1b64      	subs	r4, r4, r5
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	2600      	movs	r6, #0
 80056de:	42a6      	cmp	r6, r4
 80056e0:	d105      	bne.n	80056ee <__libc_init_array+0x2e>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e8:	4798      	blx	r3
 80056ea:	3601      	adds	r6, #1
 80056ec:	e7ee      	b.n	80056cc <__libc_init_array+0xc>
 80056ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f2:	4798      	blx	r3
 80056f4:	3601      	adds	r6, #1
 80056f6:	e7f2      	b.n	80056de <__libc_init_array+0x1e>
 80056f8:	08006c60 	.word	0x08006c60
 80056fc:	08006c60 	.word	0x08006c60
 8005700:	08006c60 	.word	0x08006c60
 8005704:	08006c64 	.word	0x08006c64

08005708 <memset>:
 8005708:	4402      	add	r2, r0
 800570a:	4603      	mov	r3, r0
 800570c:	4293      	cmp	r3, r2
 800570e:	d100      	bne.n	8005712 <memset+0xa>
 8005710:	4770      	bx	lr
 8005712:	f803 1b01 	strb.w	r1, [r3], #1
 8005716:	e7f9      	b.n	800570c <memset+0x4>

08005718 <iprintf>:
 8005718:	b40f      	push	{r0, r1, r2, r3}
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <iprintf+0x2c>)
 800571c:	b513      	push	{r0, r1, r4, lr}
 800571e:	681c      	ldr	r4, [r3, #0]
 8005720:	b124      	cbz	r4, 800572c <iprintf+0x14>
 8005722:	69a3      	ldr	r3, [r4, #24]
 8005724:	b913      	cbnz	r3, 800572c <iprintf+0x14>
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fa5e 	bl	8005be8 <__sinit>
 800572c:	ab05      	add	r3, sp, #20
 800572e:	9a04      	ldr	r2, [sp, #16]
 8005730:	68a1      	ldr	r1, [r4, #8]
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	4620      	mov	r0, r4
 8005736:	f000 fc67 	bl	8006008 <_vfiprintf_r>
 800573a:	b002      	add	sp, #8
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005740:	b004      	add	sp, #16
 8005742:	4770      	bx	lr
 8005744:	2000000c 	.word	0x2000000c

08005748 <_puts_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	460e      	mov	r6, r1
 800574c:	4605      	mov	r5, r0
 800574e:	b118      	cbz	r0, 8005758 <_puts_r+0x10>
 8005750:	6983      	ldr	r3, [r0, #24]
 8005752:	b90b      	cbnz	r3, 8005758 <_puts_r+0x10>
 8005754:	f000 fa48 	bl	8005be8 <__sinit>
 8005758:	69ab      	ldr	r3, [r5, #24]
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	b913      	cbnz	r3, 8005764 <_puts_r+0x1c>
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fa42 	bl	8005be8 <__sinit>
 8005764:	4b2c      	ldr	r3, [pc, #176]	; (8005818 <_puts_r+0xd0>)
 8005766:	429c      	cmp	r4, r3
 8005768:	d120      	bne.n	80057ac <_puts_r+0x64>
 800576a:	686c      	ldr	r4, [r5, #4]
 800576c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800576e:	07db      	lsls	r3, r3, #31
 8005770:	d405      	bmi.n	800577e <_puts_r+0x36>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	0598      	lsls	r0, r3, #22
 8005776:	d402      	bmi.n	800577e <_puts_r+0x36>
 8005778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577a:	f000 fad3 	bl	8005d24 <__retarget_lock_acquire_recursive>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	0719      	lsls	r1, r3, #28
 8005782:	d51d      	bpl.n	80057c0 <_puts_r+0x78>
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	b1db      	cbz	r3, 80057c0 <_puts_r+0x78>
 8005788:	3e01      	subs	r6, #1
 800578a:	68a3      	ldr	r3, [r4, #8]
 800578c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005790:	3b01      	subs	r3, #1
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	bb39      	cbnz	r1, 80057e6 <_puts_r+0x9e>
 8005796:	2b00      	cmp	r3, #0
 8005798:	da38      	bge.n	800580c <_puts_r+0xc4>
 800579a:	4622      	mov	r2, r4
 800579c:	210a      	movs	r1, #10
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 f848 	bl	8005834 <__swbuf_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d011      	beq.n	80057cc <_puts_r+0x84>
 80057a8:	250a      	movs	r5, #10
 80057aa:	e011      	b.n	80057d0 <_puts_r+0x88>
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <_puts_r+0xd4>)
 80057ae:	429c      	cmp	r4, r3
 80057b0:	d101      	bne.n	80057b6 <_puts_r+0x6e>
 80057b2:	68ac      	ldr	r4, [r5, #8]
 80057b4:	e7da      	b.n	800576c <_puts_r+0x24>
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <_puts_r+0xd8>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	bf08      	it	eq
 80057bc:	68ec      	ldreq	r4, [r5, #12]
 80057be:	e7d5      	b.n	800576c <_puts_r+0x24>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f888 	bl	80058d8 <__swsetup_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d0dd      	beq.n	8005788 <_puts_r+0x40>
 80057cc:	f04f 35ff 	mov.w	r5, #4294967295
 80057d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057d2:	07da      	lsls	r2, r3, #31
 80057d4:	d405      	bmi.n	80057e2 <_puts_r+0x9a>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	059b      	lsls	r3, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_puts_r+0x9a>
 80057dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057de:	f000 faa2 	bl	8005d26 <__retarget_lock_release_recursive>
 80057e2:	4628      	mov	r0, r5
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da04      	bge.n	80057f4 <_puts_r+0xac>
 80057ea:	69a2      	ldr	r2, [r4, #24]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	dc06      	bgt.n	80057fe <_puts_r+0xb6>
 80057f0:	290a      	cmp	r1, #10
 80057f2:	d004      	beq.n	80057fe <_puts_r+0xb6>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	6022      	str	r2, [r4, #0]
 80057fa:	7019      	strb	r1, [r3, #0]
 80057fc:	e7c5      	b.n	800578a <_puts_r+0x42>
 80057fe:	4622      	mov	r2, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f817 	bl	8005834 <__swbuf_r>
 8005806:	3001      	adds	r0, #1
 8005808:	d1bf      	bne.n	800578a <_puts_r+0x42>
 800580a:	e7df      	b.n	80057cc <_puts_r+0x84>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	250a      	movs	r5, #10
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	701d      	strb	r5, [r3, #0]
 8005816:	e7db      	b.n	80057d0 <_puts_r+0x88>
 8005818:	08006be4 	.word	0x08006be4
 800581c:	08006c04 	.word	0x08006c04
 8005820:	08006bc4 	.word	0x08006bc4

08005824 <puts>:
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <puts+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f7ff bf8d 	b.w	8005748 <_puts_r>
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <__swbuf_r>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	460e      	mov	r6, r1
 8005838:	4614      	mov	r4, r2
 800583a:	4605      	mov	r5, r0
 800583c:	b118      	cbz	r0, 8005846 <__swbuf_r+0x12>
 800583e:	6983      	ldr	r3, [r0, #24]
 8005840:	b90b      	cbnz	r3, 8005846 <__swbuf_r+0x12>
 8005842:	f000 f9d1 	bl	8005be8 <__sinit>
 8005846:	4b21      	ldr	r3, [pc, #132]	; (80058cc <__swbuf_r+0x98>)
 8005848:	429c      	cmp	r4, r3
 800584a:	d12b      	bne.n	80058a4 <__swbuf_r+0x70>
 800584c:	686c      	ldr	r4, [r5, #4]
 800584e:	69a3      	ldr	r3, [r4, #24]
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	071a      	lsls	r2, r3, #28
 8005856:	d52f      	bpl.n	80058b8 <__swbuf_r+0x84>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	b36b      	cbz	r3, 80058b8 <__swbuf_r+0x84>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1ac0      	subs	r0, r0, r3
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	b2f6      	uxtb	r6, r6
 8005866:	4283      	cmp	r3, r0
 8005868:	4637      	mov	r7, r6
 800586a:	dc04      	bgt.n	8005876 <__swbuf_r+0x42>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f926 	bl	8005ac0 <_fflush_r>
 8005874:	bb30      	cbnz	r0, 80058c4 <__swbuf_r+0x90>
 8005876:	68a3      	ldr	r3, [r4, #8]
 8005878:	3b01      	subs	r3, #1
 800587a:	60a3      	str	r3, [r4, #8]
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	701e      	strb	r6, [r3, #0]
 8005884:	6963      	ldr	r3, [r4, #20]
 8005886:	3001      	adds	r0, #1
 8005888:	4283      	cmp	r3, r0
 800588a:	d004      	beq.n	8005896 <__swbuf_r+0x62>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	07db      	lsls	r3, r3, #31
 8005890:	d506      	bpl.n	80058a0 <__swbuf_r+0x6c>
 8005892:	2e0a      	cmp	r6, #10
 8005894:	d104      	bne.n	80058a0 <__swbuf_r+0x6c>
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 f911 	bl	8005ac0 <_fflush_r>
 800589e:	b988      	cbnz	r0, 80058c4 <__swbuf_r+0x90>
 80058a0:	4638      	mov	r0, r7
 80058a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <__swbuf_r+0x9c>)
 80058a6:	429c      	cmp	r4, r3
 80058a8:	d101      	bne.n	80058ae <__swbuf_r+0x7a>
 80058aa:	68ac      	ldr	r4, [r5, #8]
 80058ac:	e7cf      	b.n	800584e <__swbuf_r+0x1a>
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <__swbuf_r+0xa0>)
 80058b0:	429c      	cmp	r4, r3
 80058b2:	bf08      	it	eq
 80058b4:	68ec      	ldreq	r4, [r5, #12]
 80058b6:	e7ca      	b.n	800584e <__swbuf_r+0x1a>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f80c 	bl	80058d8 <__swsetup_r>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d0cb      	beq.n	800585c <__swbuf_r+0x28>
 80058c4:	f04f 37ff 	mov.w	r7, #4294967295
 80058c8:	e7ea      	b.n	80058a0 <__swbuf_r+0x6c>
 80058ca:	bf00      	nop
 80058cc:	08006be4 	.word	0x08006be4
 80058d0:	08006c04 	.word	0x08006c04
 80058d4:	08006bc4 	.word	0x08006bc4

080058d8 <__swsetup_r>:
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <__swsetup_r+0xcc>)
 80058da:	b570      	push	{r4, r5, r6, lr}
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	4606      	mov	r6, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	b125      	cbz	r5, 80058ee <__swsetup_r+0x16>
 80058e4:	69ab      	ldr	r3, [r5, #24]
 80058e6:	b913      	cbnz	r3, 80058ee <__swsetup_r+0x16>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f97d 	bl	8005be8 <__sinit>
 80058ee:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <__swsetup_r+0xd0>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d10f      	bne.n	8005914 <__swsetup_r+0x3c>
 80058f4:	686c      	ldr	r4, [r5, #4]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058fc:	0719      	lsls	r1, r3, #28
 80058fe:	d42c      	bmi.n	800595a <__swsetup_r+0x82>
 8005900:	06dd      	lsls	r5, r3, #27
 8005902:	d411      	bmi.n	8005928 <__swsetup_r+0x50>
 8005904:	2309      	movs	r3, #9
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	e03e      	b.n	8005992 <__swsetup_r+0xba>
 8005914:	4b25      	ldr	r3, [pc, #148]	; (80059ac <__swsetup_r+0xd4>)
 8005916:	429c      	cmp	r4, r3
 8005918:	d101      	bne.n	800591e <__swsetup_r+0x46>
 800591a:	68ac      	ldr	r4, [r5, #8]
 800591c:	e7eb      	b.n	80058f6 <__swsetup_r+0x1e>
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <__swsetup_r+0xd8>)
 8005920:	429c      	cmp	r4, r3
 8005922:	bf08      	it	eq
 8005924:	68ec      	ldreq	r4, [r5, #12]
 8005926:	e7e6      	b.n	80058f6 <__swsetup_r+0x1e>
 8005928:	0758      	lsls	r0, r3, #29
 800592a:	d512      	bpl.n	8005952 <__swsetup_r+0x7a>
 800592c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592e:	b141      	cbz	r1, 8005942 <__swsetup_r+0x6a>
 8005930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005934:	4299      	cmp	r1, r3
 8005936:	d002      	beq.n	800593e <__swsetup_r+0x66>
 8005938:	4630      	mov	r0, r6
 800593a:	f000 fa5b 	bl	8005df4 <_free_r>
 800593e:	2300      	movs	r3, #0
 8005940:	6363      	str	r3, [r4, #52]	; 0x34
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	2300      	movs	r3, #0
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f043 0308 	orr.w	r3, r3, #8
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	b94b      	cbnz	r3, 8005972 <__swsetup_r+0x9a>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005968:	d003      	beq.n	8005972 <__swsetup_r+0x9a>
 800596a:	4621      	mov	r1, r4
 800596c:	4630      	mov	r0, r6
 800596e:	f000 fa01 	bl	8005d74 <__smakebuf_r>
 8005972:	89a0      	ldrh	r0, [r4, #12]
 8005974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005978:	f010 0301 	ands.w	r3, r0, #1
 800597c:	d00a      	beq.n	8005994 <__swsetup_r+0xbc>
 800597e:	2300      	movs	r3, #0
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	6963      	ldr	r3, [r4, #20]
 8005984:	425b      	negs	r3, r3
 8005986:	61a3      	str	r3, [r4, #24]
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	b943      	cbnz	r3, 800599e <__swsetup_r+0xc6>
 800598c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005990:	d1ba      	bne.n	8005908 <__swsetup_r+0x30>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	0781      	lsls	r1, r0, #30
 8005996:	bf58      	it	pl
 8005998:	6963      	ldrpl	r3, [r4, #20]
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	e7f4      	b.n	8005988 <__swsetup_r+0xb0>
 800599e:	2000      	movs	r0, #0
 80059a0:	e7f7      	b.n	8005992 <__swsetup_r+0xba>
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	08006be4 	.word	0x08006be4
 80059ac:	08006c04 	.word	0x08006c04
 80059b0:	08006bc4 	.word	0x08006bc4

080059b4 <__sflush_r>:
 80059b4:	898a      	ldrh	r2, [r1, #12]
 80059b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	0710      	lsls	r0, r2, #28
 80059be:	460c      	mov	r4, r1
 80059c0:	d458      	bmi.n	8005a74 <__sflush_r+0xc0>
 80059c2:	684b      	ldr	r3, [r1, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc05      	bgt.n	80059d4 <__sflush_r+0x20>
 80059c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dc02      	bgt.n	80059d4 <__sflush_r+0x20>
 80059ce:	2000      	movs	r0, #0
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d0f9      	beq.n	80059ce <__sflush_r+0x1a>
 80059da:	2300      	movs	r3, #0
 80059dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059e0:	682f      	ldr	r7, [r5, #0]
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	d032      	beq.n	8005a4c <__sflush_r+0x98>
 80059e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	075a      	lsls	r2, r3, #29
 80059ec:	d505      	bpl.n	80059fa <__sflush_r+0x46>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	1ac0      	subs	r0, r0, r3
 80059f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059f4:	b10b      	cbz	r3, 80059fa <__sflush_r+0x46>
 80059f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f8:	1ac0      	subs	r0, r0, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	4602      	mov	r2, r0
 80059fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a00:	6a21      	ldr	r1, [r4, #32]
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b0      	blx	r6
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	d106      	bne.n	8005a1a <__sflush_r+0x66>
 8005a0c:	6829      	ldr	r1, [r5, #0]
 8005a0e:	291d      	cmp	r1, #29
 8005a10:	d82c      	bhi.n	8005a6c <__sflush_r+0xb8>
 8005a12:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <__sflush_r+0x108>)
 8005a14:	40ca      	lsrs	r2, r1
 8005a16:	07d6      	lsls	r6, r2, #31
 8005a18:	d528      	bpl.n	8005a6c <__sflush_r+0xb8>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	6062      	str	r2, [r4, #4]
 8005a1e:	04d9      	lsls	r1, r3, #19
 8005a20:	6922      	ldr	r2, [r4, #16]
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	d504      	bpl.n	8005a30 <__sflush_r+0x7c>
 8005a26:	1c42      	adds	r2, r0, #1
 8005a28:	d101      	bne.n	8005a2e <__sflush_r+0x7a>
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	b903      	cbnz	r3, 8005a30 <__sflush_r+0x7c>
 8005a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a32:	602f      	str	r7, [r5, #0]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d0ca      	beq.n	80059ce <__sflush_r+0x1a>
 8005a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d002      	beq.n	8005a46 <__sflush_r+0x92>
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 f9d7 	bl	8005df4 <_free_r>
 8005a46:	2000      	movs	r0, #0
 8005a48:	6360      	str	r0, [r4, #52]	; 0x34
 8005a4a:	e7c1      	b.n	80059d0 <__sflush_r+0x1c>
 8005a4c:	6a21      	ldr	r1, [r4, #32]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b0      	blx	r6
 8005a54:	1c41      	adds	r1, r0, #1
 8005a56:	d1c7      	bne.n	80059e8 <__sflush_r+0x34>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0c4      	beq.n	80059e8 <__sflush_r+0x34>
 8005a5e:	2b1d      	cmp	r3, #29
 8005a60:	d001      	beq.n	8005a66 <__sflush_r+0xb2>
 8005a62:	2b16      	cmp	r3, #22
 8005a64:	d101      	bne.n	8005a6a <__sflush_r+0xb6>
 8005a66:	602f      	str	r7, [r5, #0]
 8005a68:	e7b1      	b.n	80059ce <__sflush_r+0x1a>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	e7ad      	b.n	80059d0 <__sflush_r+0x1c>
 8005a74:	690f      	ldr	r7, [r1, #16]
 8005a76:	2f00      	cmp	r7, #0
 8005a78:	d0a9      	beq.n	80059ce <__sflush_r+0x1a>
 8005a7a:	0793      	lsls	r3, r2, #30
 8005a7c:	680e      	ldr	r6, [r1, #0]
 8005a7e:	bf08      	it	eq
 8005a80:	694b      	ldreq	r3, [r1, #20]
 8005a82:	600f      	str	r7, [r1, #0]
 8005a84:	bf18      	it	ne
 8005a86:	2300      	movne	r3, #0
 8005a88:	eba6 0807 	sub.w	r8, r6, r7
 8005a8c:	608b      	str	r3, [r1, #8]
 8005a8e:	f1b8 0f00 	cmp.w	r8, #0
 8005a92:	dd9c      	ble.n	80059ce <__sflush_r+0x1a>
 8005a94:	6a21      	ldr	r1, [r4, #32]
 8005a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a98:	4643      	mov	r3, r8
 8005a9a:	463a      	mov	r2, r7
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b0      	blx	r6
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	dc06      	bgt.n	8005ab2 <__sflush_r+0xfe>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e78e      	b.n	80059d0 <__sflush_r+0x1c>
 8005ab2:	4407      	add	r7, r0
 8005ab4:	eba8 0800 	sub.w	r8, r8, r0
 8005ab8:	e7e9      	b.n	8005a8e <__sflush_r+0xda>
 8005aba:	bf00      	nop
 8005abc:	20400001 	.word	0x20400001

08005ac0 <_fflush_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	b913      	cbnz	r3, 8005ad0 <_fflush_r+0x10>
 8005aca:	2500      	movs	r5, #0
 8005acc:	4628      	mov	r0, r5
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	b118      	cbz	r0, 8005ada <_fflush_r+0x1a>
 8005ad2:	6983      	ldr	r3, [r0, #24]
 8005ad4:	b90b      	cbnz	r3, 8005ada <_fflush_r+0x1a>
 8005ad6:	f000 f887 	bl	8005be8 <__sinit>
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <_fflush_r+0x6c>)
 8005adc:	429c      	cmp	r4, r3
 8005ade:	d11b      	bne.n	8005b18 <_fflush_r+0x58>
 8005ae0:	686c      	ldr	r4, [r5, #4]
 8005ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ef      	beq.n	8005aca <_fflush_r+0xa>
 8005aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aec:	07d0      	lsls	r0, r2, #31
 8005aee:	d404      	bmi.n	8005afa <_fflush_r+0x3a>
 8005af0:	0599      	lsls	r1, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_fflush_r+0x3a>
 8005af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005af6:	f000 f915 	bl	8005d24 <__retarget_lock_acquire_recursive>
 8005afa:	4628      	mov	r0, r5
 8005afc:	4621      	mov	r1, r4
 8005afe:	f7ff ff59 	bl	80059b4 <__sflush_r>
 8005b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b04:	07da      	lsls	r2, r3, #31
 8005b06:	4605      	mov	r5, r0
 8005b08:	d4e0      	bmi.n	8005acc <_fflush_r+0xc>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	059b      	lsls	r3, r3, #22
 8005b0e:	d4dd      	bmi.n	8005acc <_fflush_r+0xc>
 8005b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b12:	f000 f908 	bl	8005d26 <__retarget_lock_release_recursive>
 8005b16:	e7d9      	b.n	8005acc <_fflush_r+0xc>
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <_fflush_r+0x70>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d101      	bne.n	8005b22 <_fflush_r+0x62>
 8005b1e:	68ac      	ldr	r4, [r5, #8]
 8005b20:	e7df      	b.n	8005ae2 <_fflush_r+0x22>
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <_fflush_r+0x74>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	bf08      	it	eq
 8005b28:	68ec      	ldreq	r4, [r5, #12]
 8005b2a:	e7da      	b.n	8005ae2 <_fflush_r+0x22>
 8005b2c:	08006be4 	.word	0x08006be4
 8005b30:	08006c04 	.word	0x08006c04
 8005b34:	08006bc4 	.word	0x08006bc4

08005b38 <std>:
 8005b38:	2300      	movs	r3, #0
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b46:	6083      	str	r3, [r0, #8]
 8005b48:	8181      	strh	r1, [r0, #12]
 8005b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b4c:	81c2      	strh	r2, [r0, #14]
 8005b4e:	6183      	str	r3, [r0, #24]
 8005b50:	4619      	mov	r1, r3
 8005b52:	2208      	movs	r2, #8
 8005b54:	305c      	adds	r0, #92	; 0x5c
 8005b56:	f7ff fdd7 	bl	8005708 <memset>
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <std+0x38>)
 8005b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <std+0x3c>)
 8005b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <std+0x40>)
 8005b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <std+0x44>)
 8005b68:	6224      	str	r4, [r4, #32]
 8005b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	080065b1 	.word	0x080065b1
 8005b74:	080065d3 	.word	0x080065d3
 8005b78:	0800660b 	.word	0x0800660b
 8005b7c:	0800662f 	.word	0x0800662f

08005b80 <_cleanup_r>:
 8005b80:	4901      	ldr	r1, [pc, #4]	; (8005b88 <_cleanup_r+0x8>)
 8005b82:	f000 b8af 	b.w	8005ce4 <_fwalk_reent>
 8005b86:	bf00      	nop
 8005b88:	08005ac1 	.word	0x08005ac1

08005b8c <__sfmoreglue>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	2268      	movs	r2, #104	; 0x68
 8005b90:	1e4d      	subs	r5, r1, #1
 8005b92:	4355      	muls	r5, r2
 8005b94:	460e      	mov	r6, r1
 8005b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b9a:	f000 f997 	bl	8005ecc <_malloc_r>
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	b140      	cbz	r0, 8005bb4 <__sfmoreglue+0x28>
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ba8:	300c      	adds	r0, #12
 8005baa:	60a0      	str	r0, [r4, #8]
 8005bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bb0:	f7ff fdaa 	bl	8005708 <memset>
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}

08005bb8 <__sfp_lock_acquire>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__sfp_lock_acquire+0x8>)
 8005bba:	f000 b8b3 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	2000020d 	.word	0x2000020d

08005bc4 <__sfp_lock_release>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__sfp_lock_release+0x8>)
 8005bc6:	f000 b8ae 	b.w	8005d26 <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	2000020d 	.word	0x2000020d

08005bd0 <__sinit_lock_acquire>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__sinit_lock_acquire+0x8>)
 8005bd2:	f000 b8a7 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	2000020e 	.word	0x2000020e

08005bdc <__sinit_lock_release>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__sinit_lock_release+0x8>)
 8005bde:	f000 b8a2 	b.w	8005d26 <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000020e 	.word	0x2000020e

08005be8 <__sinit>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	4604      	mov	r4, r0
 8005bec:	f7ff fff0 	bl	8005bd0 <__sinit_lock_acquire>
 8005bf0:	69a3      	ldr	r3, [r4, #24]
 8005bf2:	b11b      	cbz	r3, 8005bfc <__sinit+0x14>
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f7ff bff0 	b.w	8005bdc <__sinit_lock_release>
 8005bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c00:	6523      	str	r3, [r4, #80]	; 0x50
 8005c02:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <__sinit+0x68>)
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <__sinit+0x6c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	bf04      	itt	eq
 8005c0e:	2301      	moveq	r3, #1
 8005c10:	61a3      	streq	r3, [r4, #24]
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 f820 	bl	8005c58 <__sfp>
 8005c18:	6060      	str	r0, [r4, #4]
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 f81c 	bl	8005c58 <__sfp>
 8005c20:	60a0      	str	r0, [r4, #8]
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 f818 	bl	8005c58 <__sfp>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60e0      	str	r0, [r4, #12]
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	6860      	ldr	r0, [r4, #4]
 8005c30:	f7ff ff82 	bl	8005b38 <std>
 8005c34:	68a0      	ldr	r0, [r4, #8]
 8005c36:	2201      	movs	r2, #1
 8005c38:	2109      	movs	r1, #9
 8005c3a:	f7ff ff7d 	bl	8005b38 <std>
 8005c3e:	68e0      	ldr	r0, [r4, #12]
 8005c40:	2202      	movs	r2, #2
 8005c42:	2112      	movs	r1, #18
 8005c44:	f7ff ff78 	bl	8005b38 <std>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	61a3      	str	r3, [r4, #24]
 8005c4c:	e7d2      	b.n	8005bf4 <__sinit+0xc>
 8005c4e:	bf00      	nop
 8005c50:	08006bc0 	.word	0x08006bc0
 8005c54:	08005b81 	.word	0x08005b81

08005c58 <__sfp>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	f7ff ffac 	bl	8005bb8 <__sfp_lock_acquire>
 8005c60:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <__sfp+0x84>)
 8005c62:	681e      	ldr	r6, [r3, #0]
 8005c64:	69b3      	ldr	r3, [r6, #24]
 8005c66:	b913      	cbnz	r3, 8005c6e <__sfp+0x16>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff ffbd 	bl	8005be8 <__sinit>
 8005c6e:	3648      	adds	r6, #72	; 0x48
 8005c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	d503      	bpl.n	8005c80 <__sfp+0x28>
 8005c78:	6833      	ldr	r3, [r6, #0]
 8005c7a:	b30b      	cbz	r3, 8005cc0 <__sfp+0x68>
 8005c7c:	6836      	ldr	r6, [r6, #0]
 8005c7e:	e7f7      	b.n	8005c70 <__sfp+0x18>
 8005c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c84:	b9d5      	cbnz	r5, 8005cbc <__sfp+0x64>
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <__sfp+0x88>)
 8005c88:	60e3      	str	r3, [r4, #12]
 8005c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c90:	f000 f847 	bl	8005d22 <__retarget_lock_init_recursive>
 8005c94:	f7ff ff96 	bl	8005bc4 <__sfp_lock_release>
 8005c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ca0:	6025      	str	r5, [r4, #0]
 8005ca2:	61a5      	str	r5, [r4, #24]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cac:	f7ff fd2c 	bl	8005708 <memset>
 8005cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cbc:	3468      	adds	r4, #104	; 0x68
 8005cbe:	e7d9      	b.n	8005c74 <__sfp+0x1c>
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	f7ff ff62 	bl	8005b8c <__sfmoreglue>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	6030      	str	r0, [r6, #0]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d1d5      	bne.n	8005c7c <__sfp+0x24>
 8005cd0:	f7ff ff78 	bl	8005bc4 <__sfp_lock_release>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	e7ee      	b.n	8005cb8 <__sfp+0x60>
 8005cda:	bf00      	nop
 8005cdc:	08006bc0 	.word	0x08006bc0
 8005ce0:	ffff0001 	.word	0xffff0001

08005ce4 <_fwalk_reent>:
 8005ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce8:	4606      	mov	r6, r0
 8005cea:	4688      	mov	r8, r1
 8005cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cf0:	2700      	movs	r7, #0
 8005cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8005cfa:	d505      	bpl.n	8005d08 <_fwalk_reent+0x24>
 8005cfc:	6824      	ldr	r4, [r4, #0]
 8005cfe:	2c00      	cmp	r4, #0
 8005d00:	d1f7      	bne.n	8005cf2 <_fwalk_reent+0xe>
 8005d02:	4638      	mov	r0, r7
 8005d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d08:	89ab      	ldrh	r3, [r5, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d907      	bls.n	8005d1e <_fwalk_reent+0x3a>
 8005d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d12:	3301      	adds	r3, #1
 8005d14:	d003      	beq.n	8005d1e <_fwalk_reent+0x3a>
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	47c0      	blx	r8
 8005d1c:	4307      	orrs	r7, r0
 8005d1e:	3568      	adds	r5, #104	; 0x68
 8005d20:	e7e9      	b.n	8005cf6 <_fwalk_reent+0x12>

08005d22 <__retarget_lock_init_recursive>:
 8005d22:	4770      	bx	lr

08005d24 <__retarget_lock_acquire_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_release_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__swhatbuf_r>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	2900      	cmp	r1, #0
 8005d32:	b096      	sub	sp, #88	; 0x58
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	da08      	bge.n	8005d4c <__swhatbuf_r+0x24>
 8005d3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	061a      	lsls	r2, r3, #24
 8005d44:	d410      	bmi.n	8005d68 <__swhatbuf_r+0x40>
 8005d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d4a:	e00e      	b.n	8005d6a <__swhatbuf_r+0x42>
 8005d4c:	466a      	mov	r2, sp
 8005d4e:	f000 fc95 	bl	800667c <_fstat_r>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	dbf1      	blt.n	8005d3a <__swhatbuf_r+0x12>
 8005d56:	9a01      	ldr	r2, [sp, #4]
 8005d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d60:	425a      	negs	r2, r3
 8005d62:	415a      	adcs	r2, r3
 8005d64:	602a      	str	r2, [r5, #0]
 8005d66:	e7ee      	b.n	8005d46 <__swhatbuf_r+0x1e>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	b016      	add	sp, #88	; 0x58
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d74 <__smakebuf_r>:
 8005d74:	898b      	ldrh	r3, [r1, #12]
 8005d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d78:	079d      	lsls	r5, r3, #30
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	d507      	bpl.n	8005d90 <__smakebuf_r+0x1c>
 8005d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	ab01      	add	r3, sp, #4
 8005d92:	466a      	mov	r2, sp
 8005d94:	f7ff ffc8 	bl	8005d28 <__swhatbuf_r>
 8005d98:	9900      	ldr	r1, [sp, #0]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f895 	bl	8005ecc <_malloc_r>
 8005da2:	b948      	cbnz	r0, 8005db8 <__smakebuf_r+0x44>
 8005da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d4ef      	bmi.n	8005d8c <__smakebuf_r+0x18>
 8005dac:	f023 0303 	bic.w	r3, r3, #3
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	e7e3      	b.n	8005d80 <__smakebuf_r+0xc>
 8005db8:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <__smakebuf_r+0x7c>)
 8005dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	9b00      	ldr	r3, [sp, #0]
 8005dc8:	6163      	str	r3, [r4, #20]
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	6120      	str	r0, [r4, #16]
 8005dce:	b15b      	cbz	r3, 8005de8 <__smakebuf_r+0x74>
 8005dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f000 fc63 	bl	80066a0 <_isatty_r>
 8005dda:	b128      	cbz	r0, 8005de8 <__smakebuf_r+0x74>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	89a0      	ldrh	r0, [r4, #12]
 8005dea:	4305      	orrs	r5, r0
 8005dec:	81a5      	strh	r5, [r4, #12]
 8005dee:	e7cd      	b.n	8005d8c <__smakebuf_r+0x18>
 8005df0:	08005b81 	.word	0x08005b81

08005df4 <_free_r>:
 8005df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005df6:	2900      	cmp	r1, #0
 8005df8:	d044      	beq.n	8005e84 <_free_r+0x90>
 8005dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dfe:	9001      	str	r0, [sp, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f1a1 0404 	sub.w	r4, r1, #4
 8005e06:	bfb8      	it	lt
 8005e08:	18e4      	addlt	r4, r4, r3
 8005e0a:	f000 fc6b 	bl	80066e4 <__malloc_lock>
 8005e0e:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <_free_r+0x94>)
 8005e10:	9801      	ldr	r0, [sp, #4]
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	b933      	cbnz	r3, 8005e24 <_free_r+0x30>
 8005e16:	6063      	str	r3, [r4, #4]
 8005e18:	6014      	str	r4, [r2, #0]
 8005e1a:	b003      	add	sp, #12
 8005e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e20:	f000 bc66 	b.w	80066f0 <__malloc_unlock>
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d908      	bls.n	8005e3a <_free_r+0x46>
 8005e28:	6825      	ldr	r5, [r4, #0]
 8005e2a:	1961      	adds	r1, r4, r5
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	bf01      	itttt	eq
 8005e30:	6819      	ldreq	r1, [r3, #0]
 8005e32:	685b      	ldreq	r3, [r3, #4]
 8005e34:	1949      	addeq	r1, r1, r5
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	e7ed      	b.n	8005e16 <_free_r+0x22>
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b10b      	cbz	r3, 8005e44 <_free_r+0x50>
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d9fa      	bls.n	8005e3a <_free_r+0x46>
 8005e44:	6811      	ldr	r1, [r2, #0]
 8005e46:	1855      	adds	r5, r2, r1
 8005e48:	42a5      	cmp	r5, r4
 8005e4a:	d10b      	bne.n	8005e64 <_free_r+0x70>
 8005e4c:	6824      	ldr	r4, [r4, #0]
 8005e4e:	4421      	add	r1, r4
 8005e50:	1854      	adds	r4, r2, r1
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	d1e0      	bne.n	8005e1a <_free_r+0x26>
 8005e58:	681c      	ldr	r4, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	6053      	str	r3, [r2, #4]
 8005e5e:	4421      	add	r1, r4
 8005e60:	6011      	str	r1, [r2, #0]
 8005e62:	e7da      	b.n	8005e1a <_free_r+0x26>
 8005e64:	d902      	bls.n	8005e6c <_free_r+0x78>
 8005e66:	230c      	movs	r3, #12
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	e7d6      	b.n	8005e1a <_free_r+0x26>
 8005e6c:	6825      	ldr	r5, [r4, #0]
 8005e6e:	1961      	adds	r1, r4, r5
 8005e70:	428b      	cmp	r3, r1
 8005e72:	bf04      	itt	eq
 8005e74:	6819      	ldreq	r1, [r3, #0]
 8005e76:	685b      	ldreq	r3, [r3, #4]
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	bf04      	itt	eq
 8005e7c:	1949      	addeq	r1, r1, r5
 8005e7e:	6021      	streq	r1, [r4, #0]
 8005e80:	6054      	str	r4, [r2, #4]
 8005e82:	e7ca      	b.n	8005e1a <_free_r+0x26>
 8005e84:	b003      	add	sp, #12
 8005e86:	bd30      	pop	{r4, r5, pc}
 8005e88:	20000210 	.word	0x20000210

08005e8c <sbrk_aligned>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4e0e      	ldr	r6, [pc, #56]	; (8005ec8 <sbrk_aligned+0x3c>)
 8005e90:	460c      	mov	r4, r1
 8005e92:	6831      	ldr	r1, [r6, #0]
 8005e94:	4605      	mov	r5, r0
 8005e96:	b911      	cbnz	r1, 8005e9e <sbrk_aligned+0x12>
 8005e98:	f000 fb7a 	bl	8006590 <_sbrk_r>
 8005e9c:	6030      	str	r0, [r6, #0]
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 fb75 	bl	8006590 <_sbrk_r>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d00a      	beq.n	8005ec0 <sbrk_aligned+0x34>
 8005eaa:	1cc4      	adds	r4, r0, #3
 8005eac:	f024 0403 	bic.w	r4, r4, #3
 8005eb0:	42a0      	cmp	r0, r4
 8005eb2:	d007      	beq.n	8005ec4 <sbrk_aligned+0x38>
 8005eb4:	1a21      	subs	r1, r4, r0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 fb6a 	bl	8006590 <_sbrk_r>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d101      	bne.n	8005ec4 <sbrk_aligned+0x38>
 8005ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	20000214 	.word	0x20000214

08005ecc <_malloc_r>:
 8005ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	1ccd      	adds	r5, r1, #3
 8005ed2:	f025 0503 	bic.w	r5, r5, #3
 8005ed6:	3508      	adds	r5, #8
 8005ed8:	2d0c      	cmp	r5, #12
 8005eda:	bf38      	it	cc
 8005edc:	250c      	movcc	r5, #12
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	db01      	blt.n	8005ee8 <_malloc_r+0x1c>
 8005ee4:	42a9      	cmp	r1, r5
 8005ee6:	d905      	bls.n	8005ef4 <_malloc_r+0x28>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	2600      	movs	r6, #0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef4:	4e2e      	ldr	r6, [pc, #184]	; (8005fb0 <_malloc_r+0xe4>)
 8005ef6:	f000 fbf5 	bl	80066e4 <__malloc_lock>
 8005efa:	6833      	ldr	r3, [r6, #0]
 8005efc:	461c      	mov	r4, r3
 8005efe:	bb34      	cbnz	r4, 8005f4e <_malloc_r+0x82>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff ffc2 	bl	8005e8c <sbrk_aligned>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	d14d      	bne.n	8005faa <_malloc_r+0xde>
 8005f0e:	6834      	ldr	r4, [r6, #0]
 8005f10:	4626      	mov	r6, r4
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d140      	bne.n	8005f98 <_malloc_r+0xcc>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	eb04 0803 	add.w	r8, r4, r3
 8005f20:	f000 fb36 	bl	8006590 <_sbrk_r>
 8005f24:	4580      	cmp	r8, r0
 8005f26:	d13a      	bne.n	8005f9e <_malloc_r+0xd2>
 8005f28:	6821      	ldr	r1, [r4, #0]
 8005f2a:	3503      	adds	r5, #3
 8005f2c:	1a6d      	subs	r5, r5, r1
 8005f2e:	f025 0503 	bic.w	r5, r5, #3
 8005f32:	3508      	adds	r5, #8
 8005f34:	2d0c      	cmp	r5, #12
 8005f36:	bf38      	it	cc
 8005f38:	250c      	movcc	r5, #12
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f7ff ffa5 	bl	8005e8c <sbrk_aligned>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d02b      	beq.n	8005f9e <_malloc_r+0xd2>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	442b      	add	r3, r5
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	e00e      	b.n	8005f6c <_malloc_r+0xa0>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	1b52      	subs	r2, r2, r5
 8005f52:	d41e      	bmi.n	8005f92 <_malloc_r+0xc6>
 8005f54:	2a0b      	cmp	r2, #11
 8005f56:	d916      	bls.n	8005f86 <_malloc_r+0xba>
 8005f58:	1961      	adds	r1, r4, r5
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	6025      	str	r5, [r4, #0]
 8005f5e:	bf18      	it	ne
 8005f60:	6059      	strne	r1, [r3, #4]
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	bf08      	it	eq
 8005f66:	6031      	streq	r1, [r6, #0]
 8005f68:	5162      	str	r2, [r4, r5]
 8005f6a:	604b      	str	r3, [r1, #4]
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f104 060b 	add.w	r6, r4, #11
 8005f72:	f000 fbbd 	bl	80066f0 <__malloc_unlock>
 8005f76:	f026 0607 	bic.w	r6, r6, #7
 8005f7a:	1d23      	adds	r3, r4, #4
 8005f7c:	1af2      	subs	r2, r6, r3
 8005f7e:	d0b6      	beq.n	8005eee <_malloc_r+0x22>
 8005f80:	1b9b      	subs	r3, r3, r6
 8005f82:	50a3      	str	r3, [r4, r2]
 8005f84:	e7b3      	b.n	8005eee <_malloc_r+0x22>
 8005f86:	6862      	ldr	r2, [r4, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	bf0c      	ite	eq
 8005f8c:	6032      	streq	r2, [r6, #0]
 8005f8e:	605a      	strne	r2, [r3, #4]
 8005f90:	e7ec      	b.n	8005f6c <_malloc_r+0xa0>
 8005f92:	4623      	mov	r3, r4
 8005f94:	6864      	ldr	r4, [r4, #4]
 8005f96:	e7b2      	b.n	8005efe <_malloc_r+0x32>
 8005f98:	4634      	mov	r4, r6
 8005f9a:	6876      	ldr	r6, [r6, #4]
 8005f9c:	e7b9      	b.n	8005f12 <_malloc_r+0x46>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f000 fba4 	bl	80066f0 <__malloc_unlock>
 8005fa8:	e7a1      	b.n	8005eee <_malloc_r+0x22>
 8005faa:	6025      	str	r5, [r4, #0]
 8005fac:	e7de      	b.n	8005f6c <_malloc_r+0xa0>
 8005fae:	bf00      	nop
 8005fb0:	20000210 	.word	0x20000210

08005fb4 <__sfputc_r>:
 8005fb4:	6893      	ldr	r3, [r2, #8]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	b410      	push	{r4}
 8005fbc:	6093      	str	r3, [r2, #8]
 8005fbe:	da08      	bge.n	8005fd2 <__sfputc_r+0x1e>
 8005fc0:	6994      	ldr	r4, [r2, #24]
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	db01      	blt.n	8005fca <__sfputc_r+0x16>
 8005fc6:	290a      	cmp	r1, #10
 8005fc8:	d103      	bne.n	8005fd2 <__sfputc_r+0x1e>
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	f7ff bc31 	b.w	8005834 <__swbuf_r>
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	1c58      	adds	r0, r3, #1
 8005fd6:	6010      	str	r0, [r2, #0]
 8005fd8:	7019      	strb	r1, [r3, #0]
 8005fda:	4608      	mov	r0, r1
 8005fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <__sfputs_r>:
 8005fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460f      	mov	r7, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	18d5      	adds	r5, r2, r3
 8005fec:	42ac      	cmp	r4, r5
 8005fee:	d101      	bne.n	8005ff4 <__sfputs_r+0x12>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e007      	b.n	8006004 <__sfputs_r+0x22>
 8005ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ffda 	bl	8005fb4 <__sfputc_r>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d1f3      	bne.n	8005fec <__sfputs_r+0xa>
 8006004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006008 <_vfiprintf_r>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	460d      	mov	r5, r1
 800600e:	b09d      	sub	sp, #116	; 0x74
 8006010:	4614      	mov	r4, r2
 8006012:	4698      	mov	r8, r3
 8006014:	4606      	mov	r6, r0
 8006016:	b118      	cbz	r0, 8006020 <_vfiprintf_r+0x18>
 8006018:	6983      	ldr	r3, [r0, #24]
 800601a:	b90b      	cbnz	r3, 8006020 <_vfiprintf_r+0x18>
 800601c:	f7ff fde4 	bl	8005be8 <__sinit>
 8006020:	4b89      	ldr	r3, [pc, #548]	; (8006248 <_vfiprintf_r+0x240>)
 8006022:	429d      	cmp	r5, r3
 8006024:	d11b      	bne.n	800605e <_vfiprintf_r+0x56>
 8006026:	6875      	ldr	r5, [r6, #4]
 8006028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800602a:	07d9      	lsls	r1, r3, #31
 800602c:	d405      	bmi.n	800603a <_vfiprintf_r+0x32>
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	059a      	lsls	r2, r3, #22
 8006032:	d402      	bmi.n	800603a <_vfiprintf_r+0x32>
 8006034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006036:	f7ff fe75 	bl	8005d24 <__retarget_lock_acquire_recursive>
 800603a:	89ab      	ldrh	r3, [r5, #12]
 800603c:	071b      	lsls	r3, r3, #28
 800603e:	d501      	bpl.n	8006044 <_vfiprintf_r+0x3c>
 8006040:	692b      	ldr	r3, [r5, #16]
 8006042:	b9eb      	cbnz	r3, 8006080 <_vfiprintf_r+0x78>
 8006044:	4629      	mov	r1, r5
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff fc46 	bl	80058d8 <__swsetup_r>
 800604c:	b1c0      	cbz	r0, 8006080 <_vfiprintf_r+0x78>
 800604e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006050:	07dc      	lsls	r4, r3, #31
 8006052:	d50e      	bpl.n	8006072 <_vfiprintf_r+0x6a>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	b01d      	add	sp, #116	; 0x74
 800605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	4b7b      	ldr	r3, [pc, #492]	; (800624c <_vfiprintf_r+0x244>)
 8006060:	429d      	cmp	r5, r3
 8006062:	d101      	bne.n	8006068 <_vfiprintf_r+0x60>
 8006064:	68b5      	ldr	r5, [r6, #8]
 8006066:	e7df      	b.n	8006028 <_vfiprintf_r+0x20>
 8006068:	4b79      	ldr	r3, [pc, #484]	; (8006250 <_vfiprintf_r+0x248>)
 800606a:	429d      	cmp	r5, r3
 800606c:	bf08      	it	eq
 800606e:	68f5      	ldreq	r5, [r6, #12]
 8006070:	e7da      	b.n	8006028 <_vfiprintf_r+0x20>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	0598      	lsls	r0, r3, #22
 8006076:	d4ed      	bmi.n	8006054 <_vfiprintf_r+0x4c>
 8006078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607a:	f7ff fe54 	bl	8005d26 <__retarget_lock_release_recursive>
 800607e:	e7e9      	b.n	8006054 <_vfiprintf_r+0x4c>
 8006080:	2300      	movs	r3, #0
 8006082:	9309      	str	r3, [sp, #36]	; 0x24
 8006084:	2320      	movs	r3, #32
 8006086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800608a:	f8cd 800c 	str.w	r8, [sp, #12]
 800608e:	2330      	movs	r3, #48	; 0x30
 8006090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006254 <_vfiprintf_r+0x24c>
 8006094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006098:	f04f 0901 	mov.w	r9, #1
 800609c:	4623      	mov	r3, r4
 800609e:	469a      	mov	sl, r3
 80060a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a4:	b10a      	cbz	r2, 80060aa <_vfiprintf_r+0xa2>
 80060a6:	2a25      	cmp	r2, #37	; 0x25
 80060a8:	d1f9      	bne.n	800609e <_vfiprintf_r+0x96>
 80060aa:	ebba 0b04 	subs.w	fp, sl, r4
 80060ae:	d00b      	beq.n	80060c8 <_vfiprintf_r+0xc0>
 80060b0:	465b      	mov	r3, fp
 80060b2:	4622      	mov	r2, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ff93 	bl	8005fe2 <__sfputs_r>
 80060bc:	3001      	adds	r0, #1
 80060be:	f000 80aa 	beq.w	8006216 <_vfiprintf_r+0x20e>
 80060c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c4:	445a      	add	r2, fp
 80060c6:	9209      	str	r2, [sp, #36]	; 0x24
 80060c8:	f89a 3000 	ldrb.w	r3, [sl]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80a2 	beq.w	8006216 <_vfiprintf_r+0x20e>
 80060d2:	2300      	movs	r3, #0
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060dc:	f10a 0a01 	add.w	sl, sl, #1
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	9307      	str	r3, [sp, #28]
 80060e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ea:	4654      	mov	r4, sl
 80060ec:	2205      	movs	r2, #5
 80060ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f2:	4858      	ldr	r0, [pc, #352]	; (8006254 <_vfiprintf_r+0x24c>)
 80060f4:	f7fa f86c 	bl	80001d0 <memchr>
 80060f8:	9a04      	ldr	r2, [sp, #16]
 80060fa:	b9d8      	cbnz	r0, 8006134 <_vfiprintf_r+0x12c>
 80060fc:	06d1      	lsls	r1, r2, #27
 80060fe:	bf44      	itt	mi
 8006100:	2320      	movmi	r3, #32
 8006102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006106:	0713      	lsls	r3, r2, #28
 8006108:	bf44      	itt	mi
 800610a:	232b      	movmi	r3, #43	; 0x2b
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	f89a 3000 	ldrb.w	r3, [sl]
 8006114:	2b2a      	cmp	r3, #42	; 0x2a
 8006116:	d015      	beq.n	8006144 <_vfiprintf_r+0x13c>
 8006118:	9a07      	ldr	r2, [sp, #28]
 800611a:	4654      	mov	r4, sl
 800611c:	2000      	movs	r0, #0
 800611e:	f04f 0c0a 	mov.w	ip, #10
 8006122:	4621      	mov	r1, r4
 8006124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006128:	3b30      	subs	r3, #48	; 0x30
 800612a:	2b09      	cmp	r3, #9
 800612c:	d94e      	bls.n	80061cc <_vfiprintf_r+0x1c4>
 800612e:	b1b0      	cbz	r0, 800615e <_vfiprintf_r+0x156>
 8006130:	9207      	str	r2, [sp, #28]
 8006132:	e014      	b.n	800615e <_vfiprintf_r+0x156>
 8006134:	eba0 0308 	sub.w	r3, r0, r8
 8006138:	fa09 f303 	lsl.w	r3, r9, r3
 800613c:	4313      	orrs	r3, r2
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	46a2      	mov	sl, r4
 8006142:	e7d2      	b.n	80060ea <_vfiprintf_r+0xe2>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1d19      	adds	r1, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	9103      	str	r1, [sp, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfbb      	ittet	lt
 8006150:	425b      	neglt	r3, r3
 8006152:	f042 0202 	orrlt.w	r2, r2, #2
 8006156:	9307      	strge	r3, [sp, #28]
 8006158:	9307      	strlt	r3, [sp, #28]
 800615a:	bfb8      	it	lt
 800615c:	9204      	strlt	r2, [sp, #16]
 800615e:	7823      	ldrb	r3, [r4, #0]
 8006160:	2b2e      	cmp	r3, #46	; 0x2e
 8006162:	d10c      	bne.n	800617e <_vfiprintf_r+0x176>
 8006164:	7863      	ldrb	r3, [r4, #1]
 8006166:	2b2a      	cmp	r3, #42	; 0x2a
 8006168:	d135      	bne.n	80061d6 <_vfiprintf_r+0x1ce>
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	9203      	str	r2, [sp, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	bfb8      	it	lt
 8006176:	f04f 33ff 	movlt.w	r3, #4294967295
 800617a:	3402      	adds	r4, #2
 800617c:	9305      	str	r3, [sp, #20]
 800617e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006264 <_vfiprintf_r+0x25c>
 8006182:	7821      	ldrb	r1, [r4, #0]
 8006184:	2203      	movs	r2, #3
 8006186:	4650      	mov	r0, sl
 8006188:	f7fa f822 	bl	80001d0 <memchr>
 800618c:	b140      	cbz	r0, 80061a0 <_vfiprintf_r+0x198>
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	eba0 000a 	sub.w	r0, r0, sl
 8006194:	fa03 f000 	lsl.w	r0, r3, r0
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	4303      	orrs	r3, r0
 800619c:	3401      	adds	r4, #1
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a4:	482c      	ldr	r0, [pc, #176]	; (8006258 <_vfiprintf_r+0x250>)
 80061a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061aa:	2206      	movs	r2, #6
 80061ac:	f7fa f810 	bl	80001d0 <memchr>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d03f      	beq.n	8006234 <_vfiprintf_r+0x22c>
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <_vfiprintf_r+0x254>)
 80061b6:	bb1b      	cbnz	r3, 8006200 <_vfiprintf_r+0x1f8>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	3307      	adds	r3, #7
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	3308      	adds	r3, #8
 80061c2:	9303      	str	r3, [sp, #12]
 80061c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c6:	443b      	add	r3, r7
 80061c8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ca:	e767      	b.n	800609c <_vfiprintf_r+0x94>
 80061cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d0:	460c      	mov	r4, r1
 80061d2:	2001      	movs	r0, #1
 80061d4:	e7a5      	b.n	8006122 <_vfiprintf_r+0x11a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	3401      	adds	r4, #1
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	4619      	mov	r1, r3
 80061de:	f04f 0c0a 	mov.w	ip, #10
 80061e2:	4620      	mov	r0, r4
 80061e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e8:	3a30      	subs	r2, #48	; 0x30
 80061ea:	2a09      	cmp	r2, #9
 80061ec:	d903      	bls.n	80061f6 <_vfiprintf_r+0x1ee>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0c5      	beq.n	800617e <_vfiprintf_r+0x176>
 80061f2:	9105      	str	r1, [sp, #20]
 80061f4:	e7c3      	b.n	800617e <_vfiprintf_r+0x176>
 80061f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fa:	4604      	mov	r4, r0
 80061fc:	2301      	movs	r3, #1
 80061fe:	e7f0      	b.n	80061e2 <_vfiprintf_r+0x1da>
 8006200:	ab03      	add	r3, sp, #12
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	462a      	mov	r2, r5
 8006206:	4b16      	ldr	r3, [pc, #88]	; (8006260 <_vfiprintf_r+0x258>)
 8006208:	a904      	add	r1, sp, #16
 800620a:	4630      	mov	r0, r6
 800620c:	f3af 8000 	nop.w
 8006210:	4607      	mov	r7, r0
 8006212:	1c78      	adds	r0, r7, #1
 8006214:	d1d6      	bne.n	80061c4 <_vfiprintf_r+0x1bc>
 8006216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006218:	07d9      	lsls	r1, r3, #31
 800621a:	d405      	bmi.n	8006228 <_vfiprintf_r+0x220>
 800621c:	89ab      	ldrh	r3, [r5, #12]
 800621e:	059a      	lsls	r2, r3, #22
 8006220:	d402      	bmi.n	8006228 <_vfiprintf_r+0x220>
 8006222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006224:	f7ff fd7f 	bl	8005d26 <__retarget_lock_release_recursive>
 8006228:	89ab      	ldrh	r3, [r5, #12]
 800622a:	065b      	lsls	r3, r3, #25
 800622c:	f53f af12 	bmi.w	8006054 <_vfiprintf_r+0x4c>
 8006230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006232:	e711      	b.n	8006058 <_vfiprintf_r+0x50>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <_vfiprintf_r+0x258>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f880 	bl	8006344 <_printf_i>
 8006244:	e7e4      	b.n	8006210 <_vfiprintf_r+0x208>
 8006246:	bf00      	nop
 8006248:	08006be4 	.word	0x08006be4
 800624c:	08006c04 	.word	0x08006c04
 8006250:	08006bc4 	.word	0x08006bc4
 8006254:	08006c24 	.word	0x08006c24
 8006258:	08006c2e 	.word	0x08006c2e
 800625c:	00000000 	.word	0x00000000
 8006260:	08005fe3 	.word	0x08005fe3
 8006264:	08006c2a 	.word	0x08006c2a

08006268 <_printf_common>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	4616      	mov	r6, r2
 800626e:	4699      	mov	r9, r3
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006278:	4293      	cmp	r3, r2
 800627a:	bfb8      	it	lt
 800627c:	4613      	movlt	r3, r2
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006284:	4607      	mov	r7, r0
 8006286:	460c      	mov	r4, r1
 8006288:	b10a      	cbz	r2, 800628e <_printf_common+0x26>
 800628a:	3301      	adds	r3, #1
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	0699      	lsls	r1, r3, #26
 8006292:	bf42      	ittt	mi
 8006294:	6833      	ldrmi	r3, [r6, #0]
 8006296:	3302      	addmi	r3, #2
 8006298:	6033      	strmi	r3, [r6, #0]
 800629a:	6825      	ldr	r5, [r4, #0]
 800629c:	f015 0506 	ands.w	r5, r5, #6
 80062a0:	d106      	bne.n	80062b0 <_printf_common+0x48>
 80062a2:	f104 0a19 	add.w	sl, r4, #25
 80062a6:	68e3      	ldr	r3, [r4, #12]
 80062a8:	6832      	ldr	r2, [r6, #0]
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	dc26      	bgt.n	80062fe <_printf_common+0x96>
 80062b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b4:	1e13      	subs	r3, r2, #0
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	bf18      	it	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	0692      	lsls	r2, r2, #26
 80062be:	d42b      	bmi.n	8006318 <_printf_common+0xb0>
 80062c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c4:	4649      	mov	r1, r9
 80062c6:	4638      	mov	r0, r7
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d01e      	beq.n	800630c <_printf_common+0xa4>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	68e5      	ldr	r5, [r4, #12]
 80062d2:	6832      	ldr	r2, [r6, #0]
 80062d4:	f003 0306 	and.w	r3, r3, #6
 80062d8:	2b04      	cmp	r3, #4
 80062da:	bf08      	it	eq
 80062dc:	1aad      	subeq	r5, r5, r2
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	bf0c      	ite	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	2500      	movne	r5, #0
 80062ea:	4293      	cmp	r3, r2
 80062ec:	bfc4      	itt	gt
 80062ee:	1a9b      	subgt	r3, r3, r2
 80062f0:	18ed      	addgt	r5, r5, r3
 80062f2:	2600      	movs	r6, #0
 80062f4:	341a      	adds	r4, #26
 80062f6:	42b5      	cmp	r5, r6
 80062f8:	d11a      	bne.n	8006330 <_printf_common+0xc8>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e008      	b.n	8006310 <_printf_common+0xa8>
 80062fe:	2301      	movs	r3, #1
 8006300:	4652      	mov	r2, sl
 8006302:	4649      	mov	r1, r9
 8006304:	4638      	mov	r0, r7
 8006306:	47c0      	blx	r8
 8006308:	3001      	adds	r0, #1
 800630a:	d103      	bne.n	8006314 <_printf_common+0xac>
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006314:	3501      	adds	r5, #1
 8006316:	e7c6      	b.n	80062a6 <_printf_common+0x3e>
 8006318:	18e1      	adds	r1, r4, r3
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	2030      	movs	r0, #48	; 0x30
 800631e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006322:	4422      	add	r2, r4
 8006324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800632c:	3302      	adds	r3, #2
 800632e:	e7c7      	b.n	80062c0 <_printf_common+0x58>
 8006330:	2301      	movs	r3, #1
 8006332:	4622      	mov	r2, r4
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d0e6      	beq.n	800630c <_printf_common+0xa4>
 800633e:	3601      	adds	r6, #1
 8006340:	e7d9      	b.n	80062f6 <_printf_common+0x8e>
	...

08006344 <_printf_i>:
 8006344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	7e0f      	ldrb	r7, [r1, #24]
 800634a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800634c:	2f78      	cmp	r7, #120	; 0x78
 800634e:	4691      	mov	r9, r2
 8006350:	4680      	mov	r8, r0
 8006352:	460c      	mov	r4, r1
 8006354:	469a      	mov	sl, r3
 8006356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635a:	d807      	bhi.n	800636c <_printf_i+0x28>
 800635c:	2f62      	cmp	r7, #98	; 0x62
 800635e:	d80a      	bhi.n	8006376 <_printf_i+0x32>
 8006360:	2f00      	cmp	r7, #0
 8006362:	f000 80d8 	beq.w	8006516 <_printf_i+0x1d2>
 8006366:	2f58      	cmp	r7, #88	; 0x58
 8006368:	f000 80a3 	beq.w	80064b2 <_printf_i+0x16e>
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006374:	e03a      	b.n	80063ec <_printf_i+0xa8>
 8006376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637a:	2b15      	cmp	r3, #21
 800637c:	d8f6      	bhi.n	800636c <_printf_i+0x28>
 800637e:	a101      	add	r1, pc, #4	; (adr r1, 8006384 <_printf_i+0x40>)
 8006380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063f1 	.word	0x080063f1
 800638c:	0800636d 	.word	0x0800636d
 8006390:	0800636d 	.word	0x0800636d
 8006394:	0800636d 	.word	0x0800636d
 8006398:	0800636d 	.word	0x0800636d
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	0800636d 	.word	0x0800636d
 80063a4:	0800636d 	.word	0x0800636d
 80063a8:	0800636d 	.word	0x0800636d
 80063ac:	0800636d 	.word	0x0800636d
 80063b0:	080064fd 	.word	0x080064fd
 80063b4:	08006421 	.word	0x08006421
 80063b8:	080064df 	.word	0x080064df
 80063bc:	0800636d 	.word	0x0800636d
 80063c0:	0800636d 	.word	0x0800636d
 80063c4:	0800651f 	.word	0x0800651f
 80063c8:	0800636d 	.word	0x0800636d
 80063cc:	08006421 	.word	0x08006421
 80063d0:	0800636d 	.word	0x0800636d
 80063d4:	0800636d 	.word	0x0800636d
 80063d8:	080064e7 	.word	0x080064e7
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	602a      	str	r2, [r5, #0]
 80063e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0a3      	b.n	8006538 <_printf_i+0x1f4>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	6829      	ldr	r1, [r5, #0]
 80063f4:	0606      	lsls	r6, r0, #24
 80063f6:	f101 0304 	add.w	r3, r1, #4
 80063fa:	d50a      	bpl.n	8006412 <_printf_i+0xce>
 80063fc:	680e      	ldr	r6, [r1, #0]
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	2e00      	cmp	r6, #0
 8006402:	da03      	bge.n	800640c <_printf_i+0xc8>
 8006404:	232d      	movs	r3, #45	; 0x2d
 8006406:	4276      	negs	r6, r6
 8006408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640c:	485e      	ldr	r0, [pc, #376]	; (8006588 <_printf_i+0x244>)
 800640e:	230a      	movs	r3, #10
 8006410:	e019      	b.n	8006446 <_printf_i+0x102>
 8006412:	680e      	ldr	r6, [r1, #0]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800641a:	bf18      	it	ne
 800641c:	b236      	sxthne	r6, r6
 800641e:	e7ef      	b.n	8006400 <_printf_i+0xbc>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	6029      	str	r1, [r5, #0]
 8006428:	0601      	lsls	r1, r0, #24
 800642a:	d501      	bpl.n	8006430 <_printf_i+0xec>
 800642c:	681e      	ldr	r6, [r3, #0]
 800642e:	e002      	b.n	8006436 <_printf_i+0xf2>
 8006430:	0646      	lsls	r6, r0, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0xe8>
 8006434:	881e      	ldrh	r6, [r3, #0]
 8006436:	4854      	ldr	r0, [pc, #336]	; (8006588 <_printf_i+0x244>)
 8006438:	2f6f      	cmp	r7, #111	; 0x6f
 800643a:	bf0c      	ite	eq
 800643c:	2308      	moveq	r3, #8
 800643e:	230a      	movne	r3, #10
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006446:	6865      	ldr	r5, [r4, #4]
 8006448:	60a5      	str	r5, [r4, #8]
 800644a:	2d00      	cmp	r5, #0
 800644c:	bfa2      	ittt	ge
 800644e:	6821      	ldrge	r1, [r4, #0]
 8006450:	f021 0104 	bicge.w	r1, r1, #4
 8006454:	6021      	strge	r1, [r4, #0]
 8006456:	b90e      	cbnz	r6, 800645c <_printf_i+0x118>
 8006458:	2d00      	cmp	r5, #0
 800645a:	d04d      	beq.n	80064f8 <_printf_i+0x1b4>
 800645c:	4615      	mov	r5, r2
 800645e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006462:	fb03 6711 	mls	r7, r3, r1, r6
 8006466:	5dc7      	ldrb	r7, [r0, r7]
 8006468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800646c:	4637      	mov	r7, r6
 800646e:	42bb      	cmp	r3, r7
 8006470:	460e      	mov	r6, r1
 8006472:	d9f4      	bls.n	800645e <_printf_i+0x11a>
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <_printf_i+0x14c>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07de      	lsls	r6, r3, #31
 800647c:	d508      	bpl.n	8006490 <_printf_i+0x14c>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	bfde      	ittt	le
 8006486:	2330      	movle	r3, #48	; 0x30
 8006488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006490:	1b52      	subs	r2, r2, r5
 8006492:	6122      	str	r2, [r4, #16]
 8006494:	f8cd a000 	str.w	sl, [sp]
 8006498:	464b      	mov	r3, r9
 800649a:	aa03      	add	r2, sp, #12
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fee2 	bl	8006268 <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d14c      	bne.n	8006542 <_printf_i+0x1fe>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b004      	add	sp, #16
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	4835      	ldr	r0, [pc, #212]	; (8006588 <_printf_i+0x244>)
 80064b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064b8:	6829      	ldr	r1, [r5, #0]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064c0:	6029      	str	r1, [r5, #0]
 80064c2:	061d      	lsls	r5, r3, #24
 80064c4:	d514      	bpl.n	80064f0 <_printf_i+0x1ac>
 80064c6:	07df      	lsls	r7, r3, #31
 80064c8:	bf44      	itt	mi
 80064ca:	f043 0320 	orrmi.w	r3, r3, #32
 80064ce:	6023      	strmi	r3, [r4, #0]
 80064d0:	b91e      	cbnz	r6, 80064da <_printf_i+0x196>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f023 0320 	bic.w	r3, r3, #32
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	2310      	movs	r3, #16
 80064dc:	e7b0      	b.n	8006440 <_printf_i+0xfc>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	2378      	movs	r3, #120	; 0x78
 80064e8:	4828      	ldr	r0, [pc, #160]	; (800658c <_printf_i+0x248>)
 80064ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064ee:	e7e3      	b.n	80064b8 <_printf_i+0x174>
 80064f0:	0659      	lsls	r1, r3, #25
 80064f2:	bf48      	it	mi
 80064f4:	b2b6      	uxthmi	r6, r6
 80064f6:	e7e6      	b.n	80064c6 <_printf_i+0x182>
 80064f8:	4615      	mov	r5, r2
 80064fa:	e7bb      	b.n	8006474 <_printf_i+0x130>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	6826      	ldr	r6, [r4, #0]
 8006500:	6961      	ldr	r1, [r4, #20]
 8006502:	1d18      	adds	r0, r3, #4
 8006504:	6028      	str	r0, [r5, #0]
 8006506:	0635      	lsls	r5, r6, #24
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	d501      	bpl.n	8006510 <_printf_i+0x1cc>
 800650c:	6019      	str	r1, [r3, #0]
 800650e:	e002      	b.n	8006516 <_printf_i+0x1d2>
 8006510:	0670      	lsls	r0, r6, #25
 8006512:	d5fb      	bpl.n	800650c <_printf_i+0x1c8>
 8006514:	8019      	strh	r1, [r3, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	4615      	mov	r5, r2
 800651c:	e7ba      	b.n	8006494 <_printf_i+0x150>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	602a      	str	r2, [r5, #0]
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	2100      	movs	r1, #0
 800652a:	4628      	mov	r0, r5
 800652c:	f7f9 fe50 	bl	80001d0 <memchr>
 8006530:	b108      	cbz	r0, 8006536 <_printf_i+0x1f2>
 8006532:	1b40      	subs	r0, r0, r5
 8006534:	6060      	str	r0, [r4, #4]
 8006536:	6863      	ldr	r3, [r4, #4]
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	2300      	movs	r3, #0
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006540:	e7a8      	b.n	8006494 <_printf_i+0x150>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	462a      	mov	r2, r5
 8006546:	4649      	mov	r1, r9
 8006548:	4640      	mov	r0, r8
 800654a:	47d0      	blx	sl
 800654c:	3001      	adds	r0, #1
 800654e:	d0ab      	beq.n	80064a8 <_printf_i+0x164>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	d413      	bmi.n	800657e <_printf_i+0x23a>
 8006556:	68e0      	ldr	r0, [r4, #12]
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	4298      	cmp	r0, r3
 800655c:	bfb8      	it	lt
 800655e:	4618      	movlt	r0, r3
 8006560:	e7a4      	b.n	80064ac <_printf_i+0x168>
 8006562:	2301      	movs	r3, #1
 8006564:	4632      	mov	r2, r6
 8006566:	4649      	mov	r1, r9
 8006568:	4640      	mov	r0, r8
 800656a:	47d0      	blx	sl
 800656c:	3001      	adds	r0, #1
 800656e:	d09b      	beq.n	80064a8 <_printf_i+0x164>
 8006570:	3501      	adds	r5, #1
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	9903      	ldr	r1, [sp, #12]
 8006576:	1a5b      	subs	r3, r3, r1
 8006578:	42ab      	cmp	r3, r5
 800657a:	dcf2      	bgt.n	8006562 <_printf_i+0x21e>
 800657c:	e7eb      	b.n	8006556 <_printf_i+0x212>
 800657e:	2500      	movs	r5, #0
 8006580:	f104 0619 	add.w	r6, r4, #25
 8006584:	e7f5      	b.n	8006572 <_printf_i+0x22e>
 8006586:	bf00      	nop
 8006588:	08006c35 	.word	0x08006c35
 800658c:	08006c46 	.word	0x08006c46

08006590 <_sbrk_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	; (80065ac <_sbrk_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fb fe18 	bl	80021d0 <_sbrk>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_sbrk_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_sbrk_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000218 	.word	0x20000218

080065b0 <__sread>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	460c      	mov	r4, r1
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	f000 f8a0 	bl	80066fc <_read_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	bfab      	itete	ge
 80065c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065c2:	89a3      	ldrhlt	r3, [r4, #12]
 80065c4:	181b      	addge	r3, r3, r0
 80065c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065ca:	bfac      	ite	ge
 80065cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80065ce:	81a3      	strhlt	r3, [r4, #12]
 80065d0:	bd10      	pop	{r4, pc}

080065d2 <__swrite>:
 80065d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	461f      	mov	r7, r3
 80065d8:	898b      	ldrh	r3, [r1, #12]
 80065da:	05db      	lsls	r3, r3, #23
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4616      	mov	r6, r2
 80065e2:	d505      	bpl.n	80065f0 <__swrite+0x1e>
 80065e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e8:	2302      	movs	r3, #2
 80065ea:	2200      	movs	r2, #0
 80065ec:	f000 f868 	bl	80066c0 <_lseek_r>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	4632      	mov	r2, r6
 80065fe:	463b      	mov	r3, r7
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	f000 b817 	b.w	8006638 <_write_r>

0800660a <__sseek>:
 800660a:	b510      	push	{r4, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006612:	f000 f855 	bl	80066c0 <_lseek_r>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	bf15      	itete	ne
 800661c:	6560      	strne	r0, [r4, #84]	; 0x54
 800661e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006626:	81a3      	strheq	r3, [r4, #12]
 8006628:	bf18      	it	ne
 800662a:	81a3      	strhne	r3, [r4, #12]
 800662c:	bd10      	pop	{r4, pc}

0800662e <__sclose>:
 800662e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006632:	f000 b813 	b.w	800665c <_close_r>
	...

08006638 <_write_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	; (8006658 <_write_r+0x20>)
 800663c:	4604      	mov	r4, r0
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f7fb fd71 	bl	800212e <_write>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_write_r+0x1e>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_write_r+0x1e>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20000218 	.word	0x20000218

0800665c <_close_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	; (8006678 <_close_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fb fd7d 	bl	8002166 <_close>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_close_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_close_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000218 	.word	0x20000218

0800667c <_fstat_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	; (800669c <_fstat_r+0x20>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	4611      	mov	r1, r2
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	f7fb fd78 	bl	800217e <_fstat>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d102      	bne.n	8006698 <_fstat_r+0x1c>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	b103      	cbz	r3, 8006698 <_fstat_r+0x1c>
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	20000218 	.word	0x20000218

080066a0 <_isatty_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d06      	ldr	r5, [pc, #24]	; (80066bc <_isatty_r+0x1c>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f7fb fd77 	bl	800219e <_isatty>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_isatty_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_isatty_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20000218 	.word	0x20000218

080066c0 <_lseek_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d07      	ldr	r5, [pc, #28]	; (80066e0 <_lseek_r+0x20>)
 80066c4:	4604      	mov	r4, r0
 80066c6:	4608      	mov	r0, r1
 80066c8:	4611      	mov	r1, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	602a      	str	r2, [r5, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f7fb fd70 	bl	80021b4 <_lseek>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_lseek_r+0x1e>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_lseek_r+0x1e>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20000218 	.word	0x20000218

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__malloc_lock+0x8>)
 80066e6:	f7ff bb1d 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	2000020c 	.word	0x2000020c

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f7ff bb18 	b.w	8005d26 <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	2000020c 	.word	0x2000020c

080066fc <_read_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_read_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fb fcf2 	bl	80020f4 <_read>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_read_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_read_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000218 	.word	0x20000218

08006720 <_init>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr

0800672c <_fini>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr
