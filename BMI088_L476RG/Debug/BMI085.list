
BMI085.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0800af58  0800af58  0001af58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7b8  0800b7b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7b8  0800b7b8  0001b7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7c0  0800b7c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7c0  0800b7c0  0001b7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001e0  0800b9a8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800b9a8  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160cd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f4  00000000  00000000  000362dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d70  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016376  00000000  00000000  00064180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc1af  00000000  00000000  0007a4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001766a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc4  00000000  00000000  001766f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af3c 	.word	0x0800af3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800af3c 	.word	0x0800af3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t chip_id = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fa57 	bl	800140c <null_ptr_check>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d143      	bne.n	8000ff2 <bmi08a_init+0xa6>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7b1b      	ldrb	r3, [r3, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10c      	bne.n	8000f8c <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	739a      	strb	r2, [r3, #14]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f78:	f107 010c 	add.w	r1, r7, #12
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fa67 	bl	8001454 <get_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e002      	b.n	8000f92 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d12b      	bne.n	8000ff2 <bmi08a_init+0xa6>
        {
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f9a:	f107 010c 	add.w	r1, r7, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fa56 	bl	8001454 <get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11e      	bne.n	8000ff2 <bmi08a_init+0xa6>
            {
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <bmi08a_init+0xb4>)
 8000fba:	f006 ff69 	bl	8007e90 <iprintf>
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b5b      	ldrb	r3, [r3, #13]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <bmi08a_init+0x8a>
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d104      	bne.n	8000fd6 <bmi08a_init+0x8a>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fcc:	89bb      	ldrh	r3, [r7, #12]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e00d      	b.n	8000ff2 <bmi08a_init+0xa6>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7b5b      	ldrb	r3, [r3, #13]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <bmi08a_init+0xa2>
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	2b1e      	cmp	r3, #30
 8000fe2:	d104      	bne.n	8000fee <bmi08a_init+0xa2>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fe4:	89bb      	ldrh	r3, [r7, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e001      	b.n	8000ff2 <bmi08a_init+0xa6>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000fee:	23fd      	movs	r3, #253	; 0xfd
 8000ff0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800af58 	.word	0x0800af58

08001004 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f000 f9f9 	bl	800140c <null_ptr_check>
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d111      	bne.n	800104a <bmi08a_get_regs+0x46>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00e      	beq.n	800104a <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001032:	7bf8      	ldrb	r0, [r7, #15]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	f000 fa0b 	bl	8001454 <get_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001042:	e004      	b.n	800104e <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001044:	23f9      	movs	r3, #249	; 0xf9
 8001046:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001048:	e001      	b.n	800104e <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800104a:	23ff      	movs	r3, #255	; 0xff
 800104c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800104e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f000 f9ce 	bl	800140c <null_ptr_check>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12c      	bne.n	80010d6 <bmi08a_set_regs+0x7c>
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d029      	beq.n	80010d6 <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d023      	beq.n	80010d0 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001088:	7bf8      	ldrb	r0, [r7, #15]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	f000 fa30 	bl	80014f4 <set_regs>
 8001094:	4603      	mov	r3, r0
 8001096:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d108      	bne.n	80010b2 <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	6852      	ldr	r2, [r2, #4]
 80010a8:	4611      	mov	r1, r2
 80010aa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80010ae:	4798      	blx	r3
        if (len > 0)
 80010b0:	e013      	b.n	80010da <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	7bdb      	ldrb	r3, [r3, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d107      	bne.n	80010ca <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	6852      	ldr	r2, [r2, #4]
 80010c2:	4611      	mov	r1, r2
 80010c4:	2002      	movs	r0, #2
 80010c6:	4798      	blx	r3
        if (len > 0)
 80010c8:	e007      	b.n	80010da <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 80010ca:	23fb      	movs	r3, #251	; 0xfb
 80010cc:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010ce:	e004      	b.n	80010da <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80010d0:	23f9      	movs	r3, #249	; 0xf9
 80010d2:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010d4:	e001      	b.n	80010da <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80010ee:	2300      	movs	r3, #0
 80010f0:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	75bb      	strb	r3, [r7, #22]
 80010f6:	2300      	movs	r3, #0
 80010f8:	757b      	strb	r3, [r7, #21]
 80010fa:	2300      	movs	r3, #0
 80010fc:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f984 	bl	800140c <null_ptr_check>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d171      	bne.n	80011f4 <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c9b      	ldrb	r3, [r3, #18]
 8001114:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7c5b      	ldrb	r3, [r3, #17]
 800111a:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7c1b      	ldrb	r3, [r3, #16]
 8001120:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 8001122:	7cfb      	ldrb	r3, [r7, #19]
 8001124:	2b04      	cmp	r3, #4
 8001126:	d902      	bls.n	800112e <bmi08a_set_meas_conf+0x48>
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d901      	bls.n	8001132 <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 800112e:	2301      	movs	r3, #1
 8001130:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 8001132:	7cbb      	ldrb	r3, [r7, #18]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d901      	bls.n	800113c <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 8001138:	2301      	movs	r3, #1
 800113a:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7b5b      	ldrb	r3, [r3, #13]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d901      	bls.n	800114e <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 800114a:	2301      	movs	r3, #1
 800114c:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7b5b      	ldrb	r3, [r3, #13]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 8001156:	7c7b      	ldrb	r3, [r7, #17]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d901      	bls.n	8001160 <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 800115c:	2301      	movs	r3, #1
 800115e:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d144      	bne.n	80011f0 <bmi08a_set_meas_conf+0x10a>
 8001166:	7d7b      	ldrb	r3, [r7, #21]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d141      	bne.n	80011f0 <bmi08a_set_meas_conf+0x10a>
 800116c:	7d3b      	ldrb	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d13e      	bne.n	80011f0 <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8001172:	f107 010c 	add.w	r1, r7, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	2040      	movs	r0, #64	; 0x40
 800117c:	f7ff ff42 	bl	8001004 <bmi08a_get_regs>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d133      	bne.n	80011f4 <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	b25a      	sxtb	r2, r3
 8001196:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	7cbb      	ldrb	r3, [r7, #18]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	f023 0303 	bic.w	r3, r3, #3
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	2040      	movs	r0, #64	; 0x40
 80011e6:	f000 f985 	bl	80014f4 <set_regs>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80011ee:	e001      	b.n	80011f4 <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 80011f0:	23f8      	movs	r3, #248	; 0xf8
 80011f2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8001208:	2300      	movs	r3, #0
 800120a:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f8fd 	bl	800140c <null_ptr_check>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d143      	bne.n	80012a6 <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7bdb      	ldrb	r3, [r3, #15]
 8001222:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 800122a:	2300      	movs	r3, #0
 800122c:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 800122e:	2304      	movs	r3, #4
 8001230:	737b      	strb	r3, [r7, #13]
 8001232:	e009      	b.n	8001248 <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d104      	bne.n	8001244 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 800123a:	2303      	movs	r3, #3
 800123c:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	737b      	strb	r3, [r7, #13]
 8001242:	e001      	b.n	8001248 <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 8001244:	23fb      	movs	r3, #251	; 0xfb
 8001246:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12a      	bne.n	80012a6 <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 8001250:	f107 010c 	add.w	r1, r7, #12
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	207c      	movs	r0, #124	; 0x7c
 800125a:	f000 f94b 	bl	80014f4 <set_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11d      	bne.n	80012a6 <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6852      	ldr	r2, [r2, #4]
 8001272:	4611      	mov	r1, r2
 8001274:	f241 3088 	movw	r0, #5000	; 0x1388
 8001278:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	207d      	movs	r0, #125	; 0x7d
 8001286:	f000 f935 	bl	80014f4 <set_regs>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6852      	ldr	r2, [r2, #4]
 800129e:	4611      	mov	r1, r2
 80012a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012a4:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	2300      	movs	r3, #0
 80012c2:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f000 f8a1 	bl	800140c <null_ptr_check>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d140      	bne.n	8001358 <bmi08a_get_data+0xa6>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03d      	beq.n	8001358 <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 80012dc:	f107 010c 	add.w	r1, r7, #12
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2206      	movs	r2, #6
 80012e4:	2012      	movs	r0, #18
 80012e6:	f7ff fe8d 	bl	8001004 <bmi08a_get_regs>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 80012ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d132      	bne.n	800135c <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80012fe:	7d7b      	ldrb	r3, [r7, #21]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7dbb      	ldrb	r3, [r7, #22]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 800130e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800131e:	7d7b      	ldrb	r3, [r7, #21]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 800132e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001336:	7c3b      	ldrb	r3, [r7, #16]
 8001338:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 800133a:	7c7b      	ldrb	r3, [r7, #17]
 800133c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800133e:	7d7b      	ldrb	r3, [r7, #21]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7dbb      	ldrb	r3, [r7, #22]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 800134e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001356:	e001      	b.n	800135c <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800135c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f000 f84a 	bl	800140c <null_ptr_check>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d13a      	bne.n	80013fa <bmi08a_set_int_config+0x92>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d037      	beq.n	80013fa <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d82f      	bhi.n	80013f2 <bmi08a_set_int_config+0x8a>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <bmi08a_set_int_config+0x30>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013ad 	.word	0x080013ad
 800139c:	080013bb 	.word	0x080013bb
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	080013d7 	.word	0x080013d7
 80013a8:	080013e5 	.word	0x080013e5
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f95b 	bl	800166a <set_accel_data_ready_int>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
                break;
 80013b8:	e01e      	b.n	80013f8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f9b2 	bl	8001726 <set_accel_sync_data_ready_int>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
                break;
 80013c6:	e017      	b.n	80013f8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9f0 	bl	80017b0 <set_accel_sync_input>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
                break;
 80013d4:	e010      	b.n	80013f8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa03 	bl	80017e4 <set_fifo_wm_int>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]
                break;
 80013e2:	e009      	b.n	80013f8 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa5a 	bl	80018a0 <set_fifo_full_int>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
                break;
 80013f0:	e002      	b.n	80013f8 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 80013f2:	23f8      	movs	r3, #248	; 0xf8
 80013f4:	73fb      	strb	r3, [r7, #15]
                break;
 80013f6:	bf00      	nop
        switch (int_config->int_type)
 80013f8:	e001      	b.n	80013fe <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80013fa:	23ff      	movs	r3, #255	; 0xff
 80013fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop

0800140c <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00f      	beq.n	800143a <null_ptr_check+0x2e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <null_ptr_check+0x2e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <null_ptr_check+0x2e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 800143a:	23ff      	movs	r3, #255	; 0xff
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b0a7      	sub	sp, #156	; 0x9c
 8001458:	af00      	add	r7, sp, #0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7b1b      	ldrb	r3, [r3, #12]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d103      	bne.n	800147a <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001478:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6a1c      	ldr	r4, [r3, #32]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7b9b      	ldrb	r3, [r3, #14]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	441a      	add	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f107 0114 	add.w	r1, r7, #20
 8001490:	7bf8      	ldrb	r0, [r7, #15]
 8001492:	47a0      	blx	r4
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d11c      	bne.n	80014e2 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80014ae:	e012      	b.n	80014d6 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 80014b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	7b92      	ldrb	r2, [r2, #14]
 80014b8:	441a      	add	r2, r3
 80014ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	440b      	add	r3, r1
 80014c2:	3298      	adds	r2, #152	; 0x98
 80014c4:	443a      	add	r2, r7
 80014c6:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80014ca:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 80014cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014d0:	3301      	adds	r3, #1
 80014d2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80014d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8e7      	bhi.n	80014b0 <get_regs+0x5c>
 80014e0:	e002      	b.n	80014e8 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 80014e2:	23fe      	movs	r3, #254	; 0xfe
 80014e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 80014e8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	379c      	adds	r7, #156	; 0x9c
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d103      	bne.n	8001518 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001516:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	7bf8      	ldrb	r0, [r7, #15]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	47a0      	blx	r4
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 800153c:	23fe      	movs	r3, #254	; 0xfe
 800153e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]
 800155a:	2300      	movs	r3, #0
 800155c:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <set_int_pin_config+0x20>
 8001566:	2b01      	cmp	r3, #1
 8001568:	d003      	beq.n	8001572 <set_int_pin_config+0x26>
 800156a:	e005      	b.n	8001578 <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 800156c:	2353      	movs	r3, #83	; 0x53
 800156e:	73bb      	strb	r3, [r7, #14]
            break;
 8001570:	e005      	b.n	800157e <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 8001572:	2354      	movs	r3, #84	; 0x54
 8001574:	73bb      	strb	r3, [r7, #14]
            break;
 8001576:	e002      	b.n	800157e <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001578:	2301      	movs	r3, #1
 800157a:	737b      	strb	r3, [r7, #13]
            break;
 800157c:	bf00      	nop
    }

    if (!is_channel_invalid)
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d16a      	bne.n	800165a <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 8001584:	f107 010c 	add.w	r1, r7, #12
 8001588:	7bb8      	ldrb	r0, [r7, #14]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	f7ff ff61 	bl	8001454 <get_regs>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d15f      	bne.n	800165e <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	f023 0302 	bic.w	r3, r3, #2
 80015a6:	b25a      	sxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	789b      	ldrb	r3, [r3, #2]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d11a      	bne.n	800161c <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 80015e6:	7b3b      	ldrb	r3, [r7, #12]
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 80015f0:	7b3b      	ldrb	r3, [r7, #12]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	f023 0310 	bic.w	r3, r3, #16
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	b25b      	sxtb	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b25b      	sxtb	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	f023 0308 	bic.w	r3, r3, #8
 8001616:	b2db      	uxtb	r3, r3
 8001618:	733b      	strb	r3, [r7, #12]
 800161a:	e014      	b.n	8001646 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	b25b      	sxtb	r3, r3
 8001620:	f023 0308 	bic.w	r3, r3, #8
 8001624:	b25a      	sxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	b25b      	sxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b25b      	sxtb	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 800163c:	7b3b      	ldrb	r3, [r7, #12]
 800163e:	f023 0310 	bic.w	r3, r3, #16
 8001642:	b2db      	uxtb	r3, r3
 8001644:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001646:	f107 010c 	add.w	r1, r7, #12
 800164a:	7bb8      	ldrb	r0, [r7, #14]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	f7ff fd03 	bl	800105a <bmi08a_set_regs>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 800165a:	23fb      	movs	r3, #251	; 0xfb
 800165c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001674:	2300      	movs	r3, #0
 8001676:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	2058      	movs	r0, #88	; 0x58
 8001682:	f7ff fee7 	bl	8001454 <get_regs>
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d143      	bne.n	800171a <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <set_accel_data_ready_int+0x3c>
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d010      	beq.n	80016c6 <set_accel_data_ready_int+0x5c>
 80016a4:	e01f      	b.n	80016e6 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	737b      	strb	r3, [r7, #13]
                break;
 80016c4:	e012      	b.n	80016ec <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	737b      	strb	r3, [r7, #13]
                break;
 80016e4:	e002      	b.n	80016ec <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80016e6:	23fb      	movs	r3, #251	; 0xfb
 80016e8:	73fb      	strb	r3, [r7, #15]
                break;
 80016ea:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80016ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d112      	bne.n	800171a <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff28 	bl	800154c <set_int_pin_config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d108      	bne.n	800171a <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001708:	f107 010d 	add.w	r1, r7, #13
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	2058      	movs	r0, #88	; 0x58
 8001712:	f7ff fca2 	bl	800105a <bmi08a_set_regs>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f7ff fe69 	bl	800140c <null_ptr_check>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d12e      	bne.n	80017a4 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <set_accel_sync_data_ready_int+0x32>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d003      	beq.n	800175e <set_accel_sync_data_ready_int+0x38>
 8001756:	e005      	b.n	8001764 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 8001758:	2356      	movs	r3, #86	; 0x56
 800175a:	73bb      	strb	r3, [r7, #14]
                break;
 800175c:	e005      	b.n	800176a <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 800175e:	2357      	movs	r3, #87	; 0x57
 8001760:	73bb      	strb	r3, [r7, #14]
                break;
 8001762:	e002      	b.n	800176a <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001764:	23fb      	movs	r3, #251	; 0xfb
 8001766:	73fb      	strb	r3, [r7, #15]
                break;
 8001768:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 800177e:	f107 010d 	add.w	r1, r7, #13
 8001782:	7bb8      	ldrb	r0, [r7, #14]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	f7ff fc67 	bl	800105a <bmi08a_set_regs>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fed6 	bl	800154c <set_int_pin_config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f7ff fe26 	bl	800140c <null_ptr_check>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff febc 	bl	800154c <set_int_pin_config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80017ee:	2300      	movs	r3, #0
 80017f0:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80017f2:	f107 010d 	add.w	r1, r7, #13
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	2058      	movs	r0, #88	; 0x58
 80017fc:	f7ff fe2a 	bl	8001454 <get_regs>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d143      	bne.n	8001894 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	791b      	ldrb	r3, [r3, #4]
 8001810:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <set_fifo_wm_int+0x3c>
 800181a:	2b01      	cmp	r3, #1
 800181c:	d010      	beq.n	8001840 <set_fifo_wm_int+0x5c>
 800181e:	e01f      	b.n	8001860 <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f023 0302 	bic.w	r3, r3, #2
 8001828:	b25a      	sxtb	r2, r3
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	b25b      	sxtb	r3, r3
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b25b      	sxtb	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	737b      	strb	r3, [r7, #13]
                break;
 800183e:	e012      	b.n	8001866 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f023 0320 	bic.w	r3, r3, #32
 8001848:	b25a      	sxtb	r2, r3
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	b25b      	sxtb	r3, r3
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	737b      	strb	r3, [r7, #13]
                break;
 800185e:	e002      	b.n	8001866 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001860:	23fb      	movs	r3, #251	; 0xfb
 8001862:	73fb      	strb	r3, [r7, #15]
                break;
 8001864:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d112      	bne.n	8001894 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe6b 	bl	800154c <set_int_pin_config>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001882:	f107 010d 	add.w	r1, r7, #13
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	2058      	movs	r0, #88	; 0x58
 800188c:	f7ff fbe5 	bl	800105a <bmi08a_set_regs>
 8001890:	4603      	mov	r3, r0
 8001892:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80018aa:	2300      	movs	r3, #0
 80018ac:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80018ae:	f107 010d 	add.w	r1, r7, #13
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	2058      	movs	r0, #88	; 0x58
 80018b8:	f7ff fdcc 	bl	8001454 <get_regs>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80018c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d142      	bne.n	800194e <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <set_fifo_full_int+0x3c>
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d00f      	beq.n	80018fa <set_fifo_full_int+0x5a>
 80018da:	e01e      	b.n	800191a <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 80018dc:	7b7b      	ldrb	r3, [r7, #13]
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	b25a      	sxtb	r2, r3
 80018e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	737b      	strb	r3, [r7, #13]
                break;
 80018f8:	e012      	b.n	8001920 <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f023 0310 	bic.w	r3, r3, #16
 8001902:	b25a      	sxtb	r2, r3
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	b25b      	sxtb	r3, r3
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	b25b      	sxtb	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b25b      	sxtb	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	737b      	strb	r3, [r7, #13]
                break;
 8001918:	e002      	b.n	8001920 <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800191a:	23fb      	movs	r3, #251	; 0xfb
 800191c:	73fb      	strb	r3, [r7, #15]
                break;
 800191e:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d112      	bne.n	800194e <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fe0e 	bl	800154c <set_int_pin_config>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800193c:	f107 010d 	add.w	r1, r7, #13
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	2058      	movs	r0, #88	; 0x58
 8001946:	f7ff fb88 	bl	800105a <bmi08a_set_regs>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa29 	bl	8001dc0 <null_ptr_check>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11a      	bne.n	80019b0 <bmi08g_init+0x54>
    {
        /* Read gyro chip id */
        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 800197a:	f107 010e 	add.w	r1, r7, #14
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fa40 	bl	8001e08 <get_regs>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
		printf("%d: Chip id\r\n", chip_id);
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	4619      	mov	r1, r3
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <bmi08g_init+0x60>)
 8001992:	f006 fa7d 	bl	8007e90 <iprintf>
        if (rslt == BMI08X_OK)
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <bmi08g_init+0x54>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 800199e:	7bbb      	ldrb	r3, [r7, #14]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d103      	bne.n	80019ac <bmi08g_init+0x50>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 80019a4:	7bba      	ldrb	r2, [r7, #14]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	705a      	strb	r2, [r3, #1]
 80019aa:	e001      	b.n	80019b0 <bmi08g_init+0x54>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 80019ac:	23fd      	movs	r3, #253	; 0xfd
 80019ae:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0800af6c 	.word	0x0800af6c

080019c0 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f000 f9f5 	bl	8001dc0 <null_ptr_check>
 80019d6:	4603      	mov	r3, r0
 80019d8:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 80019da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d111      	bne.n	8001a06 <bmi08g_get_regs+0x46>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 80019ee:	7bf8      	ldrb	r0, [r7, #15]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	f000 fa07 	bl	8001e08 <get_regs>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80019fe:	e004      	b.n	8001a0a <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001a00:	23f9      	movs	r3, #249	; 0xf9
 8001a02:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001a04:	e001      	b.n	8001a0a <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001a06:	23ff      	movs	r3, #255	; 0xff
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f000 f9ca 	bl	8001dc0 <null_ptr_check>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001a30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d130      	bne.n	8001a9a <bmi08g_set_regs+0x84>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02d      	beq.n	8001a9a <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d027      	beq.n	8001a94 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001a44:	7bf8      	ldrb	r0, [r7, #15]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	f000 fa08 	bl	8001e60 <set_regs>
 8001a50:	4603      	mov	r3, r0
 8001a52:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	7cdb      	ldrb	r3, [r3, #19]
 8001a58:	2b80      	cmp	r3, #128	; 0x80
 8001a5a:	d003      	beq.n	8001a64 <bmi08g_set_regs+0x4e>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7cdb      	ldrb	r3, [r3, #19]
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d108      	bne.n	8001a76 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6892      	ldr	r2, [r2, #8]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001a72:	4798      	blx	r3
        if (len > 0)
 8001a74:	e013      	b.n	8001a9e <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7cdb      	ldrb	r3, [r3, #19]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6892      	ldr	r2, [r2, #8]
 8001a86:	4611      	mov	r1, r2
 8001a88:	2002      	movs	r0, #2
 8001a8a:	4798      	blx	r3
        if (len > 0)
 8001a8c:	e007      	b.n	8001a9e <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8001a8e:	23fb      	movs	r3, #251	; 0xfb
 8001a90:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001a92:	e004      	b.n	8001a9e <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001a94:	23f9      	movs	r3, #249	; 0xf9
 8001a96:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001a98:	e001      	b.n	8001a9e <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001a9a:	23ff      	movs	r3, #255	; 0xff
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <bmi08g_get_meas_conf>:
/*!
 * @brief This API reads the gyro odr and range from the sensor, store it in the bmi08x_dev
 * structure instance passed by the user.
 */
int8_t bmi08g_get_meas_conf(struct bmi08x_dev *dev)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f984 	bl	8001dc0 <null_ptr_check>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d119      	bne.n	8001af8 <bmi08g_get_meas_conf+0x4e>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, data, 2, dev);
 8001ac4:	f107 010c 	add.w	r1, r7, #12
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	200f      	movs	r0, #15
 8001ace:	f7ff ff77 	bl	80019c0 <bmi08g_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <bmi08g_get_meas_conf+0x4e>
        {
            dev->gyro_cfg.range = data[0];
 8001ade:	7b3a      	ldrb	r2, [r7, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	751a      	strb	r2, [r3, #20]
            dev->gyro_cfg.odr = (data[1] & BMI08X_GYRO_BW_MASK);
 8001ae4:	7b7b      	ldrb	r3, [r7, #13]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	759a      	strb	r2, [r3, #22]
            dev->gyro_cfg.bw = dev->gyro_cfg.odr;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7d9a      	ldrb	r2, [r3, #22]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	755a      	strb	r2, [r3, #21]
        }
    }

    return rslt;
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73bb      	strb	r3, [r7, #14]
 8001b10:	2300      	movs	r3, #0
 8001b12:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f953 	bl	8001dc0 <null_ptr_check>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d166      	bne.n	8001bf4 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7d9b      	ldrb	r3, [r3, #22]
 8001b2a:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7d1b      	ldrb	r3, [r3, #20]
 8001b30:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d901      	bls.n	8001b3c <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d901      	bls.n	8001b46 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d14f      	bne.n	8001bec <bmi08g_set_meas_conf+0xe8>
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d14c      	bne.n	8001bec <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001b52:	f107 010a 	add.w	r1, r7, #10
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2010      	movs	r0, #16
 8001b5c:	f7ff ff30 	bl	80019c0 <bmi08g_get_regs>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d142      	bne.n	8001bf2 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8001b6c:	7abb      	ldrb	r3, [r7, #10]
 8001b6e:	b25b      	sxtb	r3, r3
 8001b70:	f023 030f 	bic.w	r3, r3, #15
 8001b74:	b25a      	sxtb	r2, r3
 8001b76:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001b88:	f107 010a 	add.w	r1, r7, #10
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2010      	movs	r0, #16
 8001b92:	f7ff ff40 	bl	8001a16 <bmi08g_set_regs>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d127      	bne.n	8001bf2 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001ba2:	f107 010a 	add.w	r1, r7, #10
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	200f      	movs	r0, #15
 8001bac:	f7ff ff08 	bl	80019c0 <bmi08g_get_regs>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8001bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11a      	bne.n	8001bf2 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8001bbc:	7abb      	ldrb	r3, [r7, #10]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	f023 0307 	bic.w	r3, r3, #7
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001bd8:	f107 010a 	add.w	r1, r7, #10
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	200f      	movs	r0, #15
 8001be2:	f7ff ff18 	bl	8001a16 <bmi08g_set_regs>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8001bea:	e002      	b.n	8001bf2 <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001bec:	23f8      	movs	r3, #248	; 0xf8
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e000      	b.n	8001bf4 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8001bf2:	bf00      	nop
        }
    }

    return rslt;
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8d7 	bl	8001dc0 <null_ptr_check>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d13a      	bne.n	8001c94 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 8001c1e:	f107 010c 	add.w	r1, r7, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	2011      	movs	r0, #17
 8001c28:	f7ff feca 	bl	80019c0 <bmi08g_get_regs>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d12d      	bne.n	8001c94 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7cdb      	ldrb	r3, [r3, #19]
 8001c3c:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8001c3e:	7b7b      	ldrb	r3, [r7, #13]
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d104      	bne.n	8001c4e <bmi08g_set_power_mode+0x4e>
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d101      	bne.n	8001c4e <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8001c4e:	7b7b      	ldrb	r3, [r7, #13]
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d104      	bne.n	8001c5e <bmi08g_set_power_mode+0x5e>
 8001c54:	7b3b      	ldrb	r3, [r7, #12]
 8001c56:	2b80      	cmp	r3, #128	; 0x80
 8001c58:	d101      	bne.n	8001c5e <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d015      	beq.n	8001c90 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001c64:	f107 010d 	add.w	r1, r7, #13
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2011      	movs	r0, #17
 8001c6e:	f7ff fed2 	bl	8001a16 <bmi08g_set_regs>
 8001c72:	4603      	mov	r3, r0
 8001c74:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6892      	ldr	r2, [r2, #8]
 8001c86:	4611      	mov	r1, r2
 8001c88:	f247 5030 	movw	r0, #30000	; 0x7530
 8001c8c:	4798      	blx	r3
 8001c8e:	e001      	b.n	8001c94 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8001c90:	23fb      	movs	r3, #251	; 0xfb
 8001c92:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 8001caa:	23c8      	movs	r3, #200	; 0xc8
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f000 f884 	bl	8001dc0 <null_ptr_check>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8001cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d140      	bne.n	8001d46 <bmi08g_get_data+0xa6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03d      	beq.n	8001d46 <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 8001cca:	f107 010c 	add.w	r1, r7, #12
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2206      	movs	r2, #6
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f7ff fe74 	bl	80019c0 <bmi08g_get_regs>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d132      	bne.n	8001d4a <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8001ce4:	7b3b      	ldrb	r3, [r7, #12]
 8001ce6:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
 8001cea:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001cec:	7d7b      	ldrb	r3, [r7, #21]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	7dbb      	ldrb	r3, [r7, #22]
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001cfc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d0c:	7d7b      	ldrb	r3, [r7, #21]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	7dbb      	ldrb	r3, [r7, #22]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001d1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001d24:	7c3b      	ldrb	r3, [r7, #16]
 8001d26:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001d28:	7c7b      	ldrb	r3, [r7, #17]
 8001d2a:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d2c:	7d7b      	ldrb	r3, [r7, #21]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7dbb      	ldrb	r3, [r7, #22]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001d3c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001d44:	e001      	b.n	8001d4a <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f000 f82d 	bl	8001dc0 <null_ptr_check>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11e      	bne.n	8001db0 <bmi08g_set_int_config+0x5a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <bmi08g_set_int_config+0x36>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db11      	blt.n	8001da8 <bmi08g_set_int_config+0x52>
 8001d84:	3b01      	subs	r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d80e      	bhi.n	8001da8 <bmi08g_set_int_config+0x52>
 8001d8a:	e006      	b.n	8001d9a <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8be 	bl	8001f10 <set_gyro_data_ready_int>
 8001d94:	4603      	mov	r3, r0
 8001d96:	73fb      	strb	r3, [r7, #15]
                break;
 8001d98:	e009      	b.n	8001dae <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f929 	bl	8001ff4 <set_fifo_int>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]
                break;
 8001da6:	e002      	b.n	8001dae <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001da8:	23f8      	movs	r3, #248	; 0xf8
 8001daa:	73fb      	strb	r3, [r7, #15]
                break;
 8001dac:	bf00      	nop
        switch (int_config->int_type)
 8001dae:	e001      	b.n	8001db4 <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001db0:	23ff      	movs	r3, #255	; 0xff
 8001db2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00f      	beq.n	8001dee <null_ptr_check+0x2e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <null_ptr_check+0x2e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <null_ptr_check+0x2e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001dee:	23ff      	movs	r3, #255	; 0xff
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e001      	b.n	8001df8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7b1b      	ldrb	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d103      	bne.n	8001e2c <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e2a:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6a1c      	ldr	r4, [r3, #32]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	7bf8      	ldrb	r0, [r7, #15]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	47a0      	blx	r4
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8001e50:	23fe      	movs	r3, #254	; 0xfe
 8001e52:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd90      	pop	{r4, r7, pc}

08001e60 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	7b1b      	ldrb	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d103      	bne.n	8001e88 <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e86:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d113      	bne.n	8001eb6 <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	7bf8      	ldrb	r0, [r7, #15]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	47a0      	blx	r4
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001eb2:	23fe      	movs	r3, #254	; 0xfe
 8001eb4:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d923      	bls.n	8001f04 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75bb      	strb	r3, [r7, #22]
 8001ec0:	e01c      	b.n	8001efc <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ec6:	7dbb      	ldrb	r3, [r7, #22]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	18d1      	adds	r1, r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	7bf8      	ldrb	r0, [r7, #15]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	47a0      	blx	r4
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001ef0:	23fe      	movs	r3, #254	; 0xfe
 8001ef2:	75fb      	strb	r3, [r7, #23]
                break;
 8001ef4:	e006      	b.n	8001f04 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	75bb      	strb	r3, [r7, #22]
 8001efc:	7dbb      	ldrb	r3, [r7, #22]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8de      	bhi.n	8001ec2 <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}

08001f10 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001f1e:	f107 010c 	add.w	r1, r7, #12
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2018      	movs	r0, #24
 8001f28:	f7ff ff6e 	bl	8001e08 <get_regs>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <set_gyro_data_ready_int+0x3c>
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00f      	beq.n	8001f6a <set_gyro_data_ready_int+0x5a>
 8001f4a:	e01b      	b.n	8001f84 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	b25a      	sxtb	r2, r3
 8001f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	733b      	strb	r3, [r7, #12]
                break;
 8001f68:	e00f      	b.n	8001f8a <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 8001f6a:	7b3b      	ldrb	r3, [r7, #12]
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	733b      	strb	r3, [r7, #12]
                break;
 8001f82:	e002      	b.n	8001f8a <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001f84:	23fb      	movs	r3, #251	; 0xfb
 8001f86:	73fb      	strb	r3, [r7, #15]
                break;
 8001f88:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d12a      	bne.n	8001fe8 <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	737b      	strb	r3, [r7, #13]
 8001fa0:	e001      	b.n	8001fa6 <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001fa6:	f107 010c 	add.w	r1, r7, #12
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	2018      	movs	r0, #24
 8001fb0:	f7ff fd31 	bl	8001a16 <bmi08g_set_regs>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d113      	bne.n	8001fe8 <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f88c 	bl	80020e0 <set_int_pin_config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	1c59      	adds	r1, r3, #1
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2015      	movs	r0, #21
 8001fe0:	f7ff fd19 	bl	8001a16 <bmi08g_set_regs>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001ffe:	2300      	movs	r3, #0
 8002000:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002002:	f107 010c 	add.w	r1, r7, #12
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	2018      	movs	r0, #24
 800200c:	f7ff fefc 	bl	8001e08 <get_regs>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d15b      	bne.n	80020d4 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <set_fifo_int+0x3c>
 800202a:	2b01      	cmp	r3, #1
 800202c:	d010      	beq.n	8002050 <set_fifo_int+0x5c>
 800202e:	e01f      	b.n	8002070 <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 8002030:	7b3b      	ldrb	r3, [r7, #12]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	b25a      	sxtb	r2, r3
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	b25b      	sxtb	r3, r3
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	b25b      	sxtb	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b25b      	sxtb	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	733b      	strb	r3, [r7, #12]
                break;
 800204e:	e012      	b.n	8002076 <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 8002050:	7b3b      	ldrb	r3, [r7, #12]
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f023 0320 	bic.w	r3, r3, #32
 8002058:	b25a      	sxtb	r2, r3
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	b25b      	sxtb	r3, r3
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	b25b      	sxtb	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	733b      	strb	r3, [r7, #12]
                break;
 800206e:	e002      	b.n	8002076 <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002070:	23fb      	movs	r3, #251	; 0xfb
 8002072:	73fb      	strb	r3, [r7, #15]
                break;
 8002074:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d12a      	bne.n	80020d4 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 800207e:	7b3b      	ldrb	r3, [r7, #12]
 8002080:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 8002088:	2340      	movs	r3, #64	; 0x40
 800208a:	737b      	strb	r3, [r7, #13]
 800208c:	e001      	b.n	8002092 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 800208e:	2300      	movs	r3, #0
 8002090:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002092:	f107 010c 	add.w	r1, r7, #12
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	2018      	movs	r0, #24
 800209c:	f7ff fcbb 	bl	8001a16 <bmi08g_set_regs>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f816 	bl	80020e0 <set_int_pin_config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80020b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	2015      	movs	r0, #21
 80020cc:	f7ff fca3 	bl	8001a16 <bmi08g_set_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 80020ea:	f107 010e 	add.w	r1, r7, #14
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	2016      	movs	r0, #22
 80020f4:	f7ff fe88 	bl	8001e08 <get_regs>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80020fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d150      	bne.n	80021a6 <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <set_int_pin_config+0x32>
 800210c:	2b01      	cmp	r3, #1
 800210e:	d020      	beq.n	8002152 <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 8002110:	e040      	b.n	8002194 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	b25a      	sxtb	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	789b      	ldrb	r3, [r3, #2]
 8002120:	b25b      	sxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b25b      	sxtb	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b25b      	sxtb	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	b25a      	sxtb	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b25b      	sxtb	r3, r3
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	73bb      	strb	r3, [r7, #14]
                break;
 8002150:	e020      	b.n	8002194 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	b25b      	sxtb	r3, r3
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	b25a      	sxtb	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	b25b      	sxtb	r3, r3
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	b25b      	sxtb	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b25b      	sxtb	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002172:	7bbb      	ldrb	r3, [r7, #14]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	f023 0308 	bic.w	r3, r3, #8
 800217a:	b25a      	sxtb	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	78db      	ldrb	r3, [r3, #3]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	b25b      	sxtb	r3, r3
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	b25b      	sxtb	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b25b      	sxtb	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	73bb      	strb	r3, [r7, #14]
                break;
 8002192:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002194:	f107 010e 	add.w	r1, r7, #14
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	2016      	movs	r0, #22
 800219e:	f7ff fc3a 	bl	8001a16 <bmi08g_set_regs>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80021bc:	1d39      	adds	r1, r7, #4
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	2201      	movs	r2, #1
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <__io_putchar+0x20>)
 80021c6:	f004 fccb 	bl	8006b60 <HAL_UART_Transmit>
	return ch;
 80021ca:	687b      	ldr	r3, [r7, #4]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000033c 	.word	0x2000033c

080021d8 <init_bmi08x>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 80021de:	483a      	ldr	r0, [pc, #232]	; (80022c8 <init_bmi08x+0xf0>)
 80021e0:	f7fe feb4 	bl	8000f4c <bmi08a_init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4619      	mov	r1, r3
 80021ee:	4837      	ldr	r0, [pc, #220]	; (80022cc <init_bmi08x+0xf4>)
 80021f0:	f000 fd96 	bl	8002d20 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <init_bmi08x+0x3a>
		rslt = bmi08g_init(&bmi08xdev);
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <init_bmi08x+0xf0>)
 80021fe:	f7ff fbad 	bl	800195c <bmi08g_init>
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	4619      	mov	r1, r3
 800220c:	4830      	ldr	r0, [pc, #192]	; (80022d0 <init_bmi08x+0xf8>)
 800220e:	f000 fd87 	bl	8002d20 <bmi08x_error_codes_print_result>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d14f      	bne.n	80022ba <init_bmi08x+0xe2>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <init_bmi08x+0xf0>)
 800221c:	220c      	movs	r2, #12
 800221e:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <init_bmi08x+0xf0>)
 8002222:	7b5b      	ldrb	r3, [r3, #13]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <init_bmi08x+0x58>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <init_bmi08x+0xf0>)
 800222a:	2203      	movs	r2, #3
 800222c:	741a      	strb	r2, [r3, #16]
 800222e:	e006      	b.n	800223e <init_bmi08x+0x66>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <init_bmi08x+0xf0>)
 8002232:	7b5b      	ldrb	r3, [r3, #13]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <init_bmi08x+0x66>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <init_bmi08x+0xf0>)
 800223a:	2203      	movs	r2, #3
 800223c:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <init_bmi08x+0xf0>)
 8002240:	2200      	movs	r2, #0
 8002242:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <init_bmi08x+0xf0>)
 8002246:	220a      	movs	r2, #10
 8002248:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 800224a:	481f      	ldr	r0, [pc, #124]	; (80022c8 <init_bmi08x+0xf0>)
 800224c:	f7fe ffd8 	bl	8001200 <bmi08a_set_power_mode>
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4619      	mov	r1, r3
 800225a:	481e      	ldr	r0, [pc, #120]	; (80022d4 <init_bmi08x+0xfc>)
 800225c:	f000 fd60 	bl	8002d20 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <init_bmi08x+0xf0>)
 8002262:	f7fe ff40 	bl	80010e6 <bmi08a_set_meas_conf>
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	4619      	mov	r1, r3
 8002270:	4819      	ldr	r0, [pc, #100]	; (80022d8 <init_bmi08x+0x100>)
 8002272:	f000 fd55 	bl	8002d20 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <init_bmi08x+0xf0>)
 8002278:	2201      	movs	r2, #1
 800227a:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_125_DPS;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <init_bmi08x+0xf0>)
 800227e:	2204      	movs	r2, #4
 8002280:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <init_bmi08x+0xf0>)
 8002284:	2201      	movs	r2, #1
 8002286:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <init_bmi08x+0xf0>)
 800228a:	2200      	movs	r2, #0
 800228c:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 800228e:	480e      	ldr	r0, [pc, #56]	; (80022c8 <init_bmi08x+0xf0>)
 8002290:	f7ff fcb6 	bl	8001c00 <bmi08g_set_power_mode>
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4619      	mov	r1, r3
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <init_bmi08x+0x104>)
 80022a0:	f000 fd3e 	bl	8002d20 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <init_bmi08x+0xf0>)
 80022a6:	f7ff fc2d 	bl	8001b04 <bmi08g_set_meas_conf>
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	4619      	mov	r1, r3
 80022b4:	480a      	ldr	r0, [pc, #40]	; (80022e0 <init_bmi08x+0x108>)
 80022b6:	f000 fd33 	bl	8002d20 <bmi08x_error_codes_print_result>
	}

	return rslt;
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200003c4 	.word	0x200003c4
 80022cc:	0800af7c 	.word	0x0800af7c
 80022d0:	0800af88 	.word	0x0800af88
 80022d4:	0800af94 	.word	0x0800af94
 80022d8:	0800afac 	.word	0x0800afac
 80022dc:	0800afc4 	.word	0x0800afc4
 80022e0:	0800afdc 	.word	0x0800afdc

080022e4 <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 8002302:	2201      	movs	r2, #1
 8002304:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 8002308:	2201      	movs	r2, #1
 800230a:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 800230c:	4920      	ldr	r1, [pc, #128]	; (8002390 <enable_bmi08x_interrupt+0xac>)
 800230e:	481f      	ldr	r0, [pc, #124]	; (800238c <enable_bmi08x_interrupt+0xa8>)
 8002310:	f7ff f82a 	bl	8001368 <bmi08a_set_int_config>
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4619      	mov	r1, r3
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <enable_bmi08x_interrupt+0xb0>)
 8002320:	f000 fcfe 	bl	8002d20 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d128      	bne.n	800237e <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 8002334:	2200      	movs	r2, #0
 8002336:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 800233a:	2200      	movs	r2, #0
 800233c:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 8002340:	2201      	movs	r2, #1
 8002342:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 8002346:	2201      	movs	r2, #1
 8002348:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 800234a:	4911      	ldr	r1, [pc, #68]	; (8002390 <enable_bmi08x_interrupt+0xac>)
 800234c:	4812      	ldr	r0, [pc, #72]	; (8002398 <enable_bmi08x_interrupt+0xb4>)
 800234e:	f7ff fd02 	bl	8001d56 <bmi08g_set_int_config>
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	4619      	mov	r1, r3
 800235c:	480f      	ldr	r0, [pc, #60]	; (800239c <enable_bmi08x_interrupt+0xb8>)
 800235e:	f000 fcdf 	bl	8002d20 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 8002362:	1db9      	adds	r1, r7, #6
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <enable_bmi08x_interrupt+0xac>)
 8002366:	2201      	movs	r2, #1
 8002368:	2018      	movs	r0, #24
 800236a:	f7ff fb29 	bl	80019c0 <bmi08g_get_regs>
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	4619      	mov	r1, r3
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <enable_bmi08x_interrupt+0xbc>)
 800237a:	f000 fcd1 	bl	8002d20 <bmi08x_error_codes_print_result>
	}

	return rslt;
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200003f4 	.word	0x200003f4
 8002390:	200003c4 	.word	0x200003c4
 8002394:	0800aff4 	.word	0x0800aff4
 8002398:	200003fc 	.word	0x200003fc
 800239c:	0800b00c 	.word	0x0800b00c
 80023a0:	0800b024 	.word	0x0800b024

080023a4 <lsb_to_mps2>:

/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width) {
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
 80023ae:	460b      	mov	r3, r1
 80023b0:	717b      	strb	r3, [r7, #5]
 80023b2:	4613      	mov	r3, r2
 80023b4:	713b      	strb	r3, [r7, #4]
	float gravity;

	float half_scale = ((1 << bit_width) / 2.0f);
 80023b6:	793b      	ldrb	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ce:	edc7 7a03 	vstr	s15, [r7, #12]

	gravity = (float) ((GRAVITY_EARTH * val * g_range) / half_scale);
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002418 <lsb_to_mps2+0x74>
 80023e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	edc7 7a02 	vstr	s15, [r7, #8]

	return gravity;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	ee07 3a90 	vmov	s15, r3
}
 8002408:	eeb0 0a67 	vmov.f32	s0, s15
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	411ce80a 	.word	0x411ce80a

0800241c <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	ed87 0a00 	vstr	s0, [r7]
 8002428:	460a      	mov	r2, r1
 800242a:	80fb      	strh	r3, [r7, #6]
 800242c:	4613      	mov	r3, r2
 800242e:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002438:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 800243c:	797b      	ldrb	r3, [r7, #5]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f860 	bl	8000504 <__aeabi_ui2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ec43 2b11 	vmov	d1, r2, r3
 800244c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002450:	f007 fe58 	bl	800a104 <pow>
 8002454:	ec51 0b10 	vmov	r0, r1, d0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002460:	f7fe f9f4 	bl	800084c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fb9c 	bl	8000ba8 <__aeabi_d2f>
 8002470:	4603      	mov	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002474:	edd7 6a00 	vldr	s13, [r7]
 8002478:	edd7 7a03 	vldr	s15, [r7, #12]
 800247c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a4:	f000 ffe9 	bl	800347a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a8:	f000 f98e 	bl	80027c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ac:	f000 fab4 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80024b0:	f000 fa8c 	bl	80029cc <MX_DMA_Init>
  MX_SPI2_Init();
 80024b4:	f000 f9ce 	bl	8002854 <MX_SPI2_Init>
  MX_TIM2_Init();
 80024b8:	f000 fa0a 	bl	80028d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80024bc:	f000 fa56 	bl	800296c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	int8_t rslt;

	uint8_t times_to_read = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	71fb      	strb	r3, [r7, #7]
	float x = 0.0, y = 0.0, z = 0.0;
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	71bb      	strb	r3, [r7, #6]
	 * Sensor variant given as parameter
	 *          For BMI085 : BMI085_VARIANT
	 *          For BMI088 : BMI088_VARIANT
	 */

	HAL_TIM_Base_Start(&htim2);
 80024da:	48a6      	ldr	r0, [pc, #664]	; (8002774 <main+0x2d8>)
 80024dc:	f004 f804 	bl	80064e8 <HAL_TIM_Base_Start>

	printf("Hello World! \r\n");
 80024e0:	48a5      	ldr	r0, [pc, #660]	; (8002778 <main+0x2dc>)
 80024e2:	f005 fd5b 	bl	8007f9c <puts>
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI088_VARIANT);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2101      	movs	r1, #1
 80024ea:	48a4      	ldr	r0, [pc, #656]	; (800277c <main+0x2e0>)
 80024ec:	f000 fbd4 	bl	8002c98 <bmi08x_interface_init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]

	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 80024f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024f8:	4619      	mov	r1, r3
 80024fa:	48a1      	ldr	r0, [pc, #644]	; (8002780 <main+0x2e4>)
 80024fc:	f000 fc10 	bl	8002d20 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8002500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 812e 	bne.w	8002766 <main+0x2ca>

		rslt = init_bmi08x();
 800250a:	f7ff fe65 	bl	80021d8 <init_bmi08x>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]
		bmi08x_error_codes_print_result("init_bmi08x", rslt);
 8002512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002516:	4619      	mov	r1, r3
 8002518:	489a      	ldr	r0, [pc, #616]	; (8002784 <main+0x2e8>)
 800251a:	f000 fc01 	bl	8002d20 <bmi08x_error_codes_print_result>
		printf("Initialized :3 \r\n");
 800251e:	489a      	ldr	r0, [pc, #616]	; (8002788 <main+0x2ec>)
 8002520:	f005 fd3c 	bl	8007f9c <puts>

//		/* Enable data ready interrupts */
		if (rslt == BMI08X_OK) {
 8002524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <main+0xa4>
			rslt = enable_bmi08x_interrupt();
 800252c:	f7ff feda 	bl	80022e4 <enable_bmi08x_interrupt>
 8002530:	4603      	mov	r3, r0
 8002532:	75fb      	strb	r3, [r7, #23]
			bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 8002534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002538:	4619      	mov	r1, r3
 800253a:	4894      	ldr	r0, [pc, #592]	; (800278c <main+0x2f0>)
 800253c:	f000 fbf0 	bl	8002d20 <bmi08x_error_codes_print_result>
		}

		if (rslt == BMI08X_OK) {
 8002540:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d120      	bne.n	800258a <main+0xee>
			printf(
					"ODR : %d  BW : %d   RANGE : %d \r\n",
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <main+0x2e0>)
 800254a:	7c9b      	ldrb	r3, [r3, #18]
			printf(
 800254c:	4619      	mov	r1, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <main+0x2e0>)
 8002550:	7c5b      	ldrb	r3, [r3, #17]
			printf(
 8002552:	461a      	mov	r2, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8002554:	4b89      	ldr	r3, [pc, #548]	; (800277c <main+0x2e0>)
 8002556:	7c1b      	ldrb	r3, [r3, #16]
			printf(
 8002558:	488d      	ldr	r0, [pc, #564]	; (8002790 <main+0x2f4>)
 800255a:	f005 fc99 	bl	8007e90 <iprintf>
			rslt = bmi08g_get_meas_conf(&bmi08xdev);
 800255e:	4887      	ldr	r0, [pc, #540]	; (800277c <main+0x2e0>)
 8002560:	f7ff faa3 	bl	8001aaa <bmi08g_get_meas_conf>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
			bmi08x_error_codes_print_result("bmi08g_get_meas_conf", rslt);
 8002568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800256c:	4619      	mov	r1, r3
 800256e:	4889      	ldr	r0, [pc, #548]	; (8002794 <main+0x2f8>)
 8002570:	f000 fbd6 	bl	8002d20 <bmi08x_error_codes_print_result>
			printf(
					"ODR : %d  BW : %d   RANGE : %d \r\n",
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <main+0x2e0>)
 8002576:	7c9b      	ldrb	r3, [r3, #18]
			printf(
 8002578:	4619      	mov	r1, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 800257a:	4b80      	ldr	r3, [pc, #512]	; (800277c <main+0x2e0>)
 800257c:	7c5b      	ldrb	r3, [r3, #17]
			printf(
 800257e:	461a      	mov	r2, r3
					bmi08xdev.accel_cfg.odr, bmi08xdev.accel_cfg.bw, bmi08xdev.accel_cfg.range);
 8002580:	4b7e      	ldr	r3, [pc, #504]	; (800277c <main+0x2e0>)
 8002582:	7c1b      	ldrb	r3, [r3, #16]
			printf(
 8002584:	4882      	ldr	r0, [pc, #520]	; (8002790 <main+0x2f4>)
 8002586:	f005 fc83 	bl	8007e90 <iprintf>
		}
		while (1) {

			if (accel_rdy) {
 800258a:	4b83      	ldr	r3, [pc, #524]	; (8002798 <main+0x2fc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d079      	beq.n	8002688 <main+0x1ec>
				rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 8002594:	4979      	ldr	r1, [pc, #484]	; (800277c <main+0x2e0>)
 8002596:	4881      	ldr	r0, [pc, #516]	; (800279c <main+0x300>)
 8002598:	f7fe fe8b 	bl	80012b2 <bmi08a_get_data>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]
				bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 80025a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a4:	4619      	mov	r1, r3
 80025a6:	487e      	ldr	r0, [pc, #504]	; (80027a0 <main+0x304>)
 80025a8:	f000 fbba 	bl	8002d20 <bmi08x_error_codes_print_result>
				accel_rdy = 0;
 80025ac:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <main+0x2fc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
				printf(
						"ACCEL Acc_Raw_X : %d  Acc_Raw_Y : %d   Acc_Raw_Z : %d ",
						 bmi08x_accel.x, bmi08x_accel.y,
 80025b2:	4b7a      	ldr	r3, [pc, #488]	; (800279c <main+0x300>)
 80025b4:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf(
 80025b8:	4619      	mov	r1, r3
						 bmi08x_accel.x, bmi08x_accel.y,
 80025ba:	4b78      	ldr	r3, [pc, #480]	; (800279c <main+0x300>)
 80025bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				printf(
 80025c0:	461a      	mov	r2, r3
						bmi08x_accel.z);
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <main+0x300>)
 80025c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				printf(
 80025c8:	4876      	ldr	r0, [pc, #472]	; (80027a4 <main+0x308>)
 80025ca:	f005 fc61 	bl	8007e90 <iprintf>

				if (bmi08xdev.variant == BMI085_VARIANT) {
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <main+0x2e0>)
 80025d0:	7b5b      	ldrb	r3, [r3, #13]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11e      	bne.n	8002614 <main+0x178>
					/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
					x = lsb_to_mps2(bmi08x_accel.x, 16, 16);
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <main+0x300>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	2210      	movs	r2, #16
 80025de:	2110      	movs	r1, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fedf 	bl	80023a4 <lsb_to_mps2>
 80025e6:	ed87 0a04 	vstr	s0, [r7, #16]
					y = lsb_to_mps2(bmi08x_accel.y, 16, 16);
 80025ea:	4b6c      	ldr	r3, [pc, #432]	; (800279c <main+0x300>)
 80025ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025f0:	2210      	movs	r2, #16
 80025f2:	2110      	movs	r1, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fed5 	bl	80023a4 <lsb_to_mps2>
 80025fa:	ed87 0a03 	vstr	s0, [r7, #12]
					z = lsb_to_mps2(bmi08x_accel.z, 16, 16);
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <main+0x300>)
 8002600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002604:	2210      	movs	r2, #16
 8002606:	2110      	movs	r1, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fecb 	bl	80023a4 <lsb_to_mps2>
 800260e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002612:	e021      	b.n	8002658 <main+0x1bc>
				} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <main+0x2e0>)
 8002616:	7b5b      	ldrb	r3, [r3, #13]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11d      	bne.n	8002658 <main+0x1bc>
					/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
					x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 800261c:	4b5f      	ldr	r3, [pc, #380]	; (800279c <main+0x300>)
 800261e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002622:	2210      	movs	r2, #16
 8002624:	2118      	movs	r1, #24
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff febc 	bl	80023a4 <lsb_to_mps2>
 800262c:	ed87 0a04 	vstr	s0, [r7, #16]
					y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <main+0x300>)
 8002632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002636:	2210      	movs	r2, #16
 8002638:	2118      	movs	r1, #24
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff feb2 	bl	80023a4 <lsb_to_mps2>
 8002640:	ed87 0a03 	vstr	s0, [r7, #12]
					z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 8002644:	4b55      	ldr	r3, [pc, #340]	; (800279c <main+0x300>)
 8002646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800264a:	2210      	movs	r2, #16
 800264c:	2118      	movs	r1, #24
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fea8 	bl	80023a4 <lsb_to_mps2>
 8002654:	ed87 0a02 	vstr	s0, [r7, #8]
				}

				/* Print the data in m/s2. */
				printf(
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f7fd ff75 	bl	8000548 <__aeabi_f2d>
 800265e:	4680      	mov	r8, r0
 8002660:	4689      	mov	r9, r1
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7fd ff70 	bl	8000548 <__aeabi_f2d>
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f7fd ff6b 	bl	8000548 <__aeabi_f2d>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800267a:	e9cd 4500 	strd	r4, r5, [sp]
 800267e:	4642      	mov	r2, r8
 8002680:	464b      	mov	r3, r9
 8002682:	4849      	ldr	r0, [pc, #292]	; (80027a8 <main+0x30c>)
 8002684:	f005 fc04 	bl	8007e90 <iprintf>
						"\t  Acc_ms2_X = %4.2f,  Acc_ms2_Y = %4.2f,  Acc_ms2_Z = %4.2f\n\r",
						x, y, z);


			}
			if (gyro_rdy) {
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <main+0x310>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	f43f af7b 	beq.w	800258a <main+0xee>
				rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 8002694:	4939      	ldr	r1, [pc, #228]	; (800277c <main+0x2e0>)
 8002696:	4846      	ldr	r0, [pc, #280]	; (80027b0 <main+0x314>)
 8002698:	f7ff fb02 	bl	8001ca0 <bmi08g_get_data>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]
				bmi08x_error_codes_print_result("bmi08g_get_data",
 80026a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4843      	ldr	r0, [pc, #268]	; (80027b4 <main+0x318>)
 80026a8:	f000 fb3a 	bl	8002d20 <bmi08x_error_codes_print_result>
						rslt);
				gyro_rdy = 0;
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <main+0x310>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
				printf(
						"GYRO  Gyr_Raw_X : %d   Gyr_Raw_Y : %d   Gyr_Raw_Z : %d   ",
						 bmi08x_gyro.x, bmi08x_gyro.y,
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <main+0x314>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf(
 80026b8:	4619      	mov	r1, r3
						 bmi08x_gyro.x, bmi08x_gyro.y,
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <main+0x314>)
 80026bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				printf(
 80026c0:	461a      	mov	r2, r3
						bmi08x_gyro.z);
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <main+0x314>)
 80026c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				printf(
 80026c8:	483b      	ldr	r0, [pc, #236]	; (80027b8 <main+0x31c>)
 80026ca:	f005 fbe1 	bl	8007e90 <iprintf>

				/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
				x = lsb_to_dps(bmi08x_gyro.x, 250, 16) * DPS_TO_RPS;
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <main+0x314>)
 80026d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d4:	2110      	movs	r1, #16
 80026d6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80027bc <main+0x320>
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fe9e 	bl	800241c <lsb_to_dps>
 80026e0:	eef0 7a40 	vmov.f32	s15, s0
 80026e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80027c0 <main+0x324>
 80026e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ec:	edc7 7a04 	vstr	s15, [r7, #16]
				y = lsb_to_dps(bmi08x_gyro.y, 250, 16) * DPS_TO_RPS;
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <main+0x314>)
 80026f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026f6:	2110      	movs	r1, #16
 80026f8:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80027bc <main+0x320>
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe8d 	bl	800241c <lsb_to_dps>
 8002702:	eef0 7a40 	vmov.f32	s15, s0
 8002706:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80027c0 <main+0x324>
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	edc7 7a03 	vstr	s15, [r7, #12]
				z = lsb_to_dps(bmi08x_gyro.z, 250, 16) * DPS_TO_RPS;
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <main+0x314>)
 8002714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002718:	2110      	movs	r1, #16
 800271a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80027bc <main+0x320>
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fe7c 	bl	800241c <lsb_to_dps>
 8002724:	eef0 7a40 	vmov.f32	s15, s0
 8002728:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027c0 <main+0x324>
 800272c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002730:	edc7 7a02 	vstr	s15, [r7, #8]

				/* Print the data in rps. */
				printf("\t  Gyr_DPS_X = %4.2f  , Gyr_DPS_Y = %4.2f  , Gyr_DPS_Z = %4.2f\n\r",
 8002734:	6938      	ldr	r0, [r7, #16]
 8002736:	f7fd ff07 	bl	8000548 <__aeabi_f2d>
 800273a:	4680      	mov	r8, r0
 800273c:	4689      	mov	r9, r1
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7fd ff02 	bl	8000548 <__aeabi_f2d>
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f7fd fefd 	bl	8000548 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002756:	e9cd 4500 	strd	r4, r5, [sp]
 800275a:	4642      	mov	r2, r8
 800275c:	464b      	mov	r3, r9
 800275e:	4819      	ldr	r0, [pc, #100]	; (80027c4 <main+0x328>)
 8002760:	f005 fb96 	bl	8007e90 <iprintf>
			if (accel_rdy) {
 8002764:	e711      	b.n	800258a <main+0xee>
			}

		}
	}

	return 0;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002772:	bf00      	nop
 8002774:	200002f0 	.word	0x200002f0
 8002778:	0800b034 	.word	0x0800b034
 800277c:	200003c4 	.word	0x200003c4
 8002780:	0800b044 	.word	0x0800b044
 8002784:	0800b05c 	.word	0x0800b05c
 8002788:	0800b068 	.word	0x0800b068
 800278c:	0800b07c 	.word	0x0800b07c
 8002790:	0800b094 	.word	0x0800b094
 8002794:	0800b0b8 	.word	0x0800b0b8
 8002798:	200003c0 	.word	0x200003c0
 800279c:	20000404 	.word	0x20000404
 80027a0:	0800b0d0 	.word	0x0800b0d0
 80027a4:	0800b0e0 	.word	0x0800b0e0
 80027a8:	0800b118 	.word	0x0800b118
 80027ac:	200003c1 	.word	0x200003c1
 80027b0:	2000040c 	.word	0x2000040c
 80027b4:	0800b158 	.word	0x0800b158
 80027b8:	0800b168 	.word	0x0800b168
 80027bc:	437a0000 	.word	0x437a0000
 80027c0:	3c8efa35 	.word	0x3c8efa35
 80027c4:	0800b1a4 	.word	0x0800b1a4

080027c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b096      	sub	sp, #88	; 0x58
 80027cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	2244      	movs	r2, #68	; 0x44
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 fee8 	bl	80075ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027dc:	463b      	mov	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ee:	f001 fbab 	bl	8003f48 <HAL_PWREx_ControlVoltageScaling>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027f8:	f000 fb90 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027fc:	2310      	movs	r3, #16
 80027fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002808:	2360      	movs	r3, #96	; 0x60
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fbed 	bl	8003ff4 <HAL_RCC_OscConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002820:	f000 fb7c 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002824:	230f      	movs	r3, #15
 8002826:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f001 ffb5 	bl	80047ac <HAL_RCC_ClockConfig>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002848:	f000 fb68 	bl	8002f1c <Error_Handler>
  }
}
 800284c:	bf00      	nop
 800284e:	3758      	adds	r7, #88	; 0x58
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <MX_SPI2_Init+0x74>)
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <MX_SPI2_Init+0x78>)
 800285c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <MX_SPI2_Init+0x74>)
 800286e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002872:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MX_SPI2_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <MX_SPI2_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_SPI2_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_SPI2_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_SPI2_Init+0x74>)
 80028a2:	2207      	movs	r2, #7
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_SPI2_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_SPI2_Init+0x74>)
 80028ae:	2208      	movs	r2, #8
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_SPI2_Init+0x74>)
 80028b4:	f002 fe5a 	bl	800556c <HAL_SPI_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80028be:	f000 fb2d 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200001fc 	.word	0x200001fc
 80028cc:	40003800 	.word	0x40003800

080028d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_TIM2_Init+0x98>)
 80028f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_TIM2_Init+0x98>)
 80028f8:	2203      	movs	r2, #3
 80028fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM2_Init+0x98>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff-1;
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_TIM2_Init+0x98>)
 8002904:	f06f 0201 	mvn.w	r2, #1
 8002908:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_TIM2_Init+0x98>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM2_Init+0x98>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002916:	4814      	ldr	r0, [pc, #80]	; (8002968 <MX_TIM2_Init+0x98>)
 8002918:	f003 fd8e 	bl	8006438 <HAL_TIM_Base_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002922:	f000 fafb 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_TIM2_Init+0x98>)
 8002934:	f003 fe40 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800293e:	f000 faed 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_TIM2_Init+0x98>)
 8002950:	f004 f830 	bl	80069b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800295a:	f000 fadf 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200002f0 	.word	0x200002f0

0800296c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002972:	4a15      	ldr	r2, [pc, #84]	; (80029c8 <MX_USART2_UART_Init+0x5c>)
 8002974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART2_UART_Init+0x58>)
 80029b0:	f004 f888 	bl	8006ac4 <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029ba:	f000 faaf 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000033c 	.word	0x2000033c
 80029c8:	40004400 	.word	0x40004400

080029cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_DMA_Init+0x48>)
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <MX_DMA_Init+0x48>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6493      	str	r3, [r2, #72]	; 0x48
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <MX_DMA_Init+0x48>)
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	200e      	movs	r0, #14
 80029f0:	f000 fe93 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029f4:	200e      	movs	r0, #14
 80029f6:	f000 feac 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 fe8b 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002a04:	200f      	movs	r0, #15
 8002a06:	f000 fea4 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <MX_GPIO_Init+0xcc>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002a7c:	481a      	ldr	r0, [pc, #104]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a7e:	f001 fa25 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_A_Pin INT_G_Pin */
  GPIO_InitStruct.Pin = INT_A_Pin|INT_G_Pin;
 8002a82:	2303      	movs	r3, #3
 8002a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4619      	mov	r1, r3
 8002a96:	4814      	ldr	r0, [pc, #80]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a98:	f001 f86e 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI085a_NSS_Pin BMI085g_NSS_Pin BMI085_PS_Pin */
  GPIO_InitStruct.Pin = BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin;
 8002a9c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8002aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002ab6:	f001 f85f 	bl	8003b78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2006      	movs	r0, #6
 8002ac0:	f000 fe2b 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ac4:	2006      	movs	r0, #6
 8002ac6:	f000 fe44 	bl	8003752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	2007      	movs	r0, #7
 8002ad0:	f000 fe23 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ad4:	2007      	movs	r0, #7
 8002ad6:	f000 fe3c 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48000800 	.word	0x48000800

08002aec <bmi08x_spi_read>:

/* USER CODE BEGIN 4 */

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]

	dev_addr = *(uint16_t*) intf_ptr;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	881a      	ldrh	r2, [r3, #0]
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <bmi08x_spi_read+0xa8>)
 8002b02:	801a      	strh	r2, [r3, #0]
//	uint16_t tx = (reg_addr) << 8;

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <bmi08x_spi_read+0xa8>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4822      	ldr	r0, [pc, #136]	; (8002b98 <bmi08x_spi_read+0xac>)
 8002b0e:	f001 f9dd 	bl	8003ecc <HAL_GPIO_WritePin>
	while(!(tx_rdy && rx_rdy));
 8002b12:	bf00      	nop
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <bmi08x_spi_read+0xb0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0fa      	beq.n	8002b14 <bmi08x_spi_read+0x28>
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <bmi08x_spi_read+0xb4>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f5      	beq.n	8002b14 <bmi08x_spi_read+0x28>
	tx_rdy = 0;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <bmi08x_spi_read+0xb0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
//	rx_rdy = 0;

	if (HAL_SPI_Transmit_DMA(&hspi2, &reg_addr, sizeof(reg_addr)) != HAL_OK) {
 8002b2e:	f107 030f 	add.w	r3, r7, #15
 8002b32:	2201      	movs	r2, #1
 8002b34:	4619      	mov	r1, r3
 8002b36:	481b      	ldr	r0, [pc, #108]	; (8002ba4 <bmi08x_spi_read+0xb8>)
 8002b38:	f002 fdbc 	bl	80056b4 <HAL_SPI_Transmit_DMA>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <bmi08x_spi_read+0x5a>
		return 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <bmi08x_spi_read+0xa0>
	}


//	tx_rdy = 0;
	while(!(tx_rdy));
 8002b46:	bf00      	nop
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <bmi08x_spi_read+0xb0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0fa      	beq.n	8002b48 <bmi08x_spi_read+0x5c>
	rx_rdy = 0;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <bmi08x_spi_read+0xb4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
	if (HAL_SPI_Receive_DMA(&hspi2, reg_data, len) != HAL_OK) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4810      	ldr	r0, [pc, #64]	; (8002ba4 <bmi08x_spi_read+0xb8>)
 8002b62:	f002 fe9b 	bl	800589c <HAL_SPI_Receive_DMA>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <bmi08x_spi_read+0x84>
			return 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00d      	b.n	8002b8c <bmi08x_spi_read+0xa0>
	}
//
//	tx_rdy = 0;
	while(!(rx_rdy));
 8002b70:	bf00      	nop
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <bmi08x_spi_read+0xb4>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0fa      	beq.n	8002b72 <bmi08x_spi_read+0x86>
	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <bmi08x_spi_read+0xa8>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4619      	mov	r1, r3
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <bmi08x_spi_read+0xac>)
 8002b86:	f001 f9a1 	bl	8003ecc <HAL_GPIO_WritePin>
//	bmi08x_delay_us(200, 0);
	return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200003c2 	.word	0x200003c2
 8002b98:	48000800 	.word	0x48000800
 8002b9c:	20000001 	.word	0x20000001
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	200001fc 	.word	0x200001fc

08002ba8 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]

	dev_addr = *(uint16_t*) intf_ptr;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <bmi08x_spi_write+0xa8>)
 8002bbe:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <bmi08x_spi_write+0xa8>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4822      	ldr	r0, [pc, #136]	; (8002c54 <bmi08x_spi_write+0xac>)
 8002bca:	f001 f97f 	bl	8003ecc <HAL_GPIO_WritePin>

	while(!(tx_rdy && rx_rdy) );
 8002bce:	bf00      	nop
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <bmi08x_spi_write+0xb0>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0fa      	beq.n	8002bd0 <bmi08x_spi_write+0x28>
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <bmi08x_spi_write+0xb4>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f5      	beq.n	8002bd0 <bmi08x_spi_write+0x28>
	tx_rdy = 0;
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <bmi08x_spi_write+0xb0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
//	rx_rdy = 0;

	if (HAL_SPI_Transmit_DMA(&hspi2, &reg_addr, sizeof(reg_addr)) != HAL_OK) {
 8002bea:	f107 030f 	add.w	r3, r7, #15
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	481b      	ldr	r0, [pc, #108]	; (8002c60 <bmi08x_spi_write+0xb8>)
 8002bf4:	f002 fd5e 	bl	80056b4 <HAL_SPI_Transmit_DMA>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <bmi08x_spi_write+0x5a>
		return 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <bmi08x_spi_write+0xa0>
	}

//	rx_rdy = 0;
//	tx_rdy = 0;
	while(!tx_rdy);
 8002c02:	bf00      	nop
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <bmi08x_spi_write+0xb0>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0fa      	beq.n	8002c04 <bmi08x_spi_write+0x5c>
	tx_rdy = 0;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <bmi08x_spi_write+0xb0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	if (HAL_SPI_Transmit_DMA(&hspi2,  reg_data, len) != HAL_OK) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4810      	ldr	r0, [pc, #64]	; (8002c60 <bmi08x_spi_write+0xb8>)
 8002c1e:	f002 fd49 	bl	80056b4 <HAL_SPI_Transmit_DMA>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <bmi08x_spi_write+0x84>
			return 1;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00d      	b.n	8002c48 <bmi08x_spi_write+0xa0>
	}
//
//	tx_rdy = 0;
	while(!tx_rdy);
 8002c2c:	bf00      	nop
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <bmi08x_spi_write+0xb0>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0fa      	beq.n	8002c2e <bmi08x_spi_write+0x86>
	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <bmi08x_spi_write+0xa8>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <bmi08x_spi_write+0xac>)
 8002c42:	f001 f943 	bl	8003ecc <HAL_GPIO_WritePin>
	return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200003c2 	.word	0x200003c2
 8002c54:	48000800 	.word	0x48000800
 8002c58:	20000001 	.word	0x20000001
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	200001fc 	.word	0x200001fc

08002c64 <bmi08x_delay_us>:

/*!
 * Set up with a timer
 */
void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <bmi08x_delay_us+0x30>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period)
 8002c76:	bf00      	nop
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <bmi08x_delay_us+0x30>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f9      	bhi.n	8002c78 <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	200002f0 	.word	0x200002f0

08002c98 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d021      	beq.n	8002cf6 <bmi08x_interface_init+0x5e>
//        }
//
//        result = coines_get_board_info(&board_info);
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		if (intf == BMI08X_SPI_INTF) {
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10e      	bne.n	8002cd6 <bmi08x_interface_init+0x3e>
//            printf("SPI Interface \n");

			/* To initialize the user SPI function */
			bmi08x->intf = BMI08X_SPI_INTF;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <bmi08x_interface_init+0x74>)
 8002cc2:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <bmi08x_interface_init+0x78>)
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085a_NSS_Pin;
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <bmi08x_interface_init+0x7c>)
 8002ccc:	2220      	movs	r2, #32
 8002cce:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085g_NSS_Pin;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <bmi08x_interface_init+0x80>)
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	801a      	strh	r2, [r3, #0]

		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	78ba      	ldrb	r2, [r7, #2]
 8002cda:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <bmi08x_interface_init+0x7c>)
 8002ce0:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <bmi08x_interface_init+0x80>)
 8002ce6:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <bmi08x_interface_init+0x84>)
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = 32;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	771a      	strb	r2, [r3, #28]
 8002cf4:	e001      	b.n	8002cfa <bmi08x_interface_init+0x62>


	} else {
		rslt = BMI08X_E_NULL_PTR;
 8002cf6:	23ff      	movs	r3, #255	; 0xff
 8002cf8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	08002aed 	.word	0x08002aed
 8002d10:	08002ba9 	.word	0x08002ba9
 8002d14:	20000412 	.word	0x20000412
 8002d18:	20000414 	.word	0x20000414
 8002d1c:	08002c65 	.word	0x08002c65

08002d20 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8081 	beq.w	8002e38 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4841      	ldr	r0, [pc, #260]	; (8002e40 <bmi08x_error_codes_print_result+0x120>)
 8002d3a:	f005 f8a9 	bl	8007e90 <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d106      	bne.n	8002d56 <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8002d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	483d      	ldr	r0, [pc, #244]	; (8002e44 <bmi08x_error_codes_print_result+0x124>)
 8002d50:	f005 f89e 	bl	8007e90 <iprintf>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}
}
 8002d54:	e070      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8002d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5a:	f113 0f02 	cmn.w	r3, #2
 8002d5e:	d106      	bne.n	8002d6e <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8002d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4838      	ldr	r0, [pc, #224]	; (8002e48 <bmi08x_error_codes_print_result+0x128>)
 8002d68:	f005 f892 	bl	8007e90 <iprintf>
}
 8002d6c:	e064      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	f113 0f03 	cmn.w	r3, #3
 8002d76:	d106      	bne.n	8002d86 <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8002d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4833      	ldr	r0, [pc, #204]	; (8002e4c <bmi08x_error_codes_print_result+0x12c>)
 8002d80:	f005 f886 	bl	8007e90 <iprintf>
}
 8002d84:	e058      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8002d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d8a:	f113 0f04 	cmn.w	r3, #4
 8002d8e:	d106      	bne.n	8002d9e <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8002d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d94:	4619      	mov	r1, r3
 8002d96:	482e      	ldr	r0, [pc, #184]	; (8002e50 <bmi08x_error_codes_print_result+0x130>)
 8002d98:	f005 f87a 	bl	8007e90 <iprintf>
}
 8002d9c:	e04c      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8002d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da2:	f113 0f05 	cmn.w	r3, #5
 8002da6:	d106      	bne.n	8002db6 <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8002da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4829      	ldr	r0, [pc, #164]	; (8002e54 <bmi08x_error_codes_print_result+0x134>)
 8002db0:	f005 f86e 	bl	8007e90 <iprintf>
}
 8002db4:	e040      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8002db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dba:	f113 0f06 	cmn.w	r3, #6
 8002dbe:	d106      	bne.n	8002dce <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8002dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4824      	ldr	r0, [pc, #144]	; (8002e58 <bmi08x_error_codes_print_result+0x138>)
 8002dc8:	f005 f862 	bl	8007e90 <iprintf>
}
 8002dcc:	e034      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8002dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd2:	f113 0f07 	cmn.w	r3, #7
 8002dd6:	d106      	bne.n	8002de6 <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	481f      	ldr	r0, [pc, #124]	; (8002e5c <bmi08x_error_codes_print_result+0x13c>)
 8002de0:	f005 f856 	bl	8007e90 <iprintf>
}
 8002de4:	e028      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8002de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dea:	f113 0f08 	cmn.w	r3, #8
 8002dee:	d106      	bne.n	8002dfe <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8002df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df4:	4619      	mov	r1, r3
 8002df6:	481a      	ldr	r0, [pc, #104]	; (8002e60 <bmi08x_error_codes_print_result+0x140>)
 8002df8:	f005 f84a 	bl	8007e90 <iprintf>
}
 8002dfc:	e01c      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8002dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e02:	f113 0f09 	cmn.w	r3, #9
 8002e06:	d106      	bne.n	8002e16 <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4815      	ldr	r0, [pc, #84]	; (8002e64 <bmi08x_error_codes_print_result+0x144>)
 8002e10:	f005 f83e 	bl	8007e90 <iprintf>
}
 8002e14:	e010      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8002e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8002e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4810      	ldr	r0, [pc, #64]	; (8002e68 <bmi08x_error_codes_print_result+0x148>)
 8002e26:	f005 f833 	bl	8007e90 <iprintf>
}
 8002e2a:	e005      	b.n	8002e38 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8002e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e30:	4619      	mov	r1, r3
 8002e32:	480e      	ldr	r0, [pc, #56]	; (8002e6c <bmi08x_error_codes_print_result+0x14c>)
 8002e34:	f005 f82c 	bl	8007e90 <iprintf>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	0800b1e8 	.word	0x0800b1e8
 8002e44:	0800b1ec 	.word	0x0800b1ec
 8002e48:	0800b208 	.word	0x0800b208
 8002e4c:	0800b230 	.word	0x0800b230
 8002e50:	0800b250 	.word	0x0800b250
 8002e54:	0800b26c 	.word	0x0800b26c
 8002e58:	0800b28c 	.word	0x0800b28c
 8002e5c:	0800b2b0 	.word	0x0800b2b0
 8002e60:	0800b2dc 	.word	0x0800b2dc
 8002e64:	0800b2fc 	.word	0x0800b2fc
 8002e68:	0800b324 	.word	0x0800b324
 8002e6c:	0800b340 	.word	0x0800b340

08002e70 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	rx_rdy = 1;
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_SPI_RxCpltCallback+0x1c>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	tx_rdy = 1;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_SPI_TxCpltCallback+0x1c>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000001 	.word	0x20000001

08002eb0 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi) { // Message received .. Do Something ...
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	if(hspi->State == HAL_SPI_STATE_READY){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_SPI_TxRxCpltCallback+0x20>

		tx_rdy = 1;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_SPI_TxRxCpltCallback+0x2c>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
		rx_rdy = 1;
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_SPI_TxRxCpltCallback+0x30>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000001 	.word	0x20000001
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_A_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <HAL_GPIO_EXTI_Callback+0x16>
    {
    	accel_rdy = 1; // Toggle The Output (LED) Pin
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x30>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == INT_G_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d102      	bne.n	8002f06 <HAL_GPIO_EXTI_Callback+0x22>
	{
		gyro_rdy = 1; // Toggle The Output (LED) Pin
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x34>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
	}
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	200003c0 	.word	0x200003c0
 8002f18:	200003c1 	.word	0x200003c1

08002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
}
 8002f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f24:	e7fe      	b.n	8002f24 <Error_Handler+0x8>
	...

08002f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_MspInit+0x44>)
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <HAL_MspInit+0x44>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_MspInit+0x44>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_MspInit+0x44>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_SPI_MspInit+0x15c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	f040 8097 	bne.w	80030c2 <HAL_SPI_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	4a47      	ldr	r2, [pc, #284]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb8:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	4a41      	ldr	r2, [pc, #260]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_SPI_MspInit+0x160>)
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fdc:	230c      	movs	r3, #12
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fec:	2305      	movs	r3, #5
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4837      	ldr	r0, [pc, #220]	; (80030d4 <HAL_SPI_MspInit+0x164>)
 8002ff8:	f000 fdbe 	bl	8003b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800300e:	2305      	movs	r3, #5
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	482f      	ldr	r0, [pc, #188]	; (80030d8 <HAL_SPI_MspInit+0x168>)
 800301a:	f000 fdad 	bl	8003b78 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003020:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <HAL_SPI_MspInit+0x170>)
 8003022:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003026:	2201      	movs	r2, #1
 8003028:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800304e:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003050:	2200      	movs	r2, #0
 8003052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003054:	4821      	ldr	r0, [pc, #132]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003056:	f000 fb97 	bl	8003788 <HAL_DMA_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8003060:	f7ff ff5c 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 8003068:	659a      	str	r2, [r3, #88]	; 0x58
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_SPI_MspInit+0x16c>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003070:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_SPI_MspInit+0x178>)
 8003074:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 8003078:	2201      	movs	r2, #1
 800307a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 800307e:	2210      	movs	r2, #16
 8003080:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 800309c:	2200      	movs	r2, #0
 800309e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80030a6:	480f      	ldr	r0, [pc, #60]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 80030a8:	f000 fb6e 	bl	8003788 <HAL_DMA_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80030b2:	f7ff ff33 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
 80030bc:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_SPI_MspInit+0x174>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40003800 	.word	0x40003800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	48000800 	.word	0x48000800
 80030d8:	48000400 	.word	0x48000400
 80030dc:	20000260 	.word	0x20000260
 80030e0:	40020044 	.word	0x40020044
 80030e4:	200002a8 	.word	0x200002a8
 80030e8:	40020058 	.word	0x40020058

080030ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d10b      	bne.n	8003116 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_TIM_Base_MspInit+0x38>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_TIM_Base_MspInit+0x38>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_TIM_Base_MspInit+0x38>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b0ac      	sub	sp, #176	; 0xb0
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2288      	movs	r2, #136	; 0x88
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fa2f 	bl	80075ac <memset>
  if(huart->Instance==USART2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_UART_MspInit+0xb0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d13b      	bne.n	80031d0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003158:	2302      	movs	r3, #2
 800315a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800315c:	2300      	movs	r3, #0
 800315e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4618      	mov	r0, r3
 8003166:	f001 fd45 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003170:	f7ff fed4 	bl	8002f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_UART_MspInit+0xb4>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_UART_MspInit+0xb4>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	6593      	str	r3, [r2, #88]	; 0x58
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_UART_MspInit+0xb4>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_UART_MspInit+0xb4>)
 800318e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003190:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_UART_MspInit+0xb4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003198:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_UART_MspInit+0xb4>)
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031a4:	230c      	movs	r3, #12
 80031a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031bc:	2307      	movs	r3, #7
 80031be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031cc:	f000 fcd4 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031d0:	bf00      	nop
 80031d2:	37b0      	adds	r7, #176	; 0xb0
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40004400 	.word	0x40004400
 80031dc:	40021000 	.word	0x40021000

080031e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <NMI_Handler+0x4>

080031e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <HardFault_Handler+0x4>

080031ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <MemManage_Handler+0x4>

080031f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <BusFault_Handler+0x4>

080031f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <UsageFault_Handler+0x4>

080031fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800322c:	f000 f97a 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_A_Pin);
 8003238:	2001      	movs	r0, #1
 800323a:	f000 fe5f 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_G_Pin);
 8003246:	2002      	movs	r0, #2
 8003248:	f000 fe58 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Channel4_IRQHandler+0x10>)
 8003256:	f000 fbaf 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000260 	.word	0x20000260

08003264 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <DMA1_Channel5_IRQHandler+0x10>)
 800326a:	f000 fba5 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200002a8 	.word	0x200002a8

08003278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	return 1;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_kill>:

int _kill(int pid, int sig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003292:	f004 f961 	bl	8007558 <__errno>
 8003296:	4603      	mov	r3, r0
 8003298:	2216      	movs	r2, #22
 800329a:	601a      	str	r2, [r3, #0]
	return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_exit>:

void _exit (int status)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ffe7 	bl	8003288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ba:	e7fe      	b.n	80032ba <_exit+0x12>

080032bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e00a      	b.n	80032e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032ce:	f3af 8000 	nop.w
 80032d2:	4601      	mov	r1, r0
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	60ba      	str	r2, [r7, #8]
 80032da:	b2ca      	uxtb	r2, r1
 80032dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	dbf0      	blt.n	80032ce <_read+0x12>
	}

return len;
 80032ec:	687b      	ldr	r3, [r7, #4]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e009      	b.n	800331c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	60ba      	str	r2, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe ff4f 	bl	80021b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3301      	adds	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	dbf1      	blt.n	8003308 <_write+0x12>
	}
	return len;
 8003324:	687b      	ldr	r3, [r7, #4]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <_close>:

int _close(int file)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
	return -1;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003356:	605a      	str	r2, [r3, #4]
	return 0;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_isatty>:

int _isatty(int file)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	return 1;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
	return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <_sbrk+0x5c>)
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <_sbrk+0x60>)
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <_sbrk+0x64>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <_sbrk+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c8:	f004 f8c6 	bl	8007558 <__errno>
 80033cc:	4603      	mov	r3, r0
 80033ce:	220c      	movs	r2, #12
 80033d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e009      	b.n	80033ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <_sbrk+0x64>)
 80033e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20018000 	.word	0x20018000
 80033f8:	00000400 	.word	0x00000400
 80033fc:	20000418 	.word	0x20000418
 8003400:	20000430 	.word	0x20000430

08003404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <SystemInit+0x20>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <SystemInit+0x20>)
 8003410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003460 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800342c:	f7ff ffea 	bl	8003404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <LoopForever+0x6>)
  ldr r1, =_edata
 8003432:	490d      	ldr	r1, [pc, #52]	; (8003468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <LoopForever+0xe>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003438:	e002      	b.n	8003440 <LoopCopyDataInit>

0800343a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800343c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343e:	3304      	adds	r3, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003444:	d3f9      	bcc.n	800343a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003448:	4c0a      	ldr	r4, [pc, #40]	; (8003474 <LoopForever+0x16>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800344c:	e001      	b.n	8003452 <LoopFillZerobss>

0800344e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003450:	3204      	adds	r2, #4

08003452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003454:	d3fb      	bcc.n	800344e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003456:	f004 f885 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800345a:	f7ff f81f 	bl	800249c <main>

0800345e <LoopForever>:

LoopForever:
    b LoopForever
 800345e:	e7fe      	b.n	800345e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003460:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800346c:	0800b7c8 	.word	0x0800b7c8
  ldr r2, =_sbss
 8003470:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003474:	20000430 	.word	0x20000430

08003478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <ADC1_2_IRQHandler>

0800347a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003484:	2003      	movs	r0, #3
 8003486:	f000 f93d 	bl	8003704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800348a:	200f      	movs	r0, #15
 800348c:	f000 f80e 	bl	80034ac <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	e001      	b.n	80034a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800349c:	f7ff fd44 	bl	8002f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034a0:	79fb      	ldrb	r3, [r7, #7]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_InitTick+0x6c>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d023      	beq.n	8003508 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_InitTick+0x70>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_InitTick+0x6c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f949 	bl	800376e <HAL_SYSTICK_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d809      	bhi.n	80034fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e8:	2200      	movs	r2, #0
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f000 f913 	bl	800371a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_InitTick+0x74>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e007      	b.n	800350c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e004      	b.n	800350c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e001      	b.n	800350c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000004 	.word	0x20000004
 8003520:	20000008 	.word	0x20000008

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c
 8003548:	2000041c 	.word	0x2000041c

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	2000041c 	.word	0x2000041c

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <__NVIC_EnableIRQ+0x38>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	; (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
         );
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d0:	d301      	bcc.n	80036d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00f      	b.n	80036f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <SysTick_Config+0x40>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036de:	210f      	movs	r1, #15
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f7ff ff8e 	bl	8003604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SysTick_Config+0x40>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <SysTick_Config+0x40>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010

08003704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff29 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff3e 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff8e 	bl	8003658 <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff5d 	bl	8003604 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff31 	bl	80035c8 <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffa2 	bl	80036c0 <SysTick_Config>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e098      	b.n	80038cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <HAL_DMA_Init+0x150>)
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d80f      	bhi.n	80037c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_DMA_Init+0x154>)
 80037ae:	4413      	add	r3, r2
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_DMA_Init+0x158>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_DMA_Init+0x15c>)
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
 80037c4:	e00e      	b.n	80037e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_DMA_Init+0x160>)
 80037ce:	4413      	add	r3, r2
 80037d0:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <HAL_DMA_Init+0x158>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_DMA_Init+0x164>)
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383e:	d039      	beq.n	80038b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <HAL_DMA_Init+0x15c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d11a      	bne.n	8003880 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_DMA_Init+0x168>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f003 031c 	and.w	r3, r3, #28
 8003856:	210f      	movs	r1, #15
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	4924      	ldr	r1, [pc, #144]	; (80038f0 <HAL_DMA_Init+0x168>)
 8003860:	4013      	ands	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <HAL_DMA_Init+0x168>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f003 031c 	and.w	r3, r3, #28
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	491d      	ldr	r1, [pc, #116]	; (80038f0 <HAL_DMA_Init+0x168>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
 800387e:	e019      	b.n	80038b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_DMA_Init+0x16c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f003 031c 	and.w	r3, r3, #28
 800388c:	210f      	movs	r1, #15
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	4917      	ldr	r1, [pc, #92]	; (80038f4 <HAL_DMA_Init+0x16c>)
 8003896:	4013      	ands	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_DMA_Init+0x16c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f003 031c 	and.w	r3, r3, #28
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	4911      	ldr	r1, [pc, #68]	; (80038f4 <HAL_DMA_Init+0x16c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40020407 	.word	0x40020407
 80038dc:	bffdfff8 	.word	0xbffdfff8
 80038e0:	cccccccd 	.word	0xcccccccd
 80038e4:	40020000 	.word	0x40020000
 80038e8:	bffdfbf8 	.word	0xbffdfbf8
 80038ec:	40020400 	.word	0x40020400
 80038f0:	400200a8 	.word	0x400200a8
 80038f4:	400204a8 	.word	0x400204a8

080038f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_DMA_Start_IT+0x20>
 8003914:	2302      	movs	r3, #2
 8003916:	e04b      	b.n	80039b0 <HAL_DMA_Start_IT+0xb8>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d13a      	bne.n	80039a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f8e0 	bl	8003b16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 020e 	orr.w	r2, r2, #14
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00f      	b.n	8003990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 020a 	orr.w	r2, r2, #10
 800398e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e005      	b.n	80039ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
 80039ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f003 031c 	and.w	r3, r3, #28
 80039d8:	2204      	movs	r2, #4
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d026      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x7a>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d021      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 021c 	and.w	r2, r3, #28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2104      	movs	r1, #4
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d071      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	e06c      	b.n	8003b0c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f003 031c 	and.w	r3, r3, #28
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02e      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xec>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d029      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 020a 	bic.w	r2, r2, #10
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 021c 	and.w	r2, r3, #28
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2102      	movs	r1, #2
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d038      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aa2:	e033      	b.n	8003b0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f003 031c 	and.w	r3, r3, #28
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02a      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x156>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d025      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020e 	bic.w	r2, r2, #14
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f003 021c 	and.w	r2, r3, #28
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
}
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f003 021c 	and.w	r2, r3, #28
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d108      	bne.n	8003b5a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b58:	e007      	b.n	8003b6a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b86:	e17f      	b.n	8003e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8171 	beq.w	8003e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d005      	beq.n	8003bb8 <HAL_GPIO_Init+0x40>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0201 	and.w	r2, r3, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d118      	bne.n	8003c58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0201 	and.w	r2, r3, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d017      	beq.n	8003c94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d123      	bne.n	8003ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	08da      	lsrs	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3208      	adds	r2, #8
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	08da      	lsrs	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3208      	adds	r2, #8
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ac 	beq.w	8003e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <HAL_GPIO_Init+0x330>)
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	4a5e      	ldr	r2, [pc, #376]	; (8003ea8 <HAL_GPIO_Init+0x330>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6613      	str	r3, [r2, #96]	; 0x60
 8003d36:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <HAL_GPIO_Init+0x330>)
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d42:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <HAL_GPIO_Init+0x334>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d6c:	d025      	beq.n	8003dba <HAL_GPIO_Init+0x242>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4f      	ldr	r2, [pc, #316]	; (8003eb0 <HAL_GPIO_Init+0x338>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01f      	beq.n	8003db6 <HAL_GPIO_Init+0x23e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4e      	ldr	r2, [pc, #312]	; (8003eb4 <HAL_GPIO_Init+0x33c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d019      	beq.n	8003db2 <HAL_GPIO_Init+0x23a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <HAL_GPIO_Init+0x340>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_GPIO_Init+0x236>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_GPIO_Init+0x344>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00d      	beq.n	8003daa <HAL_GPIO_Init+0x232>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_GPIO_Init+0x348>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <HAL_GPIO_Init+0x22e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_GPIO_Init+0x34c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_GPIO_Init+0x22a>
 8003d9e:	2306      	movs	r3, #6
 8003da0:	e00c      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e00a      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e008      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e006      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003dae:	2303      	movs	r3, #3
 8003db0:	e004      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x244>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	f002 0203 	and.w	r2, r2, #3
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	4093      	lsls	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dcc:	4937      	ldr	r1, [pc, #220]	; (8003eac <HAL_GPIO_Init+0x334>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dfe:	4a32      	ldr	r2, [pc, #200]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e04:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7c:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <HAL_GPIO_Init+0x350>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f47f ae78 	bne.w	8003b88 <HAL_GPIO_Init+0x10>
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	48000400 	.word	0x48000400
 8003eb4:	48000800 	.word	0x48000800
 8003eb8:	48000c00 	.word	0x48000c00
 8003ebc:	48001000 	.word	0x48001000
 8003ec0:	48001400 	.word	0x48001400
 8003ec4:	48001800 	.word	0x48001800
 8003ec8:	40010400 	.word	0x40010400

08003ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003edc:	787b      	ldrb	r3, [r7, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe ffe2 	bl	8002ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40007000 	.word	0x40007000

08003f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f56:	d130      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f58:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d038      	beq.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2232      	movs	r2, #50	; 0x32
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0c9b      	lsrs	r3, r3, #18
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8c:	e002      	b.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d102      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f2      	bne.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d110      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d007      	beq.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	20000004 	.word	0x20000004
 8003ff0:	431bde83 	.word	0x431bde83

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e3ca      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004006:	4b97      	ldr	r3, [pc, #604]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004010:	4b94      	ldr	r3, [pc, #592]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80e4 	beq.w	80041f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_RCC_OscConfig+0x4a>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b0c      	cmp	r3, #12
 8004032:	f040 808b 	bne.w	800414c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 8087 	bne.w	800414c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800403e:	4b89      	ldr	r3, [pc, #548]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e3a2      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	4b82      	ldr	r3, [pc, #520]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_RCC_OscConfig+0x7c>
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406e:	e005      	b.n	800407c <HAL_RCC_OscConfig+0x88>
 8004070:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407c:	4293      	cmp	r3, r2
 800407e:	d223      	bcs.n	80040c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fd55 	bl	8004b34 <RCC_SetFlashLatencyFromMSIRange>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e383      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004094:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a72      	ldr	r2, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b70      	ldr	r3, [pc, #448]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	496d      	ldr	r1, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b2:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	4968      	ldr	r1, [pc, #416]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
 80040c6:	e025      	b.n	8004114 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040ce:	f043 0308 	orr.w	r3, r3, #8
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4960      	ldr	r1, [pc, #384]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fd15 	bl	8004b34 <RCC_SetFlashLatencyFromMSIRange>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e343      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004114:	f000 fc4a 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b52      	ldr	r3, [pc, #328]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	4950      	ldr	r1, [pc, #320]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	4a4e      	ldr	r2, [pc, #312]	; (800426c <HAL_RCC_OscConfig+0x278>)
 8004132:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004134:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff f9b7 	bl	80034ac <HAL_InitTick>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d052      	beq.n	80041ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	e327      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d032      	beq.n	80041ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004154:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004160:	f7ff f9f4 	bl	800354c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004168:	f7ff f9f0 	bl	800354c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e310      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a36      	ldr	r2, [pc, #216]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800418c:	f043 0308 	orr.w	r3, r3, #8
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b34      	ldr	r3, [pc, #208]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4931      	ldr	r1, [pc, #196]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	492c      	ldr	r1, [pc, #176]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
 80041b8:	e01a      	b.n	80041f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041c6:	f7ff f9c1 	bl	800354c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041ce:	f7ff f9bd 	bl	800354c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e2dd      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f0      	bne.n	80041ce <HAL_RCC_OscConfig+0x1da>
 80041ec:	e000      	b.n	80041f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d074      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d005      	beq.n	800420e <HAL_RCC_OscConfig+0x21a>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d10b      	bne.n	8004226 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d064      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2f0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d160      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e2ba      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x24a>
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e026      	b.n	800428c <HAL_RCC_OscConfig+0x298>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004246:	d115      	bne.n	8004274 <HAL_RCC_OscConfig+0x280>
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a05      	ldr	r2, [pc, #20]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800424e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a02      	ldr	r2, [pc, #8]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e014      	b.n	800428c <HAL_RCC_OscConfig+0x298>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	0800b364 	.word	0x0800b364
 800426c:	20000004 	.word	0x20000004
 8004270:	20000008 	.word	0x20000008
 8004274:	4ba0      	ldr	r3, [pc, #640]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a9f      	ldr	r2, [pc, #636]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b9d      	ldr	r3, [pc, #628]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a9c      	ldr	r2, [pc, #624]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7ff f95a 	bl	800354c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7ff f956 	bl	800354c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e276      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ae:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x2a8>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7ff f946 	bl	800354c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7ff f942 	bl	800354c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e262      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d6:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2d0>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d060      	beq.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x310>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d119      	bne.n	8004332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d116      	bne.n	8004332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004304:	4b7c      	ldr	r3, [pc, #496]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x328>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e23f      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	4973      	ldr	r1, [pc, #460]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	e040      	b.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7ff f901 	bl	800354c <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434e:	f7ff f8fd 	bl	800354c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e21d      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004360:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	495f      	ldr	r1, [pc, #380]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e018      	b.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5c      	ldr	r2, [pc, #368]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7ff f8dd 	bl	800354c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7ff f8d9 	bl	800354c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1f9      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03c      	beq.n	800443a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01c      	beq.n	8004402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7ff f8b8 	bl	800354c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7ff f8b4 	bl	800354c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1d4      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ef      	beq.n	80043e0 <HAL_RCC_OscConfig+0x3ec>
 8004400:	e01b      	b.n	800443a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004412:	f7ff f89b 	bl	800354c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441a:	f7ff f897 	bl	800354c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1b7      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ef      	bne.n	800441a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a6 	beq.w	8004594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	6593      	str	r3, [r2, #88]	; 0x58
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004470:	2301      	movs	r3, #1
 8004472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d118      	bne.n	80044b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448c:	f7ff f85e 	bl	800354c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7ff f85a 	bl	800354c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e17a      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d108      	bne.n	80044cc <HAL_RCC_OscConfig+0x4d8>
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ca:	e029      	b.n	8004520 <HAL_RCC_OscConfig+0x52c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d115      	bne.n	8004500 <HAL_RCC_OscConfig+0x50c>
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a03      	ldr	r2, [pc, #12]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f4:	e014      	b.n	8004520 <HAL_RCC_OscConfig+0x52c>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40007000 	.word	0x40007000
 8004500:	4b9c      	ldr	r3, [pc, #624]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a9b      	ldr	r2, [pc, #620]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004510:	4b98      	ldr	r3, [pc, #608]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a97      	ldr	r2, [pc, #604]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7ff f810 	bl	800354c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7ff f80c 	bl	800354c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e12a      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ed      	beq.n	8004530 <HAL_RCC_OscConfig+0x53c>
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fe fff9 	bl	800354c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fe fff5 	bl	800354c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e113      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	4b7f      	ldr	r3, [pc, #508]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ed      	bne.n	800455e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b7a      	ldr	r3, [pc, #488]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	4a79      	ldr	r2, [pc, #484]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80fe 	beq.w	800479a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	f040 80d0 	bne.w	8004748 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045a8:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0203 	and.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d130      	bne.n	800461e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	3b01      	subs	r3, #1
 80045c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d127      	bne.n	800461e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d11f      	bne.n	800461e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e8:	2a07      	cmp	r2, #7
 80045ea:	bf14      	ite	ne
 80045ec:	2201      	movne	r2, #1
 80045ee:	2200      	moveq	r2, #0
 80045f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d113      	bne.n	800461e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d109      	bne.n	800461e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	3b01      	subs	r3, #1
 8004618:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d06e      	beq.n	80046fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d069      	beq.n	80046f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004630:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0ad      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a4b      	ldr	r2, [pc, #300]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800464c:	f7fe ff7e 	bl	800354c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe ff7a 	bl	800354c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e09a      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004672:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCC_OscConfig+0x784>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004682:	3a01      	subs	r2, #1
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800468c:	0212      	lsls	r2, r2, #8
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004694:	0852      	lsrs	r2, r2, #1
 8004696:	3a01      	subs	r2, #1
 8004698:	0552      	lsls	r2, r2, #21
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046a0:	0852      	lsrs	r2, r2, #1
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0652      	lsls	r2, r2, #25
 80046a6:	4311      	orrs	r1, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ac:	0912      	lsrs	r2, r2, #4
 80046ae:	0452      	lsls	r2, r2, #17
 80046b0:	430a      	orrs	r2, r1
 80046b2:	4930      	ldr	r1, [pc, #192]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046b8:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046d0:	f7fe ff3c 	bl	800354c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fe ff38 	bl	800354c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e058      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f6:	e050      	b.n	800479a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e04f      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d148      	bne.n	800479a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a19      	ldr	r2, [pc, #100]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800470e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004714:	4b17      	ldr	r3, [pc, #92]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004720:	f7fe ff14 	bl	800354c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe ff10 	bl	800354c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e030      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x734>
 8004746:	e028      	b.n	800479a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d023      	beq.n	8004796 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_RCC_OscConfig+0x780>)
 8004754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fe fef7 	bl	800354c <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004760:	e00c      	b.n	800477c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fe fef3 	bl	800354c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d905      	bls.n	800477c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e013      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
 8004774:	40021000 	.word	0x40021000
 8004778:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCC_OscConfig+0x7b0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ec      	bne.n	8004762 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_OscConfig+0x7b0>)
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4905      	ldr	r1, [pc, #20]	; (80047a4 <HAL_RCC_OscConfig+0x7b0>)
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_OscConfig+0x7b4>)
 8004790:	4013      	ands	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
 8004794:	e001      	b.n	800479a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	feeefffc 	.word	0xfeeefffc

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0e7      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b75      	ldr	r3, [pc, #468]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4970      	ldr	r1, [pc, #448]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b6e      	ldr	r3, [pc, #440]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0cf      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b66      	ldr	r3, [pc, #408]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4960      	ldr	r1, [pc, #384]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d04c      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004832:	4b5a      	ldr	r3, [pc, #360]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d121      	bne.n	8004882 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0a6      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484a:	4b54      	ldr	r3, [pc, #336]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e09a      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004862:	4b4e      	ldr	r3, [pc, #312]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e08e      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004872:	4b4a      	ldr	r3, [pc, #296]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e086      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b46      	ldr	r3, [pc, #280]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4943      	ldr	r1, [pc, #268]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fe fe5a 	bl	800354c <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe fe56 	bl	800354c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e06e      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d010      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048dc:	429a      	cmp	r2, r3
 80048de:	d208      	bcs.n	80048f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e0:	4b2e      	ldr	r3, [pc, #184]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	492b      	ldr	r1, [pc, #172]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f2:	4b29      	ldr	r3, [pc, #164]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d210      	bcs.n	8004922 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 0207 	bic.w	r2, r3, #7
 8004908:	4923      	ldr	r1, [pc, #140]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_RCC_ClockConfig+0x1ec>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d001      	beq.n	8004922 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e036      	b.n	8004990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492e:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4918      	ldr	r1, [pc, #96]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4910      	ldr	r1, [pc, #64]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004960:	f000 f824 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	490b      	ldr	r1, [pc, #44]	; (80049a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <HAL_RCC_ClockConfig+0x1f8>)
 800497e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fd91 	bl	80034ac <HAL_InitTick>
 800498a:	4603      	mov	r3, r0
 800498c:	72fb      	strb	r3, [r7, #11]

  return status;
 800498e:	7afb      	ldrb	r3, [r7, #11]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40022000 	.word	0x40022000
 800499c:	40021000 	.word	0x40021000
 80049a0:	0800b364 	.word	0x0800b364
 80049a4:	20000004 	.word	0x20000004
 80049a8:	20000008 	.word	0x20000008

080049ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x34>
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d121      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d11e      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049e0:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e005      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049fc:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a08:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <HAL_RCC_GetSysClockFreq+0x110>)
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e004      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a30:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d134      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0xac>
 8004a50:	e005      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCC_GetSysClockFreq+0x110>)
 8004a54:	617b      	str	r3, [r7, #20]
      break;
 8004a56:	e005      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a5a:	617b      	str	r3, [r7, #20]
      break;
 8004a5c:	e002      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	617b      	str	r3, [r7, #20]
      break;
 8004a62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	3301      	adds	r3, #1
 8004a70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	fb03 f202 	mul.w	r2, r3, r2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	0e5b      	lsrs	r3, r3, #25
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	3301      	adds	r3, #1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	0800b37c 	.word	0x0800b37c
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200

08004ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000004 	.word	0x20000004

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	0800b374 	.word	0x0800b374

08004b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b0c:	f7ff ffda 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0adb      	lsrs	r3, r3, #11
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0800b374 	.word	0x0800b374

08004b34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b4c:	f7ff f9ee 	bl	8003f2c <HAL_PWREx_GetVoltageRange>
 8004b50:	6178      	str	r0, [r7, #20]
 8004b52:	e014      	b.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	4a24      	ldr	r2, [pc, #144]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b6c:	f7ff f9de 	bl	8003f2c <HAL_PWREx_GetVoltageRange>
 8004b70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b84:	d10b      	bne.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d919      	bls.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b90:	d902      	bls.n	8004b98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b92:	2302      	movs	r3, #2
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e013      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b98:	2301      	movs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e010      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d902      	bls.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e00a      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d102      	bne.n	8004bb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e004      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b70      	cmp	r3, #112	; 0x70
 8004bba:	d101      	bne.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f023 0207 	bic.w	r2, r3, #7
 8004bc8:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d001      	beq.n	8004be2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40022000 	.word	0x40022000

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c00:	2300      	movs	r3, #0
 8004c02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d041      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c18:	d02a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c1e:	d824      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c24:	d008      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c2a:	d81e      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d010      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c36:	e018      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c38:	4b86      	ldr	r3, [pc, #536]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a85      	ldr	r2, [pc, #532]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c44:	e015      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fabb 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c56:	e00c      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3320      	adds	r3, #32
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fba6 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c78:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c86:	4973      	ldr	r1, [pc, #460]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c8e:	e001      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d041      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ca8:	d02a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cae:	d824      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb4:	d008      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cba:	d81e      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d010      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cc8:	4b62      	ldr	r3, [pc, #392]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd4:	e015      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fa73 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce6:	e00c      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3320      	adds	r3, #32
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb5e 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cf8:	e003      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d08:	4b52      	ldr	r3, [pc, #328]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d16:	494f      	ldr	r1, [pc, #316]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80a0 	beq.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4c:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6593      	str	r3, [r2, #88]	; 0x58
 8004d58:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d64:	2301      	movs	r3, #1
 8004d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3a      	ldr	r2, [pc, #232]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d74:	f7fe fbea 	bl	800354c <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7a:	e009      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7c:	f7fe fbe6 	bl	800354c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d902      	bls.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d8e:	e005      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d90:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ef      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d15c      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d019      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dcc:	4b21      	ldr	r3, [pc, #132]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd2:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fba5 	bl	800354c <HAL_GetTick>
 8004e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e04:	e00b      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fe fba1 	bl	800354c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d902      	bls.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e1c:	e006      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ec      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e42:	4904      	ldr	r1, [pc, #16]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e4a:	e009      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	74bb      	strb	r3, [r7, #18]
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e60:	7c7b      	ldrb	r3, [r7, #17]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e66:	4b9e      	ldr	r3, [pc, #632]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	4a9d      	ldr	r2, [pc, #628]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e7e:	4b98      	ldr	r3, [pc, #608]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f023 0203 	bic.w	r2, r3, #3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	4994      	ldr	r1, [pc, #592]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea0:	4b8f      	ldr	r3, [pc, #572]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f023 020c 	bic.w	r2, r3, #12
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	498c      	ldr	r1, [pc, #560]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ec2:	4b87      	ldr	r3, [pc, #540]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	4983      	ldr	r1, [pc, #524]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ee4:	4b7e      	ldr	r3, [pc, #504]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	497b      	ldr	r1, [pc, #492]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f06:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f14:	4972      	ldr	r1, [pc, #456]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f28:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	496a      	ldr	r1, [pc, #424]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f4a:	4b65      	ldr	r3, [pc, #404]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	4961      	ldr	r1, [pc, #388]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	4959      	ldr	r1, [pc, #356]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f8e:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	4950      	ldr	r1, [pc, #320]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb0:	4b4b      	ldr	r3, [pc, #300]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	4948      	ldr	r1, [pc, #288]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd2:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	493f      	ldr	r1, [pc, #252]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d028      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005002:	4937      	ldr	r1, [pc, #220]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005012:	d106      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a31      	ldr	r2, [pc, #196]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501e:	60d3      	str	r3, [r2, #12]
 8005020:	e011      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502a:	d10c      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	2101      	movs	r1, #1
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f8c8 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d028      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005052:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	491f      	ldr	r1, [pc, #124]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005070:	d106      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507c:	60d3      	str	r3, [r2, #12]
 800507e:	e011      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2101      	movs	r1, #1
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f899 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02b      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	4908      	ldr	r1, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ce:	d109      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	e014      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f867 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005114:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005122:	4928      	ldr	r1, [pc, #160]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005132:	d10d      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f844 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	74bb      	strb	r3, [r7, #18]
 800514e:	e011      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3320      	adds	r3, #32
 800515e:	2102      	movs	r1, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f925 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518e:	490d      	ldr	r1, [pc, #52]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000

080051c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051d6:	4b75      	ldr	r3, [pc, #468]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d018      	beq.n	8005214 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051e2:	4b72      	ldr	r3, [pc, #456]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0203 	and.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d10d      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
       ||
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051fa:	4b6c      	ldr	r3, [pc, #432]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
       ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d047      	beq.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	e044      	b.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d018      	beq.n	800524e <RCCEx_PLLSAI1_Config+0x86>
 800521c:	2b03      	cmp	r3, #3
 800521e:	d825      	bhi.n	800526c <RCCEx_PLLSAI1_Config+0xa4>
 8005220:	2b01      	cmp	r3, #1
 8005222:	d002      	beq.n	800522a <RCCEx_PLLSAI1_Config+0x62>
 8005224:	2b02      	cmp	r3, #2
 8005226:	d009      	beq.n	800523c <RCCEx_PLLSAI1_Config+0x74>
 8005228:	e020      	b.n	800526c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800522a:	4b60      	ldr	r3, [pc, #384]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11d      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523a:	e01a      	b.n	8005272 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800523c:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524c:	e013      	b.n	8005276 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800526a:	e006      	b.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e004      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800527a:	bf00      	nop
    }

    if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005282:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	430b      	orrs	r3, r1
 8005298:	4944      	ldr	r1, [pc, #272]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d17d      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052a4:	4b41      	ldr	r3, [pc, #260]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a40      	ldr	r2, [pc, #256]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe f94c 	bl	800354c <HAL_GetTick>
 80052b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052b6:	e009      	b.n	80052cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b8:	f7fe f948 	bl	800354c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d902      	bls.n	80052cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	73fb      	strb	r3, [r7, #15]
        break;
 80052ca:	e005      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052cc:	4b37      	ldr	r3, [pc, #220]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ef      	bne.n	80052b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d160      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d111      	bne.n	8005308 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e4:	4b31      	ldr	r3, [pc, #196]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6892      	ldr	r2, [r2, #8]
 80052f4:	0211      	lsls	r1, r2, #8
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68d2      	ldr	r2, [r2, #12]
 80052fa:	0912      	lsrs	r2, r2, #4
 80052fc:	0452      	lsls	r2, r2, #17
 80052fe:	430a      	orrs	r2, r1
 8005300:	492a      	ldr	r1, [pc, #168]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
 8005306:	e027      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d112      	bne.n	8005334 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6892      	ldr	r2, [r2, #8]
 800531e:	0211      	lsls	r1, r2, #8
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6912      	ldr	r2, [r2, #16]
 8005324:	0852      	lsrs	r2, r2, #1
 8005326:	3a01      	subs	r2, #1
 8005328:	0552      	lsls	r2, r2, #21
 800532a:	430a      	orrs	r2, r1
 800532c:	491f      	ldr	r1, [pc, #124]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]
 8005332:	e011      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800533c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6952      	ldr	r2, [r2, #20]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	430a      	orrs	r2, r1
 8005352:	4916      	ldr	r1, [pc, #88]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fe f8f2 	bl	800354c <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800536a:	e009      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800536c:	f7fe f8ee 	bl	800354c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d902      	bls.n	8005380 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	73fb      	strb	r3, [r7, #15]
          break;
 800537e:	e005      	b.n	800538c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	4904      	ldr	r1, [pc, #16]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053be:	4b6a      	ldr	r3, [pc, #424]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053ca:	4b67      	ldr	r3, [pc, #412]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0203 	and.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10d      	bne.n	80053f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
       ||
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053e2:	4b61      	ldr	r3, [pc, #388]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
       ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d047      	beq.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e044      	b.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d018      	beq.n	8005436 <RCCEx_PLLSAI2_Config+0x86>
 8005404:	2b03      	cmp	r3, #3
 8005406:	d825      	bhi.n	8005454 <RCCEx_PLLSAI2_Config+0xa4>
 8005408:	2b01      	cmp	r3, #1
 800540a:	d002      	beq.n	8005412 <RCCEx_PLLSAI2_Config+0x62>
 800540c:	2b02      	cmp	r3, #2
 800540e:	d009      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x74>
 8005410:	e020      	b.n	8005454 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005412:	4b55      	ldr	r3, [pc, #340]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11d      	bne.n	800545a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005422:	e01a      	b.n	800545a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005434:	e013      	b.n	800545e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005436:	4b4c      	ldr	r3, [pc, #304]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005442:	4b49      	ldr	r3, [pc, #292]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005452:	e006      	b.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e004      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005462:	bf00      	nop
    }

    if(status == HAL_OK)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800546a:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	430b      	orrs	r3, r1
 8005480:	4939      	ldr	r1, [pc, #228]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d167      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a35      	ldr	r2, [pc, #212]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005498:	f7fe f858 	bl	800354c <HAL_GetTick>
 800549c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800549e:	e009      	b.n	80054b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054a0:	f7fe f854 	bl	800354c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d902      	bls.n	80054b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	73fb      	strb	r3, [r7, #15]
        break;
 80054b2:	e005      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054b4:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ef      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d14a      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d111      	bne.n	80054f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054cc:	4b26      	ldr	r3, [pc, #152]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6892      	ldr	r2, [r2, #8]
 80054dc:	0211      	lsls	r1, r2, #8
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	0912      	lsrs	r2, r2, #4
 80054e4:	0452      	lsls	r2, r2, #17
 80054e6:	430a      	orrs	r2, r1
 80054e8:	491f      	ldr	r1, [pc, #124]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	614b      	str	r3, [r1, #20]
 80054ee:	e011      	b.n	8005514 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054f0:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	0211      	lsls	r1, r2, #8
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6912      	ldr	r2, [r2, #16]
 8005506:	0852      	lsrs	r2, r2, #1
 8005508:	3a01      	subs	r2, #1
 800550a:	0652      	lsls	r2, r2, #25
 800550c:	430a      	orrs	r2, r1
 800550e:	4916      	ldr	r1, [pc, #88]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fe f814 	bl	800354c <HAL_GetTick>
 8005524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005526:	e009      	b.n	800553c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005528:	f7fe f810 	bl	800354c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d902      	bls.n	800553c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	73fb      	strb	r3, [r7, #15]
          break;
 800553a:	e005      	b.n	8005548 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ef      	beq.n	8005528 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	4904      	ldr	r1, [pc, #16]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005558:	4313      	orrs	r3, r2
 800555a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000

0800556c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e095      	b.n	80056aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d108      	bne.n	8005598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558e:	d009      	beq.n	80055a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
 8005596:	e005      	b.n	80055a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fd fcd6 	bl	8002f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055e4:	d902      	bls.n	80055ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e002      	b.n	80055f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055fa:	d007      	beq.n	800560c <HAL_SPI_Init+0xa0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005604:	d002      	beq.n	800560c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	ea42 0103 	orr.w	r1, r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	f003 0204 	and.w	r2, r3, #4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005688:	ea42 0103 	orr.w	r1, r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_SPI_Transmit_DMA+0x20>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0d8      	b.n	8005886 <HAL_SPI_Transmit_DMA+0x1d2>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d002      	beq.n	80056ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
 80056ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ec:	e0c6      	b.n	800587c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit_DMA+0x46>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056fe:	e0bd      	b.n	800587c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2203      	movs	r2, #3
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d10f      	bne.n	800576c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	4a47      	ldr	r2, [pc, #284]	; (8005890 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	4a46      	ldr	r2, [pc, #280]	; (8005894 <HAL_SPI_Transmit_DMA+0x1e0>)
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	4a45      	ldr	r2, [pc, #276]	; (8005898 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	2200      	movs	r2, #0
 800578a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800579a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a4:	d82d      	bhi.n	8005802 <HAL_SPI_Transmit_DMA+0x14e>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d127      	bne.n	8005802 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057de:	e010      	b.n	8005802 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3301      	adds	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4619      	mov	r1, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005818:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800581a:	f7fe f86d 	bl	80038f8 <HAL_DMA_Start_IT>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005828:	f043 0210 	orr.w	r2, r3, #16
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800583c:	e01e      	b.n	800587c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d007      	beq.n	800585c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0220 	orr.w	r2, r2, #32
 800586a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0202 	orr.w	r2, r2, #2
 800587a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	0800602b 	.word	0x0800602b
 8005894:	08005e4d 	.word	0x08005e4d
 8005898:	0800607f 	.word	0x0800607f

0800589c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d110      	bne.n	80058d8 <HAL_SPI_Receive_DMA+0x3c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058be:	d10b      	bne.n	80058d8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2204      	movs	r2, #4
 80058c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f908 	bl	8005ae4 <HAL_SPI_TransmitReceive_DMA>
 80058d4:	4603      	mov	r3, r0
 80058d6:	e0fb      	b.n	8005ad0 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_SPI_Receive_DMA+0x4a>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0f4      	b.n	8005ad0 <HAL_SPI_Receive_DMA+0x234>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
 80058fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058fe:	e0e2      	b.n	8005ac6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_SPI_Receive_DMA+0x70>
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005910:	e0d9      	b.n	8005ac6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2204      	movs	r2, #4
 8005916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005956:	d10f      	bne.n	8005978 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005966:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005976:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005986:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005990:	d908      	bls.n	80059a4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	e042      	b.n	8005a2a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059b2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059be:	d134      	bne.n	8005a2a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d111      	bne.n	8005a04 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a02:	e012      	b.n	8005a2a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a12:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3301      	adds	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <HAL_SPI_Receive_DMA+0x23c>)
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	4a29      	ldr	r2, [pc, #164]	; (8005adc <HAL_SPI_Receive_DMA+0x240>)
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <HAL_SPI_Receive_DMA+0x244>)
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a46:	2200      	movs	r2, #0
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	4619      	mov	r1, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a64:	f7fd ff48 	bl	80038f8 <HAL_DMA_Start_IT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	f043 0210 	orr.w	r2, r3, #16
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005a86:	e01e      	b.n	8005ac6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d007      	beq.n	8005aa6 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0220 	orr.w	r2, r2, #32
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	08006047 	.word	0x08006047
 8005adc:	08005ef3 	.word	0x08005ef3
 8005ae0:	0800607f 	.word	0x0800607f

08005ae4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e16c      	b.n	8005dde <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b12:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d00d      	beq.n	8005b3c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b26:	d106      	bne.n	8005b36 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005b30:	7dbb      	ldrb	r3, [r7, #22]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b3a:	e14b      	b.n	8005dd4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b52:	e13f      	b.n	8005dd4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d003      	beq.n	8005b68 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2205      	movs	r2, #5
 8005b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	887a      	ldrh	r2, [r7, #2]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	887a      	ldrh	r2, [r7, #2]
 8005b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	887a      	ldrh	r2, [r7, #2]
 8005b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005bb0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bba:	d908      	bls.n	8005bce <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bca:	605a      	str	r2, [r3, #4]
 8005bcc:	e06f      	b.n	8005cae <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bdc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d126      	bne.n	8005c38 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10f      	bne.n	8005c16 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c04:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c14:	e010      	b.n	8005c38 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c24:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3301      	adds	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c42:	d134      	bne.n	8005cae <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c52:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d111      	bne.n	8005c88 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c72:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c86:	e012      	b.n	8005cae <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c96:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d108      	bne.n	8005ccc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	4a4a      	ldr	r2, [pc, #296]	; (8005de8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	4a49      	ldr	r2, [pc, #292]	; (8005dec <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cca:	e007      	b.n	8005cdc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	4a47      	ldr	r2, [pc, #284]	; (8005df0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	4a46      	ldr	r2, [pc, #280]	; (8005df4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	4a45      	ldr	r2, [pc, #276]	; (8005df8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005d06:	f7fd fdf7 	bl	80038f8 <HAL_DMA_Start_IT>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00c      	beq.n	8005d2a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	f043 0210 	orr.w	r2, r3, #16
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d28:	e054      	b.n	8005dd4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	2200      	movs	r2, #0
 8005d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	2200      	movs	r2, #0
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	4619      	mov	r1, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d72:	f7fd fdc1 	bl	80038f8 <HAL_DMA_Start_IT>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	f043 0210 	orr.w	r2, r3, #16
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d94:	e01e      	b.n	8005dd4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0220 	orr.w	r2, r2, #32
 8005dc2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0202 	orr.w	r2, r2, #2
 8005dd2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	08006047 	.word	0x08006047
 8005dec:	08005ef3 	.word	0x08005ef3
 8005df0:	08006063 	.word	0x08006063
 8005df4:	08005f9b 	.word	0x08005f9b
 8005df8:	0800607f 	.word	0x0800607f

08005dfc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5a:	f7fd fb77 	bl	800354c <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d03b      	beq.n	8005ee6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0220 	bic.w	r2, r2, #32
 8005e7c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0202 	bic.w	r2, r2, #2
 8005e8c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	2164      	movs	r1, #100	; 0x64
 8005e92:	6978      	ldr	r0, [r7, #20]
 8005e94:	f000 fa8a 	bl	80063ac <SPI_EndRxTxTransaction>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f7ff ffaa 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ee4:	e002      	b.n	8005eec <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7fc ffd2 	bl	8002e90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f00:	f7fd fb24 	bl	800354c <HAL_GetTick>
 8005f04:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d03c      	beq.n	8005f8e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0220 	bic.w	r2, r2, #32
 8005f22:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10d      	bne.n	8005f48 <SPI_DMAReceiveCplt+0x56>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f34:	d108      	bne.n	8005f48 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0203 	bic.w	r2, r2, #3
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	e007      	b.n	8005f58 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9cd 	bl	80062fc <SPI_EndRxTransaction>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff ff56 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f8c:	e002      	b.n	8005f94 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7fc ff6e 	bl	8002e70 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa8:	f7fd fad0 	bl	800354c <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d030      	beq.n	800601e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0220 	bic.w	r2, r2, #32
 8005fca:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	2164      	movs	r1, #100	; 0x64
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f9eb 	bl	80063ac <SPI_EndRxTxTransaction>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0203 	bic.w	r2, r2, #3
 8005ff6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff ff0e 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800601c:	e002      	b.n	8006024 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7fc ff46 	bl	8002eb0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff fedf 	bl	8005dfc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff fedb 	bl	8005e10 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fed7 	bl	8005e24 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0203 	bic.w	r2, r2, #3
 800609a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	f043 0210 	orr.w	r2, r3, #16
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff fec1 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060d0:	f7fd fa3c 	bl	800354c <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060e0:	f7fd fa34 	bl	800354c <HAL_GetTick>
 80060e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	0d1b      	lsrs	r3, r3, #20
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060f6:	e054      	b.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d050      	beq.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006100:	f7fd fa24 	bl	800354c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	429a      	cmp	r2, r3
 800610e:	d902      	bls.n	8006116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d13d      	bne.n	8006192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800612e:	d111      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006138:	d004      	beq.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006142:	d107      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d10f      	bne.n	800617e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800617c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e017      	b.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3b01      	subs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d19b      	bne.n	80060f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000004 	.word	0x20000004

080061d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061e2:	f7fd f9b3 	bl	800354c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	4413      	add	r3, r2
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061f2:	f7fd f9ab 	bl	800354c <HAL_GetTick>
 80061f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006200:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	00da      	lsls	r2, r3, #3
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	0d1b      	lsrs	r3, r3, #20
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006218:	e060      	b.n	80062dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006220:	d107      	bne.n	8006232 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006230:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d050      	beq.n	80062dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800623a:	f7fd f987 	bl	800354c <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	429a      	cmp	r2, r3
 8006248:	d902      	bls.n	8006250 <SPI_WaitFifoStateUntilTimeout+0x80>
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d13d      	bne.n	80062cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800625e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006268:	d111      	bne.n	800628e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006272:	d004      	beq.n	800627e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627c:	d107      	bne.n	800628e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006296:	d10f      	bne.n	80062b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e010      	b.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	3b01      	subs	r3, #1
 80062da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d196      	bne.n	800621a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3728      	adds	r7, #40	; 0x28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000004 	.word	0x20000004

080062fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006310:	d111      	bne.n	8006336 <SPI_EndRxTransaction+0x3a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631a:	d004      	beq.n	8006326 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d107      	bne.n	8006336 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff febd 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e023      	b.n	80063a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006364:	d11d      	bne.n	80063a2 <SPI_EndRxTransaction+0xa6>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636e:	d004      	beq.n	800637a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006378:	d113      	bne.n	80063a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff ff22 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e000      	b.n	80063a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff ff03 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e027      	b.n	8006430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fe68 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e014      	b.n	8006430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fedc 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e000      	b.n	8006430 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e049      	b.n	80064de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc fe44 	bl	80030ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 f968 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e047      	b.n	8006590 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a23      	ldr	r2, [pc, #140]	; (800659c <HAL_TIM_Base_Start+0xb4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01d      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d018      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_TIM_Base_Start+0xb8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_TIM_Base_Start+0xbc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_TIM_Base_Start+0xc0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_TIM_Base_Start+0xc4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIM_Base_Start+0x66>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_TIM_Base_Start+0xc8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d115      	bne.n	800657a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <HAL_TIM_Base_Start+0xcc>)
 8006556:	4013      	ands	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b06      	cmp	r3, #6
 800655e:	d015      	beq.n	800658c <HAL_TIM_Base_Start+0xa4>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006566:	d011      	beq.n	800658c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006578:	e008      	b.n	800658c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e000      	b.n	800658e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40013400 	.word	0x40013400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	00010007 	.word	0x00010007

080065b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_ConfigClockSource+0x1c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e0b6      	b.n	8006742 <HAL_TIM_ConfigClockSource+0x18a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d03e      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0xd8>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006616:	f200 8087 	bhi.w	8006728 <HAL_TIM_ConfigClockSource+0x170>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	f000 8086 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x176>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d87f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006628:	2b70      	cmp	r3, #112	; 0x70
 800662a:	d01a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0xaa>
 800662c:	2b70      	cmp	r3, #112	; 0x70
 800662e:	d87b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006630:	2b60      	cmp	r3, #96	; 0x60
 8006632:	d050      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006634:	2b60      	cmp	r3, #96	; 0x60
 8006636:	d877      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006638:	2b50      	cmp	r3, #80	; 0x50
 800663a:	d03c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0xfe>
 800663c:	2b50      	cmp	r3, #80	; 0x50
 800663e:	d873      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d058      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d86f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d064      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d86b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d060      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d867      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05c      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d05a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006660:	e062      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f000 f97f 	bl	8006974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	609a      	str	r2, [r3, #8]
      break;
 800668e:	e04f      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f000 f968 	bl	8006974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b2:	609a      	str	r2, [r3, #8]
      break;
 80066b4:	e03c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 f8dc 	bl	8006880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2150      	movs	r1, #80	; 0x50
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f935 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 80066d4:	e02c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 f8fb 	bl	80068de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2160      	movs	r1, #96	; 0x60
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f925 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 80066f4:	e01c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 f8bc 	bl	8006880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2140      	movs	r1, #64	; 0x40
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f915 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006714:	e00c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f000 f90c 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8006726:	e003      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
      break;
 800672c:	e000      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800672e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d013      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d00f      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <TIM_Base_SetConfig+0x118>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a3b      	ldr	r2, [pc, #236]	; (800686c <TIM_Base_SetConfig+0x120>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a3a      	ldr	r2, [pc, #232]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2f      	ldr	r2, [pc, #188]	; (8006860 <TIM_Base_SetConfig+0x114>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01f      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d01b      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2c      	ldr	r2, [pc, #176]	; (8006864 <TIM_Base_SetConfig+0x118>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d017      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2a      	ldr	r2, [pc, #168]	; (800686c <TIM_Base_SetConfig+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00f      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a29      	ldr	r2, [pc, #164]	; (8006870 <TIM_Base_SetConfig+0x124>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a28      	ldr	r2, [pc, #160]	; (8006874 <TIM_Base_SetConfig+0x128>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a27      	ldr	r2, [pc, #156]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_Base_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <TIM_Base_SetConfig+0x130>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d108      	bne.n	80067f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a10      	ldr	r2, [pc, #64]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00f      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a12      	ldr	r2, [pc, #72]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a11      	ldr	r2, [pc, #68]	; (8006874 <TIM_Base_SetConfig+0x128>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a10      	ldr	r2, [pc, #64]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a0f      	ldr	r2, [pc, #60]	; (800687c <TIM_Base_SetConfig+0x130>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d103      	bne.n	800684c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	615a      	str	r2, [r3, #20]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40013400 	.word	0x40013400
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800

08006880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f023 030a 	bic.w	r3, r3, #10
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068de:	b480      	push	{r7}
 80068e0:	b087      	sub	sp, #28
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0210 	bic.w	r2, r3, #16
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800691a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	f043 0307 	orr.w	r3, r3, #7
 8006960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	609a      	str	r2, [r3, #8]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800698e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	431a      	orrs	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e068      	b.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2e      	ldr	r2, [pc, #184]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2d      	ldr	r2, [pc, #180]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d108      	bne.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01d      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3e:	d018      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1a      	ldr	r2, [pc, #104]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00e      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d10c      	bne.n	8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40014000 	.word	0x40014000

08006ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e040      	b.n	8006b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fc fb1e 	bl	8003128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	; 0x24
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8c0 	bl	8006c88 <UART_SetConfig>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e022      	b.n	8006b58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb6c 	bl	80071f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fbf3 	bl	800733c <UART_CheckIdleState>
 8006b56:	4603      	mov	r3, r0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	f040 8082 	bne.w	8006c7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_UART_Transmit+0x26>
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e07a      	b.n	8006c80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_UART_Transmit+0x38>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e073      	b.n	8006c80 <HAL_UART_Transmit+0x120>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2221      	movs	r2, #33	; 0x21
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bae:	f7fc fccd 	bl	800354c <HAL_GetTick>
 8006bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	88fa      	ldrh	r2, [r7, #6]
 8006bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bcc:	d108      	bne.n	8006be0 <HAL_UART_Transmit+0x80>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e003      	b.n	8006be8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006bf0:	e02d      	b.n	8006c4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fbe6 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e039      	b.n	8006c80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c1e:	b292      	uxth	r2, r2
 8006c20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	3302      	adds	r3, #2
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	e008      	b.n	8006c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	781a      	ldrb	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b292      	uxth	r2, r2
 8006c34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1cb      	bne.n	8006bf2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2140      	movs	r1, #64	; 0x40
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fbb2 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e005      	b.n	8006c80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c8c:	b08a      	sub	sp, #40	; 0x28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4ba4      	ldr	r3, [pc, #656]	; (8006f48 <UART_SetConfig+0x2c0>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a99      	ldr	r2, [pc, #612]	; (8006f4c <UART_SetConfig+0x2c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d04:	430a      	orrs	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a90      	ldr	r2, [pc, #576]	; (8006f50 <UART_SetConfig+0x2c8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d126      	bne.n	8006d60 <UART_SetConfig+0xd8>
 8006d12:	4b90      	ldr	r3, [pc, #576]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d81b      	bhi.n	8006d58 <UART_SetConfig+0xd0>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0xa0>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e116      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d40:	2302      	movs	r3, #2
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e112      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e10e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d50:	2308      	movs	r3, #8
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e10a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e106      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a7c      	ldr	r2, [pc, #496]	; (8006f58 <UART_SetConfig+0x2d0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d138      	bne.n	8006ddc <UART_SetConfig+0x154>
 8006d6a:	4b7a      	ldr	r3, [pc, #488]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	2b0c      	cmp	r3, #12
 8006d76:	d82d      	bhi.n	8006dd4 <UART_SetConfig+0x14c>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0xf8>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08006dd5 	.word	0x08006dd5
 8006d88:	08006dd5 	.word	0x08006dd5
 8006d8c:	08006dd5 	.word	0x08006dd5
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dd5 	.word	0x08006dd5
 8006d98:	08006dd5 	.word	0x08006dd5
 8006d9c:	08006dd5 	.word	0x08006dd5
 8006da0:	08006dbd 	.word	0x08006dbd
 8006da4:	08006dd5 	.word	0x08006dd5
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	2300      	movs	r3, #0
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dba:	e0d8      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc2:	e0d4      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dca:	e0d0      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd2:	e0cc      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dda:	e0c8      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <UART_SetConfig+0x2d4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d125      	bne.n	8006e32 <UART_SetConfig+0x1aa>
 8006de6:	4b5b      	ldr	r3, [pc, #364]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d016      	beq.n	8006e22 <UART_SetConfig+0x19a>
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d818      	bhi.n	8006e2a <UART_SetConfig+0x1a2>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d00a      	beq.n	8006e12 <UART_SetConfig+0x18a>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d814      	bhi.n	8006e2a <UART_SetConfig+0x1a2>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <UART_SetConfig+0x182>
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d008      	beq.n	8006e1a <UART_SetConfig+0x192>
 8006e08:	e00f      	b.n	8006e2a <UART_SetConfig+0x1a2>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e10:	e0ad      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e12:	2302      	movs	r3, #2
 8006e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e18:	e0a9      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e20:	e0a5      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e22:	2308      	movs	r3, #8
 8006e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e28:	e0a1      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e30:	e09d      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a4a      	ldr	r2, [pc, #296]	; (8006f60 <UART_SetConfig+0x2d8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d125      	bne.n	8006e88 <UART_SetConfig+0x200>
 8006e3c:	4b45      	ldr	r3, [pc, #276]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e46:	2bc0      	cmp	r3, #192	; 0xc0
 8006e48:	d016      	beq.n	8006e78 <UART_SetConfig+0x1f0>
 8006e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e4c:	d818      	bhi.n	8006e80 <UART_SetConfig+0x1f8>
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d00a      	beq.n	8006e68 <UART_SetConfig+0x1e0>
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	d814      	bhi.n	8006e80 <UART_SetConfig+0x1f8>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <UART_SetConfig+0x1d8>
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d008      	beq.n	8006e70 <UART_SetConfig+0x1e8>
 8006e5e:	e00f      	b.n	8006e80 <UART_SetConfig+0x1f8>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e66:	e082      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6e:	e07e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e07a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e076      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	e072      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a35      	ldr	r2, [pc, #212]	; (8006f64 <UART_SetConfig+0x2dc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d12a      	bne.n	8006ee8 <UART_SetConfig+0x260>
 8006e92:	4b30      	ldr	r3, [pc, #192]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea0:	d01a      	beq.n	8006ed8 <UART_SetConfig+0x250>
 8006ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea6:	d81b      	bhi.n	8006ee0 <UART_SetConfig+0x258>
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eac:	d00c      	beq.n	8006ec8 <UART_SetConfig+0x240>
 8006eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb2:	d815      	bhi.n	8006ee0 <UART_SetConfig+0x258>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <UART_SetConfig+0x238>
 8006eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebc:	d008      	beq.n	8006ed0 <UART_SetConfig+0x248>
 8006ebe:	e00f      	b.n	8006ee0 <UART_SetConfig+0x258>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e052      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ece:	e04e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed6:	e04a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ede:	e046      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee6:	e042      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <UART_SetConfig+0x2c4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d13a      	bne.n	8006f68 <UART_SetConfig+0x2e0>
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <UART_SetConfig+0x2cc>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f00:	d01a      	beq.n	8006f38 <UART_SetConfig+0x2b0>
 8006f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f06:	d81b      	bhi.n	8006f40 <UART_SetConfig+0x2b8>
 8006f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0c:	d00c      	beq.n	8006f28 <UART_SetConfig+0x2a0>
 8006f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f12:	d815      	bhi.n	8006f40 <UART_SetConfig+0x2b8>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <UART_SetConfig+0x298>
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d008      	beq.n	8006f30 <UART_SetConfig+0x2a8>
 8006f1e:	e00f      	b.n	8006f40 <UART_SetConfig+0x2b8>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f26:	e022      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f2e:	e01e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f30:	2304      	movs	r3, #4
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f36:	e01a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3e:	e016      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f40:	2310      	movs	r3, #16
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f46:	e012      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f48:	efff69f3 	.word	0xefff69f3
 8006f4c:	40008000 	.word	0x40008000
 8006f50:	40013800 	.word	0x40013800
 8006f54:	40021000 	.word	0x40021000
 8006f58:	40004400 	.word	0x40004400
 8006f5c:	40004800 	.word	0x40004800
 8006f60:	40004c00 	.word	0x40004c00
 8006f64:	40005000 	.word	0x40005000
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a9f      	ldr	r2, [pc, #636]	; (80071f0 <UART_SetConfig+0x568>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d17a      	bne.n	800706e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d824      	bhi.n	8006fca <UART_SetConfig+0x342>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x300>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	08006fcb 	.word	0x08006fcb
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fcb 	.word	0x08006fcb
 8006f98:	08006fbb 	.word	0x08006fbb
 8006f9c:	08006fcb 	.word	0x08006fcb
 8006fa0:	08006fcb 	.word	0x08006fcb
 8006fa4:	08006fcb 	.word	0x08006fcb
 8006fa8:	08006fc3 	.word	0x08006fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fd fd96 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8006fb0:	61f8      	str	r0, [r7, #28]
        break;
 8006fb2:	e010      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b8f      	ldr	r3, [pc, #572]	; (80071f4 <UART_SetConfig+0x56c>)
 8006fb6:	61fb      	str	r3, [r7, #28]
        break;
 8006fb8:	e00d      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fba:	f7fd fcf7 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8006fbe:	61f8      	str	r0, [r7, #28]
        break;
 8006fc0:	e009      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc6:	61fb      	str	r3, [r7, #28]
        break;
 8006fc8:	e005      	b.n	8006fd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80fb 	beq.w	80071d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d305      	bcc.n	8006ffa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d903      	bls.n	8007002 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007000:	e0e8      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2200      	movs	r2, #0
 8007006:	461c      	mov	r4, r3
 8007008:	4615      	mov	r5, r2
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	022b      	lsls	r3, r5, #8
 8007014:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007018:	0222      	lsls	r2, r4, #8
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6849      	ldr	r1, [r1, #4]
 800701e:	0849      	lsrs	r1, r1, #1
 8007020:	2000      	movs	r0, #0
 8007022:	4688      	mov	r8, r1
 8007024:	4681      	mov	r9, r0
 8007026:	eb12 0a08 	adds.w	sl, r2, r8
 800702a:	eb43 0b09 	adc.w	fp, r3, r9
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703c:	4650      	mov	r0, sl
 800703e:	4659      	mov	r1, fp
 8007040:	f7f9 fe02 	bl	8000c48 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4613      	mov	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007052:	d308      	bcc.n	8007066 <UART_SetConfig+0x3de>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705a:	d204      	bcs.n	8007066 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	60da      	str	r2, [r3, #12]
 8007064:	e0b6      	b.n	80071d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800706c:	e0b2      	b.n	80071d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007076:	d15e      	bne.n	8007136 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800707c:	2b08      	cmp	r3, #8
 800707e:	d828      	bhi.n	80070d2 <UART_SetConfig+0x44a>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x400>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070d3 	.word	0x080070d3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070d3 	.word	0x080070d3
 80070a0:	080070d3 	.word	0x080070d3
 80070a4:	080070d3 	.word	0x080070d3
 80070a8:	080070cb 	.word	0x080070cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ac:	f7fd fd16 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80070b0:	61f8      	str	r0, [r7, #28]
        break;
 80070b2:	e014      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b4:	f7fd fd28 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 80070b8:	61f8      	str	r0, [r7, #28]
        break;
 80070ba:	e010      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b4d      	ldr	r3, [pc, #308]	; (80071f4 <UART_SetConfig+0x56c>)
 80070be:	61fb      	str	r3, [r7, #28]
        break;
 80070c0:	e00d      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7fd fc73 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 80070c6:	61f8      	str	r0, [r7, #28]
        break;
 80070c8:	e009      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ce:	61fb      	str	r3, [r7, #28]
        break;
 80070d0:	e005      	b.n	80070de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d077      	beq.n	80071d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	005a      	lsls	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	441a      	add	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d916      	bls.n	800712e <UART_SetConfig+0x4a6>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007106:	d212      	bcs.n	800712e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f023 030f 	bic.w	r3, r3, #15
 8007110:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	b29b      	uxth	r3, r3
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	b29a      	uxth	r2, r3
 800711e:	8afb      	ldrh	r3, [r7, #22]
 8007120:	4313      	orrs	r3, r2
 8007122:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	8afa      	ldrh	r2, [r7, #22]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e052      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007134:	e04e      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800713a:	2b08      	cmp	r3, #8
 800713c:	d827      	bhi.n	800718e <UART_SetConfig+0x506>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x4bc>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	0800718f 	.word	0x0800718f
 8007154:	0800717f 	.word	0x0800717f
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800718f 	.word	0x0800718f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fd fcb8 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 800716c:	61f8      	str	r0, [r7, #28]
        break;
 800716e:	e014      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007170:	f7fd fcca 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 8007174:	61f8      	str	r0, [r7, #28]
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <UART_SetConfig+0x56c>)
 800717a:	61fb      	str	r3, [r7, #28]
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fd fc15 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8007182:	61f8      	str	r0, [r7, #28]
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800718a:	61fb      	str	r3, [r7, #28]
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007198:	bf00      	nop
    }

    if (pclk != 0U)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	085a      	lsrs	r2, r3, #1
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d909      	bls.n	80071ce <UART_SetConfig+0x546>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d205      	bcs.n	80071ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60da      	str	r2, [r3, #12]
 80071cc:	e002      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3728      	adds	r7, #40	; 0x28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ee:	bf00      	nop
 80071f0:	40008000 	.word	0x40008000
 80071f4:	00f42400 	.word	0x00f42400

080071f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01a      	beq.n	800730e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f6:	d10a      	bne.n	800730e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734c:	f7fc f8fe 	bl	800354c <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d10e      	bne.n	800737e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f82d 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e023      	b.n	80073c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d10e      	bne.n	80073aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f817 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e00d      	b.n	80073c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b09c      	sub	sp, #112	; 0x70
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073de:	e0a5      	b.n	800752c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	f000 80a1 	beq.w	800752c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fc f8af 	bl	800354c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <UART_WaitOnFlagUntilTimeout+0x32>
 80073fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d13e      	bne.n	800747e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007414:	667b      	str	r3, [r7, #100]	; 0x64
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007420:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	663b      	str	r3, [r7, #96]	; 0x60
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007452:	64ba      	str	r2, [r7, #72]	; 0x48
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e067      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d04f      	beq.n	800752c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800749a:	d147      	bne.n	800752c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
 80074c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	613b      	str	r3, [r7, #16]
   return(result);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074f8:	623a      	str	r2, [r7, #32]
 80074fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	69f9      	ldr	r1, [r7, #28]
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	61bb      	str	r3, [r7, #24]
   return(result);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e5      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2220      	movs	r2, #32
 8007516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e010      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4013      	ands	r3, r2
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	429a      	cmp	r2, r3
 8007548:	f43f af4a 	beq.w	80073e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3770      	adds	r7, #112	; 0x70
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <__errno>:
 8007558:	4b01      	ldr	r3, [pc, #4]	; (8007560 <__errno+0x8>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	20000010 	.word	0x20000010

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4d0d      	ldr	r5, [pc, #52]	; (800759c <__libc_init_array+0x38>)
 8007568:	4c0d      	ldr	r4, [pc, #52]	; (80075a0 <__libc_init_array+0x3c>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	2600      	movs	r6, #0
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	4d0b      	ldr	r5, [pc, #44]	; (80075a4 <__libc_init_array+0x40>)
 8007576:	4c0c      	ldr	r4, [pc, #48]	; (80075a8 <__libc_init_array+0x44>)
 8007578:	f003 fce0 	bl	800af3c <_init>
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	2600      	movs	r6, #0
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	f855 3b04 	ldr.w	r3, [r5], #4
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	f855 3b04 	ldr.w	r3, [r5], #4
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	0800b7c0 	.word	0x0800b7c0
 80075a0:	0800b7c0 	.word	0x0800b7c0
 80075a4:	0800b7c0 	.word	0x0800b7c0
 80075a8:	0800b7c4 	.word	0x0800b7c4

080075ac <memset>:
 80075ac:	4402      	add	r2, r0
 80075ae:	4603      	mov	r3, r0
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d100      	bne.n	80075b6 <memset+0xa>
 80075b4:	4770      	bx	lr
 80075b6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ba:	e7f9      	b.n	80075b0 <memset+0x4>

080075bc <__cvt>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	ec55 4b10 	vmov	r4, r5, d0
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	460e      	mov	r6, r1
 80075c8:	4619      	mov	r1, r3
 80075ca:	462b      	mov	r3, r5
 80075cc:	bfbb      	ittet	lt
 80075ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075d2:	461d      	movlt	r5, r3
 80075d4:	2300      	movge	r3, #0
 80075d6:	232d      	movlt	r3, #45	; 0x2d
 80075d8:	700b      	strb	r3, [r1, #0]
 80075da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075e0:	4691      	mov	r9, r2
 80075e2:	f023 0820 	bic.w	r8, r3, #32
 80075e6:	bfbc      	itt	lt
 80075e8:	4622      	movlt	r2, r4
 80075ea:	4614      	movlt	r4, r2
 80075ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075f0:	d005      	beq.n	80075fe <__cvt+0x42>
 80075f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075f6:	d100      	bne.n	80075fa <__cvt+0x3e>
 80075f8:	3601      	adds	r6, #1
 80075fa:	2102      	movs	r1, #2
 80075fc:	e000      	b.n	8007600 <__cvt+0x44>
 80075fe:	2103      	movs	r1, #3
 8007600:	ab03      	add	r3, sp, #12
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	ab02      	add	r3, sp, #8
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	ec45 4b10 	vmov	d0, r4, r5
 800760c:	4653      	mov	r3, sl
 800760e:	4632      	mov	r2, r6
 8007610:	f000 fe1a 	bl	8008248 <_dtoa_r>
 8007614:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007618:	4607      	mov	r7, r0
 800761a:	d102      	bne.n	8007622 <__cvt+0x66>
 800761c:	f019 0f01 	tst.w	r9, #1
 8007620:	d022      	beq.n	8007668 <__cvt+0xac>
 8007622:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007626:	eb07 0906 	add.w	r9, r7, r6
 800762a:	d110      	bne.n	800764e <__cvt+0x92>
 800762c:	783b      	ldrb	r3, [r7, #0]
 800762e:	2b30      	cmp	r3, #48	; 0x30
 8007630:	d10a      	bne.n	8007648 <__cvt+0x8c>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f9 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800763e:	b918      	cbnz	r0, 8007648 <__cvt+0x8c>
 8007640:	f1c6 0601 	rsb	r6, r6, #1
 8007644:	f8ca 6000 	str.w	r6, [sl]
 8007648:	f8da 3000 	ldr.w	r3, [sl]
 800764c:	4499      	add	r9, r3
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f7f9 fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 800765a:	b108      	cbz	r0, 8007660 <__cvt+0xa4>
 800765c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007660:	2230      	movs	r2, #48	; 0x30
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	454b      	cmp	r3, r9
 8007666:	d307      	bcc.n	8007678 <__cvt+0xbc>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800766c:	1bdb      	subs	r3, r3, r7
 800766e:	4638      	mov	r0, r7
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	b004      	add	sp, #16
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	1c59      	adds	r1, r3, #1
 800767a:	9103      	str	r1, [sp, #12]
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e7f0      	b.n	8007662 <__cvt+0xa6>

08007680 <__exponent>:
 8007680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007682:	4603      	mov	r3, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	bfb8      	it	lt
 8007688:	4249      	neglt	r1, r1
 800768a:	f803 2b02 	strb.w	r2, [r3], #2
 800768e:	bfb4      	ite	lt
 8007690:	222d      	movlt	r2, #45	; 0x2d
 8007692:	222b      	movge	r2, #43	; 0x2b
 8007694:	2909      	cmp	r1, #9
 8007696:	7042      	strb	r2, [r0, #1]
 8007698:	dd2a      	ble.n	80076f0 <__exponent+0x70>
 800769a:	f10d 0407 	add.w	r4, sp, #7
 800769e:	46a4      	mov	ip, r4
 80076a0:	270a      	movs	r7, #10
 80076a2:	46a6      	mov	lr, r4
 80076a4:	460a      	mov	r2, r1
 80076a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80076aa:	fb07 1516 	mls	r5, r7, r6, r1
 80076ae:	3530      	adds	r5, #48	; 0x30
 80076b0:	2a63      	cmp	r2, #99	; 0x63
 80076b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80076b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076ba:	4631      	mov	r1, r6
 80076bc:	dcf1      	bgt.n	80076a2 <__exponent+0x22>
 80076be:	3130      	adds	r1, #48	; 0x30
 80076c0:	f1ae 0502 	sub.w	r5, lr, #2
 80076c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076c8:	1c44      	adds	r4, r0, #1
 80076ca:	4629      	mov	r1, r5
 80076cc:	4561      	cmp	r1, ip
 80076ce:	d30a      	bcc.n	80076e6 <__exponent+0x66>
 80076d0:	f10d 0209 	add.w	r2, sp, #9
 80076d4:	eba2 020e 	sub.w	r2, r2, lr
 80076d8:	4565      	cmp	r5, ip
 80076da:	bf88      	it	hi
 80076dc:	2200      	movhi	r2, #0
 80076de:	4413      	add	r3, r2
 80076e0:	1a18      	subs	r0, r3, r0
 80076e2:	b003      	add	sp, #12
 80076e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076ee:	e7ed      	b.n	80076cc <__exponent+0x4c>
 80076f0:	2330      	movs	r3, #48	; 0x30
 80076f2:	3130      	adds	r1, #48	; 0x30
 80076f4:	7083      	strb	r3, [r0, #2]
 80076f6:	70c1      	strb	r1, [r0, #3]
 80076f8:	1d03      	adds	r3, r0, #4
 80076fa:	e7f1      	b.n	80076e0 <__exponent+0x60>

080076fc <_printf_float>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	ed2d 8b02 	vpush	{d8}
 8007704:	b08d      	sub	sp, #52	; 0x34
 8007706:	460c      	mov	r4, r1
 8007708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800770c:	4616      	mov	r6, r2
 800770e:	461f      	mov	r7, r3
 8007710:	4605      	mov	r5, r0
 8007712:	f001 fd3f 	bl	8009194 <_localeconv_r>
 8007716:	f8d0 a000 	ldr.w	sl, [r0]
 800771a:	4650      	mov	r0, sl
 800771c:	f7f8 fd58 	bl	80001d0 <strlen>
 8007720:	2300      	movs	r3, #0
 8007722:	930a      	str	r3, [sp, #40]	; 0x28
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	f8d8 3000 	ldr.w	r3, [r8]
 800772c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007730:	3307      	adds	r3, #7
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	f103 0208 	add.w	r2, r3, #8
 800773a:	f8c8 2000 	str.w	r2, [r8]
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007746:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800774a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	f8cd 8018 	str.w	r8, [sp, #24]
 8007754:	ee08 0a10 	vmov	s16, r0
 8007758:	4b9f      	ldr	r3, [pc, #636]	; (80079d8 <_printf_float+0x2dc>)
 800775a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	f7f9 f9e3 	bl	8000b2c <__aeabi_dcmpun>
 8007766:	bb88      	cbnz	r0, 80077cc <_printf_float+0xd0>
 8007768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800776c:	4b9a      	ldr	r3, [pc, #616]	; (80079d8 <_printf_float+0x2dc>)
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	f7f9 f9bd 	bl	8000af0 <__aeabi_dcmple>
 8007776:	bb48      	cbnz	r0, 80077cc <_printf_float+0xd0>
 8007778:	2200      	movs	r2, #0
 800777a:	2300      	movs	r3, #0
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f9 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8007784:	b110      	cbz	r0, 800778c <_printf_float+0x90>
 8007786:	232d      	movs	r3, #45	; 0x2d
 8007788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778c:	4b93      	ldr	r3, [pc, #588]	; (80079dc <_printf_float+0x2e0>)
 800778e:	4894      	ldr	r0, [pc, #592]	; (80079e0 <_printf_float+0x2e4>)
 8007790:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007794:	bf94      	ite	ls
 8007796:	4698      	movls	r8, r3
 8007798:	4680      	movhi	r8, r0
 800779a:	2303      	movs	r3, #3
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	9b05      	ldr	r3, [sp, #20]
 80077a0:	f023 0204 	bic.w	r2, r3, #4
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	f04f 0900 	mov.w	r9, #0
 80077aa:	9700      	str	r7, [sp, #0]
 80077ac:	4633      	mov	r3, r6
 80077ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80077b0:	4621      	mov	r1, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f9d8 	bl	8007b68 <_printf_common>
 80077b8:	3001      	adds	r0, #1
 80077ba:	f040 8090 	bne.w	80078de <_printf_float+0x1e2>
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
 80077c2:	b00d      	add	sp, #52	; 0x34
 80077c4:	ecbd 8b02 	vpop	{d8}
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f9 f9aa 	bl	8000b2c <__aeabi_dcmpun>
 80077d8:	b140      	cbz	r0, 80077ec <_printf_float+0xf0>
 80077da:	464b      	mov	r3, r9
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfbc      	itt	lt
 80077e0:	232d      	movlt	r3, #45	; 0x2d
 80077e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077e6:	487f      	ldr	r0, [pc, #508]	; (80079e4 <_printf_float+0x2e8>)
 80077e8:	4b7f      	ldr	r3, [pc, #508]	; (80079e8 <_printf_float+0x2ec>)
 80077ea:	e7d1      	b.n	8007790 <_printf_float+0x94>
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077f2:	9206      	str	r2, [sp, #24]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	d13f      	bne.n	8007878 <_printf_float+0x17c>
 80077f8:	2306      	movs	r3, #6
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	6861      	ldr	r1, [r4, #4]
 8007800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007804:	2300      	movs	r3, #0
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	ab0a      	add	r3, sp, #40	; 0x28
 800780a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800780e:	ab09      	add	r3, sp, #36	; 0x24
 8007810:	ec49 8b10 	vmov	d0, r8, r9
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff fecd 	bl	80075bc <__cvt>
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007826:	2b47      	cmp	r3, #71	; 0x47
 8007828:	4680      	mov	r8, r0
 800782a:	d108      	bne.n	800783e <_printf_float+0x142>
 800782c:	1cc8      	adds	r0, r1, #3
 800782e:	db02      	blt.n	8007836 <_printf_float+0x13a>
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	4299      	cmp	r1, r3
 8007834:	dd41      	ble.n	80078ba <_printf_float+0x1be>
 8007836:	f1ab 0b02 	sub.w	fp, fp, #2
 800783a:	fa5f fb8b 	uxtb.w	fp, fp
 800783e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007842:	d820      	bhi.n	8007886 <_printf_float+0x18a>
 8007844:	3901      	subs	r1, #1
 8007846:	465a      	mov	r2, fp
 8007848:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800784c:	9109      	str	r1, [sp, #36]	; 0x24
 800784e:	f7ff ff17 	bl	8007680 <__exponent>
 8007852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007854:	1813      	adds	r3, r2, r0
 8007856:	2a01      	cmp	r2, #1
 8007858:	4681      	mov	r9, r0
 800785a:	6123      	str	r3, [r4, #16]
 800785c:	dc02      	bgt.n	8007864 <_printf_float+0x168>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	07d2      	lsls	r2, r2, #31
 8007862:	d501      	bpl.n	8007868 <_printf_float+0x16c>
 8007864:	3301      	adds	r3, #1
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800786c:	2b00      	cmp	r3, #0
 800786e:	d09c      	beq.n	80077aa <_printf_float+0xae>
 8007870:	232d      	movs	r3, #45	; 0x2d
 8007872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007876:	e798      	b.n	80077aa <_printf_float+0xae>
 8007878:	9a06      	ldr	r2, [sp, #24]
 800787a:	2a47      	cmp	r2, #71	; 0x47
 800787c:	d1be      	bne.n	80077fc <_printf_float+0x100>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1bc      	bne.n	80077fc <_printf_float+0x100>
 8007882:	2301      	movs	r3, #1
 8007884:	e7b9      	b.n	80077fa <_printf_float+0xfe>
 8007886:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800788a:	d118      	bne.n	80078be <_printf_float+0x1c2>
 800788c:	2900      	cmp	r1, #0
 800788e:	6863      	ldr	r3, [r4, #4]
 8007890:	dd0b      	ble.n	80078aa <_printf_float+0x1ae>
 8007892:	6121      	str	r1, [r4, #16]
 8007894:	b913      	cbnz	r3, 800789c <_printf_float+0x1a0>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	07d0      	lsls	r0, r2, #31
 800789a:	d502      	bpl.n	80078a2 <_printf_float+0x1a6>
 800789c:	3301      	adds	r3, #1
 800789e:	440b      	add	r3, r1
 80078a0:	6123      	str	r3, [r4, #16]
 80078a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80078a4:	f04f 0900 	mov.w	r9, #0
 80078a8:	e7de      	b.n	8007868 <_printf_float+0x16c>
 80078aa:	b913      	cbnz	r3, 80078b2 <_printf_float+0x1b6>
 80078ac:	6822      	ldr	r2, [r4, #0]
 80078ae:	07d2      	lsls	r2, r2, #31
 80078b0:	d501      	bpl.n	80078b6 <_printf_float+0x1ba>
 80078b2:	3302      	adds	r3, #2
 80078b4:	e7f4      	b.n	80078a0 <_printf_float+0x1a4>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e7f2      	b.n	80078a0 <_printf_float+0x1a4>
 80078ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	4299      	cmp	r1, r3
 80078c2:	db05      	blt.n	80078d0 <_printf_float+0x1d4>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	6121      	str	r1, [r4, #16]
 80078c8:	07d8      	lsls	r0, r3, #31
 80078ca:	d5ea      	bpl.n	80078a2 <_printf_float+0x1a6>
 80078cc:	1c4b      	adds	r3, r1, #1
 80078ce:	e7e7      	b.n	80078a0 <_printf_float+0x1a4>
 80078d0:	2900      	cmp	r1, #0
 80078d2:	bfd4      	ite	le
 80078d4:	f1c1 0202 	rsble	r2, r1, #2
 80078d8:	2201      	movgt	r2, #1
 80078da:	4413      	add	r3, r2
 80078dc:	e7e0      	b.n	80078a0 <_printf_float+0x1a4>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	055a      	lsls	r2, r3, #21
 80078e2:	d407      	bmi.n	80078f4 <_printf_float+0x1f8>
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	4642      	mov	r2, r8
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	d12c      	bne.n	800794c <_printf_float+0x250>
 80078f2:	e764      	b.n	80077be <_printf_float+0xc2>
 80078f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078f8:	f240 80e0 	bls.w	8007abc <_printf_float+0x3c0>
 80078fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	f7f9 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007908:	2800      	cmp	r0, #0
 800790a:	d034      	beq.n	8007976 <_printf_float+0x27a>
 800790c:	4a37      	ldr	r2, [pc, #220]	; (80079ec <_printf_float+0x2f0>)
 800790e:	2301      	movs	r3, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af51 	beq.w	80077be <_printf_float+0xc2>
 800791c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007920:	429a      	cmp	r2, r3
 8007922:	db02      	blt.n	800792a <_printf_float+0x22e>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	07d8      	lsls	r0, r3, #31
 8007928:	d510      	bpl.n	800794c <_printf_float+0x250>
 800792a:	ee18 3a10 	vmov	r3, s16
 800792e:	4652      	mov	r2, sl
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af41 	beq.w	80077be <_printf_float+0xc2>
 800793c:	f04f 0800 	mov.w	r8, #0
 8007940:	f104 091a 	add.w	r9, r4, #26
 8007944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007946:	3b01      	subs	r3, #1
 8007948:	4543      	cmp	r3, r8
 800794a:	dc09      	bgt.n	8007960 <_printf_float+0x264>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	f100 8105 	bmi.w	8007b5e <_printf_float+0x462>
 8007954:	68e0      	ldr	r0, [r4, #12]
 8007956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007958:	4298      	cmp	r0, r3
 800795a:	bfb8      	it	lt
 800795c:	4618      	movlt	r0, r3
 800795e:	e730      	b.n	80077c2 <_printf_float+0xc6>
 8007960:	2301      	movs	r3, #1
 8007962:	464a      	mov	r2, r9
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af27 	beq.w	80077be <_printf_float+0xc2>
 8007970:	f108 0801 	add.w	r8, r8, #1
 8007974:	e7e6      	b.n	8007944 <_printf_float+0x248>
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc39      	bgt.n	80079f0 <_printf_float+0x2f4>
 800797c:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <_printf_float+0x2f0>)
 800797e:	2301      	movs	r3, #1
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	f43f af19 	beq.w	80077be <_printf_float+0xc2>
 800798c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007990:	4313      	orrs	r3, r2
 8007992:	d102      	bne.n	800799a <_printf_float+0x29e>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	07d9      	lsls	r1, r3, #31
 8007998:	d5d8      	bpl.n	800794c <_printf_float+0x250>
 800799a:	ee18 3a10 	vmov	r3, s16
 800799e:	4652      	mov	r2, sl
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f af09 	beq.w	80077be <_printf_float+0xc2>
 80079ac:	f04f 0900 	mov.w	r9, #0
 80079b0:	f104 0a1a 	add.w	sl, r4, #26
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	425b      	negs	r3, r3
 80079b8:	454b      	cmp	r3, r9
 80079ba:	dc01      	bgt.n	80079c0 <_printf_float+0x2c4>
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	e792      	b.n	80078e6 <_printf_float+0x1ea>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4652      	mov	r2, sl
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f aef7 	beq.w	80077be <_printf_float+0xc2>
 80079d0:	f109 0901 	add.w	r9, r9, #1
 80079d4:	e7ee      	b.n	80079b4 <_printf_float+0x2b8>
 80079d6:	bf00      	nop
 80079d8:	7fefffff 	.word	0x7fefffff
 80079dc:	0800b3b0 	.word	0x0800b3b0
 80079e0:	0800b3b4 	.word	0x0800b3b4
 80079e4:	0800b3bc 	.word	0x0800b3bc
 80079e8:	0800b3b8 	.word	0x0800b3b8
 80079ec:	0800b3c0 	.word	0x0800b3c0
 80079f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f4:	429a      	cmp	r2, r3
 80079f6:	bfa8      	it	ge
 80079f8:	461a      	movge	r2, r3
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	4691      	mov	r9, r2
 80079fe:	dc37      	bgt.n	8007a70 <_printf_float+0x374>
 8007a00:	f04f 0b00 	mov.w	fp, #0
 8007a04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a08:	f104 021a 	add.w	r2, r4, #26
 8007a0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	eba3 0309 	sub.w	r3, r3, r9
 8007a14:	455b      	cmp	r3, fp
 8007a16:	dc33      	bgt.n	8007a80 <_printf_float+0x384>
 8007a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	db3b      	blt.n	8007a98 <_printf_float+0x39c>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d438      	bmi.n	8007a98 <_printf_float+0x39c>
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	9a05      	ldr	r2, [sp, #20]
 8007a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a2c:	1a9a      	subs	r2, r3, r2
 8007a2e:	eba3 0901 	sub.w	r9, r3, r1
 8007a32:	4591      	cmp	r9, r2
 8007a34:	bfa8      	it	ge
 8007a36:	4691      	movge	r9, r2
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	dc35      	bgt.n	8007aaa <_printf_float+0x3ae>
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a46:	f104 0a1a 	add.w	sl, r4, #26
 8007a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	eba3 0309 	sub.w	r3, r3, r9
 8007a54:	4543      	cmp	r3, r8
 8007a56:	f77f af79 	ble.w	800794c <_printf_float+0x250>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	f43f aeaa 	beq.w	80077be <_printf_float+0xc2>
 8007a6a:	f108 0801 	add.w	r8, r8, #1
 8007a6e:	e7ec      	b.n	8007a4a <_printf_float+0x34e>
 8007a70:	4613      	mov	r3, r2
 8007a72:	4631      	mov	r1, r6
 8007a74:	4642      	mov	r2, r8
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d1c0      	bne.n	8007a00 <_printf_float+0x304>
 8007a7e:	e69e      	b.n	80077be <_printf_float+0xc2>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	9205      	str	r2, [sp, #20]
 8007a88:	47b8      	blx	r7
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	f43f ae97 	beq.w	80077be <_printf_float+0xc2>
 8007a90:	9a05      	ldr	r2, [sp, #20]
 8007a92:	f10b 0b01 	add.w	fp, fp, #1
 8007a96:	e7b9      	b.n	8007a0c <_printf_float+0x310>
 8007a98:	ee18 3a10 	vmov	r3, s16
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1be      	bne.n	8007a26 <_printf_float+0x32a>
 8007aa8:	e689      	b.n	80077be <_printf_float+0xc2>
 8007aaa:	9a05      	ldr	r2, [sp, #20]
 8007aac:	464b      	mov	r3, r9
 8007aae:	4442      	add	r2, r8
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d1c1      	bne.n	8007a3e <_printf_float+0x342>
 8007aba:	e680      	b.n	80077be <_printf_float+0xc2>
 8007abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007abe:	2a01      	cmp	r2, #1
 8007ac0:	dc01      	bgt.n	8007ac6 <_printf_float+0x3ca>
 8007ac2:	07db      	lsls	r3, r3, #31
 8007ac4:	d538      	bpl.n	8007b38 <_printf_float+0x43c>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4642      	mov	r2, r8
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f ae74 	beq.w	80077be <_printf_float+0xc2>
 8007ad6:	ee18 3a10 	vmov	r3, s16
 8007ada:	4652      	mov	r2, sl
 8007adc:	4631      	mov	r1, r6
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b8      	blx	r7
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f43f ae6b 	beq.w	80077be <_printf_float+0xc2>
 8007ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	f7f8 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af4:	b9d8      	cbnz	r0, 8007b2e <_printf_float+0x432>
 8007af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af8:	f108 0201 	add.w	r2, r8, #1
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	d10e      	bne.n	8007b26 <_printf_float+0x42a>
 8007b08:	e659      	b.n	80077be <_printf_float+0xc2>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae52 	beq.w	80077be <_printf_float+0xc2>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b20:	3b01      	subs	r3, #1
 8007b22:	4543      	cmp	r3, r8
 8007b24:	dcf1      	bgt.n	8007b0a <_printf_float+0x40e>
 8007b26:	464b      	mov	r3, r9
 8007b28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b2c:	e6dc      	b.n	80078e8 <_printf_float+0x1ec>
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	f104 0a1a 	add.w	sl, r4, #26
 8007b36:	e7f2      	b.n	8007b1e <_printf_float+0x422>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	e7df      	b.n	8007afe <_printf_float+0x402>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	464a      	mov	r2, r9
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae38 	beq.w	80077be <_printf_float+0xc2>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	68e3      	ldr	r3, [r4, #12]
 8007b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b56:	1a5b      	subs	r3, r3, r1
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	dcf0      	bgt.n	8007b3e <_printf_float+0x442>
 8007b5c:	e6fa      	b.n	8007954 <_printf_float+0x258>
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	f104 0919 	add.w	r9, r4, #25
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x456>

08007b68 <_printf_common>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	4699      	mov	r9, r3
 8007b70:	688a      	ldr	r2, [r1, #8]
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bfb8      	it	lt
 8007b7c:	4613      	movlt	r3, r2
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b84:	4607      	mov	r7, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b10a      	cbz	r2, 8007b8e <_printf_common+0x26>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	0699      	lsls	r1, r3, #26
 8007b92:	bf42      	ittt	mi
 8007b94:	6833      	ldrmi	r3, [r6, #0]
 8007b96:	3302      	addmi	r3, #2
 8007b98:	6033      	strmi	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	f015 0506 	ands.w	r5, r5, #6
 8007ba0:	d106      	bne.n	8007bb0 <_printf_common+0x48>
 8007ba2:	f104 0a19 	add.w	sl, r4, #25
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc26      	bgt.n	8007bfe <_printf_common+0x96>
 8007bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bb4:	1e13      	subs	r3, r2, #0
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	bf18      	it	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	0692      	lsls	r2, r2, #26
 8007bbe:	d42b      	bmi.n	8007c18 <_printf_common+0xb0>
 8007bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c0      	blx	r8
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d01e      	beq.n	8007c0c <_printf_common+0xa4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	68e5      	ldr	r5, [r4, #12]
 8007bd2:	6832      	ldr	r2, [r6, #0]
 8007bd4:	f003 0306 	and.w	r3, r3, #6
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	bf08      	it	eq
 8007bdc:	1aad      	subeq	r5, r5, r2
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	6922      	ldr	r2, [r4, #16]
 8007be2:	bf0c      	ite	eq
 8007be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be8:	2500      	movne	r5, #0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfc4      	itt	gt
 8007bee:	1a9b      	subgt	r3, r3, r2
 8007bf0:	18ed      	addgt	r5, r5, r3
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xc8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xa8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4649      	mov	r1, r9
 8007c04:	4638      	mov	r0, r7
 8007c06:	47c0      	blx	r8
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xac>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c6      	b.n	8007ba6 <_printf_common+0x3e>
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	2030      	movs	r0, #48	; 0x30
 8007c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c22:	4422      	add	r2, r4
 8007c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	e7c7      	b.n	8007bc0 <_printf_common+0x58>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xa4>
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7d9      	b.n	8007bf6 <_printf_common+0x8e>
	...

08007c44 <_printf_i>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	7e0f      	ldrb	r7, [r1, #24]
 8007c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c4c:	2f78      	cmp	r7, #120	; 0x78
 8007c4e:	4691      	mov	r9, r2
 8007c50:	4680      	mov	r8, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	469a      	mov	sl, r3
 8007c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c5a:	d807      	bhi.n	8007c6c <_printf_i+0x28>
 8007c5c:	2f62      	cmp	r7, #98	; 0x62
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x32>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f000 80d8 	beq.w	8007e16 <_printf_i+0x1d2>
 8007c66:	2f58      	cmp	r7, #88	; 0x58
 8007c68:	f000 80a3 	beq.w	8007db2 <_printf_i+0x16e>
 8007c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c74:	e03a      	b.n	8007cec <_printf_i+0xa8>
 8007c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c7a:	2b15      	cmp	r3, #21
 8007c7c:	d8f6      	bhi.n	8007c6c <_printf_i+0x28>
 8007c7e:	a101      	add	r1, pc, #4	; (adr r1, 8007c84 <_printf_i+0x40>)
 8007c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007c6d 	.word	0x08007c6d
 8007c90:	08007c6d 	.word	0x08007c6d
 8007c94:	08007c6d 	.word	0x08007c6d
 8007c98:	08007c6d 	.word	0x08007c6d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c6d 	.word	0x08007c6d
 8007ca4:	08007c6d 	.word	0x08007c6d
 8007ca8:	08007c6d 	.word	0x08007c6d
 8007cac:	08007c6d 	.word	0x08007c6d
 8007cb0:	08007dfd 	.word	0x08007dfd
 8007cb4:	08007d21 	.word	0x08007d21
 8007cb8:	08007ddf 	.word	0x08007ddf
 8007cbc:	08007c6d 	.word	0x08007c6d
 8007cc0:	08007c6d 	.word	0x08007c6d
 8007cc4:	08007e1f 	.word	0x08007e1f
 8007cc8:	08007c6d 	.word	0x08007c6d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c6d 	.word	0x08007c6d
 8007cd4:	08007c6d 	.word	0x08007c6d
 8007cd8:	08007de7 	.word	0x08007de7
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	602a      	str	r2, [r5, #0]
 8007ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0a3      	b.n	8007e38 <_printf_i+0x1f4>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	6829      	ldr	r1, [r5, #0]
 8007cf4:	0606      	lsls	r6, r0, #24
 8007cf6:	f101 0304 	add.w	r3, r1, #4
 8007cfa:	d50a      	bpl.n	8007d12 <_printf_i+0xce>
 8007cfc:	680e      	ldr	r6, [r1, #0]
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	da03      	bge.n	8007d0c <_printf_i+0xc8>
 8007d04:	232d      	movs	r3, #45	; 0x2d
 8007d06:	4276      	negs	r6, r6
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0c:	485e      	ldr	r0, [pc, #376]	; (8007e88 <_printf_i+0x244>)
 8007d0e:	230a      	movs	r3, #10
 8007d10:	e019      	b.n	8007d46 <_printf_i+0x102>
 8007d12:	680e      	ldr	r6, [r1, #0]
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d1a:	bf18      	it	ne
 8007d1c:	b236      	sxthne	r6, r6
 8007d1e:	e7ef      	b.n	8007d00 <_printf_i+0xbc>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	6029      	str	r1, [r5, #0]
 8007d28:	0601      	lsls	r1, r0, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xec>
 8007d2c:	681e      	ldr	r6, [r3, #0]
 8007d2e:	e002      	b.n	8007d36 <_printf_i+0xf2>
 8007d30:	0646      	lsls	r6, r0, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xe8>
 8007d34:	881e      	ldrh	r6, [r3, #0]
 8007d36:	4854      	ldr	r0, [pc, #336]	; (8007e88 <_printf_i+0x244>)
 8007d38:	2f6f      	cmp	r7, #111	; 0x6f
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2308      	moveq	r3, #8
 8007d3e:	230a      	movne	r3, #10
 8007d40:	2100      	movs	r1, #0
 8007d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d46:	6865      	ldr	r5, [r4, #4]
 8007d48:	60a5      	str	r5, [r4, #8]
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	bfa2      	ittt	ge
 8007d4e:	6821      	ldrge	r1, [r4, #0]
 8007d50:	f021 0104 	bicge.w	r1, r1, #4
 8007d54:	6021      	strge	r1, [r4, #0]
 8007d56:	b90e      	cbnz	r6, 8007d5c <_printf_i+0x118>
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	d04d      	beq.n	8007df8 <_printf_i+0x1b4>
 8007d5c:	4615      	mov	r5, r2
 8007d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d62:	fb03 6711 	mls	r7, r3, r1, r6
 8007d66:	5dc7      	ldrb	r7, [r0, r7]
 8007d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	42bb      	cmp	r3, r7
 8007d70:	460e      	mov	r6, r1
 8007d72:	d9f4      	bls.n	8007d5e <_printf_i+0x11a>
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d10b      	bne.n	8007d90 <_printf_i+0x14c>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	07de      	lsls	r6, r3, #31
 8007d7c:	d508      	bpl.n	8007d90 <_printf_i+0x14c>
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	4299      	cmp	r1, r3
 8007d84:	bfde      	ittt	le
 8007d86:	2330      	movle	r3, #48	; 0x30
 8007d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d90:	1b52      	subs	r2, r2, r5
 8007d92:	6122      	str	r2, [r4, #16]
 8007d94:	f8cd a000 	str.w	sl, [sp]
 8007d98:	464b      	mov	r3, r9
 8007d9a:	aa03      	add	r2, sp, #12
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7ff fee2 	bl	8007b68 <_printf_common>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d14c      	bne.n	8007e42 <_printf_i+0x1fe>
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	b004      	add	sp, #16
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db2:	4835      	ldr	r0, [pc, #212]	; (8007e88 <_printf_i+0x244>)
 8007db4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007db8:	6829      	ldr	r1, [r5, #0]
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dc0:	6029      	str	r1, [r5, #0]
 8007dc2:	061d      	lsls	r5, r3, #24
 8007dc4:	d514      	bpl.n	8007df0 <_printf_i+0x1ac>
 8007dc6:	07df      	lsls	r7, r3, #31
 8007dc8:	bf44      	itt	mi
 8007dca:	f043 0320 	orrmi.w	r3, r3, #32
 8007dce:	6023      	strmi	r3, [r4, #0]
 8007dd0:	b91e      	cbnz	r6, 8007dda <_printf_i+0x196>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	f023 0320 	bic.w	r3, r3, #32
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	2310      	movs	r3, #16
 8007ddc:	e7b0      	b.n	8007d40 <_printf_i+0xfc>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f043 0320 	orr.w	r3, r3, #32
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	2378      	movs	r3, #120	; 0x78
 8007de8:	4828      	ldr	r0, [pc, #160]	; (8007e8c <_printf_i+0x248>)
 8007dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dee:	e7e3      	b.n	8007db8 <_printf_i+0x174>
 8007df0:	0659      	lsls	r1, r3, #25
 8007df2:	bf48      	it	mi
 8007df4:	b2b6      	uxthmi	r6, r6
 8007df6:	e7e6      	b.n	8007dc6 <_printf_i+0x182>
 8007df8:	4615      	mov	r5, r2
 8007dfa:	e7bb      	b.n	8007d74 <_printf_i+0x130>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	6826      	ldr	r6, [r4, #0]
 8007e00:	6961      	ldr	r1, [r4, #20]
 8007e02:	1d18      	adds	r0, r3, #4
 8007e04:	6028      	str	r0, [r5, #0]
 8007e06:	0635      	lsls	r5, r6, #24
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0x1cc>
 8007e0c:	6019      	str	r1, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <_printf_i+0x1d2>
 8007e10:	0670      	lsls	r0, r6, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0x1c8>
 8007e14:	8019      	strh	r1, [r3, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	4615      	mov	r5, r2
 8007e1c:	e7ba      	b.n	8007d94 <_printf_i+0x150>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	602a      	str	r2, [r5, #0]
 8007e24:	681d      	ldr	r5, [r3, #0]
 8007e26:	6862      	ldr	r2, [r4, #4]
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7f8 f9d8 	bl	80001e0 <memchr>
 8007e30:	b108      	cbz	r0, 8007e36 <_printf_i+0x1f2>
 8007e32:	1b40      	subs	r0, r0, r5
 8007e34:	6060      	str	r0, [r4, #4]
 8007e36:	6863      	ldr	r3, [r4, #4]
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e40:	e7a8      	b.n	8007d94 <_printf_i+0x150>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	462a      	mov	r2, r5
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	47d0      	blx	sl
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0ab      	beq.n	8007da8 <_printf_i+0x164>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	079b      	lsls	r3, r3, #30
 8007e54:	d413      	bmi.n	8007e7e <_printf_i+0x23a>
 8007e56:	68e0      	ldr	r0, [r4, #12]
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	4298      	cmp	r0, r3
 8007e5c:	bfb8      	it	lt
 8007e5e:	4618      	movlt	r0, r3
 8007e60:	e7a4      	b.n	8007dac <_printf_i+0x168>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4632      	mov	r2, r6
 8007e66:	4649      	mov	r1, r9
 8007e68:	4640      	mov	r0, r8
 8007e6a:	47d0      	blx	sl
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d09b      	beq.n	8007da8 <_printf_i+0x164>
 8007e70:	3501      	adds	r5, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	9903      	ldr	r1, [sp, #12]
 8007e76:	1a5b      	subs	r3, r3, r1
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dcf2      	bgt.n	8007e62 <_printf_i+0x21e>
 8007e7c:	e7eb      	b.n	8007e56 <_printf_i+0x212>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	f104 0619 	add.w	r6, r4, #25
 8007e84:	e7f5      	b.n	8007e72 <_printf_i+0x22e>
 8007e86:	bf00      	nop
 8007e88:	0800b3c2 	.word	0x0800b3c2
 8007e8c:	0800b3d3 	.word	0x0800b3d3

08007e90 <iprintf>:
 8007e90:	b40f      	push	{r0, r1, r2, r3}
 8007e92:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <iprintf+0x2c>)
 8007e94:	b513      	push	{r0, r1, r4, lr}
 8007e96:	681c      	ldr	r4, [r3, #0]
 8007e98:	b124      	cbz	r4, 8007ea4 <iprintf+0x14>
 8007e9a:	69a3      	ldr	r3, [r4, #24]
 8007e9c:	b913      	cbnz	r3, 8007ea4 <iprintf+0x14>
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f001 f8da 	bl	8009058 <__sinit>
 8007ea4:	ab05      	add	r3, sp, #20
 8007ea6:	9a04      	ldr	r2, [sp, #16]
 8007ea8:	68a1      	ldr	r1, [r4, #8]
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 fe97 	bl	8009be0 <_vfiprintf_r>
 8007eb2:	b002      	add	sp, #8
 8007eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb8:	b004      	add	sp, #16
 8007eba:	4770      	bx	lr
 8007ebc:	20000010 	.word	0x20000010

08007ec0 <_puts_r>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	460e      	mov	r6, r1
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	b118      	cbz	r0, 8007ed0 <_puts_r+0x10>
 8007ec8:	6983      	ldr	r3, [r0, #24]
 8007eca:	b90b      	cbnz	r3, 8007ed0 <_puts_r+0x10>
 8007ecc:	f001 f8c4 	bl	8009058 <__sinit>
 8007ed0:	69ab      	ldr	r3, [r5, #24]
 8007ed2:	68ac      	ldr	r4, [r5, #8]
 8007ed4:	b913      	cbnz	r3, 8007edc <_puts_r+0x1c>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f001 f8be 	bl	8009058 <__sinit>
 8007edc:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <_puts_r+0xd0>)
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	d120      	bne.n	8007f24 <_puts_r+0x64>
 8007ee2:	686c      	ldr	r4, [r5, #4]
 8007ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee6:	07db      	lsls	r3, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_puts_r+0x36>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	0598      	lsls	r0, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_puts_r+0x36>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef2:	f001 f954 	bl	800919e <__retarget_lock_acquire_recursive>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	0719      	lsls	r1, r3, #28
 8007efa:	d51d      	bpl.n	8007f38 <_puts_r+0x78>
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	b1db      	cbz	r3, 8007f38 <_puts_r+0x78>
 8007f00:	3e01      	subs	r6, #1
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	bb39      	cbnz	r1, 8007f5e <_puts_r+0x9e>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da38      	bge.n	8007f84 <_puts_r+0xc4>
 8007f12:	4622      	mov	r2, r4
 8007f14:	210a      	movs	r1, #10
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f848 	bl	8007fac <__swbuf_r>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d011      	beq.n	8007f44 <_puts_r+0x84>
 8007f20:	250a      	movs	r5, #10
 8007f22:	e011      	b.n	8007f48 <_puts_r+0x88>
 8007f24:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <_puts_r+0xd4>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d101      	bne.n	8007f2e <_puts_r+0x6e>
 8007f2a:	68ac      	ldr	r4, [r5, #8]
 8007f2c:	e7da      	b.n	8007ee4 <_puts_r+0x24>
 8007f2e:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <_puts_r+0xd8>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	bf08      	it	eq
 8007f34:	68ec      	ldreq	r4, [r5, #12]
 8007f36:	e7d5      	b.n	8007ee4 <_puts_r+0x24>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f888 	bl	8008050 <__swsetup_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d0dd      	beq.n	8007f00 <_puts_r+0x40>
 8007f44:	f04f 35ff 	mov.w	r5, #4294967295
 8007f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d405      	bmi.n	8007f5a <_puts_r+0x9a>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	059b      	lsls	r3, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_puts_r+0x9a>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f001 f923 	bl	80091a0 <__retarget_lock_release_recursive>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	da04      	bge.n	8007f6c <_puts_r+0xac>
 8007f62:	69a2      	ldr	r2, [r4, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	dc06      	bgt.n	8007f76 <_puts_r+0xb6>
 8007f68:	290a      	cmp	r1, #10
 8007f6a:	d004      	beq.n	8007f76 <_puts_r+0xb6>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	7019      	strb	r1, [r3, #0]
 8007f74:	e7c5      	b.n	8007f02 <_puts_r+0x42>
 8007f76:	4622      	mov	r2, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f817 	bl	8007fac <__swbuf_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d1bf      	bne.n	8007f02 <_puts_r+0x42>
 8007f82:	e7df      	b.n	8007f44 <_puts_r+0x84>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	250a      	movs	r5, #10
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	6022      	str	r2, [r4, #0]
 8007f8c:	701d      	strb	r5, [r3, #0]
 8007f8e:	e7db      	b.n	8007f48 <_puts_r+0x88>
 8007f90:	0800b494 	.word	0x0800b494
 8007f94:	0800b4b4 	.word	0x0800b4b4
 8007f98:	0800b474 	.word	0x0800b474

08007f9c <puts>:
 8007f9c:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <puts+0xc>)
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	f7ff bf8d 	b.w	8007ec0 <_puts_r>
 8007fa6:	bf00      	nop
 8007fa8:	20000010 	.word	0x20000010

08007fac <__swbuf_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	b118      	cbz	r0, 8007fbe <__swbuf_r+0x12>
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	b90b      	cbnz	r3, 8007fbe <__swbuf_r+0x12>
 8007fba:	f001 f84d 	bl	8009058 <__sinit>
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <__swbuf_r+0x98>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d12b      	bne.n	800801c <__swbuf_r+0x70>
 8007fc4:	686c      	ldr	r4, [r5, #4]
 8007fc6:	69a3      	ldr	r3, [r4, #24]
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	d52f      	bpl.n	8008030 <__swbuf_r+0x84>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	b36b      	cbz	r3, 8008030 <__swbuf_r+0x84>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1ac0      	subs	r0, r0, r3
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	b2f6      	uxtb	r6, r6
 8007fde:	4283      	cmp	r3, r0
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	dc04      	bgt.n	8007fee <__swbuf_r+0x42>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 ffa2 	bl	8008f30 <_fflush_r>
 8007fec:	bb30      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	60a3      	str	r3, [r4, #8]
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	6022      	str	r2, [r4, #0]
 8007ffa:	701e      	strb	r6, [r3, #0]
 8007ffc:	6963      	ldr	r3, [r4, #20]
 8007ffe:	3001      	adds	r0, #1
 8008000:	4283      	cmp	r3, r0
 8008002:	d004      	beq.n	800800e <__swbuf_r+0x62>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	07db      	lsls	r3, r3, #31
 8008008:	d506      	bpl.n	8008018 <__swbuf_r+0x6c>
 800800a:	2e0a      	cmp	r6, #10
 800800c:	d104      	bne.n	8008018 <__swbuf_r+0x6c>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 ff8d 	bl	8008f30 <_fflush_r>
 8008016:	b988      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8008018:	4638      	mov	r0, r7
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <__swbuf_r+0x9c>)
 800801e:	429c      	cmp	r4, r3
 8008020:	d101      	bne.n	8008026 <__swbuf_r+0x7a>
 8008022:	68ac      	ldr	r4, [r5, #8]
 8008024:	e7cf      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <__swbuf_r+0xa0>)
 8008028:	429c      	cmp	r4, r3
 800802a:	bf08      	it	eq
 800802c:	68ec      	ldreq	r4, [r5, #12]
 800802e:	e7ca      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f80c 	bl	8008050 <__swsetup_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d0cb      	beq.n	8007fd4 <__swbuf_r+0x28>
 800803c:	f04f 37ff 	mov.w	r7, #4294967295
 8008040:	e7ea      	b.n	8008018 <__swbuf_r+0x6c>
 8008042:	bf00      	nop
 8008044:	0800b494 	.word	0x0800b494
 8008048:	0800b4b4 	.word	0x0800b4b4
 800804c:	0800b474 	.word	0x0800b474

08008050 <__swsetup_r>:
 8008050:	4b32      	ldr	r3, [pc, #200]	; (800811c <__swsetup_r+0xcc>)
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	4606      	mov	r6, r0
 8008058:	460c      	mov	r4, r1
 800805a:	b125      	cbz	r5, 8008066 <__swsetup_r+0x16>
 800805c:	69ab      	ldr	r3, [r5, #24]
 800805e:	b913      	cbnz	r3, 8008066 <__swsetup_r+0x16>
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fff9 	bl	8009058 <__sinit>
 8008066:	4b2e      	ldr	r3, [pc, #184]	; (8008120 <__swsetup_r+0xd0>)
 8008068:	429c      	cmp	r4, r3
 800806a:	d10f      	bne.n	800808c <__swsetup_r+0x3c>
 800806c:	686c      	ldr	r4, [r5, #4]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008074:	0719      	lsls	r1, r3, #28
 8008076:	d42c      	bmi.n	80080d2 <__swsetup_r+0x82>
 8008078:	06dd      	lsls	r5, r3, #27
 800807a:	d411      	bmi.n	80080a0 <__swsetup_r+0x50>
 800807c:	2309      	movs	r3, #9
 800807e:	6033      	str	r3, [r6, #0]
 8008080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	e03e      	b.n	800810a <__swsetup_r+0xba>
 800808c:	4b25      	ldr	r3, [pc, #148]	; (8008124 <__swsetup_r+0xd4>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d101      	bne.n	8008096 <__swsetup_r+0x46>
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	e7eb      	b.n	800806e <__swsetup_r+0x1e>
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <__swsetup_r+0xd8>)
 8008098:	429c      	cmp	r4, r3
 800809a:	bf08      	it	eq
 800809c:	68ec      	ldreq	r4, [r5, #12]
 800809e:	e7e6      	b.n	800806e <__swsetup_r+0x1e>
 80080a0:	0758      	lsls	r0, r3, #29
 80080a2:	d512      	bpl.n	80080ca <__swsetup_r+0x7a>
 80080a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a6:	b141      	cbz	r1, 80080ba <__swsetup_r+0x6a>
 80080a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <__swsetup_r+0x66>
 80080b0:	4630      	mov	r0, r6
 80080b2:	f001 fc8b 	bl	80099cc <_free_r>
 80080b6:	2300      	movs	r3, #0
 80080b8:	6363      	str	r3, [r4, #52]	; 0x34
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	2300      	movs	r3, #0
 80080c4:	6063      	str	r3, [r4, #4]
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0308 	orr.w	r3, r3, #8
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	b94b      	cbnz	r3, 80080ea <__swsetup_r+0x9a>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e0:	d003      	beq.n	80080ea <__swsetup_r+0x9a>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	f001 f881 	bl	80091ec <__smakebuf_r>
 80080ea:	89a0      	ldrh	r0, [r4, #12]
 80080ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f0:	f010 0301 	ands.w	r3, r0, #1
 80080f4:	d00a      	beq.n	800810c <__swsetup_r+0xbc>
 80080f6:	2300      	movs	r3, #0
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	6963      	ldr	r3, [r4, #20]
 80080fc:	425b      	negs	r3, r3
 80080fe:	61a3      	str	r3, [r4, #24]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	b943      	cbnz	r3, 8008116 <__swsetup_r+0xc6>
 8008104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008108:	d1ba      	bne.n	8008080 <__swsetup_r+0x30>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	0781      	lsls	r1, r0, #30
 800810e:	bf58      	it	pl
 8008110:	6963      	ldrpl	r3, [r4, #20]
 8008112:	60a3      	str	r3, [r4, #8]
 8008114:	e7f4      	b.n	8008100 <__swsetup_r+0xb0>
 8008116:	2000      	movs	r0, #0
 8008118:	e7f7      	b.n	800810a <__swsetup_r+0xba>
 800811a:	bf00      	nop
 800811c:	20000010 	.word	0x20000010
 8008120:	0800b494 	.word	0x0800b494
 8008124:	0800b4b4 	.word	0x0800b4b4
 8008128:	0800b474 	.word	0x0800b474

0800812c <quorem>:
 800812c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	6903      	ldr	r3, [r0, #16]
 8008132:	690c      	ldr	r4, [r1, #16]
 8008134:	42a3      	cmp	r3, r4
 8008136:	4607      	mov	r7, r0
 8008138:	f2c0 8081 	blt.w	800823e <quorem+0x112>
 800813c:	3c01      	subs	r4, #1
 800813e:	f101 0814 	add.w	r8, r1, #20
 8008142:	f100 0514 	add.w	r5, r0, #20
 8008146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008154:	3301      	adds	r3, #1
 8008156:	429a      	cmp	r2, r3
 8008158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800815c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008160:	fbb2 f6f3 	udiv	r6, r2, r3
 8008164:	d331      	bcc.n	80081ca <quorem+0x9e>
 8008166:	f04f 0e00 	mov.w	lr, #0
 800816a:	4640      	mov	r0, r8
 800816c:	46ac      	mov	ip, r5
 800816e:	46f2      	mov	sl, lr
 8008170:	f850 2b04 	ldr.w	r2, [r0], #4
 8008174:	b293      	uxth	r3, r2
 8008176:	fb06 e303 	mla	r3, r6, r3, lr
 800817a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800817e:	b29b      	uxth	r3, r3
 8008180:	ebaa 0303 	sub.w	r3, sl, r3
 8008184:	f8dc a000 	ldr.w	sl, [ip]
 8008188:	0c12      	lsrs	r2, r2, #16
 800818a:	fa13 f38a 	uxtah	r3, r3, sl
 800818e:	fb06 e202 	mla	r2, r6, r2, lr
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800819a:	b292      	uxth	r2, r2
 800819c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80081a8:	4581      	cmp	r9, r0
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	f84c 3b04 	str.w	r3, [ip], #4
 80081b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081b6:	d2db      	bcs.n	8008170 <quorem+0x44>
 80081b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80081bc:	b92b      	cbnz	r3, 80081ca <quorem+0x9e>
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	3b04      	subs	r3, #4
 80081c2:	429d      	cmp	r5, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	d32e      	bcc.n	8008226 <quorem+0xfa>
 80081c8:	613c      	str	r4, [r7, #16]
 80081ca:	4638      	mov	r0, r7
 80081cc:	f001 fae6 	bl	800979c <__mcmp>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	db24      	blt.n	800821e <quorem+0xf2>
 80081d4:	3601      	adds	r6, #1
 80081d6:	4628      	mov	r0, r5
 80081d8:	f04f 0c00 	mov.w	ip, #0
 80081dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80081e0:	f8d0 e000 	ldr.w	lr, [r0]
 80081e4:	b293      	uxth	r3, r2
 80081e6:	ebac 0303 	sub.w	r3, ip, r3
 80081ea:	0c12      	lsrs	r2, r2, #16
 80081ec:	fa13 f38e 	uxtah	r3, r3, lr
 80081f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081fe:	45c1      	cmp	r9, r8
 8008200:	f840 3b04 	str.w	r3, [r0], #4
 8008204:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008208:	d2e8      	bcs.n	80081dc <quorem+0xb0>
 800820a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800820e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008212:	b922      	cbnz	r2, 800821e <quorem+0xf2>
 8008214:	3b04      	subs	r3, #4
 8008216:	429d      	cmp	r5, r3
 8008218:	461a      	mov	r2, r3
 800821a:	d30a      	bcc.n	8008232 <quorem+0x106>
 800821c:	613c      	str	r4, [r7, #16]
 800821e:	4630      	mov	r0, r6
 8008220:	b003      	add	sp, #12
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	3b04      	subs	r3, #4
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1cc      	bne.n	80081c8 <quorem+0x9c>
 800822e:	3c01      	subs	r4, #1
 8008230:	e7c7      	b.n	80081c2 <quorem+0x96>
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	3b04      	subs	r3, #4
 8008236:	2a00      	cmp	r2, #0
 8008238:	d1f0      	bne.n	800821c <quorem+0xf0>
 800823a:	3c01      	subs	r4, #1
 800823c:	e7eb      	b.n	8008216 <quorem+0xea>
 800823e:	2000      	movs	r0, #0
 8008240:	e7ee      	b.n	8008220 <quorem+0xf4>
 8008242:	0000      	movs	r0, r0
 8008244:	0000      	movs	r0, r0
	...

08008248 <_dtoa_r>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	ed2d 8b04 	vpush	{d8-d9}
 8008250:	ec57 6b10 	vmov	r6, r7, d0
 8008254:	b093      	sub	sp, #76	; 0x4c
 8008256:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008258:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800825c:	9106      	str	r1, [sp, #24]
 800825e:	ee10 aa10 	vmov	sl, s0
 8008262:	4604      	mov	r4, r0
 8008264:	9209      	str	r2, [sp, #36]	; 0x24
 8008266:	930c      	str	r3, [sp, #48]	; 0x30
 8008268:	46bb      	mov	fp, r7
 800826a:	b975      	cbnz	r5, 800828a <_dtoa_r+0x42>
 800826c:	2010      	movs	r0, #16
 800826e:	f000 fffd 	bl	800926c <malloc>
 8008272:	4602      	mov	r2, r0
 8008274:	6260      	str	r0, [r4, #36]	; 0x24
 8008276:	b920      	cbnz	r0, 8008282 <_dtoa_r+0x3a>
 8008278:	4ba7      	ldr	r3, [pc, #668]	; (8008518 <_dtoa_r+0x2d0>)
 800827a:	21ea      	movs	r1, #234	; 0xea
 800827c:	48a7      	ldr	r0, [pc, #668]	; (800851c <_dtoa_r+0x2d4>)
 800827e:	f001 fe45 	bl	8009f0c <__assert_func>
 8008282:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008286:	6005      	str	r5, [r0, #0]
 8008288:	60c5      	str	r5, [r0, #12]
 800828a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800828c:	6819      	ldr	r1, [r3, #0]
 800828e:	b151      	cbz	r1, 80082a6 <_dtoa_r+0x5e>
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	604a      	str	r2, [r1, #4]
 8008294:	2301      	movs	r3, #1
 8008296:	4093      	lsls	r3, r2
 8008298:	608b      	str	r3, [r1, #8]
 800829a:	4620      	mov	r0, r4
 800829c:	f001 f83c 	bl	8009318 <_Bfree>
 80082a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	1e3b      	subs	r3, r7, #0
 80082a8:	bfaa      	itet	ge
 80082aa:	2300      	movge	r3, #0
 80082ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082b0:	f8c8 3000 	strge.w	r3, [r8]
 80082b4:	4b9a      	ldr	r3, [pc, #616]	; (8008520 <_dtoa_r+0x2d8>)
 80082b6:	bfbc      	itt	lt
 80082b8:	2201      	movlt	r2, #1
 80082ba:	f8c8 2000 	strlt.w	r2, [r8]
 80082be:	ea33 030b 	bics.w	r3, r3, fp
 80082c2:	d11b      	bne.n	80082fc <_dtoa_r+0xb4>
 80082c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082d0:	4333      	orrs	r3, r6
 80082d2:	f000 8592 	beq.w	8008dfa <_dtoa_r+0xbb2>
 80082d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d8:	b963      	cbnz	r3, 80082f4 <_dtoa_r+0xac>
 80082da:	4b92      	ldr	r3, [pc, #584]	; (8008524 <_dtoa_r+0x2dc>)
 80082dc:	e022      	b.n	8008324 <_dtoa_r+0xdc>
 80082de:	4b92      	ldr	r3, [pc, #584]	; (8008528 <_dtoa_r+0x2e0>)
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	3308      	adds	r3, #8
 80082e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	9801      	ldr	r0, [sp, #4]
 80082ea:	b013      	add	sp, #76	; 0x4c
 80082ec:	ecbd 8b04 	vpop	{d8-d9}
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	4b8b      	ldr	r3, [pc, #556]	; (8008524 <_dtoa_r+0x2dc>)
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	3303      	adds	r3, #3
 80082fa:	e7f3      	b.n	80082e4 <_dtoa_r+0x9c>
 80082fc:	2200      	movs	r2, #0
 80082fe:	2300      	movs	r3, #0
 8008300:	4650      	mov	r0, sl
 8008302:	4659      	mov	r1, fp
 8008304:	f7f8 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008308:	ec4b ab19 	vmov	d9, sl, fp
 800830c:	4680      	mov	r8, r0
 800830e:	b158      	cbz	r0, 8008328 <_dtoa_r+0xe0>
 8008310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008312:	2301      	movs	r3, #1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 856b 	beq.w	8008df4 <_dtoa_r+0xbac>
 800831e:	4883      	ldr	r0, [pc, #524]	; (800852c <_dtoa_r+0x2e4>)
 8008320:	6018      	str	r0, [r3, #0]
 8008322:	1e43      	subs	r3, r0, #1
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	e7df      	b.n	80082e8 <_dtoa_r+0xa0>
 8008328:	ec4b ab10 	vmov	d0, sl, fp
 800832c:	aa10      	add	r2, sp, #64	; 0x40
 800832e:	a911      	add	r1, sp, #68	; 0x44
 8008330:	4620      	mov	r0, r4
 8008332:	f001 fad9 	bl	80098e8 <__d2b>
 8008336:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800833a:	ee08 0a10 	vmov	s16, r0
 800833e:	2d00      	cmp	r5, #0
 8008340:	f000 8084 	beq.w	800844c <_dtoa_r+0x204>
 8008344:	ee19 3a90 	vmov	r3, s19
 8008348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800834c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008350:	4656      	mov	r6, sl
 8008352:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800835a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800835e:	4b74      	ldr	r3, [pc, #464]	; (8008530 <_dtoa_r+0x2e8>)
 8008360:	2200      	movs	r2, #0
 8008362:	4630      	mov	r0, r6
 8008364:	4639      	mov	r1, r7
 8008366:	f7f7 ff8f 	bl	8000288 <__aeabi_dsub>
 800836a:	a365      	add	r3, pc, #404	; (adr r3, 8008500 <_dtoa_r+0x2b8>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	a364      	add	r3, pc, #400	; (adr r3, 8008508 <_dtoa_r+0x2c0>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f7f7 ff87 	bl	800028c <__adddf3>
 800837e:	4606      	mov	r6, r0
 8008380:	4628      	mov	r0, r5
 8008382:	460f      	mov	r7, r1
 8008384:	f7f8 f8ce 	bl	8000524 <__aeabi_i2d>
 8008388:	a361      	add	r3, pc, #388	; (adr r3, 8008510 <_dtoa_r+0x2c8>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4630      	mov	r0, r6
 8008398:	4639      	mov	r1, r7
 800839a:	f7f7 ff77 	bl	800028c <__adddf3>
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	f7f8 fbd9 	bl	8000b58 <__aeabi_d2iz>
 80083a6:	2200      	movs	r2, #0
 80083a8:	9000      	str	r0, [sp, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	4630      	mov	r0, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	f7f8 fb94 	bl	8000adc <__aeabi_dcmplt>
 80083b4:	b150      	cbz	r0, 80083cc <_dtoa_r+0x184>
 80083b6:	9800      	ldr	r0, [sp, #0]
 80083b8:	f7f8 f8b4 	bl	8000524 <__aeabi_i2d>
 80083bc:	4632      	mov	r2, r6
 80083be:	463b      	mov	r3, r7
 80083c0:	f7f8 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c4:	b910      	cbnz	r0, 80083cc <_dtoa_r+0x184>
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	9b00      	ldr	r3, [sp, #0]
 80083ce:	2b16      	cmp	r3, #22
 80083d0:	d85a      	bhi.n	8008488 <_dtoa_r+0x240>
 80083d2:	9a00      	ldr	r2, [sp, #0]
 80083d4:	4b57      	ldr	r3, [pc, #348]	; (8008534 <_dtoa_r+0x2ec>)
 80083d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	ec51 0b19 	vmov	r0, r1, d9
 80083e2:	f7f8 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d050      	beq.n	800848c <_dtoa_r+0x244>
 80083ea:	9b00      	ldr	r3, [sp, #0]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	2300      	movs	r3, #0
 80083f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083f6:	1b5d      	subs	r5, r3, r5
 80083f8:	1e6b      	subs	r3, r5, #1
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	bf45      	ittet	mi
 80083fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008402:	9304      	strmi	r3, [sp, #16]
 8008404:	2300      	movpl	r3, #0
 8008406:	2300      	movmi	r3, #0
 8008408:	bf4c      	ite	mi
 800840a:	9305      	strmi	r3, [sp, #20]
 800840c:	9304      	strpl	r3, [sp, #16]
 800840e:	9b00      	ldr	r3, [sp, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	db3d      	blt.n	8008490 <_dtoa_r+0x248>
 8008414:	9b05      	ldr	r3, [sp, #20]
 8008416:	9a00      	ldr	r2, [sp, #0]
 8008418:	920a      	str	r2, [sp, #40]	; 0x28
 800841a:	4413      	add	r3, r2
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	2300      	movs	r3, #0
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	9b06      	ldr	r3, [sp, #24]
 8008424:	2b09      	cmp	r3, #9
 8008426:	f200 8089 	bhi.w	800853c <_dtoa_r+0x2f4>
 800842a:	2b05      	cmp	r3, #5
 800842c:	bfc4      	itt	gt
 800842e:	3b04      	subgt	r3, #4
 8008430:	9306      	strgt	r3, [sp, #24]
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	f1a3 0302 	sub.w	r3, r3, #2
 8008438:	bfcc      	ite	gt
 800843a:	2500      	movgt	r5, #0
 800843c:	2501      	movle	r5, #1
 800843e:	2b03      	cmp	r3, #3
 8008440:	f200 8087 	bhi.w	8008552 <_dtoa_r+0x30a>
 8008444:	e8df f003 	tbb	[pc, r3]
 8008448:	59383a2d 	.word	0x59383a2d
 800844c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008450:	441d      	add	r5, r3
 8008452:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008456:	2b20      	cmp	r3, #32
 8008458:	bfc1      	itttt	gt
 800845a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800845e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008462:	fa0b f303 	lslgt.w	r3, fp, r3
 8008466:	fa26 f000 	lsrgt.w	r0, r6, r0
 800846a:	bfda      	itte	le
 800846c:	f1c3 0320 	rsble	r3, r3, #32
 8008470:	fa06 f003 	lslle.w	r0, r6, r3
 8008474:	4318      	orrgt	r0, r3
 8008476:	f7f8 f845 	bl	8000504 <__aeabi_ui2d>
 800847a:	2301      	movs	r3, #1
 800847c:	4606      	mov	r6, r0
 800847e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008482:	3d01      	subs	r5, #1
 8008484:	930e      	str	r3, [sp, #56]	; 0x38
 8008486:	e76a      	b.n	800835e <_dtoa_r+0x116>
 8008488:	2301      	movs	r3, #1
 800848a:	e7b2      	b.n	80083f2 <_dtoa_r+0x1aa>
 800848c:	900b      	str	r0, [sp, #44]	; 0x2c
 800848e:	e7b1      	b.n	80083f4 <_dtoa_r+0x1ac>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	9a00      	ldr	r2, [sp, #0]
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	9304      	str	r3, [sp, #16]
 8008498:	4253      	negs	r3, r2
 800849a:	9307      	str	r3, [sp, #28]
 800849c:	2300      	movs	r3, #0
 800849e:	930a      	str	r3, [sp, #40]	; 0x28
 80084a0:	e7bf      	b.n	8008422 <_dtoa_r+0x1da>
 80084a2:	2300      	movs	r3, #0
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc55      	bgt.n	8008558 <_dtoa_r+0x310>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084b2:	461a      	mov	r2, r3
 80084b4:	9209      	str	r2, [sp, #36]	; 0x24
 80084b6:	e00c      	b.n	80084d2 <_dtoa_r+0x28a>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7f3      	b.n	80084a4 <_dtoa_r+0x25c>
 80084bc:	2300      	movs	r3, #0
 80084be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	9302      	str	r3, [sp, #8]
 80084c8:	3301      	adds	r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	bfb8      	it	lt
 80084d0:	2301      	movlt	r3, #1
 80084d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084d4:	2200      	movs	r2, #0
 80084d6:	6042      	str	r2, [r0, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	f102 0614 	add.w	r6, r2, #20
 80084de:	429e      	cmp	r6, r3
 80084e0:	6841      	ldr	r1, [r0, #4]
 80084e2:	d93d      	bls.n	8008560 <_dtoa_r+0x318>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fed7 	bl	8009298 <_Balloc>
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d13b      	bne.n	8008568 <_dtoa_r+0x320>
 80084f0:	4b11      	ldr	r3, [pc, #68]	; (8008538 <_dtoa_r+0x2f0>)
 80084f2:	4602      	mov	r2, r0
 80084f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084f8:	e6c0      	b.n	800827c <_dtoa_r+0x34>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e7df      	b.n	80084be <_dtoa_r+0x276>
 80084fe:	bf00      	nop
 8008500:	636f4361 	.word	0x636f4361
 8008504:	3fd287a7 	.word	0x3fd287a7
 8008508:	8b60c8b3 	.word	0x8b60c8b3
 800850c:	3fc68a28 	.word	0x3fc68a28
 8008510:	509f79fb 	.word	0x509f79fb
 8008514:	3fd34413 	.word	0x3fd34413
 8008518:	0800b3f1 	.word	0x0800b3f1
 800851c:	0800b408 	.word	0x0800b408
 8008520:	7ff00000 	.word	0x7ff00000
 8008524:	0800b3ed 	.word	0x0800b3ed
 8008528:	0800b3e4 	.word	0x0800b3e4
 800852c:	0800b3c1 	.word	0x0800b3c1
 8008530:	3ff80000 	.word	0x3ff80000
 8008534:	0800b558 	.word	0x0800b558
 8008538:	0800b463 	.word	0x0800b463
 800853c:	2501      	movs	r5, #1
 800853e:	2300      	movs	r3, #0
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	9508      	str	r5, [sp, #32]
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800854c:	2200      	movs	r2, #0
 800854e:	2312      	movs	r3, #18
 8008550:	e7b0      	b.n	80084b4 <_dtoa_r+0x26c>
 8008552:	2301      	movs	r3, #1
 8008554:	9308      	str	r3, [sp, #32]
 8008556:	e7f5      	b.n	8008544 <_dtoa_r+0x2fc>
 8008558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800855e:	e7b8      	b.n	80084d2 <_dtoa_r+0x28a>
 8008560:	3101      	adds	r1, #1
 8008562:	6041      	str	r1, [r0, #4]
 8008564:	0052      	lsls	r2, r2, #1
 8008566:	e7b8      	b.n	80084da <_dtoa_r+0x292>
 8008568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800856a:	9a01      	ldr	r2, [sp, #4]
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	2b0e      	cmp	r3, #14
 8008572:	f200 809d 	bhi.w	80086b0 <_dtoa_r+0x468>
 8008576:	2d00      	cmp	r5, #0
 8008578:	f000 809a 	beq.w	80086b0 <_dtoa_r+0x468>
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd32      	ble.n	80085e8 <_dtoa_r+0x3a0>
 8008582:	4ab7      	ldr	r2, [pc, #732]	; (8008860 <_dtoa_r+0x618>)
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800858c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008590:	9b00      	ldr	r3, [sp, #0]
 8008592:	05d8      	lsls	r0, r3, #23
 8008594:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008598:	d516      	bpl.n	80085c8 <_dtoa_r+0x380>
 800859a:	4bb2      	ldr	r3, [pc, #712]	; (8008864 <_dtoa_r+0x61c>)
 800859c:	ec51 0b19 	vmov	r0, r1, d9
 80085a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085a4:	f7f8 f952 	bl	800084c <__aeabi_ddiv>
 80085a8:	f007 070f 	and.w	r7, r7, #15
 80085ac:	4682      	mov	sl, r0
 80085ae:	468b      	mov	fp, r1
 80085b0:	2503      	movs	r5, #3
 80085b2:	4eac      	ldr	r6, [pc, #688]	; (8008864 <_dtoa_r+0x61c>)
 80085b4:	b957      	cbnz	r7, 80085cc <_dtoa_r+0x384>
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	f7f8 f945 	bl	800084c <__aeabi_ddiv>
 80085c2:	4682      	mov	sl, r0
 80085c4:	468b      	mov	fp, r1
 80085c6:	e028      	b.n	800861a <_dtoa_r+0x3d2>
 80085c8:	2502      	movs	r5, #2
 80085ca:	e7f2      	b.n	80085b2 <_dtoa_r+0x36a>
 80085cc:	07f9      	lsls	r1, r7, #31
 80085ce:	d508      	bpl.n	80085e2 <_dtoa_r+0x39a>
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085d8:	f7f8 f80e 	bl	80005f8 <__aeabi_dmul>
 80085dc:	3501      	adds	r5, #1
 80085de:	4680      	mov	r8, r0
 80085e0:	4689      	mov	r9, r1
 80085e2:	107f      	asrs	r7, r7, #1
 80085e4:	3608      	adds	r6, #8
 80085e6:	e7e5      	b.n	80085b4 <_dtoa_r+0x36c>
 80085e8:	f000 809b 	beq.w	8008722 <_dtoa_r+0x4da>
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	4f9d      	ldr	r7, [pc, #628]	; (8008864 <_dtoa_r+0x61c>)
 80085f0:	425e      	negs	r6, r3
 80085f2:	4b9b      	ldr	r3, [pc, #620]	; (8008860 <_dtoa_r+0x618>)
 80085f4:	f006 020f 	and.w	r2, r6, #15
 80085f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	ec51 0b19 	vmov	r0, r1, d9
 8008604:	f7f7 fff8 	bl	80005f8 <__aeabi_dmul>
 8008608:	1136      	asrs	r6, r6, #4
 800860a:	4682      	mov	sl, r0
 800860c:	468b      	mov	fp, r1
 800860e:	2300      	movs	r3, #0
 8008610:	2502      	movs	r5, #2
 8008612:	2e00      	cmp	r6, #0
 8008614:	d17a      	bne.n	800870c <_dtoa_r+0x4c4>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1d3      	bne.n	80085c2 <_dtoa_r+0x37a>
 800861a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 8082 	beq.w	8008726 <_dtoa_r+0x4de>
 8008622:	4b91      	ldr	r3, [pc, #580]	; (8008868 <_dtoa_r+0x620>)
 8008624:	2200      	movs	r2, #0
 8008626:	4650      	mov	r0, sl
 8008628:	4659      	mov	r1, fp
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	d079      	beq.n	8008726 <_dtoa_r+0x4de>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d076      	beq.n	8008726 <_dtoa_r+0x4de>
 8008638:	9b02      	ldr	r3, [sp, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	dd36      	ble.n	80086ac <_dtoa_r+0x464>
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	4650      	mov	r0, sl
 8008642:	4659      	mov	r1, fp
 8008644:	1e5f      	subs	r7, r3, #1
 8008646:	2200      	movs	r2, #0
 8008648:	4b88      	ldr	r3, [pc, #544]	; (800886c <_dtoa_r+0x624>)
 800864a:	f7f7 ffd5 	bl	80005f8 <__aeabi_dmul>
 800864e:	9e02      	ldr	r6, [sp, #8]
 8008650:	4682      	mov	sl, r0
 8008652:	468b      	mov	fp, r1
 8008654:	3501      	adds	r5, #1
 8008656:	4628      	mov	r0, r5
 8008658:	f7f7 ff64 	bl	8000524 <__aeabi_i2d>
 800865c:	4652      	mov	r2, sl
 800865e:	465b      	mov	r3, fp
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	4b82      	ldr	r3, [pc, #520]	; (8008870 <_dtoa_r+0x628>)
 8008666:	2200      	movs	r2, #0
 8008668:	f7f7 fe10 	bl	800028c <__adddf3>
 800866c:	46d0      	mov	r8, sl
 800866e:	46d9      	mov	r9, fp
 8008670:	4682      	mov	sl, r0
 8008672:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008676:	2e00      	cmp	r6, #0
 8008678:	d158      	bne.n	800872c <_dtoa_r+0x4e4>
 800867a:	4b7e      	ldr	r3, [pc, #504]	; (8008874 <_dtoa_r+0x62c>)
 800867c:	2200      	movs	r2, #0
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f7 fe01 	bl	8000288 <__aeabi_dsub>
 8008686:	4652      	mov	r2, sl
 8008688:	465b      	mov	r3, fp
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	f7f8 fa43 	bl	8000b18 <__aeabi_dcmpgt>
 8008692:	2800      	cmp	r0, #0
 8008694:	f040 8295 	bne.w	8008bc2 <_dtoa_r+0x97a>
 8008698:	4652      	mov	r2, sl
 800869a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800869e:	4640      	mov	r0, r8
 80086a0:	4649      	mov	r1, r9
 80086a2:	f7f8 fa1b 	bl	8000adc <__aeabi_dcmplt>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f040 8289 	bne.w	8008bbe <_dtoa_r+0x976>
 80086ac:	ec5b ab19 	vmov	sl, fp, d9
 80086b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f2c0 8148 	blt.w	8008948 <_dtoa_r+0x700>
 80086b8:	9a00      	ldr	r2, [sp, #0]
 80086ba:	2a0e      	cmp	r2, #14
 80086bc:	f300 8144 	bgt.w	8008948 <_dtoa_r+0x700>
 80086c0:	4b67      	ldr	r3, [pc, #412]	; (8008860 <_dtoa_r+0x618>)
 80086c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f280 80d5 	bge.w	800887c <_dtoa_r+0x634>
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f300 80d1 	bgt.w	800887c <_dtoa_r+0x634>
 80086da:	f040 826f 	bne.w	8008bbc <_dtoa_r+0x974>
 80086de:	4b65      	ldr	r3, [pc, #404]	; (8008874 <_dtoa_r+0x62c>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f7 ff87 	bl	80005f8 <__aeabi_dmul>
 80086ea:	4652      	mov	r2, sl
 80086ec:	465b      	mov	r3, fp
 80086ee:	f7f8 fa09 	bl	8000b04 <__aeabi_dcmpge>
 80086f2:	9e03      	ldr	r6, [sp, #12]
 80086f4:	4637      	mov	r7, r6
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f040 8245 	bne.w	8008b86 <_dtoa_r+0x93e>
 80086fc:	9d01      	ldr	r5, [sp, #4]
 80086fe:	2331      	movs	r3, #49	; 0x31
 8008700:	f805 3b01 	strb.w	r3, [r5], #1
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	e240      	b.n	8008b8e <_dtoa_r+0x946>
 800870c:	07f2      	lsls	r2, r6, #31
 800870e:	d505      	bpl.n	800871c <_dtoa_r+0x4d4>
 8008710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008714:	f7f7 ff70 	bl	80005f8 <__aeabi_dmul>
 8008718:	3501      	adds	r5, #1
 800871a:	2301      	movs	r3, #1
 800871c:	1076      	asrs	r6, r6, #1
 800871e:	3708      	adds	r7, #8
 8008720:	e777      	b.n	8008612 <_dtoa_r+0x3ca>
 8008722:	2502      	movs	r5, #2
 8008724:	e779      	b.n	800861a <_dtoa_r+0x3d2>
 8008726:	9f00      	ldr	r7, [sp, #0]
 8008728:	9e03      	ldr	r6, [sp, #12]
 800872a:	e794      	b.n	8008656 <_dtoa_r+0x40e>
 800872c:	9901      	ldr	r1, [sp, #4]
 800872e:	4b4c      	ldr	r3, [pc, #304]	; (8008860 <_dtoa_r+0x618>)
 8008730:	4431      	add	r1, r6
 8008732:	910d      	str	r1, [sp, #52]	; 0x34
 8008734:	9908      	ldr	r1, [sp, #32]
 8008736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800873a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800873e:	2900      	cmp	r1, #0
 8008740:	d043      	beq.n	80087ca <_dtoa_r+0x582>
 8008742:	494d      	ldr	r1, [pc, #308]	; (8008878 <_dtoa_r+0x630>)
 8008744:	2000      	movs	r0, #0
 8008746:	f7f8 f881 	bl	800084c <__aeabi_ddiv>
 800874a:	4652      	mov	r2, sl
 800874c:	465b      	mov	r3, fp
 800874e:	f7f7 fd9b 	bl	8000288 <__aeabi_dsub>
 8008752:	9d01      	ldr	r5, [sp, #4]
 8008754:	4682      	mov	sl, r0
 8008756:	468b      	mov	fp, r1
 8008758:	4649      	mov	r1, r9
 800875a:	4640      	mov	r0, r8
 800875c:	f7f8 f9fc 	bl	8000b58 <__aeabi_d2iz>
 8008760:	4606      	mov	r6, r0
 8008762:	f7f7 fedf 	bl	8000524 <__aeabi_i2d>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 fd8b 	bl	8000288 <__aeabi_dsub>
 8008772:	3630      	adds	r6, #48	; 0x30
 8008774:	f805 6b01 	strb.w	r6, [r5], #1
 8008778:	4652      	mov	r2, sl
 800877a:	465b      	mov	r3, fp
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	f7f8 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d163      	bne.n	8008850 <_dtoa_r+0x608>
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	4936      	ldr	r1, [pc, #216]	; (8008868 <_dtoa_r+0x620>)
 800878e:	2000      	movs	r0, #0
 8008790:	f7f7 fd7a 	bl	8000288 <__aeabi_dsub>
 8008794:	4652      	mov	r2, sl
 8008796:	465b      	mov	r3, fp
 8008798:	f7f8 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800879c:	2800      	cmp	r0, #0
 800879e:	f040 80b5 	bne.w	800890c <_dtoa_r+0x6c4>
 80087a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a4:	429d      	cmp	r5, r3
 80087a6:	d081      	beq.n	80086ac <_dtoa_r+0x464>
 80087a8:	4b30      	ldr	r3, [pc, #192]	; (800886c <_dtoa_r+0x624>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	4650      	mov	r0, sl
 80087ae:	4659      	mov	r1, fp
 80087b0:	f7f7 ff22 	bl	80005f8 <__aeabi_dmul>
 80087b4:	4b2d      	ldr	r3, [pc, #180]	; (800886c <_dtoa_r+0x624>)
 80087b6:	4682      	mov	sl, r0
 80087b8:	468b      	mov	fp, r1
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	2200      	movs	r2, #0
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	4680      	mov	r8, r0
 80087c6:	4689      	mov	r9, r1
 80087c8:	e7c6      	b.n	8008758 <_dtoa_r+0x510>
 80087ca:	4650      	mov	r0, sl
 80087cc:	4659      	mov	r1, fp
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d4:	9d01      	ldr	r5, [sp, #4]
 80087d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087d8:	4682      	mov	sl, r0
 80087da:	468b      	mov	fp, r1
 80087dc:	4649      	mov	r1, r9
 80087de:	4640      	mov	r0, r8
 80087e0:	f7f8 f9ba 	bl	8000b58 <__aeabi_d2iz>
 80087e4:	4606      	mov	r6, r0
 80087e6:	f7f7 fe9d 	bl	8000524 <__aeabi_i2d>
 80087ea:	3630      	adds	r6, #48	; 0x30
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4640      	mov	r0, r8
 80087f2:	4649      	mov	r1, r9
 80087f4:	f7f7 fd48 	bl	8000288 <__aeabi_dsub>
 80087f8:	f805 6b01 	strb.w	r6, [r5], #1
 80087fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087fe:	429d      	cmp	r5, r3
 8008800:	4680      	mov	r8, r0
 8008802:	4689      	mov	r9, r1
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	d124      	bne.n	8008854 <_dtoa_r+0x60c>
 800880a:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <_dtoa_r+0x630>)
 800880c:	4650      	mov	r0, sl
 800880e:	4659      	mov	r1, fp
 8008810:	f7f7 fd3c 	bl	800028c <__adddf3>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	f7f8 f97c 	bl	8000b18 <__aeabi_dcmpgt>
 8008820:	2800      	cmp	r0, #0
 8008822:	d173      	bne.n	800890c <_dtoa_r+0x6c4>
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	4913      	ldr	r1, [pc, #76]	; (8008878 <_dtoa_r+0x630>)
 800882a:	2000      	movs	r0, #0
 800882c:	f7f7 fd2c 	bl	8000288 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f8 f950 	bl	8000adc <__aeabi_dcmplt>
 800883c:	2800      	cmp	r0, #0
 800883e:	f43f af35 	beq.w	80086ac <_dtoa_r+0x464>
 8008842:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008844:	1e6b      	subs	r3, r5, #1
 8008846:	930f      	str	r3, [sp, #60]	; 0x3c
 8008848:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800884c:	2b30      	cmp	r3, #48	; 0x30
 800884e:	d0f8      	beq.n	8008842 <_dtoa_r+0x5fa>
 8008850:	9700      	str	r7, [sp, #0]
 8008852:	e049      	b.n	80088e8 <_dtoa_r+0x6a0>
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <_dtoa_r+0x624>)
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	4680      	mov	r8, r0
 800885c:	4689      	mov	r9, r1
 800885e:	e7bd      	b.n	80087dc <_dtoa_r+0x594>
 8008860:	0800b558 	.word	0x0800b558
 8008864:	0800b530 	.word	0x0800b530
 8008868:	3ff00000 	.word	0x3ff00000
 800886c:	40240000 	.word	0x40240000
 8008870:	401c0000 	.word	0x401c0000
 8008874:	40140000 	.word	0x40140000
 8008878:	3fe00000 	.word	0x3fe00000
 800887c:	9d01      	ldr	r5, [sp, #4]
 800887e:	4656      	mov	r6, sl
 8008880:	465f      	mov	r7, fp
 8008882:	4642      	mov	r2, r8
 8008884:	464b      	mov	r3, r9
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 ffdf 	bl	800084c <__aeabi_ddiv>
 800888e:	f7f8 f963 	bl	8000b58 <__aeabi_d2iz>
 8008892:	4682      	mov	sl, r0
 8008894:	f7f7 fe46 	bl	8000524 <__aeabi_i2d>
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088ac:	f7f7 fcec 	bl	8000288 <__aeabi_dsub>
 80088b0:	f805 6b01 	strb.w	r6, [r5], #1
 80088b4:	9e01      	ldr	r6, [sp, #4]
 80088b6:	9f03      	ldr	r7, [sp, #12]
 80088b8:	1bae      	subs	r6, r5, r6
 80088ba:	42b7      	cmp	r7, r6
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	d135      	bne.n	800892e <_dtoa_r+0x6e6>
 80088c2:	f7f7 fce3 	bl	800028c <__adddf3>
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	4606      	mov	r6, r0
 80088cc:	460f      	mov	r7, r1
 80088ce:	f7f8 f923 	bl	8000b18 <__aeabi_dcmpgt>
 80088d2:	b9d0      	cbnz	r0, 800890a <_dtoa_r+0x6c2>
 80088d4:	4642      	mov	r2, r8
 80088d6:	464b      	mov	r3, r9
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80088e0:	b110      	cbz	r0, 80088e8 <_dtoa_r+0x6a0>
 80088e2:	f01a 0f01 	tst.w	sl, #1
 80088e6:	d110      	bne.n	800890a <_dtoa_r+0x6c2>
 80088e8:	4620      	mov	r0, r4
 80088ea:	ee18 1a10 	vmov	r1, s16
 80088ee:	f000 fd13 	bl	8009318 <_Bfree>
 80088f2:	2300      	movs	r3, #0
 80088f4:	9800      	ldr	r0, [sp, #0]
 80088f6:	702b      	strb	r3, [r5, #0]
 80088f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fa:	3001      	adds	r0, #1
 80088fc:	6018      	str	r0, [r3, #0]
 80088fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008900:	2b00      	cmp	r3, #0
 8008902:	f43f acf1 	beq.w	80082e8 <_dtoa_r+0xa0>
 8008906:	601d      	str	r5, [r3, #0]
 8008908:	e4ee      	b.n	80082e8 <_dtoa_r+0xa0>
 800890a:	9f00      	ldr	r7, [sp, #0]
 800890c:	462b      	mov	r3, r5
 800890e:	461d      	mov	r5, r3
 8008910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008914:	2a39      	cmp	r2, #57	; 0x39
 8008916:	d106      	bne.n	8008926 <_dtoa_r+0x6de>
 8008918:	9a01      	ldr	r2, [sp, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d1f7      	bne.n	800890e <_dtoa_r+0x6c6>
 800891e:	9901      	ldr	r1, [sp, #4]
 8008920:	2230      	movs	r2, #48	; 0x30
 8008922:	3701      	adds	r7, #1
 8008924:	700a      	strb	r2, [r1, #0]
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	3201      	adds	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e790      	b.n	8008850 <_dtoa_r+0x608>
 800892e:	4ba6      	ldr	r3, [pc, #664]	; (8008bc8 <_dtoa_r+0x980>)
 8008930:	2200      	movs	r2, #0
 8008932:	f7f7 fe61 	bl	80005f8 <__aeabi_dmul>
 8008936:	2200      	movs	r2, #0
 8008938:	2300      	movs	r3, #0
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	f7f8 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008942:	2800      	cmp	r0, #0
 8008944:	d09d      	beq.n	8008882 <_dtoa_r+0x63a>
 8008946:	e7cf      	b.n	80088e8 <_dtoa_r+0x6a0>
 8008948:	9a08      	ldr	r2, [sp, #32]
 800894a:	2a00      	cmp	r2, #0
 800894c:	f000 80d7 	beq.w	8008afe <_dtoa_r+0x8b6>
 8008950:	9a06      	ldr	r2, [sp, #24]
 8008952:	2a01      	cmp	r2, #1
 8008954:	f300 80ba 	bgt.w	8008acc <_dtoa_r+0x884>
 8008958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800895a:	2a00      	cmp	r2, #0
 800895c:	f000 80b2 	beq.w	8008ac4 <_dtoa_r+0x87c>
 8008960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008964:	9e07      	ldr	r6, [sp, #28]
 8008966:	9d04      	ldr	r5, [sp, #16]
 8008968:	9a04      	ldr	r2, [sp, #16]
 800896a:	441a      	add	r2, r3
 800896c:	9204      	str	r2, [sp, #16]
 800896e:	9a05      	ldr	r2, [sp, #20]
 8008970:	2101      	movs	r1, #1
 8008972:	441a      	add	r2, r3
 8008974:	4620      	mov	r0, r4
 8008976:	9205      	str	r2, [sp, #20]
 8008978:	f000 fd86 	bl	8009488 <__i2b>
 800897c:	4607      	mov	r7, r0
 800897e:	2d00      	cmp	r5, #0
 8008980:	dd0c      	ble.n	800899c <_dtoa_r+0x754>
 8008982:	9b05      	ldr	r3, [sp, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dd09      	ble.n	800899c <_dtoa_r+0x754>
 8008988:	42ab      	cmp	r3, r5
 800898a:	9a04      	ldr	r2, [sp, #16]
 800898c:	bfa8      	it	ge
 800898e:	462b      	movge	r3, r5
 8008990:	1ad2      	subs	r2, r2, r3
 8008992:	9204      	str	r2, [sp, #16]
 8008994:	9a05      	ldr	r2, [sp, #20]
 8008996:	1aed      	subs	r5, r5, r3
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	b31b      	cbz	r3, 80089e8 <_dtoa_r+0x7a0>
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80af 	beq.w	8008b06 <_dtoa_r+0x8be>
 80089a8:	2e00      	cmp	r6, #0
 80089aa:	dd13      	ble.n	80089d4 <_dtoa_r+0x78c>
 80089ac:	4639      	mov	r1, r7
 80089ae:	4632      	mov	r2, r6
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fe29 	bl	8009608 <__pow5mult>
 80089b6:	ee18 2a10 	vmov	r2, s16
 80089ba:	4601      	mov	r1, r0
 80089bc:	4607      	mov	r7, r0
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fd78 	bl	80094b4 <__multiply>
 80089c4:	ee18 1a10 	vmov	r1, s16
 80089c8:	4680      	mov	r8, r0
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fca4 	bl	8009318 <_Bfree>
 80089d0:	ee08 8a10 	vmov	s16, r8
 80089d4:	9b07      	ldr	r3, [sp, #28]
 80089d6:	1b9a      	subs	r2, r3, r6
 80089d8:	d006      	beq.n	80089e8 <_dtoa_r+0x7a0>
 80089da:	ee18 1a10 	vmov	r1, s16
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 fe12 	bl	8009608 <__pow5mult>
 80089e4:	ee08 0a10 	vmov	s16, r0
 80089e8:	2101      	movs	r1, #1
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fd4c 	bl	8009488 <__i2b>
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	4606      	mov	r6, r0
 80089f6:	f340 8088 	ble.w	8008b0a <_dtoa_r+0x8c2>
 80089fa:	461a      	mov	r2, r3
 80089fc:	4601      	mov	r1, r0
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fe02 	bl	8009608 <__pow5mult>
 8008a04:	9b06      	ldr	r3, [sp, #24]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	4606      	mov	r6, r0
 8008a0a:	f340 8081 	ble.w	8008b10 <_dtoa_r+0x8c8>
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	6933      	ldr	r3, [r6, #16]
 8008a14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a18:	6918      	ldr	r0, [r3, #16]
 8008a1a:	f000 fce5 	bl	80093e8 <__hi0bits>
 8008a1e:	f1c0 0020 	rsb	r0, r0, #32
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	4418      	add	r0, r3
 8008a26:	f010 001f 	ands.w	r0, r0, #31
 8008a2a:	f000 8092 	beq.w	8008b52 <_dtoa_r+0x90a>
 8008a2e:	f1c0 0320 	rsb	r3, r0, #32
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	f340 808a 	ble.w	8008b4c <_dtoa_r+0x904>
 8008a38:	f1c0 001c 	rsb	r0, r0, #28
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	4403      	add	r3, r0
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	4403      	add	r3, r0
 8008a46:	4405      	add	r5, r0
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	9b04      	ldr	r3, [sp, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd07      	ble.n	8008a60 <_dtoa_r+0x818>
 8008a50:	ee18 1a10 	vmov	r1, s16
 8008a54:	461a      	mov	r2, r3
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fe30 	bl	80096bc <__lshift>
 8008a5c:	ee08 0a10 	vmov	s16, r0
 8008a60:	9b05      	ldr	r3, [sp, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dd05      	ble.n	8008a72 <_dtoa_r+0x82a>
 8008a66:	4631      	mov	r1, r6
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fe26 	bl	80096bc <__lshift>
 8008a70:	4606      	mov	r6, r0
 8008a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d06e      	beq.n	8008b56 <_dtoa_r+0x90e>
 8008a78:	ee18 0a10 	vmov	r0, s16
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	f000 fe8d 	bl	800979c <__mcmp>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	da67      	bge.n	8008b56 <_dtoa_r+0x90e>
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	ee18 1a10 	vmov	r1, s16
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	220a      	movs	r2, #10
 8008a92:	2300      	movs	r3, #0
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fc61 	bl	800935c <__multadd>
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	ee08 0a10 	vmov	s16, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 81b1 	beq.w	8008e08 <_dtoa_r+0xbc0>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	220a      	movs	r2, #10
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fc55 	bl	800935c <__multadd>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	f300 808e 	bgt.w	8008bd8 <_dtoa_r+0x990>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dc51      	bgt.n	8008b66 <_dtoa_r+0x91e>
 8008ac2:	e089      	b.n	8008bd8 <_dtoa_r+0x990>
 8008ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008aca:	e74b      	b.n	8008964 <_dtoa_r+0x71c>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1e5e      	subs	r6, r3, #1
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	42b3      	cmp	r3, r6
 8008ad4:	bfbf      	itttt	lt
 8008ad6:	9b07      	ldrlt	r3, [sp, #28]
 8008ad8:	9607      	strlt	r6, [sp, #28]
 8008ada:	1af2      	sublt	r2, r6, r3
 8008adc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ade:	bfb6      	itet	lt
 8008ae0:	189b      	addlt	r3, r3, r2
 8008ae2:	1b9e      	subge	r6, r3, r6
 8008ae4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	bfb8      	it	lt
 8008aea:	2600      	movlt	r6, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bfb7      	itett	lt
 8008af0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008af4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008af8:	1a9d      	sublt	r5, r3, r2
 8008afa:	2300      	movlt	r3, #0
 8008afc:	e734      	b.n	8008968 <_dtoa_r+0x720>
 8008afe:	9e07      	ldr	r6, [sp, #28]
 8008b00:	9d04      	ldr	r5, [sp, #16]
 8008b02:	9f08      	ldr	r7, [sp, #32]
 8008b04:	e73b      	b.n	800897e <_dtoa_r+0x736>
 8008b06:	9a07      	ldr	r2, [sp, #28]
 8008b08:	e767      	b.n	80089da <_dtoa_r+0x792>
 8008b0a:	9b06      	ldr	r3, [sp, #24]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	dc18      	bgt.n	8008b42 <_dtoa_r+0x8fa>
 8008b10:	f1ba 0f00 	cmp.w	sl, #0
 8008b14:	d115      	bne.n	8008b42 <_dtoa_r+0x8fa>
 8008b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b1a:	b993      	cbnz	r3, 8008b42 <_dtoa_r+0x8fa>
 8008b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b20:	0d1b      	lsrs	r3, r3, #20
 8008b22:	051b      	lsls	r3, r3, #20
 8008b24:	b183      	cbz	r3, 8008b48 <_dtoa_r+0x900>
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	9b05      	ldr	r3, [sp, #20]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f04f 0801 	mov.w	r8, #1
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f47f af6a 	bne.w	8008a12 <_dtoa_r+0x7ca>
 8008b3e:	2001      	movs	r0, #1
 8008b40:	e76f      	b.n	8008a22 <_dtoa_r+0x7da>
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	e7f6      	b.n	8008b36 <_dtoa_r+0x8ee>
 8008b48:	4698      	mov	r8, r3
 8008b4a:	e7f4      	b.n	8008b36 <_dtoa_r+0x8ee>
 8008b4c:	f43f af7d 	beq.w	8008a4a <_dtoa_r+0x802>
 8008b50:	4618      	mov	r0, r3
 8008b52:	301c      	adds	r0, #28
 8008b54:	e772      	b.n	8008a3c <_dtoa_r+0x7f4>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc37      	bgt.n	8008bcc <_dtoa_r+0x984>
 8008b5c:	9b06      	ldr	r3, [sp, #24]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	dd34      	ble.n	8008bcc <_dtoa_r+0x984>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	b96b      	cbnz	r3, 8008b86 <_dtoa_r+0x93e>
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	2205      	movs	r2, #5
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 fbf4 	bl	800935c <__multadd>
 8008b74:	4601      	mov	r1, r0
 8008b76:	4606      	mov	r6, r0
 8008b78:	ee18 0a10 	vmov	r0, s16
 8008b7c:	f000 fe0e 	bl	800979c <__mcmp>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	f73f adbb 	bgt.w	80086fc <_dtoa_r+0x4b4>
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	9d01      	ldr	r5, [sp, #4]
 8008b8a:	43db      	mvns	r3, r3
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	4631      	mov	r1, r6
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fbbf 	bl	8009318 <_Bfree>
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	f43f aea4 	beq.w	80088e8 <_dtoa_r+0x6a0>
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	d005      	beq.n	8008bb2 <_dtoa_r+0x96a>
 8008ba6:	45b8      	cmp	r8, r7
 8008ba8:	d003      	beq.n	8008bb2 <_dtoa_r+0x96a>
 8008baa:	4641      	mov	r1, r8
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fbb3 	bl	8009318 <_Bfree>
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fbaf 	bl	8009318 <_Bfree>
 8008bba:	e695      	b.n	80088e8 <_dtoa_r+0x6a0>
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	4637      	mov	r7, r6
 8008bc0:	e7e1      	b.n	8008b86 <_dtoa_r+0x93e>
 8008bc2:	9700      	str	r7, [sp, #0]
 8008bc4:	4637      	mov	r7, r6
 8008bc6:	e599      	b.n	80086fc <_dtoa_r+0x4b4>
 8008bc8:	40240000 	.word	0x40240000
 8008bcc:	9b08      	ldr	r3, [sp, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 80ca 	beq.w	8008d68 <_dtoa_r+0xb20>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	9302      	str	r3, [sp, #8]
 8008bd8:	2d00      	cmp	r5, #0
 8008bda:	dd05      	ble.n	8008be8 <_dtoa_r+0x9a0>
 8008bdc:	4639      	mov	r1, r7
 8008bde:	462a      	mov	r2, r5
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fd6b 	bl	80096bc <__lshift>
 8008be6:	4607      	mov	r7, r0
 8008be8:	f1b8 0f00 	cmp.w	r8, #0
 8008bec:	d05b      	beq.n	8008ca6 <_dtoa_r+0xa5e>
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fb51 	bl	8009298 <_Balloc>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b928      	cbnz	r0, 8008c06 <_dtoa_r+0x9be>
 8008bfa:	4b87      	ldr	r3, [pc, #540]	; (8008e18 <_dtoa_r+0xbd0>)
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c02:	f7ff bb3b 	b.w	800827c <_dtoa_r+0x34>
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	3202      	adds	r2, #2
 8008c0a:	0092      	lsls	r2, r2, #2
 8008c0c:	f107 010c 	add.w	r1, r7, #12
 8008c10:	300c      	adds	r0, #12
 8008c12:	f000 fb33 	bl	800927c <memcpy>
 8008c16:	2201      	movs	r2, #1
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 fd4e 	bl	80096bc <__lshift>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	f103 0901 	add.w	r9, r3, #1
 8008c26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	f00a 0301 	and.w	r3, sl, #1
 8008c32:	46b8      	mov	r8, r7
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	4607      	mov	r7, r0
 8008c38:	4631      	mov	r1, r6
 8008c3a:	ee18 0a10 	vmov	r0, s16
 8008c3e:	f7ff fa75 	bl	800812c <quorem>
 8008c42:	4641      	mov	r1, r8
 8008c44:	9002      	str	r0, [sp, #8]
 8008c46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c4a:	ee18 0a10 	vmov	r0, s16
 8008c4e:	f000 fda5 	bl	800979c <__mcmp>
 8008c52:	463a      	mov	r2, r7
 8008c54:	9003      	str	r0, [sp, #12]
 8008c56:	4631      	mov	r1, r6
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fdbb 	bl	80097d4 <__mdiff>
 8008c5e:	68c2      	ldr	r2, [r0, #12]
 8008c60:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c64:	4605      	mov	r5, r0
 8008c66:	bb02      	cbnz	r2, 8008caa <_dtoa_r+0xa62>
 8008c68:	4601      	mov	r1, r0
 8008c6a:	ee18 0a10 	vmov	r0, s16
 8008c6e:	f000 fd95 	bl	800979c <__mcmp>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4629      	mov	r1, r5
 8008c76:	4620      	mov	r0, r4
 8008c78:	9207      	str	r2, [sp, #28]
 8008c7a:	f000 fb4d 	bl	8009318 <_Bfree>
 8008c7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c82:	ea43 0102 	orr.w	r1, r3, r2
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	464d      	mov	r5, r9
 8008c8c:	d10f      	bne.n	8008cae <_dtoa_r+0xa66>
 8008c8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c92:	d02a      	beq.n	8008cea <_dtoa_r+0xaa2>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dd02      	ble.n	8008ca0 <_dtoa_r+0xa58>
 8008c9a:	9b02      	ldr	r3, [sp, #8]
 8008c9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ca0:	f88b a000 	strb.w	sl, [fp]
 8008ca4:	e775      	b.n	8008b92 <_dtoa_r+0x94a>
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	e7ba      	b.n	8008c20 <_dtoa_r+0x9d8>
 8008caa:	2201      	movs	r2, #1
 8008cac:	e7e2      	b.n	8008c74 <_dtoa_r+0xa2c>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	db04      	blt.n	8008cbe <_dtoa_r+0xa76>
 8008cb4:	9906      	ldr	r1, [sp, #24]
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	9904      	ldr	r1, [sp, #16]
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	d122      	bne.n	8008d04 <_dtoa_r+0xabc>
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	ddee      	ble.n	8008ca0 <_dtoa_r+0xa58>
 8008cc2:	ee18 1a10 	vmov	r1, s16
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 fcf7 	bl	80096bc <__lshift>
 8008cce:	4631      	mov	r1, r6
 8008cd0:	ee08 0a10 	vmov	s16, r0
 8008cd4:	f000 fd62 	bl	800979c <__mcmp>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	dc03      	bgt.n	8008ce4 <_dtoa_r+0xa9c>
 8008cdc:	d1e0      	bne.n	8008ca0 <_dtoa_r+0xa58>
 8008cde:	f01a 0f01 	tst.w	sl, #1
 8008ce2:	d0dd      	beq.n	8008ca0 <_dtoa_r+0xa58>
 8008ce4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ce8:	d1d7      	bne.n	8008c9a <_dtoa_r+0xa52>
 8008cea:	2339      	movs	r3, #57	; 0x39
 8008cec:	f88b 3000 	strb.w	r3, [fp]
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	461d      	mov	r5, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cfa:	2a39      	cmp	r2, #57	; 0x39
 8008cfc:	d071      	beq.n	8008de2 <_dtoa_r+0xb9a>
 8008cfe:	3201      	adds	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e746      	b.n	8008b92 <_dtoa_r+0x94a>
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	dd07      	ble.n	8008d18 <_dtoa_r+0xad0>
 8008d08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d0c:	d0ed      	beq.n	8008cea <_dtoa_r+0xaa2>
 8008d0e:	f10a 0301 	add.w	r3, sl, #1
 8008d12:	f88b 3000 	strb.w	r3, [fp]
 8008d16:	e73c      	b.n	8008b92 <_dtoa_r+0x94a>
 8008d18:	9b05      	ldr	r3, [sp, #20]
 8008d1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d1e:	4599      	cmp	r9, r3
 8008d20:	d047      	beq.n	8008db2 <_dtoa_r+0xb6a>
 8008d22:	ee18 1a10 	vmov	r1, s16
 8008d26:	2300      	movs	r3, #0
 8008d28:	220a      	movs	r2, #10
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 fb16 	bl	800935c <__multadd>
 8008d30:	45b8      	cmp	r8, r7
 8008d32:	ee08 0a10 	vmov	s16, r0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	f04f 020a 	mov.w	r2, #10
 8008d3e:	4641      	mov	r1, r8
 8008d40:	4620      	mov	r0, r4
 8008d42:	d106      	bne.n	8008d52 <_dtoa_r+0xb0a>
 8008d44:	f000 fb0a 	bl	800935c <__multadd>
 8008d48:	4680      	mov	r8, r0
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	f109 0901 	add.w	r9, r9, #1
 8008d50:	e772      	b.n	8008c38 <_dtoa_r+0x9f0>
 8008d52:	f000 fb03 	bl	800935c <__multadd>
 8008d56:	4639      	mov	r1, r7
 8008d58:	4680      	mov	r8, r0
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fafc 	bl	800935c <__multadd>
 8008d64:	4607      	mov	r7, r0
 8008d66:	e7f1      	b.n	8008d4c <_dtoa_r+0xb04>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	9302      	str	r3, [sp, #8]
 8008d6c:	9d01      	ldr	r5, [sp, #4]
 8008d6e:	ee18 0a10 	vmov	r0, s16
 8008d72:	4631      	mov	r1, r6
 8008d74:	f7ff f9da 	bl	800812c <quorem>
 8008d78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d82:	1aea      	subs	r2, r5, r3
 8008d84:	9b02      	ldr	r3, [sp, #8]
 8008d86:	4293      	cmp	r3, r2
 8008d88:	dd09      	ble.n	8008d9e <_dtoa_r+0xb56>
 8008d8a:	ee18 1a10 	vmov	r1, s16
 8008d8e:	2300      	movs	r3, #0
 8008d90:	220a      	movs	r2, #10
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 fae2 	bl	800935c <__multadd>
 8008d98:	ee08 0a10 	vmov	s16, r0
 8008d9c:	e7e7      	b.n	8008d6e <_dtoa_r+0xb26>
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	bfc8      	it	gt
 8008da4:	461d      	movgt	r5, r3
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	bfd8      	it	le
 8008daa:	2501      	movle	r5, #1
 8008dac:	441d      	add	r5, r3
 8008dae:	f04f 0800 	mov.w	r8, #0
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	2201      	movs	r2, #1
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fc7f 	bl	80096bc <__lshift>
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	ee08 0a10 	vmov	s16, r0
 8008dc4:	f000 fcea 	bl	800979c <__mcmp>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	dc91      	bgt.n	8008cf0 <_dtoa_r+0xaa8>
 8008dcc:	d102      	bne.n	8008dd4 <_dtoa_r+0xb8c>
 8008dce:	f01a 0f01 	tst.w	sl, #1
 8008dd2:	d18d      	bne.n	8008cf0 <_dtoa_r+0xaa8>
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	461d      	mov	r5, r3
 8008dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ddc:	2a30      	cmp	r2, #48	; 0x30
 8008dde:	d0fa      	beq.n	8008dd6 <_dtoa_r+0xb8e>
 8008de0:	e6d7      	b.n	8008b92 <_dtoa_r+0x94a>
 8008de2:	9a01      	ldr	r2, [sp, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d184      	bne.n	8008cf2 <_dtoa_r+0xaaa>
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2331      	movs	r3, #49	; 0x31
 8008df0:	7013      	strb	r3, [r2, #0]
 8008df2:	e6ce      	b.n	8008b92 <_dtoa_r+0x94a>
 8008df4:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <_dtoa_r+0xbd4>)
 8008df6:	f7ff ba95 	b.w	8008324 <_dtoa_r+0xdc>
 8008dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f47f aa6e 	bne.w	80082de <_dtoa_r+0x96>
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <_dtoa_r+0xbd8>)
 8008e04:	f7ff ba8e 	b.w	8008324 <_dtoa_r+0xdc>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dcae      	bgt.n	8008d6c <_dtoa_r+0xb24>
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	f73f aea8 	bgt.w	8008b66 <_dtoa_r+0x91e>
 8008e16:	e7a9      	b.n	8008d6c <_dtoa_r+0xb24>
 8008e18:	0800b463 	.word	0x0800b463
 8008e1c:	0800b3c0 	.word	0x0800b3c0
 8008e20:	0800b3e4 	.word	0x0800b3e4

08008e24 <__sflush_r>:
 8008e24:	898a      	ldrh	r2, [r1, #12]
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	0710      	lsls	r0, r2, #28
 8008e2e:	460c      	mov	r4, r1
 8008e30:	d458      	bmi.n	8008ee4 <__sflush_r+0xc0>
 8008e32:	684b      	ldr	r3, [r1, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dc05      	bgt.n	8008e44 <__sflush_r+0x20>
 8008e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dc02      	bgt.n	8008e44 <__sflush_r+0x20>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d0f9      	beq.n	8008e3e <__sflush_r+0x1a>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e50:	682f      	ldr	r7, [r5, #0]
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	d032      	beq.n	8008ebc <__sflush_r+0x98>
 8008e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	075a      	lsls	r2, r3, #29
 8008e5c:	d505      	bpl.n	8008e6a <__sflush_r+0x46>
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	1ac0      	subs	r0, r0, r3
 8008e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e64:	b10b      	cbz	r3, 8008e6a <__sflush_r+0x46>
 8008e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e68:	1ac0      	subs	r0, r0, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e70:	6a21      	ldr	r1, [r4, #32]
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b0      	blx	r6
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	d106      	bne.n	8008e8a <__sflush_r+0x66>
 8008e7c:	6829      	ldr	r1, [r5, #0]
 8008e7e:	291d      	cmp	r1, #29
 8008e80:	d82c      	bhi.n	8008edc <__sflush_r+0xb8>
 8008e82:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <__sflush_r+0x108>)
 8008e84:	40ca      	lsrs	r2, r1
 8008e86:	07d6      	lsls	r6, r2, #31
 8008e88:	d528      	bpl.n	8008edc <__sflush_r+0xb8>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	6062      	str	r2, [r4, #4]
 8008e8e:	04d9      	lsls	r1, r3, #19
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	d504      	bpl.n	8008ea0 <__sflush_r+0x7c>
 8008e96:	1c42      	adds	r2, r0, #1
 8008e98:	d101      	bne.n	8008e9e <__sflush_r+0x7a>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b903      	cbnz	r3, 8008ea0 <__sflush_r+0x7c>
 8008e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea2:	602f      	str	r7, [r5, #0]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d0ca      	beq.n	8008e3e <__sflush_r+0x1a>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__sflush_r+0x92>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 fd8b 	bl	80099cc <_free_r>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eba:	e7c1      	b.n	8008e40 <__sflush_r+0x1c>
 8008ebc:	6a21      	ldr	r1, [r4, #32]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b0      	blx	r6
 8008ec4:	1c41      	adds	r1, r0, #1
 8008ec6:	d1c7      	bne.n	8008e58 <__sflush_r+0x34>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c4      	beq.n	8008e58 <__sflush_r+0x34>
 8008ece:	2b1d      	cmp	r3, #29
 8008ed0:	d001      	beq.n	8008ed6 <__sflush_r+0xb2>
 8008ed2:	2b16      	cmp	r3, #22
 8008ed4:	d101      	bne.n	8008eda <__sflush_r+0xb6>
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	e7b1      	b.n	8008e3e <__sflush_r+0x1a>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	e7ad      	b.n	8008e40 <__sflush_r+0x1c>
 8008ee4:	690f      	ldr	r7, [r1, #16]
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	d0a9      	beq.n	8008e3e <__sflush_r+0x1a>
 8008eea:	0793      	lsls	r3, r2, #30
 8008eec:	680e      	ldr	r6, [r1, #0]
 8008eee:	bf08      	it	eq
 8008ef0:	694b      	ldreq	r3, [r1, #20]
 8008ef2:	600f      	str	r7, [r1, #0]
 8008ef4:	bf18      	it	ne
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	eba6 0807 	sub.w	r8, r6, r7
 8008efc:	608b      	str	r3, [r1, #8]
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	dd9c      	ble.n	8008e3e <__sflush_r+0x1a>
 8008f04:	6a21      	ldr	r1, [r4, #32]
 8008f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f08:	4643      	mov	r3, r8
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b0      	blx	r6
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dc06      	bgt.n	8008f22 <__sflush_r+0xfe>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	e78e      	b.n	8008e40 <__sflush_r+0x1c>
 8008f22:	4407      	add	r7, r0
 8008f24:	eba8 0800 	sub.w	r8, r8, r0
 8008f28:	e7e9      	b.n	8008efe <__sflush_r+0xda>
 8008f2a:	bf00      	nop
 8008f2c:	20400001 	.word	0x20400001

08008f30 <_fflush_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	690b      	ldr	r3, [r1, #16]
 8008f34:	4605      	mov	r5, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	b913      	cbnz	r3, 8008f40 <_fflush_r+0x10>
 8008f3a:	2500      	movs	r5, #0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	b118      	cbz	r0, 8008f4a <_fflush_r+0x1a>
 8008f42:	6983      	ldr	r3, [r0, #24]
 8008f44:	b90b      	cbnz	r3, 8008f4a <_fflush_r+0x1a>
 8008f46:	f000 f887 	bl	8009058 <__sinit>
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <_fflush_r+0x6c>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	d11b      	bne.n	8008f88 <_fflush_r+0x58>
 8008f50:	686c      	ldr	r4, [r5, #4]
 8008f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ef      	beq.n	8008f3a <_fflush_r+0xa>
 8008f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f5c:	07d0      	lsls	r0, r2, #31
 8008f5e:	d404      	bmi.n	8008f6a <_fflush_r+0x3a>
 8008f60:	0599      	lsls	r1, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_fflush_r+0x3a>
 8008f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f66:	f000 f91a 	bl	800919e <__retarget_lock_acquire_recursive>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	f7ff ff59 	bl	8008e24 <__sflush_r>
 8008f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f74:	07da      	lsls	r2, r3, #31
 8008f76:	4605      	mov	r5, r0
 8008f78:	d4e0      	bmi.n	8008f3c <_fflush_r+0xc>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	059b      	lsls	r3, r3, #22
 8008f7e:	d4dd      	bmi.n	8008f3c <_fflush_r+0xc>
 8008f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f82:	f000 f90d 	bl	80091a0 <__retarget_lock_release_recursive>
 8008f86:	e7d9      	b.n	8008f3c <_fflush_r+0xc>
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <_fflush_r+0x70>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d101      	bne.n	8008f92 <_fflush_r+0x62>
 8008f8e:	68ac      	ldr	r4, [r5, #8]
 8008f90:	e7df      	b.n	8008f52 <_fflush_r+0x22>
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <_fflush_r+0x74>)
 8008f94:	429c      	cmp	r4, r3
 8008f96:	bf08      	it	eq
 8008f98:	68ec      	ldreq	r4, [r5, #12]
 8008f9a:	e7da      	b.n	8008f52 <_fflush_r+0x22>
 8008f9c:	0800b494 	.word	0x0800b494
 8008fa0:	0800b4b4 	.word	0x0800b4b4
 8008fa4:	0800b474 	.word	0x0800b474

08008fa8 <std>:
 8008fa8:	2300      	movs	r3, #0
 8008faa:	b510      	push	{r4, lr}
 8008fac:	4604      	mov	r4, r0
 8008fae:	e9c0 3300 	strd	r3, r3, [r0]
 8008fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb6:	6083      	str	r3, [r0, #8]
 8008fb8:	8181      	strh	r1, [r0, #12]
 8008fba:	6643      	str	r3, [r0, #100]	; 0x64
 8008fbc:	81c2      	strh	r2, [r0, #14]
 8008fbe:	6183      	str	r3, [r0, #24]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	305c      	adds	r0, #92	; 0x5c
 8008fc6:	f7fe faf1 	bl	80075ac <memset>
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <std+0x38>)
 8008fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <std+0x3c>)
 8008fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <std+0x40>)
 8008fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <std+0x44>)
 8008fd8:	6224      	str	r4, [r4, #32]
 8008fda:	6323      	str	r3, [r4, #48]	; 0x30
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	bf00      	nop
 8008fe0:	08009e61 	.word	0x08009e61
 8008fe4:	08009e83 	.word	0x08009e83
 8008fe8:	08009ebb 	.word	0x08009ebb
 8008fec:	08009edf 	.word	0x08009edf

08008ff0 <_cleanup_r>:
 8008ff0:	4901      	ldr	r1, [pc, #4]	; (8008ff8 <_cleanup_r+0x8>)
 8008ff2:	f000 b8af 	b.w	8009154 <_fwalk_reent>
 8008ff6:	bf00      	nop
 8008ff8:	08008f31 	.word	0x08008f31

08008ffc <__sfmoreglue>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	2268      	movs	r2, #104	; 0x68
 8009000:	1e4d      	subs	r5, r1, #1
 8009002:	4355      	muls	r5, r2
 8009004:	460e      	mov	r6, r1
 8009006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800900a:	f000 fd4b 	bl	8009aa4 <_malloc_r>
 800900e:	4604      	mov	r4, r0
 8009010:	b140      	cbz	r0, 8009024 <__sfmoreglue+0x28>
 8009012:	2100      	movs	r1, #0
 8009014:	e9c0 1600 	strd	r1, r6, [r0]
 8009018:	300c      	adds	r0, #12
 800901a:	60a0      	str	r0, [r4, #8]
 800901c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009020:	f7fe fac4 	bl	80075ac <memset>
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}

08009028 <__sfp_lock_acquire>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__sfp_lock_acquire+0x8>)
 800902a:	f000 b8b8 	b.w	800919e <__retarget_lock_acquire_recursive>
 800902e:	bf00      	nop
 8009030:	20000421 	.word	0x20000421

08009034 <__sfp_lock_release>:
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <__sfp_lock_release+0x8>)
 8009036:	f000 b8b3 	b.w	80091a0 <__retarget_lock_release_recursive>
 800903a:	bf00      	nop
 800903c:	20000421 	.word	0x20000421

08009040 <__sinit_lock_acquire>:
 8009040:	4801      	ldr	r0, [pc, #4]	; (8009048 <__sinit_lock_acquire+0x8>)
 8009042:	f000 b8ac 	b.w	800919e <__retarget_lock_acquire_recursive>
 8009046:	bf00      	nop
 8009048:	20000422 	.word	0x20000422

0800904c <__sinit_lock_release>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__sinit_lock_release+0x8>)
 800904e:	f000 b8a7 	b.w	80091a0 <__retarget_lock_release_recursive>
 8009052:	bf00      	nop
 8009054:	20000422 	.word	0x20000422

08009058 <__sinit>:
 8009058:	b510      	push	{r4, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	f7ff fff0 	bl	8009040 <__sinit_lock_acquire>
 8009060:	69a3      	ldr	r3, [r4, #24]
 8009062:	b11b      	cbz	r3, 800906c <__sinit+0x14>
 8009064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009068:	f7ff bff0 	b.w	800904c <__sinit_lock_release>
 800906c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009070:	6523      	str	r3, [r4, #80]	; 0x50
 8009072:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <__sinit+0x68>)
 8009074:	4a13      	ldr	r2, [pc, #76]	; (80090c4 <__sinit+0x6c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	62a2      	str	r2, [r4, #40]	; 0x28
 800907a:	42a3      	cmp	r3, r4
 800907c:	bf04      	itt	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	61a3      	streq	r3, [r4, #24]
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f820 	bl	80090c8 <__sfp>
 8009088:	6060      	str	r0, [r4, #4]
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f81c 	bl	80090c8 <__sfp>
 8009090:	60a0      	str	r0, [r4, #8]
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f818 	bl	80090c8 <__sfp>
 8009098:	2200      	movs	r2, #0
 800909a:	60e0      	str	r0, [r4, #12]
 800909c:	2104      	movs	r1, #4
 800909e:	6860      	ldr	r0, [r4, #4]
 80090a0:	f7ff ff82 	bl	8008fa8 <std>
 80090a4:	68a0      	ldr	r0, [r4, #8]
 80090a6:	2201      	movs	r2, #1
 80090a8:	2109      	movs	r1, #9
 80090aa:	f7ff ff7d 	bl	8008fa8 <std>
 80090ae:	68e0      	ldr	r0, [r4, #12]
 80090b0:	2202      	movs	r2, #2
 80090b2:	2112      	movs	r1, #18
 80090b4:	f7ff ff78 	bl	8008fa8 <std>
 80090b8:	2301      	movs	r3, #1
 80090ba:	61a3      	str	r3, [r4, #24]
 80090bc:	e7d2      	b.n	8009064 <__sinit+0xc>
 80090be:	bf00      	nop
 80090c0:	0800b3ac 	.word	0x0800b3ac
 80090c4:	08008ff1 	.word	0x08008ff1

080090c8 <__sfp>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	4607      	mov	r7, r0
 80090cc:	f7ff ffac 	bl	8009028 <__sfp_lock_acquire>
 80090d0:	4b1e      	ldr	r3, [pc, #120]	; (800914c <__sfp+0x84>)
 80090d2:	681e      	ldr	r6, [r3, #0]
 80090d4:	69b3      	ldr	r3, [r6, #24]
 80090d6:	b913      	cbnz	r3, 80090de <__sfp+0x16>
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ffbd 	bl	8009058 <__sinit>
 80090de:	3648      	adds	r6, #72	; 0x48
 80090e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	d503      	bpl.n	80090f0 <__sfp+0x28>
 80090e8:	6833      	ldr	r3, [r6, #0]
 80090ea:	b30b      	cbz	r3, 8009130 <__sfp+0x68>
 80090ec:	6836      	ldr	r6, [r6, #0]
 80090ee:	e7f7      	b.n	80090e0 <__sfp+0x18>
 80090f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090f4:	b9d5      	cbnz	r5, 800912c <__sfp+0x64>
 80090f6:	4b16      	ldr	r3, [pc, #88]	; (8009150 <__sfp+0x88>)
 80090f8:	60e3      	str	r3, [r4, #12]
 80090fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009100:	f000 f84c 	bl	800919c <__retarget_lock_init_recursive>
 8009104:	f7ff ff96 	bl	8009034 <__sfp_lock_release>
 8009108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800910c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	61a5      	str	r5, [r4, #24]
 8009114:	2208      	movs	r2, #8
 8009116:	4629      	mov	r1, r5
 8009118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800911c:	f7fe fa46 	bl	80075ac <memset>
 8009120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009128:	4620      	mov	r0, r4
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912c:	3468      	adds	r4, #104	; 0x68
 800912e:	e7d9      	b.n	80090e4 <__sfp+0x1c>
 8009130:	2104      	movs	r1, #4
 8009132:	4638      	mov	r0, r7
 8009134:	f7ff ff62 	bl	8008ffc <__sfmoreglue>
 8009138:	4604      	mov	r4, r0
 800913a:	6030      	str	r0, [r6, #0]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1d5      	bne.n	80090ec <__sfp+0x24>
 8009140:	f7ff ff78 	bl	8009034 <__sfp_lock_release>
 8009144:	230c      	movs	r3, #12
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	e7ee      	b.n	8009128 <__sfp+0x60>
 800914a:	bf00      	nop
 800914c:	0800b3ac 	.word	0x0800b3ac
 8009150:	ffff0001 	.word	0xffff0001

08009154 <_fwalk_reent>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	4606      	mov	r6, r0
 800915a:	4688      	mov	r8, r1
 800915c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009160:	2700      	movs	r7, #0
 8009162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009166:	f1b9 0901 	subs.w	r9, r9, #1
 800916a:	d505      	bpl.n	8009178 <_fwalk_reent+0x24>
 800916c:	6824      	ldr	r4, [r4, #0]
 800916e:	2c00      	cmp	r4, #0
 8009170:	d1f7      	bne.n	8009162 <_fwalk_reent+0xe>
 8009172:	4638      	mov	r0, r7
 8009174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009178:	89ab      	ldrh	r3, [r5, #12]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d907      	bls.n	800918e <_fwalk_reent+0x3a>
 800917e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009182:	3301      	adds	r3, #1
 8009184:	d003      	beq.n	800918e <_fwalk_reent+0x3a>
 8009186:	4629      	mov	r1, r5
 8009188:	4630      	mov	r0, r6
 800918a:	47c0      	blx	r8
 800918c:	4307      	orrs	r7, r0
 800918e:	3568      	adds	r5, #104	; 0x68
 8009190:	e7e9      	b.n	8009166 <_fwalk_reent+0x12>
	...

08009194 <_localeconv_r>:
 8009194:	4800      	ldr	r0, [pc, #0]	; (8009198 <_localeconv_r+0x4>)
 8009196:	4770      	bx	lr
 8009198:	20000164 	.word	0x20000164

0800919c <__retarget_lock_init_recursive>:
 800919c:	4770      	bx	lr

0800919e <__retarget_lock_acquire_recursive>:
 800919e:	4770      	bx	lr

080091a0 <__retarget_lock_release_recursive>:
 80091a0:	4770      	bx	lr

080091a2 <__swhatbuf_r>:
 80091a2:	b570      	push	{r4, r5, r6, lr}
 80091a4:	460e      	mov	r6, r1
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	2900      	cmp	r1, #0
 80091ac:	b096      	sub	sp, #88	; 0x58
 80091ae:	4614      	mov	r4, r2
 80091b0:	461d      	mov	r5, r3
 80091b2:	da08      	bge.n	80091c6 <__swhatbuf_r+0x24>
 80091b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	602a      	str	r2, [r5, #0]
 80091bc:	061a      	lsls	r2, r3, #24
 80091be:	d410      	bmi.n	80091e2 <__swhatbuf_r+0x40>
 80091c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c4:	e00e      	b.n	80091e4 <__swhatbuf_r+0x42>
 80091c6:	466a      	mov	r2, sp
 80091c8:	f000 fee0 	bl	8009f8c <_fstat_r>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dbf1      	blt.n	80091b4 <__swhatbuf_r+0x12>
 80091d0:	9a01      	ldr	r2, [sp, #4]
 80091d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091da:	425a      	negs	r2, r3
 80091dc:	415a      	adcs	r2, r3
 80091de:	602a      	str	r2, [r5, #0]
 80091e0:	e7ee      	b.n	80091c0 <__swhatbuf_r+0x1e>
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	2000      	movs	r0, #0
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	b016      	add	sp, #88	; 0x58
 80091ea:	bd70      	pop	{r4, r5, r6, pc}

080091ec <__smakebuf_r>:
 80091ec:	898b      	ldrh	r3, [r1, #12]
 80091ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091f0:	079d      	lsls	r5, r3, #30
 80091f2:	4606      	mov	r6, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	d507      	bpl.n	8009208 <__smakebuf_r+0x1c>
 80091f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	2301      	movs	r3, #1
 8009202:	6163      	str	r3, [r4, #20]
 8009204:	b002      	add	sp, #8
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	ab01      	add	r3, sp, #4
 800920a:	466a      	mov	r2, sp
 800920c:	f7ff ffc9 	bl	80091a2 <__swhatbuf_r>
 8009210:	9900      	ldr	r1, [sp, #0]
 8009212:	4605      	mov	r5, r0
 8009214:	4630      	mov	r0, r6
 8009216:	f000 fc45 	bl	8009aa4 <_malloc_r>
 800921a:	b948      	cbnz	r0, 8009230 <__smakebuf_r+0x44>
 800921c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009220:	059a      	lsls	r2, r3, #22
 8009222:	d4ef      	bmi.n	8009204 <__smakebuf_r+0x18>
 8009224:	f023 0303 	bic.w	r3, r3, #3
 8009228:	f043 0302 	orr.w	r3, r3, #2
 800922c:	81a3      	strh	r3, [r4, #12]
 800922e:	e7e3      	b.n	80091f8 <__smakebuf_r+0xc>
 8009230:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <__smakebuf_r+0x7c>)
 8009232:	62b3      	str	r3, [r6, #40]	; 0x28
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	6020      	str	r0, [r4, #0]
 8009238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	6163      	str	r3, [r4, #20]
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	6120      	str	r0, [r4, #16]
 8009246:	b15b      	cbz	r3, 8009260 <__smakebuf_r+0x74>
 8009248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800924c:	4630      	mov	r0, r6
 800924e:	f000 feaf 	bl	8009fb0 <_isatty_r>
 8009252:	b128      	cbz	r0, 8009260 <__smakebuf_r+0x74>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	f043 0301 	orr.w	r3, r3, #1
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	89a0      	ldrh	r0, [r4, #12]
 8009262:	4305      	orrs	r5, r0
 8009264:	81a5      	strh	r5, [r4, #12]
 8009266:	e7cd      	b.n	8009204 <__smakebuf_r+0x18>
 8009268:	08008ff1 	.word	0x08008ff1

0800926c <malloc>:
 800926c:	4b02      	ldr	r3, [pc, #8]	; (8009278 <malloc+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 bc17 	b.w	8009aa4 <_malloc_r>
 8009276:	bf00      	nop
 8009278:	20000010 	.word	0x20000010

0800927c <memcpy>:
 800927c:	440a      	add	r2, r1
 800927e:	4291      	cmp	r1, r2
 8009280:	f100 33ff 	add.w	r3, r0, #4294967295
 8009284:	d100      	bne.n	8009288 <memcpy+0xc>
 8009286:	4770      	bx	lr
 8009288:	b510      	push	{r4, lr}
 800928a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009292:	4291      	cmp	r1, r2
 8009294:	d1f9      	bne.n	800928a <memcpy+0xe>
 8009296:	bd10      	pop	{r4, pc}

08009298 <_Balloc>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	b976      	cbnz	r6, 80092c0 <_Balloc+0x28>
 80092a2:	2010      	movs	r0, #16
 80092a4:	f7ff ffe2 	bl	800926c <malloc>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6260      	str	r0, [r4, #36]	; 0x24
 80092ac:	b920      	cbnz	r0, 80092b8 <_Balloc+0x20>
 80092ae:	4b18      	ldr	r3, [pc, #96]	; (8009310 <_Balloc+0x78>)
 80092b0:	4818      	ldr	r0, [pc, #96]	; (8009314 <_Balloc+0x7c>)
 80092b2:	2166      	movs	r1, #102	; 0x66
 80092b4:	f000 fe2a 	bl	8009f0c <__assert_func>
 80092b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092bc:	6006      	str	r6, [r0, #0]
 80092be:	60c6      	str	r6, [r0, #12]
 80092c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092c2:	68f3      	ldr	r3, [r6, #12]
 80092c4:	b183      	cbz	r3, 80092e8 <_Balloc+0x50>
 80092c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092ce:	b9b8      	cbnz	r0, 8009300 <_Balloc+0x68>
 80092d0:	2101      	movs	r1, #1
 80092d2:	fa01 f605 	lsl.w	r6, r1, r5
 80092d6:	1d72      	adds	r2, r6, #5
 80092d8:	0092      	lsls	r2, r2, #2
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fb60 	bl	80099a0 <_calloc_r>
 80092e0:	b160      	cbz	r0, 80092fc <_Balloc+0x64>
 80092e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092e6:	e00e      	b.n	8009306 <_Balloc+0x6e>
 80092e8:	2221      	movs	r2, #33	; 0x21
 80092ea:	2104      	movs	r1, #4
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fb57 	bl	80099a0 <_calloc_r>
 80092f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f4:	60f0      	str	r0, [r6, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e4      	bne.n	80092c6 <_Balloc+0x2e>
 80092fc:	2000      	movs	r0, #0
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	6802      	ldr	r2, [r0, #0]
 8009302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009306:	2300      	movs	r3, #0
 8009308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800930c:	e7f7      	b.n	80092fe <_Balloc+0x66>
 800930e:	bf00      	nop
 8009310:	0800b3f1 	.word	0x0800b3f1
 8009314:	0800b4d4 	.word	0x0800b4d4

08009318 <_Bfree>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800931c:	4605      	mov	r5, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b976      	cbnz	r6, 8009340 <_Bfree+0x28>
 8009322:	2010      	movs	r0, #16
 8009324:	f7ff ffa2 	bl	800926c <malloc>
 8009328:	4602      	mov	r2, r0
 800932a:	6268      	str	r0, [r5, #36]	; 0x24
 800932c:	b920      	cbnz	r0, 8009338 <_Bfree+0x20>
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <_Bfree+0x3c>)
 8009330:	4809      	ldr	r0, [pc, #36]	; (8009358 <_Bfree+0x40>)
 8009332:	218a      	movs	r1, #138	; 0x8a
 8009334:	f000 fdea 	bl	8009f0c <__assert_func>
 8009338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800933c:	6006      	str	r6, [r0, #0]
 800933e:	60c6      	str	r6, [r0, #12]
 8009340:	b13c      	cbz	r4, 8009352 <_Bfree+0x3a>
 8009342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009344:	6862      	ldr	r2, [r4, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800934c:	6021      	str	r1, [r4, #0]
 800934e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	0800b3f1 	.word	0x0800b3f1
 8009358:	0800b4d4 	.word	0x0800b4d4

0800935c <__multadd>:
 800935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009360:	690d      	ldr	r5, [r1, #16]
 8009362:	4607      	mov	r7, r0
 8009364:	460c      	mov	r4, r1
 8009366:	461e      	mov	r6, r3
 8009368:	f101 0c14 	add.w	ip, r1, #20
 800936c:	2000      	movs	r0, #0
 800936e:	f8dc 3000 	ldr.w	r3, [ip]
 8009372:	b299      	uxth	r1, r3
 8009374:	fb02 6101 	mla	r1, r2, r1, r6
 8009378:	0c1e      	lsrs	r6, r3, #16
 800937a:	0c0b      	lsrs	r3, r1, #16
 800937c:	fb02 3306 	mla	r3, r2, r6, r3
 8009380:	b289      	uxth	r1, r1
 8009382:	3001      	adds	r0, #1
 8009384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009388:	4285      	cmp	r5, r0
 800938a:	f84c 1b04 	str.w	r1, [ip], #4
 800938e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009392:	dcec      	bgt.n	800936e <__multadd+0x12>
 8009394:	b30e      	cbz	r6, 80093da <__multadd+0x7e>
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	42ab      	cmp	r3, r5
 800939a:	dc19      	bgt.n	80093d0 <__multadd+0x74>
 800939c:	6861      	ldr	r1, [r4, #4]
 800939e:	4638      	mov	r0, r7
 80093a0:	3101      	adds	r1, #1
 80093a2:	f7ff ff79 	bl	8009298 <_Balloc>
 80093a6:	4680      	mov	r8, r0
 80093a8:	b928      	cbnz	r0, 80093b6 <__multadd+0x5a>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <__multadd+0x84>)
 80093ae:	480d      	ldr	r0, [pc, #52]	; (80093e4 <__multadd+0x88>)
 80093b0:	21b5      	movs	r1, #181	; 0xb5
 80093b2:	f000 fdab 	bl	8009f0c <__assert_func>
 80093b6:	6922      	ldr	r2, [r4, #16]
 80093b8:	3202      	adds	r2, #2
 80093ba:	f104 010c 	add.w	r1, r4, #12
 80093be:	0092      	lsls	r2, r2, #2
 80093c0:	300c      	adds	r0, #12
 80093c2:	f7ff ff5b 	bl	800927c <memcpy>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4638      	mov	r0, r7
 80093ca:	f7ff ffa5 	bl	8009318 <_Bfree>
 80093ce:	4644      	mov	r4, r8
 80093d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093d4:	3501      	adds	r5, #1
 80093d6:	615e      	str	r6, [r3, #20]
 80093d8:	6125      	str	r5, [r4, #16]
 80093da:	4620      	mov	r0, r4
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	0800b463 	.word	0x0800b463
 80093e4:	0800b4d4 	.word	0x0800b4d4

080093e8 <__hi0bits>:
 80093e8:	0c03      	lsrs	r3, r0, #16
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	b9d3      	cbnz	r3, 8009424 <__hi0bits+0x3c>
 80093ee:	0400      	lsls	r0, r0, #16
 80093f0:	2310      	movs	r3, #16
 80093f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093f6:	bf04      	itt	eq
 80093f8:	0200      	lsleq	r0, r0, #8
 80093fa:	3308      	addeq	r3, #8
 80093fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009400:	bf04      	itt	eq
 8009402:	0100      	lsleq	r0, r0, #4
 8009404:	3304      	addeq	r3, #4
 8009406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800940a:	bf04      	itt	eq
 800940c:	0080      	lsleq	r0, r0, #2
 800940e:	3302      	addeq	r3, #2
 8009410:	2800      	cmp	r0, #0
 8009412:	db05      	blt.n	8009420 <__hi0bits+0x38>
 8009414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009418:	f103 0301 	add.w	r3, r3, #1
 800941c:	bf08      	it	eq
 800941e:	2320      	moveq	r3, #32
 8009420:	4618      	mov	r0, r3
 8009422:	4770      	bx	lr
 8009424:	2300      	movs	r3, #0
 8009426:	e7e4      	b.n	80093f2 <__hi0bits+0xa>

08009428 <__lo0bits>:
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	f013 0207 	ands.w	r2, r3, #7
 800942e:	4601      	mov	r1, r0
 8009430:	d00b      	beq.n	800944a <__lo0bits+0x22>
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d423      	bmi.n	800947e <__lo0bits+0x56>
 8009436:	0798      	lsls	r0, r3, #30
 8009438:	bf49      	itett	mi
 800943a:	085b      	lsrmi	r3, r3, #1
 800943c:	089b      	lsrpl	r3, r3, #2
 800943e:	2001      	movmi	r0, #1
 8009440:	600b      	strmi	r3, [r1, #0]
 8009442:	bf5c      	itt	pl
 8009444:	600b      	strpl	r3, [r1, #0]
 8009446:	2002      	movpl	r0, #2
 8009448:	4770      	bx	lr
 800944a:	b298      	uxth	r0, r3
 800944c:	b9a8      	cbnz	r0, 800947a <__lo0bits+0x52>
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	2010      	movs	r0, #16
 8009452:	b2da      	uxtb	r2, r3
 8009454:	b90a      	cbnz	r2, 800945a <__lo0bits+0x32>
 8009456:	3008      	adds	r0, #8
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	071a      	lsls	r2, r3, #28
 800945c:	bf04      	itt	eq
 800945e:	091b      	lsreq	r3, r3, #4
 8009460:	3004      	addeq	r0, #4
 8009462:	079a      	lsls	r2, r3, #30
 8009464:	bf04      	itt	eq
 8009466:	089b      	lsreq	r3, r3, #2
 8009468:	3002      	addeq	r0, #2
 800946a:	07da      	lsls	r2, r3, #31
 800946c:	d403      	bmi.n	8009476 <__lo0bits+0x4e>
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	f100 0001 	add.w	r0, r0, #1
 8009474:	d005      	beq.n	8009482 <__lo0bits+0x5a>
 8009476:	600b      	str	r3, [r1, #0]
 8009478:	4770      	bx	lr
 800947a:	4610      	mov	r0, r2
 800947c:	e7e9      	b.n	8009452 <__lo0bits+0x2a>
 800947e:	2000      	movs	r0, #0
 8009480:	4770      	bx	lr
 8009482:	2020      	movs	r0, #32
 8009484:	4770      	bx	lr
	...

08009488 <__i2b>:
 8009488:	b510      	push	{r4, lr}
 800948a:	460c      	mov	r4, r1
 800948c:	2101      	movs	r1, #1
 800948e:	f7ff ff03 	bl	8009298 <_Balloc>
 8009492:	4602      	mov	r2, r0
 8009494:	b928      	cbnz	r0, 80094a2 <__i2b+0x1a>
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <__i2b+0x24>)
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <__i2b+0x28>)
 800949a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800949e:	f000 fd35 	bl	8009f0c <__assert_func>
 80094a2:	2301      	movs	r3, #1
 80094a4:	6144      	str	r4, [r0, #20]
 80094a6:	6103      	str	r3, [r0, #16]
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	0800b463 	.word	0x0800b463
 80094b0:	0800b4d4 	.word	0x0800b4d4

080094b4 <__multiply>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	4691      	mov	r9, r2
 80094ba:	690a      	ldr	r2, [r1, #16]
 80094bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	bfb8      	it	lt
 80094c4:	460b      	movlt	r3, r1
 80094c6:	460c      	mov	r4, r1
 80094c8:	bfbc      	itt	lt
 80094ca:	464c      	movlt	r4, r9
 80094cc:	4699      	movlt	r9, r3
 80094ce:	6927      	ldr	r7, [r4, #16]
 80094d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094d4:	68a3      	ldr	r3, [r4, #8]
 80094d6:	6861      	ldr	r1, [r4, #4]
 80094d8:	eb07 060a 	add.w	r6, r7, sl
 80094dc:	42b3      	cmp	r3, r6
 80094de:	b085      	sub	sp, #20
 80094e0:	bfb8      	it	lt
 80094e2:	3101      	addlt	r1, #1
 80094e4:	f7ff fed8 	bl	8009298 <_Balloc>
 80094e8:	b930      	cbnz	r0, 80094f8 <__multiply+0x44>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b44      	ldr	r3, [pc, #272]	; (8009600 <__multiply+0x14c>)
 80094ee:	4845      	ldr	r0, [pc, #276]	; (8009604 <__multiply+0x150>)
 80094f0:	f240 115d 	movw	r1, #349	; 0x15d
 80094f4:	f000 fd0a 	bl	8009f0c <__assert_func>
 80094f8:	f100 0514 	add.w	r5, r0, #20
 80094fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009500:	462b      	mov	r3, r5
 8009502:	2200      	movs	r2, #0
 8009504:	4543      	cmp	r3, r8
 8009506:	d321      	bcc.n	800954c <__multiply+0x98>
 8009508:	f104 0314 	add.w	r3, r4, #20
 800950c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009510:	f109 0314 	add.w	r3, r9, #20
 8009514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009518:	9202      	str	r2, [sp, #8]
 800951a:	1b3a      	subs	r2, r7, r4
 800951c:	3a15      	subs	r2, #21
 800951e:	f022 0203 	bic.w	r2, r2, #3
 8009522:	3204      	adds	r2, #4
 8009524:	f104 0115 	add.w	r1, r4, #21
 8009528:	428f      	cmp	r7, r1
 800952a:	bf38      	it	cc
 800952c:	2204      	movcc	r2, #4
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9a02      	ldr	r2, [sp, #8]
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	429a      	cmp	r2, r3
 8009536:	d80c      	bhi.n	8009552 <__multiply+0x9e>
 8009538:	2e00      	cmp	r6, #0
 800953a:	dd03      	ble.n	8009544 <__multiply+0x90>
 800953c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009540:	2b00      	cmp	r3, #0
 8009542:	d05a      	beq.n	80095fa <__multiply+0x146>
 8009544:	6106      	str	r6, [r0, #16]
 8009546:	b005      	add	sp, #20
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	f843 2b04 	str.w	r2, [r3], #4
 8009550:	e7d8      	b.n	8009504 <__multiply+0x50>
 8009552:	f8b3 a000 	ldrh.w	sl, [r3]
 8009556:	f1ba 0f00 	cmp.w	sl, #0
 800955a:	d024      	beq.n	80095a6 <__multiply+0xf2>
 800955c:	f104 0e14 	add.w	lr, r4, #20
 8009560:	46a9      	mov	r9, r5
 8009562:	f04f 0c00 	mov.w	ip, #0
 8009566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800956a:	f8d9 1000 	ldr.w	r1, [r9]
 800956e:	fa1f fb82 	uxth.w	fp, r2
 8009572:	b289      	uxth	r1, r1
 8009574:	fb0a 110b 	mla	r1, sl, fp, r1
 8009578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800957c:	f8d9 2000 	ldr.w	r2, [r9]
 8009580:	4461      	add	r1, ip
 8009582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009586:	fb0a c20b 	mla	r2, sl, fp, ip
 800958a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800958e:	b289      	uxth	r1, r1
 8009590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009594:	4577      	cmp	r7, lr
 8009596:	f849 1b04 	str.w	r1, [r9], #4
 800959a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800959e:	d8e2      	bhi.n	8009566 <__multiply+0xb2>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	f845 c002 	str.w	ip, [r5, r2]
 80095a6:	9a03      	ldr	r2, [sp, #12]
 80095a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095ac:	3304      	adds	r3, #4
 80095ae:	f1b9 0f00 	cmp.w	r9, #0
 80095b2:	d020      	beq.n	80095f6 <__multiply+0x142>
 80095b4:	6829      	ldr	r1, [r5, #0]
 80095b6:	f104 0c14 	add.w	ip, r4, #20
 80095ba:	46ae      	mov	lr, r5
 80095bc:	f04f 0a00 	mov.w	sl, #0
 80095c0:	f8bc b000 	ldrh.w	fp, [ip]
 80095c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095c8:	fb09 220b 	mla	r2, r9, fp, r2
 80095cc:	4492      	add	sl, r2
 80095ce:	b289      	uxth	r1, r1
 80095d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095d4:	f84e 1b04 	str.w	r1, [lr], #4
 80095d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095dc:	f8be 1000 	ldrh.w	r1, [lr]
 80095e0:	0c12      	lsrs	r2, r2, #16
 80095e2:	fb09 1102 	mla	r1, r9, r2, r1
 80095e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095ea:	4567      	cmp	r7, ip
 80095ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095f0:	d8e6      	bhi.n	80095c0 <__multiply+0x10c>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	50a9      	str	r1, [r5, r2]
 80095f6:	3504      	adds	r5, #4
 80095f8:	e79a      	b.n	8009530 <__multiply+0x7c>
 80095fa:	3e01      	subs	r6, #1
 80095fc:	e79c      	b.n	8009538 <__multiply+0x84>
 80095fe:	bf00      	nop
 8009600:	0800b463 	.word	0x0800b463
 8009604:	0800b4d4 	.word	0x0800b4d4

08009608 <__pow5mult>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	4615      	mov	r5, r2
 800960e:	f012 0203 	ands.w	r2, r2, #3
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	d007      	beq.n	8009628 <__pow5mult+0x20>
 8009618:	4c25      	ldr	r4, [pc, #148]	; (80096b0 <__pow5mult+0xa8>)
 800961a:	3a01      	subs	r2, #1
 800961c:	2300      	movs	r3, #0
 800961e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009622:	f7ff fe9b 	bl	800935c <__multadd>
 8009626:	4607      	mov	r7, r0
 8009628:	10ad      	asrs	r5, r5, #2
 800962a:	d03d      	beq.n	80096a8 <__pow5mult+0xa0>
 800962c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800962e:	b97c      	cbnz	r4, 8009650 <__pow5mult+0x48>
 8009630:	2010      	movs	r0, #16
 8009632:	f7ff fe1b 	bl	800926c <malloc>
 8009636:	4602      	mov	r2, r0
 8009638:	6270      	str	r0, [r6, #36]	; 0x24
 800963a:	b928      	cbnz	r0, 8009648 <__pow5mult+0x40>
 800963c:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <__pow5mult+0xac>)
 800963e:	481e      	ldr	r0, [pc, #120]	; (80096b8 <__pow5mult+0xb0>)
 8009640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009644:	f000 fc62 	bl	8009f0c <__assert_func>
 8009648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800964c:	6004      	str	r4, [r0, #0]
 800964e:	60c4      	str	r4, [r0, #12]
 8009650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009658:	b94c      	cbnz	r4, 800966e <__pow5mult+0x66>
 800965a:	f240 2171 	movw	r1, #625	; 0x271
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ff12 	bl	8009488 <__i2b>
 8009664:	2300      	movs	r3, #0
 8009666:	f8c8 0008 	str.w	r0, [r8, #8]
 800966a:	4604      	mov	r4, r0
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	f04f 0900 	mov.w	r9, #0
 8009672:	07eb      	lsls	r3, r5, #31
 8009674:	d50a      	bpl.n	800968c <__pow5mult+0x84>
 8009676:	4639      	mov	r1, r7
 8009678:	4622      	mov	r2, r4
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ff1a 	bl	80094b4 <__multiply>
 8009680:	4639      	mov	r1, r7
 8009682:	4680      	mov	r8, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fe47 	bl	8009318 <_Bfree>
 800968a:	4647      	mov	r7, r8
 800968c:	106d      	asrs	r5, r5, #1
 800968e:	d00b      	beq.n	80096a8 <__pow5mult+0xa0>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	b938      	cbnz	r0, 80096a4 <__pow5mult+0x9c>
 8009694:	4622      	mov	r2, r4
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ff0b 	bl	80094b4 <__multiply>
 800969e:	6020      	str	r0, [r4, #0]
 80096a0:	f8c0 9000 	str.w	r9, [r0]
 80096a4:	4604      	mov	r4, r0
 80096a6:	e7e4      	b.n	8009672 <__pow5mult+0x6a>
 80096a8:	4638      	mov	r0, r7
 80096aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ae:	bf00      	nop
 80096b0:	0800b620 	.word	0x0800b620
 80096b4:	0800b3f1 	.word	0x0800b3f1
 80096b8:	0800b4d4 	.word	0x0800b4d4

080096bc <__lshift>:
 80096bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	6849      	ldr	r1, [r1, #4]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	4607      	mov	r7, r0
 80096ce:	4691      	mov	r9, r2
 80096d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096d4:	f108 0601 	add.w	r6, r8, #1
 80096d8:	42b3      	cmp	r3, r6
 80096da:	db0b      	blt.n	80096f4 <__lshift+0x38>
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff fddb 	bl	8009298 <_Balloc>
 80096e2:	4605      	mov	r5, r0
 80096e4:	b948      	cbnz	r0, 80096fa <__lshift+0x3e>
 80096e6:	4602      	mov	r2, r0
 80096e8:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <__lshift+0xd8>)
 80096ea:	482b      	ldr	r0, [pc, #172]	; (8009798 <__lshift+0xdc>)
 80096ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096f0:	f000 fc0c 	bl	8009f0c <__assert_func>
 80096f4:	3101      	adds	r1, #1
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	e7ee      	b.n	80096d8 <__lshift+0x1c>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f100 0114 	add.w	r1, r0, #20
 8009700:	f100 0210 	add.w	r2, r0, #16
 8009704:	4618      	mov	r0, r3
 8009706:	4553      	cmp	r3, sl
 8009708:	db37      	blt.n	800977a <__lshift+0xbe>
 800970a:	6920      	ldr	r0, [r4, #16]
 800970c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009710:	f104 0314 	add.w	r3, r4, #20
 8009714:	f019 091f 	ands.w	r9, r9, #31
 8009718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800971c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009720:	d02f      	beq.n	8009782 <__lshift+0xc6>
 8009722:	f1c9 0e20 	rsb	lr, r9, #32
 8009726:	468a      	mov	sl, r1
 8009728:	f04f 0c00 	mov.w	ip, #0
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	fa02 f209 	lsl.w	r2, r2, r9
 8009732:	ea42 020c 	orr.w	r2, r2, ip
 8009736:	f84a 2b04 	str.w	r2, [sl], #4
 800973a:	f853 2b04 	ldr.w	r2, [r3], #4
 800973e:	4298      	cmp	r0, r3
 8009740:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009744:	d8f2      	bhi.n	800972c <__lshift+0x70>
 8009746:	1b03      	subs	r3, r0, r4
 8009748:	3b15      	subs	r3, #21
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	3304      	adds	r3, #4
 8009750:	f104 0215 	add.w	r2, r4, #21
 8009754:	4290      	cmp	r0, r2
 8009756:	bf38      	it	cc
 8009758:	2304      	movcc	r3, #4
 800975a:	f841 c003 	str.w	ip, [r1, r3]
 800975e:	f1bc 0f00 	cmp.w	ip, #0
 8009762:	d001      	beq.n	8009768 <__lshift+0xac>
 8009764:	f108 0602 	add.w	r6, r8, #2
 8009768:	3e01      	subs	r6, #1
 800976a:	4638      	mov	r0, r7
 800976c:	612e      	str	r6, [r5, #16]
 800976e:	4621      	mov	r1, r4
 8009770:	f7ff fdd2 	bl	8009318 <_Bfree>
 8009774:	4628      	mov	r0, r5
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	f842 0f04 	str.w	r0, [r2, #4]!
 800977e:	3301      	adds	r3, #1
 8009780:	e7c1      	b.n	8009706 <__lshift+0x4a>
 8009782:	3904      	subs	r1, #4
 8009784:	f853 2b04 	ldr.w	r2, [r3], #4
 8009788:	f841 2f04 	str.w	r2, [r1, #4]!
 800978c:	4298      	cmp	r0, r3
 800978e:	d8f9      	bhi.n	8009784 <__lshift+0xc8>
 8009790:	e7ea      	b.n	8009768 <__lshift+0xac>
 8009792:	bf00      	nop
 8009794:	0800b463 	.word	0x0800b463
 8009798:	0800b4d4 	.word	0x0800b4d4

0800979c <__mcmp>:
 800979c:	b530      	push	{r4, r5, lr}
 800979e:	6902      	ldr	r2, [r0, #16]
 80097a0:	690c      	ldr	r4, [r1, #16]
 80097a2:	1b12      	subs	r2, r2, r4
 80097a4:	d10e      	bne.n	80097c4 <__mcmp+0x28>
 80097a6:	f100 0314 	add.w	r3, r0, #20
 80097aa:	3114      	adds	r1, #20
 80097ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097bc:	42a5      	cmp	r5, r4
 80097be:	d003      	beq.n	80097c8 <__mcmp+0x2c>
 80097c0:	d305      	bcc.n	80097ce <__mcmp+0x32>
 80097c2:	2201      	movs	r2, #1
 80097c4:	4610      	mov	r0, r2
 80097c6:	bd30      	pop	{r4, r5, pc}
 80097c8:	4283      	cmp	r3, r0
 80097ca:	d3f3      	bcc.n	80097b4 <__mcmp+0x18>
 80097cc:	e7fa      	b.n	80097c4 <__mcmp+0x28>
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295
 80097d2:	e7f7      	b.n	80097c4 <__mcmp+0x28>

080097d4 <__mdiff>:
 80097d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	4606      	mov	r6, r0
 80097dc:	4611      	mov	r1, r2
 80097de:	4620      	mov	r0, r4
 80097e0:	4690      	mov	r8, r2
 80097e2:	f7ff ffdb 	bl	800979c <__mcmp>
 80097e6:	1e05      	subs	r5, r0, #0
 80097e8:	d110      	bne.n	800980c <__mdiff+0x38>
 80097ea:	4629      	mov	r1, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff fd53 	bl	8009298 <_Balloc>
 80097f2:	b930      	cbnz	r0, 8009802 <__mdiff+0x2e>
 80097f4:	4b3a      	ldr	r3, [pc, #232]	; (80098e0 <__mdiff+0x10c>)
 80097f6:	4602      	mov	r2, r0
 80097f8:	f240 2132 	movw	r1, #562	; 0x232
 80097fc:	4839      	ldr	r0, [pc, #228]	; (80098e4 <__mdiff+0x110>)
 80097fe:	f000 fb85 	bl	8009f0c <__assert_func>
 8009802:	2301      	movs	r3, #1
 8009804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	bfa4      	itt	ge
 800980e:	4643      	movge	r3, r8
 8009810:	46a0      	movge	r8, r4
 8009812:	4630      	mov	r0, r6
 8009814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009818:	bfa6      	itte	ge
 800981a:	461c      	movge	r4, r3
 800981c:	2500      	movge	r5, #0
 800981e:	2501      	movlt	r5, #1
 8009820:	f7ff fd3a 	bl	8009298 <_Balloc>
 8009824:	b920      	cbnz	r0, 8009830 <__mdiff+0x5c>
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <__mdiff+0x10c>)
 8009828:	4602      	mov	r2, r0
 800982a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800982e:	e7e5      	b.n	80097fc <__mdiff+0x28>
 8009830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009834:	6926      	ldr	r6, [r4, #16]
 8009836:	60c5      	str	r5, [r0, #12]
 8009838:	f104 0914 	add.w	r9, r4, #20
 800983c:	f108 0514 	add.w	r5, r8, #20
 8009840:	f100 0e14 	add.w	lr, r0, #20
 8009844:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800984c:	f108 0210 	add.w	r2, r8, #16
 8009850:	46f2      	mov	sl, lr
 8009852:	2100      	movs	r1, #0
 8009854:	f859 3b04 	ldr.w	r3, [r9], #4
 8009858:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800985c:	fa1f f883 	uxth.w	r8, r3
 8009860:	fa11 f18b 	uxtah	r1, r1, fp
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	eba1 0808 	sub.w	r8, r1, r8
 800986a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800986e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009872:	fa1f f888 	uxth.w	r8, r8
 8009876:	1419      	asrs	r1, r3, #16
 8009878:	454e      	cmp	r6, r9
 800987a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800987e:	f84a 3b04 	str.w	r3, [sl], #4
 8009882:	d8e7      	bhi.n	8009854 <__mdiff+0x80>
 8009884:	1b33      	subs	r3, r6, r4
 8009886:	3b15      	subs	r3, #21
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	3304      	adds	r3, #4
 800988e:	3415      	adds	r4, #21
 8009890:	42a6      	cmp	r6, r4
 8009892:	bf38      	it	cc
 8009894:	2304      	movcc	r3, #4
 8009896:	441d      	add	r5, r3
 8009898:	4473      	add	r3, lr
 800989a:	469e      	mov	lr, r3
 800989c:	462e      	mov	r6, r5
 800989e:	4566      	cmp	r6, ip
 80098a0:	d30e      	bcc.n	80098c0 <__mdiff+0xec>
 80098a2:	f10c 0203 	add.w	r2, ip, #3
 80098a6:	1b52      	subs	r2, r2, r5
 80098a8:	f022 0203 	bic.w	r2, r2, #3
 80098ac:	3d03      	subs	r5, #3
 80098ae:	45ac      	cmp	ip, r5
 80098b0:	bf38      	it	cc
 80098b2:	2200      	movcc	r2, #0
 80098b4:	441a      	add	r2, r3
 80098b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098ba:	b17b      	cbz	r3, 80098dc <__mdiff+0x108>
 80098bc:	6107      	str	r7, [r0, #16]
 80098be:	e7a3      	b.n	8009808 <__mdiff+0x34>
 80098c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80098c4:	fa11 f288 	uxtah	r2, r1, r8
 80098c8:	1414      	asrs	r4, r2, #16
 80098ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098ce:	b292      	uxth	r2, r2
 80098d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098d4:	f84e 2b04 	str.w	r2, [lr], #4
 80098d8:	1421      	asrs	r1, r4, #16
 80098da:	e7e0      	b.n	800989e <__mdiff+0xca>
 80098dc:	3f01      	subs	r7, #1
 80098de:	e7ea      	b.n	80098b6 <__mdiff+0xe2>
 80098e0:	0800b463 	.word	0x0800b463
 80098e4:	0800b4d4 	.word	0x0800b4d4

080098e8 <__d2b>:
 80098e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4689      	mov	r9, r1
 80098ee:	2101      	movs	r1, #1
 80098f0:	ec57 6b10 	vmov	r6, r7, d0
 80098f4:	4690      	mov	r8, r2
 80098f6:	f7ff fccf 	bl	8009298 <_Balloc>
 80098fa:	4604      	mov	r4, r0
 80098fc:	b930      	cbnz	r0, 800990c <__d2b+0x24>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b25      	ldr	r3, [pc, #148]	; (8009998 <__d2b+0xb0>)
 8009902:	4826      	ldr	r0, [pc, #152]	; (800999c <__d2b+0xb4>)
 8009904:	f240 310a 	movw	r1, #778	; 0x30a
 8009908:	f000 fb00 	bl	8009f0c <__assert_func>
 800990c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009914:	bb35      	cbnz	r5, 8009964 <__d2b+0x7c>
 8009916:	2e00      	cmp	r6, #0
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	d028      	beq.n	800996e <__d2b+0x86>
 800991c:	4668      	mov	r0, sp
 800991e:	9600      	str	r6, [sp, #0]
 8009920:	f7ff fd82 	bl	8009428 <__lo0bits>
 8009924:	9900      	ldr	r1, [sp, #0]
 8009926:	b300      	cbz	r0, 800996a <__d2b+0x82>
 8009928:	9a01      	ldr	r2, [sp, #4]
 800992a:	f1c0 0320 	rsb	r3, r0, #32
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	430b      	orrs	r3, r1
 8009934:	40c2      	lsrs	r2, r0
 8009936:	6163      	str	r3, [r4, #20]
 8009938:	9201      	str	r2, [sp, #4]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	61a3      	str	r3, [r4, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	bf14      	ite	ne
 8009942:	2202      	movne	r2, #2
 8009944:	2201      	moveq	r2, #1
 8009946:	6122      	str	r2, [r4, #16]
 8009948:	b1d5      	cbz	r5, 8009980 <__d2b+0x98>
 800994a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800994e:	4405      	add	r5, r0
 8009950:	f8c9 5000 	str.w	r5, [r9]
 8009954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009958:	f8c8 0000 	str.w	r0, [r8]
 800995c:	4620      	mov	r0, r4
 800995e:	b003      	add	sp, #12
 8009960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009968:	e7d5      	b.n	8009916 <__d2b+0x2e>
 800996a:	6161      	str	r1, [r4, #20]
 800996c:	e7e5      	b.n	800993a <__d2b+0x52>
 800996e:	a801      	add	r0, sp, #4
 8009970:	f7ff fd5a 	bl	8009428 <__lo0bits>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	6163      	str	r3, [r4, #20]
 8009978:	2201      	movs	r2, #1
 800997a:	6122      	str	r2, [r4, #16]
 800997c:	3020      	adds	r0, #32
 800997e:	e7e3      	b.n	8009948 <__d2b+0x60>
 8009980:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009988:	f8c9 0000 	str.w	r0, [r9]
 800998c:	6918      	ldr	r0, [r3, #16]
 800998e:	f7ff fd2b 	bl	80093e8 <__hi0bits>
 8009992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009996:	e7df      	b.n	8009958 <__d2b+0x70>
 8009998:	0800b463 	.word	0x0800b463
 800999c:	0800b4d4 	.word	0x0800b4d4

080099a0 <_calloc_r>:
 80099a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099a2:	fba1 2402 	umull	r2, r4, r1, r2
 80099a6:	b94c      	cbnz	r4, 80099bc <_calloc_r+0x1c>
 80099a8:	4611      	mov	r1, r2
 80099aa:	9201      	str	r2, [sp, #4]
 80099ac:	f000 f87a 	bl	8009aa4 <_malloc_r>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	4605      	mov	r5, r0
 80099b4:	b930      	cbnz	r0, 80099c4 <_calloc_r+0x24>
 80099b6:	4628      	mov	r0, r5
 80099b8:	b003      	add	sp, #12
 80099ba:	bd30      	pop	{r4, r5, pc}
 80099bc:	220c      	movs	r2, #12
 80099be:	6002      	str	r2, [r0, #0]
 80099c0:	2500      	movs	r5, #0
 80099c2:	e7f8      	b.n	80099b6 <_calloc_r+0x16>
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7fd fdf1 	bl	80075ac <memset>
 80099ca:	e7f4      	b.n	80099b6 <_calloc_r+0x16>

080099cc <_free_r>:
 80099cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ce:	2900      	cmp	r1, #0
 80099d0:	d044      	beq.n	8009a5c <_free_r+0x90>
 80099d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d6:	9001      	str	r0, [sp, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f1a1 0404 	sub.w	r4, r1, #4
 80099de:	bfb8      	it	lt
 80099e0:	18e4      	addlt	r4, r4, r3
 80099e2:	f000 fb19 	bl	800a018 <__malloc_lock>
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <_free_r+0x94>)
 80099e8:	9801      	ldr	r0, [sp, #4]
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	b933      	cbnz	r3, 80099fc <_free_r+0x30>
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	6014      	str	r4, [r2, #0]
 80099f2:	b003      	add	sp, #12
 80099f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f8:	f000 bb14 	b.w	800a024 <__malloc_unlock>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d908      	bls.n	8009a12 <_free_r+0x46>
 8009a00:	6825      	ldr	r5, [r4, #0]
 8009a02:	1961      	adds	r1, r4, r5
 8009a04:	428b      	cmp	r3, r1
 8009a06:	bf01      	itttt	eq
 8009a08:	6819      	ldreq	r1, [r3, #0]
 8009a0a:	685b      	ldreq	r3, [r3, #4]
 8009a0c:	1949      	addeq	r1, r1, r5
 8009a0e:	6021      	streq	r1, [r4, #0]
 8009a10:	e7ed      	b.n	80099ee <_free_r+0x22>
 8009a12:	461a      	mov	r2, r3
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b10b      	cbz	r3, 8009a1c <_free_r+0x50>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d9fa      	bls.n	8009a12 <_free_r+0x46>
 8009a1c:	6811      	ldr	r1, [r2, #0]
 8009a1e:	1855      	adds	r5, r2, r1
 8009a20:	42a5      	cmp	r5, r4
 8009a22:	d10b      	bne.n	8009a3c <_free_r+0x70>
 8009a24:	6824      	ldr	r4, [r4, #0]
 8009a26:	4421      	add	r1, r4
 8009a28:	1854      	adds	r4, r2, r1
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	d1e0      	bne.n	80099f2 <_free_r+0x26>
 8009a30:	681c      	ldr	r4, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	6053      	str	r3, [r2, #4]
 8009a36:	4421      	add	r1, r4
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	e7da      	b.n	80099f2 <_free_r+0x26>
 8009a3c:	d902      	bls.n	8009a44 <_free_r+0x78>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	e7d6      	b.n	80099f2 <_free_r+0x26>
 8009a44:	6825      	ldr	r5, [r4, #0]
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf04      	itt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	bf04      	itt	eq
 8009a54:	1949      	addeq	r1, r1, r5
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	6054      	str	r4, [r2, #4]
 8009a5a:	e7ca      	b.n	80099f2 <_free_r+0x26>
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bd30      	pop	{r4, r5, pc}
 8009a60:	20000424 	.word	0x20000424

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0e      	ldr	r6, [pc, #56]	; (8009aa0 <sbrk_aligned+0x3c>)
 8009a68:	460c      	mov	r4, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b911      	cbnz	r1, 8009a76 <sbrk_aligned+0x12>
 8009a70:	f000 f9e6 	bl	8009e40 <_sbrk_r>
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f9e1 	bl	8009e40 <_sbrk_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d00a      	beq.n	8009a98 <sbrk_aligned+0x34>
 8009a82:	1cc4      	adds	r4, r0, #3
 8009a84:	f024 0403 	bic.w	r4, r4, #3
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	d007      	beq.n	8009a9c <sbrk_aligned+0x38>
 8009a8c:	1a21      	subs	r1, r4, r0
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f9d6 	bl	8009e40 <_sbrk_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	d101      	bne.n	8009a9c <sbrk_aligned+0x38>
 8009a98:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	20000428 	.word	0x20000428

08009aa4 <_malloc_r>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	1ccd      	adds	r5, r1, #3
 8009aaa:	f025 0503 	bic.w	r5, r5, #3
 8009aae:	3508      	adds	r5, #8
 8009ab0:	2d0c      	cmp	r5, #12
 8009ab2:	bf38      	it	cc
 8009ab4:	250c      	movcc	r5, #12
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	4607      	mov	r7, r0
 8009aba:	db01      	blt.n	8009ac0 <_malloc_r+0x1c>
 8009abc:	42a9      	cmp	r1, r5
 8009abe:	d905      	bls.n	8009acc <_malloc_r+0x28>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	4e2e      	ldr	r6, [pc, #184]	; (8009b88 <_malloc_r+0xe4>)
 8009ace:	f000 faa3 	bl	800a018 <__malloc_lock>
 8009ad2:	6833      	ldr	r3, [r6, #0]
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	bb34      	cbnz	r4, 8009b26 <_malloc_r+0x82>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ffc2 	bl	8009a64 <sbrk_aligned>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	d14d      	bne.n	8009b82 <_malloc_r+0xde>
 8009ae6:	6834      	ldr	r4, [r6, #0]
 8009ae8:	4626      	mov	r6, r4
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d140      	bne.n	8009b70 <_malloc_r+0xcc>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	4631      	mov	r1, r6
 8009af2:	4638      	mov	r0, r7
 8009af4:	eb04 0803 	add.w	r8, r4, r3
 8009af8:	f000 f9a2 	bl	8009e40 <_sbrk_r>
 8009afc:	4580      	cmp	r8, r0
 8009afe:	d13a      	bne.n	8009b76 <_malloc_r+0xd2>
 8009b00:	6821      	ldr	r1, [r4, #0]
 8009b02:	3503      	adds	r5, #3
 8009b04:	1a6d      	subs	r5, r5, r1
 8009b06:	f025 0503 	bic.w	r5, r5, #3
 8009b0a:	3508      	adds	r5, #8
 8009b0c:	2d0c      	cmp	r5, #12
 8009b0e:	bf38      	it	cc
 8009b10:	250c      	movcc	r5, #12
 8009b12:	4629      	mov	r1, r5
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff ffa5 	bl	8009a64 <sbrk_aligned>
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d02b      	beq.n	8009b76 <_malloc_r+0xd2>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	442b      	add	r3, r5
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	e00e      	b.n	8009b44 <_malloc_r+0xa0>
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	1b52      	subs	r2, r2, r5
 8009b2a:	d41e      	bmi.n	8009b6a <_malloc_r+0xc6>
 8009b2c:	2a0b      	cmp	r2, #11
 8009b2e:	d916      	bls.n	8009b5e <_malloc_r+0xba>
 8009b30:	1961      	adds	r1, r4, r5
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	6025      	str	r5, [r4, #0]
 8009b36:	bf18      	it	ne
 8009b38:	6059      	strne	r1, [r3, #4]
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	bf08      	it	eq
 8009b3e:	6031      	streq	r1, [r6, #0]
 8009b40:	5162      	str	r2, [r4, r5]
 8009b42:	604b      	str	r3, [r1, #4]
 8009b44:	4638      	mov	r0, r7
 8009b46:	f104 060b 	add.w	r6, r4, #11
 8009b4a:	f000 fa6b 	bl	800a024 <__malloc_unlock>
 8009b4e:	f026 0607 	bic.w	r6, r6, #7
 8009b52:	1d23      	adds	r3, r4, #4
 8009b54:	1af2      	subs	r2, r6, r3
 8009b56:	d0b6      	beq.n	8009ac6 <_malloc_r+0x22>
 8009b58:	1b9b      	subs	r3, r3, r6
 8009b5a:	50a3      	str	r3, [r4, r2]
 8009b5c:	e7b3      	b.n	8009ac6 <_malloc_r+0x22>
 8009b5e:	6862      	ldr	r2, [r4, #4]
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	bf0c      	ite	eq
 8009b64:	6032      	streq	r2, [r6, #0]
 8009b66:	605a      	strne	r2, [r3, #4]
 8009b68:	e7ec      	b.n	8009b44 <_malloc_r+0xa0>
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	6864      	ldr	r4, [r4, #4]
 8009b6e:	e7b2      	b.n	8009ad6 <_malloc_r+0x32>
 8009b70:	4634      	mov	r4, r6
 8009b72:	6876      	ldr	r6, [r6, #4]
 8009b74:	e7b9      	b.n	8009aea <_malloc_r+0x46>
 8009b76:	230c      	movs	r3, #12
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	f000 fa52 	bl	800a024 <__malloc_unlock>
 8009b80:	e7a1      	b.n	8009ac6 <_malloc_r+0x22>
 8009b82:	6025      	str	r5, [r4, #0]
 8009b84:	e7de      	b.n	8009b44 <_malloc_r+0xa0>
 8009b86:	bf00      	nop
 8009b88:	20000424 	.word	0x20000424

08009b8c <__sfputc_r>:
 8009b8c:	6893      	ldr	r3, [r2, #8]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	b410      	push	{r4}
 8009b94:	6093      	str	r3, [r2, #8]
 8009b96:	da08      	bge.n	8009baa <__sfputc_r+0x1e>
 8009b98:	6994      	ldr	r4, [r2, #24]
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	db01      	blt.n	8009ba2 <__sfputc_r+0x16>
 8009b9e:	290a      	cmp	r1, #10
 8009ba0:	d103      	bne.n	8009baa <__sfputc_r+0x1e>
 8009ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba6:	f7fe ba01 	b.w	8007fac <__swbuf_r>
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	1c58      	adds	r0, r3, #1
 8009bae:	6010      	str	r0, [r2, #0]
 8009bb0:	7019      	strb	r1, [r3, #0]
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <__sfputs_r>:
 8009bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	18d5      	adds	r5, r2, r3
 8009bc4:	42ac      	cmp	r4, r5
 8009bc6:	d101      	bne.n	8009bcc <__sfputs_r+0x12>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e007      	b.n	8009bdc <__sfputs_r+0x22>
 8009bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd0:	463a      	mov	r2, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff ffda 	bl	8009b8c <__sfputc_r>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d1f3      	bne.n	8009bc4 <__sfputs_r+0xa>
 8009bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009be0 <_vfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	460d      	mov	r5, r1
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	4614      	mov	r4, r2
 8009bea:	4698      	mov	r8, r3
 8009bec:	4606      	mov	r6, r0
 8009bee:	b118      	cbz	r0, 8009bf8 <_vfiprintf_r+0x18>
 8009bf0:	6983      	ldr	r3, [r0, #24]
 8009bf2:	b90b      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x18>
 8009bf4:	f7ff fa30 	bl	8009058 <__sinit>
 8009bf8:	4b89      	ldr	r3, [pc, #548]	; (8009e20 <_vfiprintf_r+0x240>)
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	d11b      	bne.n	8009c36 <_vfiprintf_r+0x56>
 8009bfe:	6875      	ldr	r5, [r6, #4]
 8009c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c02:	07d9      	lsls	r1, r3, #31
 8009c04:	d405      	bmi.n	8009c12 <_vfiprintf_r+0x32>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	059a      	lsls	r2, r3, #22
 8009c0a:	d402      	bmi.n	8009c12 <_vfiprintf_r+0x32>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0e:	f7ff fac6 	bl	800919e <__retarget_lock_acquire_recursive>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	071b      	lsls	r3, r3, #28
 8009c16:	d501      	bpl.n	8009c1c <_vfiprintf_r+0x3c>
 8009c18:	692b      	ldr	r3, [r5, #16]
 8009c1a:	b9eb      	cbnz	r3, 8009c58 <_vfiprintf_r+0x78>
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7fe fa16 	bl	8008050 <__swsetup_r>
 8009c24:	b1c0      	cbz	r0, 8009c58 <_vfiprintf_r+0x78>
 8009c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c28:	07dc      	lsls	r4, r3, #31
 8009c2a:	d50e      	bpl.n	8009c4a <_vfiprintf_r+0x6a>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b01d      	add	sp, #116	; 0x74
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c36:	4b7b      	ldr	r3, [pc, #492]	; (8009e24 <_vfiprintf_r+0x244>)
 8009c38:	429d      	cmp	r5, r3
 8009c3a:	d101      	bne.n	8009c40 <_vfiprintf_r+0x60>
 8009c3c:	68b5      	ldr	r5, [r6, #8]
 8009c3e:	e7df      	b.n	8009c00 <_vfiprintf_r+0x20>
 8009c40:	4b79      	ldr	r3, [pc, #484]	; (8009e28 <_vfiprintf_r+0x248>)
 8009c42:	429d      	cmp	r5, r3
 8009c44:	bf08      	it	eq
 8009c46:	68f5      	ldreq	r5, [r6, #12]
 8009c48:	e7da      	b.n	8009c00 <_vfiprintf_r+0x20>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	0598      	lsls	r0, r3, #22
 8009c4e:	d4ed      	bmi.n	8009c2c <_vfiprintf_r+0x4c>
 8009c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c52:	f7ff faa5 	bl	80091a0 <__retarget_lock_release_recursive>
 8009c56:	e7e9      	b.n	8009c2c <_vfiprintf_r+0x4c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c66:	2330      	movs	r3, #48	; 0x30
 8009c68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e2c <_vfiprintf_r+0x24c>
 8009c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c70:	f04f 0901 	mov.w	r9, #1
 8009c74:	4623      	mov	r3, r4
 8009c76:	469a      	mov	sl, r3
 8009c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c7c:	b10a      	cbz	r2, 8009c82 <_vfiprintf_r+0xa2>
 8009c7e:	2a25      	cmp	r2, #37	; 0x25
 8009c80:	d1f9      	bne.n	8009c76 <_vfiprintf_r+0x96>
 8009c82:	ebba 0b04 	subs.w	fp, sl, r4
 8009c86:	d00b      	beq.n	8009ca0 <_vfiprintf_r+0xc0>
 8009c88:	465b      	mov	r3, fp
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff93 	bl	8009bba <__sfputs_r>
 8009c94:	3001      	adds	r0, #1
 8009c96:	f000 80aa 	beq.w	8009dee <_vfiprintf_r+0x20e>
 8009c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c9c:	445a      	add	r2, fp
 8009c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8009ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 80a2 	beq.w	8009dee <_vfiprintf_r+0x20e>
 8009caa:	2300      	movs	r3, #0
 8009cac:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb4:	f10a 0a01 	add.w	sl, sl, #1
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	9307      	str	r3, [sp, #28]
 8009cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8009cc2:	4654      	mov	r4, sl
 8009cc4:	2205      	movs	r2, #5
 8009cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cca:	4858      	ldr	r0, [pc, #352]	; (8009e2c <_vfiprintf_r+0x24c>)
 8009ccc:	f7f6 fa88 	bl	80001e0 <memchr>
 8009cd0:	9a04      	ldr	r2, [sp, #16]
 8009cd2:	b9d8      	cbnz	r0, 8009d0c <_vfiprintf_r+0x12c>
 8009cd4:	06d1      	lsls	r1, r2, #27
 8009cd6:	bf44      	itt	mi
 8009cd8:	2320      	movmi	r3, #32
 8009cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cde:	0713      	lsls	r3, r2, #28
 8009ce0:	bf44      	itt	mi
 8009ce2:	232b      	movmi	r3, #43	; 0x2b
 8009ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cec:	2b2a      	cmp	r3, #42	; 0x2a
 8009cee:	d015      	beq.n	8009d1c <_vfiprintf_r+0x13c>
 8009cf0:	9a07      	ldr	r2, [sp, #28]
 8009cf2:	4654      	mov	r4, sl
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f04f 0c0a 	mov.w	ip, #10
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d00:	3b30      	subs	r3, #48	; 0x30
 8009d02:	2b09      	cmp	r3, #9
 8009d04:	d94e      	bls.n	8009da4 <_vfiprintf_r+0x1c4>
 8009d06:	b1b0      	cbz	r0, 8009d36 <_vfiprintf_r+0x156>
 8009d08:	9207      	str	r2, [sp, #28]
 8009d0a:	e014      	b.n	8009d36 <_vfiprintf_r+0x156>
 8009d0c:	eba0 0308 	sub.w	r3, r0, r8
 8009d10:	fa09 f303 	lsl.w	r3, r9, r3
 8009d14:	4313      	orrs	r3, r2
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	46a2      	mov	sl, r4
 8009d1a:	e7d2      	b.n	8009cc2 <_vfiprintf_r+0xe2>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	1d19      	adds	r1, r3, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	9103      	str	r1, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfbb      	ittet	lt
 8009d28:	425b      	neglt	r3, r3
 8009d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d2e:	9307      	strge	r3, [sp, #28]
 8009d30:	9307      	strlt	r3, [sp, #28]
 8009d32:	bfb8      	it	lt
 8009d34:	9204      	strlt	r2, [sp, #16]
 8009d36:	7823      	ldrb	r3, [r4, #0]
 8009d38:	2b2e      	cmp	r3, #46	; 0x2e
 8009d3a:	d10c      	bne.n	8009d56 <_vfiprintf_r+0x176>
 8009d3c:	7863      	ldrb	r3, [r4, #1]
 8009d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d40:	d135      	bne.n	8009dae <_vfiprintf_r+0x1ce>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	1d1a      	adds	r2, r3, #4
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	9203      	str	r2, [sp, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bfb8      	it	lt
 8009d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d52:	3402      	adds	r4, #2
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e3c <_vfiprintf_r+0x25c>
 8009d5a:	7821      	ldrb	r1, [r4, #0]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	4650      	mov	r0, sl
 8009d60:	f7f6 fa3e 	bl	80001e0 <memchr>
 8009d64:	b140      	cbz	r0, 8009d78 <_vfiprintf_r+0x198>
 8009d66:	2340      	movs	r3, #64	; 0x40
 8009d68:	eba0 000a 	sub.w	r0, r0, sl
 8009d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	4303      	orrs	r3, r0
 8009d74:	3401      	adds	r4, #1
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7c:	482c      	ldr	r0, [pc, #176]	; (8009e30 <_vfiprintf_r+0x250>)
 8009d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d82:	2206      	movs	r2, #6
 8009d84:	f7f6 fa2c 	bl	80001e0 <memchr>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d03f      	beq.n	8009e0c <_vfiprintf_r+0x22c>
 8009d8c:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <_vfiprintf_r+0x254>)
 8009d8e:	bb1b      	cbnz	r3, 8009dd8 <_vfiprintf_r+0x1f8>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	3307      	adds	r3, #7
 8009d94:	f023 0307 	bic.w	r3, r3, #7
 8009d98:	3308      	adds	r3, #8
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9e:	443b      	add	r3, r7
 8009da0:	9309      	str	r3, [sp, #36]	; 0x24
 8009da2:	e767      	b.n	8009c74 <_vfiprintf_r+0x94>
 8009da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da8:	460c      	mov	r4, r1
 8009daa:	2001      	movs	r0, #1
 8009dac:	e7a5      	b.n	8009cfa <_vfiprintf_r+0x11a>
 8009dae:	2300      	movs	r3, #0
 8009db0:	3401      	adds	r4, #1
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	4619      	mov	r1, r3
 8009db6:	f04f 0c0a 	mov.w	ip, #10
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc0:	3a30      	subs	r2, #48	; 0x30
 8009dc2:	2a09      	cmp	r2, #9
 8009dc4:	d903      	bls.n	8009dce <_vfiprintf_r+0x1ee>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0c5      	beq.n	8009d56 <_vfiprintf_r+0x176>
 8009dca:	9105      	str	r1, [sp, #20]
 8009dcc:	e7c3      	b.n	8009d56 <_vfiprintf_r+0x176>
 8009dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e7f0      	b.n	8009dba <_vfiprintf_r+0x1da>
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <_vfiprintf_r+0x258>)
 8009de0:	a904      	add	r1, sp, #16
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7fd fc8a 	bl	80076fc <_printf_float>
 8009de8:	4607      	mov	r7, r0
 8009dea:	1c78      	adds	r0, r7, #1
 8009dec:	d1d6      	bne.n	8009d9c <_vfiprintf_r+0x1bc>
 8009dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009df0:	07d9      	lsls	r1, r3, #31
 8009df2:	d405      	bmi.n	8009e00 <_vfiprintf_r+0x220>
 8009df4:	89ab      	ldrh	r3, [r5, #12]
 8009df6:	059a      	lsls	r2, r3, #22
 8009df8:	d402      	bmi.n	8009e00 <_vfiprintf_r+0x220>
 8009dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dfc:	f7ff f9d0 	bl	80091a0 <__retarget_lock_release_recursive>
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	065b      	lsls	r3, r3, #25
 8009e04:	f53f af12 	bmi.w	8009c2c <_vfiprintf_r+0x4c>
 8009e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0a:	e711      	b.n	8009c30 <_vfiprintf_r+0x50>
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <_vfiprintf_r+0x258>)
 8009e14:	a904      	add	r1, sp, #16
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7fd ff14 	bl	8007c44 <_printf_i>
 8009e1c:	e7e4      	b.n	8009de8 <_vfiprintf_r+0x208>
 8009e1e:	bf00      	nop
 8009e20:	0800b494 	.word	0x0800b494
 8009e24:	0800b4b4 	.word	0x0800b4b4
 8009e28:	0800b474 	.word	0x0800b474
 8009e2c:	0800b62c 	.word	0x0800b62c
 8009e30:	0800b636 	.word	0x0800b636
 8009e34:	080076fd 	.word	0x080076fd
 8009e38:	08009bbb 	.word	0x08009bbb
 8009e3c:	0800b632 	.word	0x0800b632

08009e40 <_sbrk_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_sbrk_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f9 faa4 	bl	8003398 <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_sbrk_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_sbrk_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	2000042c 	.word	0x2000042c

08009e60 <__sread>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	460c      	mov	r4, r1
 8009e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e68:	f000 f8e2 	bl	800a030 <_read_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	bfab      	itete	ge
 8009e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e72:	89a3      	ldrhlt	r3, [r4, #12]
 8009e74:	181b      	addge	r3, r3, r0
 8009e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e7a:	bfac      	ite	ge
 8009e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e7e:	81a3      	strhlt	r3, [r4, #12]
 8009e80:	bd10      	pop	{r4, pc}

08009e82 <__swrite>:
 8009e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	461f      	mov	r7, r3
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	05db      	lsls	r3, r3, #23
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	4616      	mov	r6, r2
 8009e92:	d505      	bpl.n	8009ea0 <__swrite+0x1e>
 8009e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e98:	2302      	movs	r3, #2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f000 f898 	bl	8009fd0 <_lseek_r>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	4632      	mov	r2, r6
 8009eae:	463b      	mov	r3, r7
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	f000 b817 	b.w	8009ee8 <_write_r>

08009eba <__sseek>:
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec2:	f000 f885 	bl	8009fd0 <_lseek_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	bf15      	itete	ne
 8009ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ed6:	81a3      	strheq	r3, [r4, #12]
 8009ed8:	bf18      	it	ne
 8009eda:	81a3      	strhne	r3, [r4, #12]
 8009edc:	bd10      	pop	{r4, pc}

08009ede <__sclose>:
 8009ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee2:	f000 b831 	b.w	8009f48 <_close_r>
	...

08009ee8 <_write_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_write_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f9 f9fd 	bl	80032f6 <_write>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_write_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_write_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	2000042c 	.word	0x2000042c

08009f0c <__assert_func>:
 8009f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f0e:	4614      	mov	r4, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <__assert_func+0x2c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4605      	mov	r5, r0
 8009f18:	68d8      	ldr	r0, [r3, #12]
 8009f1a:	b14c      	cbz	r4, 8009f30 <__assert_func+0x24>
 8009f1c:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <__assert_func+0x30>)
 8009f1e:	9100      	str	r1, [sp, #0]
 8009f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f24:	4906      	ldr	r1, [pc, #24]	; (8009f40 <__assert_func+0x34>)
 8009f26:	462b      	mov	r3, r5
 8009f28:	f000 f81e 	bl	8009f68 <fiprintf>
 8009f2c:	f000 f89f 	bl	800a06e <abort>
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <__assert_func+0x38>)
 8009f32:	461c      	mov	r4, r3
 8009f34:	e7f3      	b.n	8009f1e <__assert_func+0x12>
 8009f36:	bf00      	nop
 8009f38:	20000010 	.word	0x20000010
 8009f3c:	0800b63d 	.word	0x0800b63d
 8009f40:	0800b64a 	.word	0x0800b64a
 8009f44:	0800b678 	.word	0x0800b678

08009f48 <_close_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_close_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f9 f9eb 	bl	800332e <_close>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_close_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_close_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	2000042c 	.word	0x2000042c

08009f68 <fiprintf>:
 8009f68:	b40e      	push	{r1, r2, r3}
 8009f6a:	b503      	push	{r0, r1, lr}
 8009f6c:	4601      	mov	r1, r0
 8009f6e:	ab03      	add	r3, sp, #12
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <fiprintf+0x20>)
 8009f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f76:	6800      	ldr	r0, [r0, #0]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	f7ff fe31 	bl	8009be0 <_vfiprintf_r>
 8009f7e:	b002      	add	sp, #8
 8009f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f84:	b003      	add	sp, #12
 8009f86:	4770      	bx	lr
 8009f88:	20000010 	.word	0x20000010

08009f8c <_fstat_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_fstat_r+0x20>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	f7f9 f9d4 	bl	8003346 <_fstat>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d102      	bne.n	8009fa8 <_fstat_r+0x1c>
 8009fa2:	682b      	ldr	r3, [r5, #0]
 8009fa4:	b103      	cbz	r3, 8009fa8 <_fstat_r+0x1c>
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	2000042c 	.word	0x2000042c

08009fb0 <_isatty_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d06      	ldr	r5, [pc, #24]	; (8009fcc <_isatty_r+0x1c>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7f9 f9d3 	bl	8003366 <_isatty>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_isatty_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_isatty_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	2000042c 	.word	0x2000042c

08009fd0 <_lseek_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	; (8009ff0 <_lseek_r+0x20>)
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	4611      	mov	r1, r2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	602a      	str	r2, [r5, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f7f9 f9cc 	bl	800337c <_lseek>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_lseek_r+0x1e>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_lseek_r+0x1e>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	2000042c 	.word	0x2000042c

08009ff4 <__ascii_mbtowc>:
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	b901      	cbnz	r1, 8009ffa <__ascii_mbtowc+0x6>
 8009ff8:	a901      	add	r1, sp, #4
 8009ffa:	b142      	cbz	r2, 800a00e <__ascii_mbtowc+0x1a>
 8009ffc:	b14b      	cbz	r3, 800a012 <__ascii_mbtowc+0x1e>
 8009ffe:	7813      	ldrb	r3, [r2, #0]
 800a000:	600b      	str	r3, [r1, #0]
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	1e10      	subs	r0, r2, #0
 800a006:	bf18      	it	ne
 800a008:	2001      	movne	r0, #1
 800a00a:	b002      	add	sp, #8
 800a00c:	4770      	bx	lr
 800a00e:	4610      	mov	r0, r2
 800a010:	e7fb      	b.n	800a00a <__ascii_mbtowc+0x16>
 800a012:	f06f 0001 	mvn.w	r0, #1
 800a016:	e7f8      	b.n	800a00a <__ascii_mbtowc+0x16>

0800a018 <__malloc_lock>:
 800a018:	4801      	ldr	r0, [pc, #4]	; (800a020 <__malloc_lock+0x8>)
 800a01a:	f7ff b8c0 	b.w	800919e <__retarget_lock_acquire_recursive>
 800a01e:	bf00      	nop
 800a020:	20000420 	.word	0x20000420

0800a024 <__malloc_unlock>:
 800a024:	4801      	ldr	r0, [pc, #4]	; (800a02c <__malloc_unlock+0x8>)
 800a026:	f7ff b8bb 	b.w	80091a0 <__retarget_lock_release_recursive>
 800a02a:	bf00      	nop
 800a02c:	20000420 	.word	0x20000420

0800a030 <_read_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	; (800a050 <_read_r+0x20>)
 800a034:	4604      	mov	r4, r0
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	602a      	str	r2, [r5, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7f9 f93c 	bl	80032bc <_read>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_read_r+0x1e>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_read_r+0x1e>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	2000042c 	.word	0x2000042c

0800a054 <__ascii_wctomb>:
 800a054:	b149      	cbz	r1, 800a06a <__ascii_wctomb+0x16>
 800a056:	2aff      	cmp	r2, #255	; 0xff
 800a058:	bf85      	ittet	hi
 800a05a:	238a      	movhi	r3, #138	; 0x8a
 800a05c:	6003      	strhi	r3, [r0, #0]
 800a05e:	700a      	strbls	r2, [r1, #0]
 800a060:	f04f 30ff 	movhi.w	r0, #4294967295
 800a064:	bf98      	it	ls
 800a066:	2001      	movls	r0, #1
 800a068:	4770      	bx	lr
 800a06a:	4608      	mov	r0, r1
 800a06c:	4770      	bx	lr

0800a06e <abort>:
 800a06e:	b508      	push	{r3, lr}
 800a070:	2006      	movs	r0, #6
 800a072:	f000 f82b 	bl	800a0cc <raise>
 800a076:	2001      	movs	r0, #1
 800a078:	f7f9 f916 	bl	80032a8 <_exit>

0800a07c <_raise_r>:
 800a07c:	291f      	cmp	r1, #31
 800a07e:	b538      	push	{r3, r4, r5, lr}
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	d904      	bls.n	800a090 <_raise_r+0x14>
 800a086:	2316      	movs	r3, #22
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a092:	b112      	cbz	r2, 800a09a <_raise_r+0x1e>
 800a094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a098:	b94b      	cbnz	r3, 800a0ae <_raise_r+0x32>
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 f830 	bl	800a100 <_getpid_r>
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0aa:	f000 b817 	b.w	800a0dc <_kill_r>
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d00a      	beq.n	800a0c8 <_raise_r+0x4c>
 800a0b2:	1c59      	adds	r1, r3, #1
 800a0b4:	d103      	bne.n	800a0be <_raise_r+0x42>
 800a0b6:	2316      	movs	r3, #22
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	e7e7      	b.n	800a08e <_raise_r+0x12>
 800a0be:	2400      	movs	r4, #0
 800a0c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	4798      	blx	r3
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e7e0      	b.n	800a08e <_raise_r+0x12>

0800a0cc <raise>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <raise+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f7ff bfd3 	b.w	800a07c <_raise_r>
 800a0d6:	bf00      	nop
 800a0d8:	20000010 	.word	0x20000010

0800a0dc <_kill_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	; (800a0fc <_kill_r+0x20>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	602b      	str	r3, [r5, #0]
 800a0ea:	f7f9 f8cd 	bl	8003288 <_kill>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	d102      	bne.n	800a0f8 <_kill_r+0x1c>
 800a0f2:	682b      	ldr	r3, [r5, #0]
 800a0f4:	b103      	cbz	r3, 800a0f8 <_kill_r+0x1c>
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	bd38      	pop	{r3, r4, r5, pc}
 800a0fa:	bf00      	nop
 800a0fc:	2000042c 	.word	0x2000042c

0800a100 <_getpid_r>:
 800a100:	f7f9 b8ba 	b.w	8003278 <_getpid>

0800a104 <pow>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	ed2d 8b02 	vpush	{d8}
 800a10a:	eeb0 8a40 	vmov.f32	s16, s0
 800a10e:	eef0 8a60 	vmov.f32	s17, s1
 800a112:	ec55 4b11 	vmov	r4, r5, d1
 800a116:	f000 f867 	bl	800a1e8 <__ieee754_pow>
 800a11a:	4622      	mov	r2, r4
 800a11c:	462b      	mov	r3, r5
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	ec57 6b10 	vmov	r6, r7, d0
 800a126:	f7f6 fd01 	bl	8000b2c <__aeabi_dcmpun>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d13b      	bne.n	800a1a6 <pow+0xa2>
 800a12e:	ec51 0b18 	vmov	r0, r1, d8
 800a132:	2200      	movs	r2, #0
 800a134:	2300      	movs	r3, #0
 800a136:	f7f6 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a13a:	b1b8      	cbz	r0, 800a16c <pow+0x68>
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	f7f6 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d146      	bne.n	800a1da <pow+0xd6>
 800a14c:	ec45 4b10 	vmov	d0, r4, r5
 800a150:	f000 fe63 	bl	800ae1a <finite>
 800a154:	b338      	cbz	r0, 800a1a6 <pow+0xa2>
 800a156:	2200      	movs	r2, #0
 800a158:	2300      	movs	r3, #0
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 fcbd 	bl	8000adc <__aeabi_dcmplt>
 800a162:	b300      	cbz	r0, 800a1a6 <pow+0xa2>
 800a164:	f7fd f9f8 	bl	8007558 <__errno>
 800a168:	2322      	movs	r3, #34	; 0x22
 800a16a:	e01b      	b.n	800a1a4 <pow+0xa0>
 800a16c:	ec47 6b10 	vmov	d0, r6, r7
 800a170:	f000 fe53 	bl	800ae1a <finite>
 800a174:	b9e0      	cbnz	r0, 800a1b0 <pow+0xac>
 800a176:	eeb0 0a48 	vmov.f32	s0, s16
 800a17a:	eef0 0a68 	vmov.f32	s1, s17
 800a17e:	f000 fe4c 	bl	800ae1a <finite>
 800a182:	b1a8      	cbz	r0, 800a1b0 <pow+0xac>
 800a184:	ec45 4b10 	vmov	d0, r4, r5
 800a188:	f000 fe47 	bl	800ae1a <finite>
 800a18c:	b180      	cbz	r0, 800a1b0 <pow+0xac>
 800a18e:	4632      	mov	r2, r6
 800a190:	463b      	mov	r3, r7
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fcc9 	bl	8000b2c <__aeabi_dcmpun>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0e2      	beq.n	800a164 <pow+0x60>
 800a19e:	f7fd f9db 	bl	8007558 <__errno>
 800a1a2:	2321      	movs	r3, #33	; 0x21
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	ecbd 8b02 	vpop	{d8}
 800a1aa:	ec47 6b10 	vmov	d0, r6, r7
 800a1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d0f2      	beq.n	800a1a6 <pow+0xa2>
 800a1c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1c4:	eef0 0a68 	vmov.f32	s1, s17
 800a1c8:	f000 fe27 	bl	800ae1a <finite>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0ea      	beq.n	800a1a6 <pow+0xa2>
 800a1d0:	ec45 4b10 	vmov	d0, r4, r5
 800a1d4:	f000 fe21 	bl	800ae1a <finite>
 800a1d8:	e7c3      	b.n	800a162 <pow+0x5e>
 800a1da:	4f01      	ldr	r7, [pc, #4]	; (800a1e0 <pow+0xdc>)
 800a1dc:	2600      	movs	r6, #0
 800a1de:	e7e2      	b.n	800a1a6 <pow+0xa2>
 800a1e0:	3ff00000 	.word	0x3ff00000
 800a1e4:	00000000 	.word	0x00000000

0800a1e8 <__ieee754_pow>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ed2d 8b06 	vpush	{d8-d10}
 800a1f0:	b089      	sub	sp, #36	; 0x24
 800a1f2:	ed8d 1b00 	vstr	d1, [sp]
 800a1f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a1fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a1fe:	ea58 0102 	orrs.w	r1, r8, r2
 800a202:	ec57 6b10 	vmov	r6, r7, d0
 800a206:	d115      	bne.n	800a234 <__ieee754_pow+0x4c>
 800a208:	19b3      	adds	r3, r6, r6
 800a20a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a20e:	4152      	adcs	r2, r2
 800a210:	4299      	cmp	r1, r3
 800a212:	4b89      	ldr	r3, [pc, #548]	; (800a438 <__ieee754_pow+0x250>)
 800a214:	4193      	sbcs	r3, r2
 800a216:	f080 84d2 	bcs.w	800abbe <__ieee754_pow+0x9d6>
 800a21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 f833 	bl	800028c <__adddf3>
 800a226:	ec41 0b10 	vmov	d0, r0, r1
 800a22a:	b009      	add	sp, #36	; 0x24
 800a22c:	ecbd 8b06 	vpop	{d8-d10}
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	4b81      	ldr	r3, [pc, #516]	; (800a43c <__ieee754_pow+0x254>)
 800a236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a23a:	429c      	cmp	r4, r3
 800a23c:	ee10 aa10 	vmov	sl, s0
 800a240:	463d      	mov	r5, r7
 800a242:	dc06      	bgt.n	800a252 <__ieee754_pow+0x6a>
 800a244:	d101      	bne.n	800a24a <__ieee754_pow+0x62>
 800a246:	2e00      	cmp	r6, #0
 800a248:	d1e7      	bne.n	800a21a <__ieee754_pow+0x32>
 800a24a:	4598      	cmp	r8, r3
 800a24c:	dc01      	bgt.n	800a252 <__ieee754_pow+0x6a>
 800a24e:	d10f      	bne.n	800a270 <__ieee754_pow+0x88>
 800a250:	b172      	cbz	r2, 800a270 <__ieee754_pow+0x88>
 800a252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a25a:	ea55 050a 	orrs.w	r5, r5, sl
 800a25e:	d1dc      	bne.n	800a21a <__ieee754_pow+0x32>
 800a260:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a264:	18db      	adds	r3, r3, r3
 800a266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a26a:	4152      	adcs	r2, r2
 800a26c:	429d      	cmp	r5, r3
 800a26e:	e7d0      	b.n	800a212 <__ieee754_pow+0x2a>
 800a270:	2d00      	cmp	r5, #0
 800a272:	da3b      	bge.n	800a2ec <__ieee754_pow+0x104>
 800a274:	4b72      	ldr	r3, [pc, #456]	; (800a440 <__ieee754_pow+0x258>)
 800a276:	4598      	cmp	r8, r3
 800a278:	dc51      	bgt.n	800a31e <__ieee754_pow+0x136>
 800a27a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a27e:	4598      	cmp	r8, r3
 800a280:	f340 84ac 	ble.w	800abdc <__ieee754_pow+0x9f4>
 800a284:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a28c:	2b14      	cmp	r3, #20
 800a28e:	dd0f      	ble.n	800a2b0 <__ieee754_pow+0xc8>
 800a290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a294:	fa22 f103 	lsr.w	r1, r2, r3
 800a298:	fa01 f303 	lsl.w	r3, r1, r3
 800a29c:	4293      	cmp	r3, r2
 800a29e:	f040 849d 	bne.w	800abdc <__ieee754_pow+0x9f4>
 800a2a2:	f001 0101 	and.w	r1, r1, #1
 800a2a6:	f1c1 0302 	rsb	r3, r1, #2
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	b182      	cbz	r2, 800a2d0 <__ieee754_pow+0xe8>
 800a2ae:	e05f      	b.n	800a370 <__ieee754_pow+0x188>
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d15b      	bne.n	800a36c <__ieee754_pow+0x184>
 800a2b4:	f1c3 0314 	rsb	r3, r3, #20
 800a2b8:	fa48 f103 	asr.w	r1, r8, r3
 800a2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c0:	4543      	cmp	r3, r8
 800a2c2:	f040 8488 	bne.w	800abd6 <__ieee754_pow+0x9ee>
 800a2c6:	f001 0101 	and.w	r1, r1, #1
 800a2ca:	f1c1 0302 	rsb	r3, r1, #2
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	4b5c      	ldr	r3, [pc, #368]	; (800a444 <__ieee754_pow+0x25c>)
 800a2d2:	4598      	cmp	r8, r3
 800a2d4:	d132      	bne.n	800a33c <__ieee754_pow+0x154>
 800a2d6:	f1b9 0f00 	cmp.w	r9, #0
 800a2da:	f280 8478 	bge.w	800abce <__ieee754_pow+0x9e6>
 800a2de:	4959      	ldr	r1, [pc, #356]	; (800a444 <__ieee754_pow+0x25c>)
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f7f6 fab1 	bl	800084c <__aeabi_ddiv>
 800a2ea:	e79c      	b.n	800a226 <__ieee754_pow+0x3e>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d13d      	bne.n	800a370 <__ieee754_pow+0x188>
 800a2f4:	4b51      	ldr	r3, [pc, #324]	; (800a43c <__ieee754_pow+0x254>)
 800a2f6:	4598      	cmp	r8, r3
 800a2f8:	d1ea      	bne.n	800a2d0 <__ieee754_pow+0xe8>
 800a2fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a2fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a302:	ea53 030a 	orrs.w	r3, r3, sl
 800a306:	f000 845a 	beq.w	800abbe <__ieee754_pow+0x9d6>
 800a30a:	4b4f      	ldr	r3, [pc, #316]	; (800a448 <__ieee754_pow+0x260>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	dd08      	ble.n	800a322 <__ieee754_pow+0x13a>
 800a310:	f1b9 0f00 	cmp.w	r9, #0
 800a314:	f2c0 8457 	blt.w	800abc6 <__ieee754_pow+0x9de>
 800a318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a31c:	e783      	b.n	800a226 <__ieee754_pow+0x3e>
 800a31e:	2302      	movs	r3, #2
 800a320:	e7e5      	b.n	800a2ee <__ieee754_pow+0x106>
 800a322:	f1b9 0f00 	cmp.w	r9, #0
 800a326:	f04f 0000 	mov.w	r0, #0
 800a32a:	f04f 0100 	mov.w	r1, #0
 800a32e:	f6bf af7a 	bge.w	800a226 <__ieee754_pow+0x3e>
 800a332:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a33a:	e774      	b.n	800a226 <__ieee754_pow+0x3e>
 800a33c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a340:	d106      	bne.n	800a350 <__ieee754_pow+0x168>
 800a342:	4632      	mov	r2, r6
 800a344:	463b      	mov	r3, r7
 800a346:	4630      	mov	r0, r6
 800a348:	4639      	mov	r1, r7
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	e76a      	b.n	800a226 <__ieee754_pow+0x3e>
 800a350:	4b3e      	ldr	r3, [pc, #248]	; (800a44c <__ieee754_pow+0x264>)
 800a352:	4599      	cmp	r9, r3
 800a354:	d10c      	bne.n	800a370 <__ieee754_pow+0x188>
 800a356:	2d00      	cmp	r5, #0
 800a358:	db0a      	blt.n	800a370 <__ieee754_pow+0x188>
 800a35a:	ec47 6b10 	vmov	d0, r6, r7
 800a35e:	b009      	add	sp, #36	; 0x24
 800a360:	ecbd 8b06 	vpop	{d8-d10}
 800a364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	f000 bc6c 	b.w	800ac44 <__ieee754_sqrt>
 800a36c:	2300      	movs	r3, #0
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	ec47 6b10 	vmov	d0, r6, r7
 800a374:	f000 fd48 	bl	800ae08 <fabs>
 800a378:	ec51 0b10 	vmov	r0, r1, d0
 800a37c:	f1ba 0f00 	cmp.w	sl, #0
 800a380:	d129      	bne.n	800a3d6 <__ieee754_pow+0x1ee>
 800a382:	b124      	cbz	r4, 800a38e <__ieee754_pow+0x1a6>
 800a384:	4b2f      	ldr	r3, [pc, #188]	; (800a444 <__ieee754_pow+0x25c>)
 800a386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d123      	bne.n	800a3d6 <__ieee754_pow+0x1ee>
 800a38e:	f1b9 0f00 	cmp.w	r9, #0
 800a392:	da05      	bge.n	800a3a0 <__ieee754_pow+0x1b8>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	2000      	movs	r0, #0
 800a39a:	492a      	ldr	r1, [pc, #168]	; (800a444 <__ieee754_pow+0x25c>)
 800a39c:	f7f6 fa56 	bl	800084c <__aeabi_ddiv>
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	f6bf af40 	bge.w	800a226 <__ieee754_pow+0x3e>
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3b0:	4323      	orrs	r3, r4
 800a3b2:	d108      	bne.n	800a3c6 <__ieee754_pow+0x1de>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	f7f5 ff64 	bl	8000288 <__aeabi_dsub>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e78f      	b.n	800a2e6 <__ieee754_pow+0xfe>
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	f47f af2c 	bne.w	800a226 <__ieee754_pow+0x3e>
 800a3ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	e727      	b.n	800a226 <__ieee754_pow+0x3e>
 800a3d6:	0feb      	lsrs	r3, r5, #31
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	9a06      	ldr	r2, [sp, #24]
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	d102      	bne.n	800a3ea <__ieee754_pow+0x202>
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	e7e6      	b.n	800a3b8 <__ieee754_pow+0x1d0>
 800a3ea:	4b19      	ldr	r3, [pc, #100]	; (800a450 <__ieee754_pow+0x268>)
 800a3ec:	4598      	cmp	r8, r3
 800a3ee:	f340 80fb 	ble.w	800a5e8 <__ieee754_pow+0x400>
 800a3f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a3f6:	4598      	cmp	r8, r3
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <__ieee754_pow+0x260>)
 800a3fa:	dd0c      	ble.n	800a416 <__ieee754_pow+0x22e>
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	dc0f      	bgt.n	800a420 <__ieee754_pow+0x238>
 800a400:	f1b9 0f00 	cmp.w	r9, #0
 800a404:	da0f      	bge.n	800a426 <__ieee754_pow+0x23e>
 800a406:	2000      	movs	r0, #0
 800a408:	b009      	add	sp, #36	; 0x24
 800a40a:	ecbd 8b06 	vpop	{d8-d10}
 800a40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a412:	f000 bcf0 	b.w	800adf6 <__math_oflow>
 800a416:	429c      	cmp	r4, r3
 800a418:	dbf2      	blt.n	800a400 <__ieee754_pow+0x218>
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <__ieee754_pow+0x25c>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	dd19      	ble.n	800a454 <__ieee754_pow+0x26c>
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	dcef      	bgt.n	800a406 <__ieee754_pow+0x21e>
 800a426:	2000      	movs	r0, #0
 800a428:	b009      	add	sp, #36	; 0x24
 800a42a:	ecbd 8b06 	vpop	{d8-d10}
 800a42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a432:	f000 bcd7 	b.w	800ade4 <__math_uflow>
 800a436:	bf00      	nop
 800a438:	fff00000 	.word	0xfff00000
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	433fffff 	.word	0x433fffff
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	3fefffff 	.word	0x3fefffff
 800a44c:	3fe00000 	.word	0x3fe00000
 800a450:	41e00000 	.word	0x41e00000
 800a454:	4b60      	ldr	r3, [pc, #384]	; (800a5d8 <__ieee754_pow+0x3f0>)
 800a456:	2200      	movs	r2, #0
 800a458:	f7f5 ff16 	bl	8000288 <__aeabi_dsub>
 800a45c:	a354      	add	r3, pc, #336	; (adr r3, 800a5b0 <__ieee754_pow+0x3c8>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	4604      	mov	r4, r0
 800a464:	460d      	mov	r5, r1
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	a353      	add	r3, pc, #332	; (adr r3, 800a5b8 <__ieee754_pow+0x3d0>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	4b57      	ldr	r3, [pc, #348]	; (800a5dc <__ieee754_pow+0x3f4>)
 800a47e:	4682      	mov	sl, r0
 800a480:	468b      	mov	fp, r1
 800a482:	2200      	movs	r2, #0
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f6 f8b6 	bl	80005f8 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	a14b      	add	r1, pc, #300	; (adr r1, 800a5c0 <__ieee754_pow+0x3d8>)
 800a492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a496:	f7f5 fef7 	bl	8000288 <__aeabi_dsub>
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	494d      	ldr	r1, [pc, #308]	; (800a5e0 <__ieee754_pow+0x3f8>)
 800a4aa:	f7f5 feed 	bl	8000288 <__aeabi_dsub>
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	4689      	mov	r9, r1
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	a33f      	add	r3, pc, #252	; (adr r3, 800a5c8 <__ieee754_pow+0x3e0>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4650      	mov	r0, sl
 800a4da:	4659      	mov	r1, fp
 800a4dc:	f7f5 fed4 	bl	8000288 <__aeabi_dsub>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4689      	mov	r9, r1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f5 fece 	bl	800028c <__adddf3>
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	f7f5 fec5 	bl	8000288 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f5 febf 	bl	8000288 <__aeabi_dsub>
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	9a06      	ldr	r2, [sp, #24]
 800a50e:	3b01      	subs	r3, #1
 800a510:	4313      	orrs	r3, r2
 800a512:	4682      	mov	sl, r0
 800a514:	468b      	mov	fp, r1
 800a516:	f040 81e7 	bne.w	800a8e8 <__ieee754_pow+0x700>
 800a51a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a5d0 <__ieee754_pow+0x3e8>
 800a51e:	eeb0 8a47 	vmov.f32	s16, s14
 800a522:	eef0 8a67 	vmov.f32	s17, s15
 800a526:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a52a:	2600      	movs	r6, #0
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	f7f6 f85c 	bl	80005f8 <__aeabi_dmul>
 800a540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a544:	4680      	mov	r8, r0
 800a546:	4689      	mov	r9, r1
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	f7f6 f854 	bl	80005f8 <__aeabi_dmul>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 fe98 	bl	800028c <__adddf3>
 800a55c:	4632      	mov	r2, r6
 800a55e:	463b      	mov	r3, r7
 800a560:	4680      	mov	r8, r0
 800a562:	4689      	mov	r9, r1
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	460b      	mov	r3, r1
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	4602      	mov	r2, r0
 800a574:	4649      	mov	r1, r9
 800a576:	4640      	mov	r0, r8
 800a578:	f7f5 fe88 	bl	800028c <__adddf3>
 800a57c:	4b19      	ldr	r3, [pc, #100]	; (800a5e4 <__ieee754_pow+0x3fc>)
 800a57e:	4299      	cmp	r1, r3
 800a580:	ec45 4b19 	vmov	d9, r4, r5
 800a584:	4606      	mov	r6, r0
 800a586:	460f      	mov	r7, r1
 800a588:	468b      	mov	fp, r1
 800a58a:	f340 82f1 	ble.w	800ab70 <__ieee754_pow+0x988>
 800a58e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a596:	4303      	orrs	r3, r0
 800a598:	f000 81e4 	beq.w	800a964 <__ieee754_pow+0x77c>
 800a59c:	ec51 0b18 	vmov	r0, r1, d8
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f7f6 fa9a 	bl	8000adc <__aeabi_dcmplt>
 800a5a8:	3800      	subs	r0, #0
 800a5aa:	bf18      	it	ne
 800a5ac:	2001      	movne	r0, #1
 800a5ae:	e72b      	b.n	800a408 <__ieee754_pow+0x220>
 800a5b0:	60000000 	.word	0x60000000
 800a5b4:	3ff71547 	.word	0x3ff71547
 800a5b8:	f85ddf44 	.word	0xf85ddf44
 800a5bc:	3e54ae0b 	.word	0x3e54ae0b
 800a5c0:	55555555 	.word	0x55555555
 800a5c4:	3fd55555 	.word	0x3fd55555
 800a5c8:	652b82fe 	.word	0x652b82fe
 800a5cc:	3ff71547 	.word	0x3ff71547
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	bff00000 	.word	0xbff00000
 800a5d8:	3ff00000 	.word	0x3ff00000
 800a5dc:	3fd00000 	.word	0x3fd00000
 800a5e0:	3fe00000 	.word	0x3fe00000
 800a5e4:	408fffff 	.word	0x408fffff
 800a5e8:	4bd5      	ldr	r3, [pc, #852]	; (800a940 <__ieee754_pow+0x758>)
 800a5ea:	402b      	ands	r3, r5
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	b92b      	cbnz	r3, 800a5fc <__ieee754_pow+0x414>
 800a5f0:	4bd4      	ldr	r3, [pc, #848]	; (800a944 <__ieee754_pow+0x75c>)
 800a5f2:	f7f6 f801 	bl	80005f8 <__aeabi_dmul>
 800a5f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	1523      	asrs	r3, r4, #20
 800a5fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a602:	4413      	add	r3, r2
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	4bd0      	ldr	r3, [pc, #832]	; (800a948 <__ieee754_pow+0x760>)
 800a608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a60c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a610:	429c      	cmp	r4, r3
 800a612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a616:	dd08      	ble.n	800a62a <__ieee754_pow+0x442>
 800a618:	4bcc      	ldr	r3, [pc, #816]	; (800a94c <__ieee754_pow+0x764>)
 800a61a:	429c      	cmp	r4, r3
 800a61c:	f340 8162 	ble.w	800a8e4 <__ieee754_pow+0x6fc>
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	3301      	adds	r3, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a62a:	2400      	movs	r4, #0
 800a62c:	00e3      	lsls	r3, r4, #3
 800a62e:	9307      	str	r3, [sp, #28]
 800a630:	4bc7      	ldr	r3, [pc, #796]	; (800a950 <__ieee754_pow+0x768>)
 800a632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a636:	ed93 7b00 	vldr	d7, [r3]
 800a63a:	4629      	mov	r1, r5
 800a63c:	ec53 2b17 	vmov	r2, r3, d7
 800a640:	eeb0 9a47 	vmov.f32	s18, s14
 800a644:	eef0 9a67 	vmov.f32	s19, s15
 800a648:	4682      	mov	sl, r0
 800a64a:	f7f5 fe1d 	bl	8000288 <__aeabi_dsub>
 800a64e:	4652      	mov	r2, sl
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	462b      	mov	r3, r5
 800a656:	ec51 0b19 	vmov	r0, r1, d9
 800a65a:	f7f5 fe17 	bl	800028c <__adddf3>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	2000      	movs	r0, #0
 800a664:	49bb      	ldr	r1, [pc, #748]	; (800a954 <__ieee754_pow+0x76c>)
 800a666:	f7f6 f8f1 	bl	800084c <__aeabi_ddiv>
 800a66a:	ec41 0b1a 	vmov	d10, r0, r1
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f5 ffbf 	bl	80005f8 <__aeabi_dmul>
 800a67a:	2300      	movs	r3, #0
 800a67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a686:	46ab      	mov	fp, r5
 800a688:	106d      	asrs	r5, r5, #1
 800a68a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a68e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a692:	ec41 0b18 	vmov	d8, r0, r1
 800a696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a69a:	2200      	movs	r2, #0
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	461d      	mov	r5, r3
 800a6a4:	f7f5 ffa8 	bl	80005f8 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 fdea 	bl	8000288 <__aeabi_dsub>
 800a6b4:	ec53 2b19 	vmov	r2, r3, d9
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	460f      	mov	r7, r1
 800a6bc:	4620      	mov	r0, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7f5 fde2 	bl	8000288 <__aeabi_dsub>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	4659      	mov	r1, fp
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f7f5 fdd2 	bl	8000288 <__aeabi_dsub>
 800a6e4:	ec53 2b1a 	vmov	r2, r3, d10
 800a6e8:	f7f5 ff86 	bl	80005f8 <__aeabi_dmul>
 800a6ec:	ec53 2b18 	vmov	r2, r3, d8
 800a6f0:	ec41 0b19 	vmov	d9, r0, r1
 800a6f4:	ec51 0b18 	vmov	r0, r1, d8
 800a6f8:	f7f5 ff7e 	bl	80005f8 <__aeabi_dmul>
 800a6fc:	a37c      	add	r3, pc, #496	; (adr r3, 800a8f0 <__ieee754_pow+0x708>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	f7f5 ff77 	bl	80005f8 <__aeabi_dmul>
 800a70a:	a37b      	add	r3, pc, #492	; (adr r3, 800a8f8 <__ieee754_pow+0x710>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f7f5 fdbc 	bl	800028c <__adddf3>
 800a714:	4622      	mov	r2, r4
 800a716:	462b      	mov	r3, r5
 800a718:	f7f5 ff6e 	bl	80005f8 <__aeabi_dmul>
 800a71c:	a378      	add	r3, pc, #480	; (adr r3, 800a900 <__ieee754_pow+0x718>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fdb3 	bl	800028c <__adddf3>
 800a726:	4622      	mov	r2, r4
 800a728:	462b      	mov	r3, r5
 800a72a:	f7f5 ff65 	bl	80005f8 <__aeabi_dmul>
 800a72e:	a376      	add	r3, pc, #472	; (adr r3, 800a908 <__ieee754_pow+0x720>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f7f5 fdaa 	bl	800028c <__adddf3>
 800a738:	4622      	mov	r2, r4
 800a73a:	462b      	mov	r3, r5
 800a73c:	f7f5 ff5c 	bl	80005f8 <__aeabi_dmul>
 800a740:	a373      	add	r3, pc, #460	; (adr r3, 800a910 <__ieee754_pow+0x728>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f5 fda1 	bl	800028c <__adddf3>
 800a74a:	4622      	mov	r2, r4
 800a74c:	462b      	mov	r3, r5
 800a74e:	f7f5 ff53 	bl	80005f8 <__aeabi_dmul>
 800a752:	a371      	add	r3, pc, #452	; (adr r3, 800a918 <__ieee754_pow+0x730>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f7f5 fd98 	bl	800028c <__adddf3>
 800a75c:	4622      	mov	r2, r4
 800a75e:	4606      	mov	r6, r0
 800a760:	460f      	mov	r7, r1
 800a762:	462b      	mov	r3, r5
 800a764:	4620      	mov	r0, r4
 800a766:	4629      	mov	r1, r5
 800a768:	f7f5 ff46 	bl	80005f8 <__aeabi_dmul>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4630      	mov	r0, r6
 800a772:	4639      	mov	r1, r7
 800a774:	f7f5 ff40 	bl	80005f8 <__aeabi_dmul>
 800a778:	4642      	mov	r2, r8
 800a77a:	4604      	mov	r4, r0
 800a77c:	460d      	mov	r5, r1
 800a77e:	464b      	mov	r3, r9
 800a780:	ec51 0b18 	vmov	r0, r1, d8
 800a784:	f7f5 fd82 	bl	800028c <__adddf3>
 800a788:	ec53 2b19 	vmov	r2, r3, d9
 800a78c:	f7f5 ff34 	bl	80005f8 <__aeabi_dmul>
 800a790:	4622      	mov	r2, r4
 800a792:	462b      	mov	r3, r5
 800a794:	f7f5 fd7a 	bl	800028c <__adddf3>
 800a798:	4642      	mov	r2, r8
 800a79a:	4682      	mov	sl, r0
 800a79c:	468b      	mov	fp, r1
 800a79e:	464b      	mov	r3, r9
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 ff28 	bl	80005f8 <__aeabi_dmul>
 800a7a8:	4b6b      	ldr	r3, [pc, #428]	; (800a958 <__ieee754_pow+0x770>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	f7f5 fd6c 	bl	800028c <__adddf3>
 800a7b4:	4652      	mov	r2, sl
 800a7b6:	465b      	mov	r3, fp
 800a7b8:	f7f5 fd68 	bl	800028c <__adddf3>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f5 ff15 	bl	80005f8 <__aeabi_dmul>
 800a7ce:	4b62      	ldr	r3, [pc, #392]	; (800a958 <__ieee754_pow+0x770>)
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	f7f5 fd55 	bl	8000288 <__aeabi_dsub>
 800a7de:	4632      	mov	r2, r6
 800a7e0:	463b      	mov	r3, r7
 800a7e2:	f7f5 fd51 	bl	8000288 <__aeabi_dsub>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	f7f5 fd4b 	bl	8000288 <__aeabi_dsub>
 800a7f2:	ec53 2b18 	vmov	r2, r3, d8
 800a7f6:	f7f5 feff 	bl	80005f8 <__aeabi_dmul>
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	462b      	mov	r3, r5
 800a802:	ec51 0b19 	vmov	r0, r1, d9
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	f7f5 fd3b 	bl	800028c <__adddf3>
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	f7f5 fd33 	bl	800028c <__adddf3>
 800a826:	a33e      	add	r3, pc, #248	; (adr r3, 800a920 <__ieee754_pow+0x738>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	2000      	movs	r0, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	4642      	mov	r2, r8
 800a838:	ec41 0b18 	vmov	d8, r0, r1
 800a83c:	464b      	mov	r3, r9
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f5 fd21 	bl	8000288 <__aeabi_dsub>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fd1b 	bl	8000288 <__aeabi_dsub>
 800a852:	a335      	add	r3, pc, #212	; (adr r3, 800a928 <__ieee754_pow+0x740>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 fece 	bl	80005f8 <__aeabi_dmul>
 800a85c:	a334      	add	r3, pc, #208	; (adr r3, 800a930 <__ieee754_pow+0x748>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	4606      	mov	r6, r0
 800a864:	460f      	mov	r7, r1
 800a866:	4620      	mov	r0, r4
 800a868:	4629      	mov	r1, r5
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f5 fd09 	bl	800028c <__adddf3>
 800a87a:	9a07      	ldr	r2, [sp, #28]
 800a87c:	4b37      	ldr	r3, [pc, #220]	; (800a95c <__ieee754_pow+0x774>)
 800a87e:	4413      	add	r3, r2
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f7f5 fd02 	bl	800028c <__adddf3>
 800a888:	4682      	mov	sl, r0
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	468b      	mov	fp, r1
 800a88e:	f7f5 fe49 	bl	8000524 <__aeabi_i2d>
 800a892:	9a07      	ldr	r2, [sp, #28]
 800a894:	4b32      	ldr	r3, [pc, #200]	; (800a960 <__ieee754_pow+0x778>)
 800a896:	4413      	add	r3, r2
 800a898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a89c:	4606      	mov	r6, r0
 800a89e:	460f      	mov	r7, r1
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	ec51 0b18 	vmov	r0, r1, d8
 800a8a8:	f7f5 fcf0 	bl	800028c <__adddf3>
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	f7f5 fcec 	bl	800028c <__adddf3>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	f7f5 fce8 	bl	800028c <__adddf3>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	4632      	mov	r2, r6
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	f7f5 fcdf 	bl	8000288 <__aeabi_dsub>
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	f7f5 fcdb 	bl	8000288 <__aeabi_dsub>
 800a8d2:	ec53 2b18 	vmov	r2, r3, d8
 800a8d6:	f7f5 fcd7 	bl	8000288 <__aeabi_dsub>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4650      	mov	r0, sl
 800a8e0:	4659      	mov	r1, fp
 800a8e2:	e610      	b.n	800a506 <__ieee754_pow+0x31e>
 800a8e4:	2401      	movs	r4, #1
 800a8e6:	e6a1      	b.n	800a62c <__ieee754_pow+0x444>
 800a8e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a938 <__ieee754_pow+0x750>
 800a8ec:	e617      	b.n	800a51e <__ieee754_pow+0x336>
 800a8ee:	bf00      	nop
 800a8f0:	4a454eef 	.word	0x4a454eef
 800a8f4:	3fca7e28 	.word	0x3fca7e28
 800a8f8:	93c9db65 	.word	0x93c9db65
 800a8fc:	3fcd864a 	.word	0x3fcd864a
 800a900:	a91d4101 	.word	0xa91d4101
 800a904:	3fd17460 	.word	0x3fd17460
 800a908:	518f264d 	.word	0x518f264d
 800a90c:	3fd55555 	.word	0x3fd55555
 800a910:	db6fabff 	.word	0xdb6fabff
 800a914:	3fdb6db6 	.word	0x3fdb6db6
 800a918:	33333303 	.word	0x33333303
 800a91c:	3fe33333 	.word	0x3fe33333
 800a920:	e0000000 	.word	0xe0000000
 800a924:	3feec709 	.word	0x3feec709
 800a928:	dc3a03fd 	.word	0xdc3a03fd
 800a92c:	3feec709 	.word	0x3feec709
 800a930:	145b01f5 	.word	0x145b01f5
 800a934:	be3e2fe0 	.word	0xbe3e2fe0
 800a938:	00000000 	.word	0x00000000
 800a93c:	3ff00000 	.word	0x3ff00000
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	43400000 	.word	0x43400000
 800a948:	0003988e 	.word	0x0003988e
 800a94c:	000bb679 	.word	0x000bb679
 800a950:	0800b788 	.word	0x0800b788
 800a954:	3ff00000 	.word	0x3ff00000
 800a958:	40080000 	.word	0x40080000
 800a95c:	0800b7a8 	.word	0x0800b7a8
 800a960:	0800b798 	.word	0x0800b798
 800a964:	a3b5      	add	r3, pc, #724	; (adr r3, 800ac3c <__ieee754_pow+0xa54>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	f7f5 fc8d 	bl	800028c <__adddf3>
 800a972:	4622      	mov	r2, r4
 800a974:	ec41 0b1a 	vmov	d10, r0, r1
 800a978:	462b      	mov	r3, r5
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f5 fc83 	bl	8000288 <__aeabi_dsub>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	ec51 0b1a 	vmov	r0, r1, d10
 800a98a:	f7f6 f8c5 	bl	8000b18 <__aeabi_dcmpgt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f47f ae04 	bne.w	800a59c <__ieee754_pow+0x3b4>
 800a994:	4aa4      	ldr	r2, [pc, #656]	; (800ac28 <__ieee754_pow+0xa40>)
 800a996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a99a:	4293      	cmp	r3, r2
 800a99c:	f340 8108 	ble.w	800abb0 <__ieee754_pow+0x9c8>
 800a9a0:	151b      	asrs	r3, r3, #20
 800a9a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a9a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a9aa:	fa4a f303 	asr.w	r3, sl, r3
 800a9ae:	445b      	add	r3, fp
 800a9b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a9b4:	4e9d      	ldr	r6, [pc, #628]	; (800ac2c <__ieee754_pow+0xa44>)
 800a9b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9ba:	4116      	asrs	r6, r2
 800a9bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	ea23 0106 	bic.w	r1, r3, r6
 800a9c6:	f1c2 0214 	rsb	r2, r2, #20
 800a9ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9ce:	fa4a fa02 	asr.w	sl, sl, r2
 800a9d2:	f1bb 0f00 	cmp.w	fp, #0
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	bfb8      	it	lt
 800a9e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800a9e4:	f7f5 fc50 	bl	8000288 <__aeabi_dsub>
 800a9e8:	ec41 0b19 	vmov	d9, r0, r1
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	464b      	mov	r3, r9
 800a9f0:	ec51 0b19 	vmov	r0, r1, d9
 800a9f4:	f7f5 fc4a 	bl	800028c <__adddf3>
 800a9f8:	a37b      	add	r3, pc, #492	; (adr r3, 800abe8 <__ieee754_pow+0xa00>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	2000      	movs	r0, #0
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	f7f5 fdf8 	bl	80005f8 <__aeabi_dmul>
 800aa08:	ec53 2b19 	vmov	r2, r3, d9
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fc38 	bl	8000288 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fc32 	bl	8000288 <__aeabi_dsub>
 800aa24:	a372      	add	r3, pc, #456	; (adr r3, 800abf0 <__ieee754_pow+0xa08>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fde5 	bl	80005f8 <__aeabi_dmul>
 800aa2e:	a372      	add	r3, pc, #456	; (adr r3, 800abf8 <__ieee754_pow+0xa10>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	4680      	mov	r8, r0
 800aa36:	4689      	mov	r9, r1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f7f5 fddc 	bl	80005f8 <__aeabi_dmul>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4640      	mov	r0, r8
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7f5 fc20 	bl	800028c <__adddf3>
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4630      	mov	r0, r6
 800aa56:	4639      	mov	r1, r7
 800aa58:	f7f5 fc18 	bl	800028c <__adddf3>
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	4680      	mov	r8, r0
 800aa62:	4689      	mov	r9, r1
 800aa64:	f7f5 fc10 	bl	8000288 <__aeabi_dsub>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f5 fc0a 	bl	8000288 <__aeabi_dsub>
 800aa74:	4642      	mov	r2, r8
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	4649      	mov	r1, r9
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	a35e      	add	r3, pc, #376	; (adr r3, 800ac00 <__ieee754_pow+0xa18>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	f7f5 fdb3 	bl	80005f8 <__aeabi_dmul>
 800aa92:	a35d      	add	r3, pc, #372	; (adr r3, 800ac08 <__ieee754_pow+0xa20>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fbf6 	bl	8000288 <__aeabi_dsub>
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	462b      	mov	r3, r5
 800aaa0:	f7f5 fdaa 	bl	80005f8 <__aeabi_dmul>
 800aaa4:	a35a      	add	r3, pc, #360	; (adr r3, 800ac10 <__ieee754_pow+0xa28>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fbef 	bl	800028c <__adddf3>
 800aaae:	4622      	mov	r2, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	f7f5 fda1 	bl	80005f8 <__aeabi_dmul>
 800aab6:	a358      	add	r3, pc, #352	; (adr r3, 800ac18 <__ieee754_pow+0xa30>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fbe4 	bl	8000288 <__aeabi_dsub>
 800aac0:	4622      	mov	r2, r4
 800aac2:	462b      	mov	r3, r5
 800aac4:	f7f5 fd98 	bl	80005f8 <__aeabi_dmul>
 800aac8:	a355      	add	r3, pc, #340	; (adr r3, 800ac20 <__ieee754_pow+0xa38>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fbdd 	bl	800028c <__adddf3>
 800aad2:	4622      	mov	r2, r4
 800aad4:	462b      	mov	r3, r5
 800aad6:	f7f5 fd8f 	bl	80005f8 <__aeabi_dmul>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	4640      	mov	r0, r8
 800aae0:	4649      	mov	r1, r9
 800aae2:	f7f5 fbd1 	bl	8000288 <__aeabi_dsub>
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4640      	mov	r0, r8
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	f7f5 fd81 	bl	80005f8 <__aeabi_dmul>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	ec41 0b19 	vmov	d9, r0, r1
 800aafc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab00:	4620      	mov	r0, r4
 800ab02:	4629      	mov	r1, r5
 800ab04:	f7f5 fbc0 	bl	8000288 <__aeabi_dsub>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	ec51 0b19 	vmov	r0, r1, d9
 800ab10:	f7f5 fe9c 	bl	800084c <__aeabi_ddiv>
 800ab14:	4632      	mov	r2, r6
 800ab16:	4604      	mov	r4, r0
 800ab18:	460d      	mov	r5, r1
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f5 fbb0 	bl	800028c <__adddf3>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4620      	mov	r0, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7f5 fba8 	bl	8000288 <__aeabi_dsub>
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	f7f5 fba4 	bl	8000288 <__aeabi_dsub>
 800ab40:	460b      	mov	r3, r1
 800ab42:	4602      	mov	r2, r0
 800ab44:	493a      	ldr	r1, [pc, #232]	; (800ac30 <__ieee754_pow+0xa48>)
 800ab46:	2000      	movs	r0, #0
 800ab48:	f7f5 fb9e 	bl	8000288 <__aeabi_dsub>
 800ab4c:	ec41 0b10 	vmov	d0, r0, r1
 800ab50:	ee10 3a90 	vmov	r3, s1
 800ab54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ab58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab5c:	da2b      	bge.n	800abb6 <__ieee754_pow+0x9ce>
 800ab5e:	4650      	mov	r0, sl
 800ab60:	f000 f966 	bl	800ae30 <scalbn>
 800ab64:	ec51 0b10 	vmov	r0, r1, d0
 800ab68:	ec53 2b18 	vmov	r2, r3, d8
 800ab6c:	f7ff bbed 	b.w	800a34a <__ieee754_pow+0x162>
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <__ieee754_pow+0xa4c>)
 800ab72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab76:	429e      	cmp	r6, r3
 800ab78:	f77f af0c 	ble.w	800a994 <__ieee754_pow+0x7ac>
 800ab7c:	4b2e      	ldr	r3, [pc, #184]	; (800ac38 <__ieee754_pow+0xa50>)
 800ab7e:	440b      	add	r3, r1
 800ab80:	4303      	orrs	r3, r0
 800ab82:	d009      	beq.n	800ab98 <__ieee754_pow+0x9b0>
 800ab84:	ec51 0b18 	vmov	r0, r1, d8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f7f5 ffa6 	bl	8000adc <__aeabi_dcmplt>
 800ab90:	3800      	subs	r0, #0
 800ab92:	bf18      	it	ne
 800ab94:	2001      	movne	r0, #1
 800ab96:	e447      	b.n	800a428 <__ieee754_pow+0x240>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f7f5 fb74 	bl	8000288 <__aeabi_dsub>
 800aba0:	4642      	mov	r2, r8
 800aba2:	464b      	mov	r3, r9
 800aba4:	f7f5 ffae 	bl	8000b04 <__aeabi_dcmpge>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f43f aef3 	beq.w	800a994 <__ieee754_pow+0x7ac>
 800abae:	e7e9      	b.n	800ab84 <__ieee754_pow+0x99c>
 800abb0:	f04f 0a00 	mov.w	sl, #0
 800abb4:	e71a      	b.n	800a9ec <__ieee754_pow+0x804>
 800abb6:	ec51 0b10 	vmov	r0, r1, d0
 800abba:	4619      	mov	r1, r3
 800abbc:	e7d4      	b.n	800ab68 <__ieee754_pow+0x980>
 800abbe:	491c      	ldr	r1, [pc, #112]	; (800ac30 <__ieee754_pow+0xa48>)
 800abc0:	2000      	movs	r0, #0
 800abc2:	f7ff bb30 	b.w	800a226 <__ieee754_pow+0x3e>
 800abc6:	2000      	movs	r0, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	f7ff bb2c 	b.w	800a226 <__ieee754_pow+0x3e>
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7ff bb28 	b.w	800a226 <__ieee754_pow+0x3e>
 800abd6:	9204      	str	r2, [sp, #16]
 800abd8:	f7ff bb7a 	b.w	800a2d0 <__ieee754_pow+0xe8>
 800abdc:	2300      	movs	r3, #0
 800abde:	f7ff bb64 	b.w	800a2aa <__ieee754_pow+0xc2>
 800abe2:	bf00      	nop
 800abe4:	f3af 8000 	nop.w
 800abe8:	00000000 	.word	0x00000000
 800abec:	3fe62e43 	.word	0x3fe62e43
 800abf0:	fefa39ef 	.word	0xfefa39ef
 800abf4:	3fe62e42 	.word	0x3fe62e42
 800abf8:	0ca86c39 	.word	0x0ca86c39
 800abfc:	be205c61 	.word	0xbe205c61
 800ac00:	72bea4d0 	.word	0x72bea4d0
 800ac04:	3e663769 	.word	0x3e663769
 800ac08:	c5d26bf1 	.word	0xc5d26bf1
 800ac0c:	3ebbbd41 	.word	0x3ebbbd41
 800ac10:	af25de2c 	.word	0xaf25de2c
 800ac14:	3f11566a 	.word	0x3f11566a
 800ac18:	16bebd93 	.word	0x16bebd93
 800ac1c:	3f66c16c 	.word	0x3f66c16c
 800ac20:	5555553e 	.word	0x5555553e
 800ac24:	3fc55555 	.word	0x3fc55555
 800ac28:	3fe00000 	.word	0x3fe00000
 800ac2c:	000fffff 	.word	0x000fffff
 800ac30:	3ff00000 	.word	0x3ff00000
 800ac34:	4090cbff 	.word	0x4090cbff
 800ac38:	3f6f3400 	.word	0x3f6f3400
 800ac3c:	652b82fe 	.word	0x652b82fe
 800ac40:	3c971547 	.word	0x3c971547

0800ac44 <__ieee754_sqrt>:
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	ec55 4b10 	vmov	r4, r5, d0
 800ac4c:	4e55      	ldr	r6, [pc, #340]	; (800ada4 <__ieee754_sqrt+0x160>)
 800ac4e:	43ae      	bics	r6, r5
 800ac50:	ee10 0a10 	vmov	r0, s0
 800ac54:	ee10 3a10 	vmov	r3, s0
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	d110      	bne.n	800ac80 <__ieee754_sqrt+0x3c>
 800ac5e:	ee10 2a10 	vmov	r2, s0
 800ac62:	462b      	mov	r3, r5
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fb0c 	bl	800028c <__adddf3>
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	ec45 4b10 	vmov	d0, r4, r5
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	dc10      	bgt.n	800aca6 <__ieee754_sqrt+0x62>
 800ac84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac88:	4330      	orrs	r0, r6
 800ac8a:	d0f5      	beq.n	800ac78 <__ieee754_sqrt+0x34>
 800ac8c:	b15d      	cbz	r5, 800aca6 <__ieee754_sqrt+0x62>
 800ac8e:	ee10 2a10 	vmov	r2, s0
 800ac92:	462b      	mov	r3, r5
 800ac94:	ee10 0a10 	vmov	r0, s0
 800ac98:	f7f5 faf6 	bl	8000288 <__aeabi_dsub>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	f7f5 fdd4 	bl	800084c <__aeabi_ddiv>
 800aca4:	e7e6      	b.n	800ac74 <__ieee754_sqrt+0x30>
 800aca6:	1512      	asrs	r2, r2, #20
 800aca8:	d074      	beq.n	800ad94 <__ieee754_sqrt+0x150>
 800acaa:	07d4      	lsls	r4, r2, #31
 800acac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800acb0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800acb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acb8:	bf5e      	ittt	pl
 800acba:	0fda      	lsrpl	r2, r3, #31
 800acbc:	005b      	lslpl	r3, r3, #1
 800acbe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800acc2:	2400      	movs	r4, #0
 800acc4:	0fda      	lsrs	r2, r3, #31
 800acc6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800acca:	107f      	asrs	r7, r7, #1
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	2516      	movs	r5, #22
 800acd0:	4620      	mov	r0, r4
 800acd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800acd6:	1886      	adds	r6, r0, r2
 800acd8:	428e      	cmp	r6, r1
 800acda:	bfde      	ittt	le
 800acdc:	1b89      	suble	r1, r1, r6
 800acde:	18b0      	addle	r0, r6, r2
 800ace0:	18a4      	addle	r4, r4, r2
 800ace2:	0049      	lsls	r1, r1, #1
 800ace4:	3d01      	subs	r5, #1
 800ace6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800acea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800acee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800acf2:	d1f0      	bne.n	800acd6 <__ieee754_sqrt+0x92>
 800acf4:	462a      	mov	r2, r5
 800acf6:	f04f 0e20 	mov.w	lr, #32
 800acfa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800acfe:	4281      	cmp	r1, r0
 800ad00:	eb06 0c05 	add.w	ip, r6, r5
 800ad04:	dc02      	bgt.n	800ad0c <__ieee754_sqrt+0xc8>
 800ad06:	d113      	bne.n	800ad30 <__ieee754_sqrt+0xec>
 800ad08:	459c      	cmp	ip, r3
 800ad0a:	d811      	bhi.n	800ad30 <__ieee754_sqrt+0xec>
 800ad0c:	f1bc 0f00 	cmp.w	ip, #0
 800ad10:	eb0c 0506 	add.w	r5, ip, r6
 800ad14:	da43      	bge.n	800ad9e <__ieee754_sqrt+0x15a>
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	db41      	blt.n	800ad9e <__ieee754_sqrt+0x15a>
 800ad1a:	f100 0801 	add.w	r8, r0, #1
 800ad1e:	1a09      	subs	r1, r1, r0
 800ad20:	459c      	cmp	ip, r3
 800ad22:	bf88      	it	hi
 800ad24:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ad28:	eba3 030c 	sub.w	r3, r3, ip
 800ad2c:	4432      	add	r2, r6
 800ad2e:	4640      	mov	r0, r8
 800ad30:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ad34:	f1be 0e01 	subs.w	lr, lr, #1
 800ad38:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ad3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad44:	d1db      	bne.n	800acfe <__ieee754_sqrt+0xba>
 800ad46:	430b      	orrs	r3, r1
 800ad48:	d006      	beq.n	800ad58 <__ieee754_sqrt+0x114>
 800ad4a:	1c50      	adds	r0, r2, #1
 800ad4c:	bf13      	iteet	ne
 800ad4e:	3201      	addne	r2, #1
 800ad50:	3401      	addeq	r4, #1
 800ad52:	4672      	moveq	r2, lr
 800ad54:	f022 0201 	bicne.w	r2, r2, #1
 800ad58:	1063      	asrs	r3, r4, #1
 800ad5a:	0852      	lsrs	r2, r2, #1
 800ad5c:	07e1      	lsls	r1, r4, #31
 800ad5e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad66:	bf48      	it	mi
 800ad68:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ad6c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ad70:	4614      	mov	r4, r2
 800ad72:	e781      	b.n	800ac78 <__ieee754_sqrt+0x34>
 800ad74:	0ad9      	lsrs	r1, r3, #11
 800ad76:	3815      	subs	r0, #21
 800ad78:	055b      	lsls	r3, r3, #21
 800ad7a:	2900      	cmp	r1, #0
 800ad7c:	d0fa      	beq.n	800ad74 <__ieee754_sqrt+0x130>
 800ad7e:	02cd      	lsls	r5, r1, #11
 800ad80:	d50a      	bpl.n	800ad98 <__ieee754_sqrt+0x154>
 800ad82:	f1c2 0420 	rsb	r4, r2, #32
 800ad86:	fa23 f404 	lsr.w	r4, r3, r4
 800ad8a:	1e55      	subs	r5, r2, #1
 800ad8c:	4093      	lsls	r3, r2
 800ad8e:	4321      	orrs	r1, r4
 800ad90:	1b42      	subs	r2, r0, r5
 800ad92:	e78a      	b.n	800acaa <__ieee754_sqrt+0x66>
 800ad94:	4610      	mov	r0, r2
 800ad96:	e7f0      	b.n	800ad7a <__ieee754_sqrt+0x136>
 800ad98:	0049      	lsls	r1, r1, #1
 800ad9a:	3201      	adds	r2, #1
 800ad9c:	e7ef      	b.n	800ad7e <__ieee754_sqrt+0x13a>
 800ad9e:	4680      	mov	r8, r0
 800ada0:	e7bd      	b.n	800ad1e <__ieee754_sqrt+0xda>
 800ada2:	bf00      	nop
 800ada4:	7ff00000 	.word	0x7ff00000

0800ada8 <with_errno>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4604      	mov	r4, r0
 800adac:	460d      	mov	r5, r1
 800adae:	4616      	mov	r6, r2
 800adb0:	f7fc fbd2 	bl	8007558 <__errno>
 800adb4:	4629      	mov	r1, r5
 800adb6:	6006      	str	r6, [r0, #0]
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <xflow>:
 800adbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adbe:	4614      	mov	r4, r2
 800adc0:	461d      	mov	r5, r3
 800adc2:	b108      	cbz	r0, 800adc8 <xflow+0xc>
 800adc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adc8:	e9cd 2300 	strd	r2, r3, [sp]
 800adcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800add0:	4620      	mov	r0, r4
 800add2:	4629      	mov	r1, r5
 800add4:	f7f5 fc10 	bl	80005f8 <__aeabi_dmul>
 800add8:	2222      	movs	r2, #34	; 0x22
 800adda:	b003      	add	sp, #12
 800addc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ade0:	f7ff bfe2 	b.w	800ada8 <with_errno>

0800ade4 <__math_uflow>:
 800ade4:	b508      	push	{r3, lr}
 800ade6:	2200      	movs	r2, #0
 800ade8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800adec:	f7ff ffe6 	bl	800adbc <xflow>
 800adf0:	ec41 0b10 	vmov	d0, r0, r1
 800adf4:	bd08      	pop	{r3, pc}

0800adf6 <__math_oflow>:
 800adf6:	b508      	push	{r3, lr}
 800adf8:	2200      	movs	r2, #0
 800adfa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800adfe:	f7ff ffdd 	bl	800adbc <xflow>
 800ae02:	ec41 0b10 	vmov	d0, r0, r1
 800ae06:	bd08      	pop	{r3, pc}

0800ae08 <fabs>:
 800ae08:	ec51 0b10 	vmov	r0, r1, d0
 800ae0c:	ee10 2a10 	vmov	r2, s0
 800ae10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae14:	ec43 2b10 	vmov	d0, r2, r3
 800ae18:	4770      	bx	lr

0800ae1a <finite>:
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	ed8d 0b00 	vstr	d0, [sp]
 800ae20:	9801      	ldr	r0, [sp, #4]
 800ae22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae2a:	0fc0      	lsrs	r0, r0, #31
 800ae2c:	b002      	add	sp, #8
 800ae2e:	4770      	bx	lr

0800ae30 <scalbn>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	ec55 4b10 	vmov	r4, r5, d0
 800ae36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	b99a      	cbnz	r2, 800ae68 <scalbn+0x38>
 800ae40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae44:	4323      	orrs	r3, r4
 800ae46:	d036      	beq.n	800aeb6 <scalbn+0x86>
 800ae48:	4b39      	ldr	r3, [pc, #228]	; (800af30 <scalbn+0x100>)
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	ee10 0a10 	vmov	r0, s0
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	4b37      	ldr	r3, [pc, #220]	; (800af34 <scalbn+0x104>)
 800ae58:	429e      	cmp	r6, r3
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	460d      	mov	r5, r1
 800ae5e:	da10      	bge.n	800ae82 <scalbn+0x52>
 800ae60:	a32b      	add	r3, pc, #172	; (adr r3, 800af10 <scalbn+0xe0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	e03a      	b.n	800aede <scalbn+0xae>
 800ae68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae6c:	428a      	cmp	r2, r1
 800ae6e:	d10c      	bne.n	800ae8a <scalbn+0x5a>
 800ae70:	ee10 2a10 	vmov	r2, s0
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7f5 fa08 	bl	800028c <__adddf3>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	460d      	mov	r5, r1
 800ae80:	e019      	b.n	800aeb6 <scalbn+0x86>
 800ae82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae86:	460b      	mov	r3, r1
 800ae88:	3a36      	subs	r2, #54	; 0x36
 800ae8a:	4432      	add	r2, r6
 800ae8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae90:	428a      	cmp	r2, r1
 800ae92:	dd08      	ble.n	800aea6 <scalbn+0x76>
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	a120      	add	r1, pc, #128	; (adr r1, 800af18 <scalbn+0xe8>)
 800ae98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae9c:	da1c      	bge.n	800aed8 <scalbn+0xa8>
 800ae9e:	a120      	add	r1, pc, #128	; (adr r1, 800af20 <scalbn+0xf0>)
 800aea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea4:	e018      	b.n	800aed8 <scalbn+0xa8>
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	dd08      	ble.n	800aebc <scalbn+0x8c>
 800aeaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aeae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aeb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aeb6:	ec45 4b10 	vmov	d0, r4, r5
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aec0:	da19      	bge.n	800aef6 <scalbn+0xc6>
 800aec2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aec6:	429e      	cmp	r6, r3
 800aec8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800aecc:	dd0a      	ble.n	800aee4 <scalbn+0xb4>
 800aece:	a112      	add	r1, pc, #72	; (adr r1, 800af18 <scalbn+0xe8>)
 800aed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e2      	bne.n	800ae9e <scalbn+0x6e>
 800aed8:	a30f      	add	r3, pc, #60	; (adr r3, 800af18 <scalbn+0xe8>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fb8b 	bl	80005f8 <__aeabi_dmul>
 800aee2:	e7cb      	b.n	800ae7c <scalbn+0x4c>
 800aee4:	a10a      	add	r1, pc, #40	; (adr r1, 800af10 <scalbn+0xe0>)
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0b8      	beq.n	800ae60 <scalbn+0x30>
 800aeee:	a10e      	add	r1, pc, #56	; (adr r1, 800af28 <scalbn+0xf8>)
 800aef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef4:	e7b4      	b.n	800ae60 <scalbn+0x30>
 800aef6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aefa:	3236      	adds	r2, #54	; 0x36
 800aefc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800af04:	4620      	mov	r0, r4
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <scalbn+0x108>)
 800af08:	2200      	movs	r2, #0
 800af0a:	e7e8      	b.n	800aede <scalbn+0xae>
 800af0c:	f3af 8000 	nop.w
 800af10:	c2f8f359 	.word	0xc2f8f359
 800af14:	01a56e1f 	.word	0x01a56e1f
 800af18:	8800759c 	.word	0x8800759c
 800af1c:	7e37e43c 	.word	0x7e37e43c
 800af20:	8800759c 	.word	0x8800759c
 800af24:	fe37e43c 	.word	0xfe37e43c
 800af28:	c2f8f359 	.word	0xc2f8f359
 800af2c:	81a56e1f 	.word	0x81a56e1f
 800af30:	43500000 	.word	0x43500000
 800af34:	ffff3cb0 	.word	0xffff3cb0
 800af38:	3c900000 	.word	0x3c900000

0800af3c <_init>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <_fini>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr
