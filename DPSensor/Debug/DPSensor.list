
DPSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08007408  08007408  00017408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee4  08007ee4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee4  08007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eec  08007eec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ef0  08007ef0  00017ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  080080d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080080d0  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e126  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df0  00000000  00000000  0002e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00030d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa98  00000000  00000000  000318f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef35  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3732  00000000  00000000  0005b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  000fea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073ec 	.word	0x080073ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080073ec 	.word	0x080073ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f002 fca1 	bl	80038a4 <HAL_UART_Transmit>
  return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000024c 	.word	0x2000024c

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fc24 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f809 	bl	8000f8e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 f8c8 	bl	8001110 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f80:	f000 f896 	bl	80010b0 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000f84:	f000 f854 	bl	8001030 <MX_I2C3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DPMeasurement();
 8000f88:	f000 f962 	bl	8001250 <DPMeasurement>
 8000f8c:	e7fc      	b.n	8000f88 <main+0x18>

08000f8e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b096      	sub	sp, #88	; 0x58
 8000f92:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2244      	movs	r2, #68	; 0x44
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 f949 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb4:	f001 fbc6 	bl	8002744 <HAL_PWREx_ControlVoltageScaling>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fbe:	f000 f9f1 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fce:	2360      	movs	r3, #96	; 0x60
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fde:	2328      	movs	r3, #40	; 0x28
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fbfe 	bl	80027f0 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000ffa:	f000 f9d3 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	2104      	movs	r1, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f002 f84c 	bl	80030b4 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001022:	f000 f9bf 	bl	80013a4 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3758      	adds	r7, #88	; 0x58
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_I2C3_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_I2C3_Init+0x74>)
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <MX_I2C3_Init+0x7c>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_I2C3_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_I2C3_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_I2C3_Init+0x74>)
 800106c:	f000 ff07 	bl	8001e7e <HAL_I2C_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001076:	f000 f995 	bl	80013a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <MX_I2C3_Init+0x74>)
 800107e:	f001 fabb 	bl	80025f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001088:	f000 f98c 	bl	80013a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_I2C3_Init+0x74>)
 8001090:	f001 fafd 	bl	800268e <HAL_I2CEx_ConfigDigitalFilter>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f983 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	40005c00 	.word	0x40005c00
 80010ac:	10909cec 	.word	0x10909cec

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <MX_USART2_UART_Init+0x5c>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART2_UART_Init+0x58>)
 80010f4:	f002 fb88 	bl	8003808 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 f951 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000024c 	.word	0x2000024c
 800110c:	40004400 	.word	0x40004400

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <MX_GPIO_Init+0x134>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a46      	ldr	r2, [pc, #280]	; (8001244 <MX_GPIO_Init+0x134>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <MX_GPIO_Init+0x134>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <MX_GPIO_Init+0x134>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a40      	ldr	r2, [pc, #256]	; (8001244 <MX_GPIO_Init+0x134>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <MX_GPIO_Init+0x134>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <MX_GPIO_Init+0x134>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <MX_GPIO_Init+0x134>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <MX_GPIO_Init+0x134>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <MX_GPIO_Init+0x134>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a34      	ldr	r2, [pc, #208]	; (8001244 <MX_GPIO_Init+0x134>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <MX_GPIO_Init+0x134>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	21b0      	movs	r1, #176	; 0xb0
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f000 fe3b 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	482b      	ldr	r0, [pc, #172]	; (8001248 <MX_GPIO_Init+0x138>)
 800119a:	f000 fe35 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <MX_GPIO_Init+0x13c>)
 80011b6:	f000 fcb5 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ba:	2308      	movs	r3, #8
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	481f      	ldr	r0, [pc, #124]	; (800124c <MX_GPIO_Init+0x13c>)
 80011d0:	f000 fca8 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80011d4:	23b0      	movs	r3, #176	; 0xb0
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 fc99 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f000 fc8c 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <MX_GPIO_Init+0x138>)
 8001226:	f000 fc7d 	bl	8001b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2009      	movs	r0, #9
 8001230:	f000 fc41 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001234:	2009      	movs	r0, #9
 8001236:	f000 fc5a 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800

08001250 <DPMeasurement>:
 *
 *
 *
 *
 */
void DPMeasurement(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t* buf;
	buf[0] = 0;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	buf[2] = 0;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3302      	adds	r3, #2
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	buf[3] = 0;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3303      	adds	r3, #3
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	HAL_Delay(3);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 fb1f 	bl	80018b8 <HAL_Delay>
	ret = HAL_I2C_Master_Receive(&hi2c3, DP_ADDR, buf, 4, HAL_MAX_DELAY);
 800127a:	2350      	movs	r3, #80	; 0x50
 800127c:	b299      	uxth	r1, r3
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2304      	movs	r3, #4
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4841      	ldr	r0, [pc, #260]	; (8001390 <DPMeasurement+0x140>)
 800128a:	f000 fe87 	bl	8001f9c <HAL_I2C_Master_Receive>
 800128e:	4603      	mov	r3, r0
 8001290:	74fb      	strb	r3, [r7, #19]
	int16_t val = (((int16_t)(buf[0]) << 8) & 0x3F00) | buf[1]; //getting value from sensor
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800129e:	b21a      	sxth	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	823b      	strh	r3, [r7, #16]
	int16_t temp = (((int16_t)(buf[2]) << 3) & 0x7F8) | buf[3]>>5;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3303      	adds	r3, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	81fb      	strh	r3, [r7, #14]
	if(ret != HAL_OK){
 80012cc:	7cfb      	ldrb	r3, [r7, #19]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <DPMeasurement+0x88>
		perror( "how did i get here");
 80012d2:	4830      	ldr	r0, [pc, #192]	; (8001394 <DPMeasurement+0x144>)
 80012d4:	f003 fcba 	bl	8004c4c <perror>
	diffPressure = diffPressure * 6894.76;
	float dpAirspeed = (diffPressure*2)/1.225;
	dpAirspeed = sqrt(dpAirspeed); //conversion from DP to velocity
	printf("%f \n",dpAirspeed);*/
	//VERSION 2
	val = val - 0x2000;
 80012d8:	8a3b      	ldrh	r3, [r7, #16]
 80012da:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80012de:	b29b      	uxth	r3, r3
 80012e0:	823b      	strh	r3, [r7, #16]
	val = abs(val);
 80012e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bfb8      	it	lt
 80012ea:	425b      	neglt	r3, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	823b      	strh	r3, [r7, #16]
	float diffP = (float)(val * 20)/6554;
 80012f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001398 <DPMeasurement+0x148>
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	edc7 7a02 	vstr	s15, [r7, #8]
	float vel = (diffP * 2)/1.225;
 8001310:	edd7 7a02 	vldr	s15, [r7, #8]
 8001314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001318:	ee17 0a90 	vmov	r0, s15
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <DPMeasurement+0x138>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff fa91 	bl	800084c <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc39 	bl	8000ba8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	607b      	str	r3, [r7, #4]
	vel = sqrt(vel);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f005 ff72 	bl	8007230 <sqrt>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc28 	bl	8000ba8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	607b      	str	r3, [r7, #4]
	printf("%f \r\n", vel);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff f8f3 	bl	8000548 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <DPMeasurement+0x14c>)
 8001368:	f003 fc78 	bl	8004c5c <iprintf>
	printf("%i \r\n", temp);
 800136c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <DPMeasurement+0x150>)
 8001374:	f003 fc72 	bl	8004c5c <iprintf>
	HAL_Delay(2000);
 8001378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800137c:	f000 fa9c 	bl	80018b8 <HAL_Delay>
		float dpAirspeed = (diffPressure*2)/1.225;
		dpAirspeed = sqrt(dpAirspeed); //conversion from DP to velocity
		printf("%f \n",dpAirspeed);
	  }
	}*/
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3ff39999 	.word	0x3ff39999
 8001390:	200001f8 	.word	0x200001f8
 8001394:	08007408 	.word	0x08007408
 8001398:	45ccd000 	.word	0x45ccd000
 800139c:	0800741c 	.word	0x0800741c
 80013a0:	08007424 	.word	0x08007424

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f002 ff0b 	bl	8004234 <memset>
  if(hi2c->Instance==I2C3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_I2C_MspInit+0xa8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d136      	bne.n	8001496 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f860 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f7ff ffaf 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145e:	2303      	movs	r3, #3
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800146e:	2304      	movs	r3, #4
 8001470:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_I2C_MspInit+0xb0>)
 800147a:	f000 fb53 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 8001484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_I2C_MspInit+0xac>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3758      	adds	r7, #88	; 0x58
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000800 	.word	0x48000800

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b096      	sub	sp, #88	; 0x58
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	2234      	movs	r2, #52	; 0x34
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 feb1 	bl	8004234 <memset>
  if(huart->Instance==USART2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_UART_MspInit+0xa8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d136      	bne.n	800154a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014dc:	2302      	movs	r3, #2
 80014de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f807 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f4:	f7ff ff56 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_UART_MspInit+0xac>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_UART_MspInit+0xac>)
 80014fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_UART_MspInit+0xac>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_UART_MspInit+0xac>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_UART_MspInit+0xac>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_UART_MspInit+0xac>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001528:	230c      	movs	r3, #12
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001538:	2307      	movs	r3, #7
 800153a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f000 faed 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3758      	adds	r7, #88	; 0x58
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40004400 	.word	0x40004400
 8001558:	40021000 	.word	0x40021000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a8:	f000 f966 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80015b4:	2008      	movs	r0, #8
 80015b6:	f000 fc3f 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}

080015be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_kill>:

int _kill(int pid, int sig)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015d8:	f002 fe02 	bl	80041e0 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	2216      	movs	r2, #22
 80015e0:	601a      	str	r2, [r3, #0]
  return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_exit>:

void _exit (int status)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffe7 	bl	80015ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001600:	e7fe      	b.n	8001600 <_exit+0x12>

08001602 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e00a      	b.n	800162a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001614:	f3af 8000 	nop.w
 8001618:	4601      	mov	r1, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	60ba      	str	r2, [r7, #8]
 8001620:	b2ca      	uxtb	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbf0      	blt.n	8001614 <_read+0x12>
  }

  return len;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e009      	b.n	8001662 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc78 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	dbf1      	blt.n	800164e <_write+0x12>
  }
  return len;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_close>:

int _close(int file)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169c:	605a      	str	r2, [r3, #4]
  return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_isatty>:

int _isatty(int file)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f002 fd68 	bl	80041e0 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000a000 	.word	0x2000a000
 800173c:	00000400 	.word	0x00000400
 8001740:	200002d0 	.word	0x200002d0
 8001744:	200002e8 	.word	0x200002e8

08001748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001770:	f7ff ffea 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	; (80017ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <LoopForever+0xe>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	; (80017b8 <LoopForever+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f002 fd27 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179e:	f7ff fbe7 	bl	8000f70 <main>

080017a2 <LoopForever>:

LoopForever:
    b LoopForever
 80017a2:	e7fe      	b.n	80017a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017b0:	08007ef4 	.word	0x08007ef4
  ldr r2, =_sbss
 80017b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017b8:	200002e8 	.word	0x200002e8

080017bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC1_2_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_Init+0x3c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_Init+0x3c>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 f962 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 f80f 	bl	8001800 <HAL_InitTick>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	e001      	b.n	80017f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ee:	f7ff fddf 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_InitTick+0x6c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d023      	beq.n	800185c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_InitTick+0x70>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_InitTick+0x6c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f96d 	bl	8001b0a <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d809      	bhi.n	8001850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f000 f937 	bl	8001ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0x74>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e007      	b.n	8001860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e004      	b.n	8001860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e001      	b.n	8001860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	200002d4 	.word	0x200002d4

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200002d4 	.word	0x200002d4

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e14e      	b.n	8001dd2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8140 	beq.w	8001dcc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_Init+0x40>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0201 	and.w	r2, r3, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d017      	beq.n	8001c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d123      	bne.n	8001c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0203 	and.w	r2, r3, #3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 809a 	beq.w	8001dcc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca4:	4b52      	ldr	r3, [pc, #328]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cda:	d013      	beq.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_Init+0x1dc>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_GPIO_Init+0x2d8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x1d8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_Init+0x1d4>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e006      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d04:	2300      	movs	r3, #0
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d16:	4937      	ldr	r1, [pc, #220]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d48:	4a2e      	ldr	r2, [pc, #184]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f aea9 	bne.w	8001b34 <HAL_GPIO_Init+0x10>
  }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
 8001e00:	48000c00 	.word	0x48000c00
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f806 	bl	8001e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e081      	b.n	8001f94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff faa7 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2224      	movs	r2, #36	; 0x24
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ece:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ede:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	e006      	b.n	8001f06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d104      	bne.n	8001f18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69d9      	ldr	r1, [r3, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 80db 	bne.w	8002174 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Master_Receive+0x30>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0d4      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fc64 	bl	80018a0 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2319      	movs	r3, #25
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f8f2 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0bf      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2222      	movs	r2, #34	; 0x22
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2210      	movs	r2, #16
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d90e      	bls.n	8002046 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	8979      	ldrh	r1, [r7, #10]
 8002036:	4b52      	ldr	r3, [pc, #328]	; (8002180 <HAL_I2C_Master_Receive+0x1e4>)
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 faa8 	bl	8002594 <I2C_TransferConfig>
 8002044:	e06d      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_I2C_Master_Receive+0x1e4>)
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fa97 	bl	8002594 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002066:	e05c      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f92b 	bl	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e07c      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d034      	beq.n	8002122 <HAL_I2C_Master_Receive+0x186>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d130      	bne.n	8002122 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f880 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e04d      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d90e      	bls.n	8002102 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fa4a 	bl	8002594 <I2C_TransferConfig>
 8002100:	e00f      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	b2da      	uxtb	r2, r3
 8002112:	8979      	ldrh	r1, [r7, #10]
 8002114:	2300      	movs	r3, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fa39 	bl	8002594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d19d      	bne.n	8002068 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f88d 	bl	8002250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e01a      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_I2C_Master_Receive+0x1e8>)
 8002154:	400b      	ands	r3, r1
 8002156:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	80002400 	.word	0x80002400
 8002184:	fe00e800 	.word	0xfe00e800

08002188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	619a      	str	r2, [r3, #24]
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e0:	e022      	b.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e8:	d01e      	beq.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff fb59 	bl	80018a0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00f      	b.n	8002248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d0cd      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225c:	e028      	b.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f8aa 	bl	80023bc <I2C_IsErrorOccurred>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e026      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7ff fb15 	bl	80018a0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d1cf      	bne.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d4:	e064      	b.n	80023a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f86e 	bl	80023bc <I2C_IsErrorOccurred>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e062      	b.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d138      	bne.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d105      	bne.n	8002312 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e04e      	b.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b10      	cmp	r3, #16
 800231e:	d107      	bne.n	8002330 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2210      	movs	r2, #16
 8002326:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2204      	movs	r2, #4
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
 800232e:	e002      	b.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800234a:	400b      	ands	r3, r1
 800234c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e022      	b.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236a:	f7ff fa99 	bl	80018a0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	429a      	cmp	r2, r3
 8002378:	d302      	bcc.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d193      	bne.n	80022d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	fe00e800 	.word	0xfe00e800

080023bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d075      	beq.n	80024d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f0:	e056      	b.n	80024a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f8:	d052      	beq.n	80024a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7ff fa51 	bl	80018a0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_IsErrorOccurred+0x54>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d147      	bne.n	80024a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002432:	d12e      	bne.n	8002492 <I2C_IsErrorOccurred+0xd6>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800243a:	d02a      	beq.n	8002492 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b20      	cmp	r3, #32
 8002440:	d027      	beq.n	8002492 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002452:	f7ff fa25 	bl	80018a0 <HAL_GetTick>
 8002456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002458:	e01b      	b.n	8002492 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800245a:	f7ff fa21 	bl	80018a0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b19      	cmp	r3, #25
 8002466:	d914      	bls.n	8002492 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d1dc      	bne.n	800245a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d003      	beq.n	80024b6 <I2C_IsErrorOccurred+0xfa>
 80024ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d09d      	beq.n	80023f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01c      	beq.n	8002584 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff fe1c 	bl	8002188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <I2C_IsErrorOccurred+0x1d4>)
 800255c:	400b      	ands	r3, r1
 800255e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002588:	4618      	mov	r0, r3
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	817b      	strh	r3, [r7, #10]
 80025a2:	4613      	mov	r3, r2
 80025a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025ac:	7a7b      	ldrb	r3, [r7, #9]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	4313      	orrs	r3, r2
 80025be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	0d5b      	lsrs	r3, r3, #21
 80025ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <I2C_TransferConfig+0x60>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	43db      	mvns	r3, r3
 80025d8:	ea02 0103 	and.w	r1, r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	03ff63ff 	.word	0x03ff63ff

080025f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	d138      	bne.n	8002680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002618:	2302      	movs	r3, #2
 800261a:	e032      	b.n	8002682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800264a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d139      	bne.n	8002718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e033      	b.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_PWREx_GetVoltageRange+0x18>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002752:	d130      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002754:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002760:	d038      	beq.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2232      	movs	r2, #50	; 0x32
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002788:	e002      	b.n	8002790 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3b01      	subs	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279c:	d102      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f2      	bne.n	800278a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d110      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00f      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d007      	beq.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027cc:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40007000 	.word	0x40007000
 80027e8:	20000000 	.word	0x20000000
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f000 bc4f 	b.w	80030a2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002804:	4b97      	ldr	r3, [pc, #604]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280e:	4b95      	ldr	r3, [pc, #596]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80e6 	beq.w	80029f2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_RCC_OscConfig+0x4c>
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	f040 808d 	bne.w	800294e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b01      	cmp	r3, #1
 8002838:	f040 8089 	bne.w	800294e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800283c:	4b89      	ldr	r3, [pc, #548]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_RCC_OscConfig+0x66>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f000 bc26 	b.w	80030a2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_RCC_OscConfig+0x80>
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	e005      	b.n	800287c <HAL_RCC_OscConfig+0x8c>
 8002870:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287c:	4293      	cmp	r3, r2
 800287e:	d224      	bcs.n	80028ca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fdd9 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f000 bc06 	b.w	80030a2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002896:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a72      	ldr	r2, [pc, #456]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	496d      	ldr	r1, [pc, #436]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b4:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	4968      	ldr	r1, [pc, #416]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e025      	b.n	8002916 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4960      	ldr	r1, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	495b      	ldr	r1, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd98 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e3c5      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002916:	f000 fccd 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4950      	ldr	r1, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x278>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002934:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002936:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe ff60 	bl	8001800 <HAL_InitTick>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d052      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	e3a9      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d032      	beq.n	80029bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002962:	f7fe ff9d 	bl	80018a0 <HAL_GetTick>
 8002966:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800296a:	f7fe ff99 	bl	80018a0 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e392      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4930      	ldr	r1, [pc, #192]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	492b      	ldr	r1, [pc, #172]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 80029ba:	e01a      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c8:	f7fe ff6a 	bl	80018a0 <HAL_GetTick>
 80029cc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d0:	f7fe ff66 	bl	80018a0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e35f      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1e0>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d073      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d10e      	bne.n	8002a28 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d063      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2f4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d15f      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e33c      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x250>
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e025      	b.n	8002a8c <HAL_RCC_OscConfig+0x29c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d114      	bne.n	8002a74 <HAL_RCC_OscConfig+0x284>
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a02      	ldr	r2, [pc, #8]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e013      	b.n	8002a8c <HAL_RCC_OscConfig+0x29c>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	0800742c 	.word	0x0800742c
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004
 8002a74:	4b8f      	ldr	r3, [pc, #572]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b8c      	ldr	r3, [pc, #560]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a8b      	ldr	r2, [pc, #556]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe ff04 	bl	80018a0 <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe ff00 	bl	80018a0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e2f9      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aae:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2ac>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fef0 	bl	80018a0 <HAL_GetTick>
 8002ac0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe feec 	bl	80018a0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e2e5      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad6:	4b77      	ldr	r3, [pc, #476]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d4>
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x314>
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d116      	bne.n	8002b32 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x32c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e2c2      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	4962      	ldr	r1, [pc, #392]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	e040      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d023      	beq.n	8002b82 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3a:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5d      	ldr	r2, [pc, #372]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe feab 	bl	80018a0 <HAL_GetTick>
 8002b4a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fea7 	bl	80018a0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2a0      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	494e      	ldr	r1, [pc, #312]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e018      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fe87 	bl	80018a0 <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fe83 	bl	80018a0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e27c      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8082 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05f      	beq.n	8002c8a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d037      	beq.n	8002c50 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e254      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c08:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c12:	f7fe fe45 	bl	80018a0 <HAL_GetTick>
 8002c16:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fe41 	bl	80018a0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b11      	cmp	r3, #17
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e23a      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ef      	bne.n	8002c1a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	f023 0210 	bic.w	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	491a      	ldr	r1, [pc, #104]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fe1e 	bl	80018a0 <HAL_GetTick>
 8002c64:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fe1a 	bl	80018a0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b11      	cmp	r3, #17
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e213      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ef      	beq.n	8002c68 <HAL_RCC_OscConfig+0x478>
 8002c88:	e01d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fe01 	bl	80018a0 <HAL_GetTick>
 8002c9e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fdfd 	bl	80018a0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b11      	cmp	r3, #17
 8002cae:	d903      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1f6      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
 8002cb4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb8:	4ba9      	ldr	r3, [pc, #676]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ed      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80bd 	beq.w	8002e4e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cda:	4ba1      	ldr	r3, [pc, #644]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10e      	bne.n	8002d04 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b9e      	ldr	r3, [pc, #632]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	4a9d      	ldr	r2, [pc, #628]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf2:	4b9b      	ldr	r3, [pc, #620]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d04:	4b97      	ldr	r3, [pc, #604]	; (8002f64 <HAL_RCC_OscConfig+0x774>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_RCC_OscConfig+0x774>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a93      	ldr	r2, [pc, #588]	; (8002f64 <HAL_RCC_OscConfig+0x774>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fdc0 	bl	80018a0 <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fdbc 	bl	80018a0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1b5      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <HAL_RCC_OscConfig+0x774>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002d4e:	4b84      	ldr	r3, [pc, #528]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	497f      	ldr	r1, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d74:	4b7a      	ldr	r3, [pc, #488]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	4a79      	ldr	r2, [pc, #484]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d96:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	4a70      	ldr	r2, [pc, #448]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002da8:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a6c      	ldr	r2, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d016      	beq.n	8002dfe <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fd66 	bl	80018a0 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fd62 	bl	80018a0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e159      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dee:	4b5c      	ldr	r3, [pc, #368]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ed      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x5e8>
 8002dfc:	e01d      	b.n	8002e3a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fd4f 	bl	80018a0 <HAL_GetTick>
 8002e02:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fd4b 	bl	80018a0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e142      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ed      	bne.n	8002e06 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e68:	4a3d      	ldr	r2, [pc, #244]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fd15 	bl	80018a0 <HAL_GetTick>
 8002e76:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7a:	f7fe fd11 	bl	80018a0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e10a      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <HAL_RCC_OscConfig+0x68a>
 8002e9a:	e01b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fcf8 	bl	80018a0 <HAL_GetTick>
 8002eb0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb4:	f7fe fcf4 	bl	80018a0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0ed      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ef      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80e1 	beq.w	80030a0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f040 80b5 	bne.w	8003052 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d124      	bne.n	8002f46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	3b01      	subs	r3, #1
 8002f08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d11b      	bne.n	8002f46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d113      	bne.n	8002f46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d05f      	beq.n	8003006 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d05a      	beq.n	8003002 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_RCC_OscConfig+0x770>)
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f58:	f7fe fca2 	bl	80018a0 <HAL_GetTick>
 8002f5c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	e00c      	b.n	8002f7a <HAL_RCC_OscConfig+0x78a>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fc9a 	bl	80018a0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e093      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7a:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	4b49      	ldr	r3, [pc, #292]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_RCC_OscConfig+0x8c0>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa0:	0212      	lsls	r2, r2, #8
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fa8:	0852      	lsrs	r2, r2, #1
 8002faa:	3a01      	subs	r2, #1
 8002fac:	0552      	lsls	r2, r2, #21
 8002fae:	4311      	orrs	r1, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb4:	0852      	lsrs	r2, r2, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0652      	lsls	r2, r2, #25
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	493b      	ldr	r1, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a39      	ldr	r2, [pc, #228]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fcc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fda:	f7fe fc61 	bl	80018a0 <HAL_GetTick>
 8002fde:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fc5d 	bl	80018a0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e056      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003000:	e04e      	b.n	80030a0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e04d      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d146      	bne.n	80030a0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003028:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800302a:	f7fe fc39 	bl	80018a0 <HAL_GetTick>
 800302e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fc35 	bl	80018a0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e02e      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x842>
 8003050:	e026      	b.n	80030a0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d021      	beq.n	800309c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 800305e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fc1c 	bl	80018a0 <HAL_GetTick>
 8003068:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fc18 	bl	80018a0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e011      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_RCC_OscConfig+0x8bc>)
 8003090:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003094:	f023 0303 	bic.w	r3, r3, #3
 8003098:	60d3      	str	r3, [r2, #12]
 800309a:	e001      	b.n	80030a0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3728      	adds	r7, #40	; 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	f99f808c 	.word	0xf99f808c

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0e7      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b75      	ldr	r3, [pc, #468]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4970      	ldr	r1, [pc, #448]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0cf      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	429a      	cmp	r2, r3
 8003112:	d908      	bls.n	8003126 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4960      	ldr	r1, [pc, #384]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d04c      	beq.n	80031cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d121      	bne.n	800318a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0a6      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003152:	4b54      	ldr	r3, [pc, #336]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e09a      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e08e      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e086      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4943      	ldr	r1, [pc, #268]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319c:	f7fe fb80 	bl	80018a0 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe fb7c 	bl	80018a0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e06e      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d208      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	492b      	ldr	r1, [pc, #172]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d210      	bcs.n	800322a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 0207 	bic.w	r2, r3, #7
 8003210:	4923      	ldr	r1, [pc, #140]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_ClockConfig+0x1ec>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e036      	b.n	8003298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4918      	ldr	r1, [pc, #96]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4910      	ldr	r1, [pc, #64]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003268:	f000 f824 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1f4>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1f8>)
 8003286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1fc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fab7 	bl	8001800 <HAL_InitTick>
 8003292:	4603      	mov	r3, r0
 8003294:	72fb      	strb	r3, [r7, #11]

  return status;
 8003296:	7afb      	ldrb	r3, [r7, #11]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	0800742c 	.word	0x0800742c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032cc:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d11e      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e005      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003324:	e00a      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d102      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e004      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d101      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800333a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d134      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0xa6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xac>
 8003358:	e005      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800335c:	617b      	str	r3, [r7, #20]
      break;
 800335e:	e005      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003362:	617b      	str	r3, [r7, #20]
      break;
 8003364:	e002      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	617b      	str	r3, [r7, #20]
      break;
 800336a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	3301      	adds	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fb03 f202 	mul.w	r2, r3, r2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	0e5b      	lsrs	r3, r3, #25
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	3301      	adds	r3, #1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033ac:	69bb      	ldr	r3, [r7, #24]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08007444 	.word	0x08007444
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4904      	ldr	r1, [pc, #16]	; (800340c <HAL_RCC_GetPCLK1Freq+0x28>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	0800743c 	.word	0x0800743c

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003414:	f7ff ffda 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0adb      	lsrs	r3, r3, #11
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	0800743c 	.word	0x0800743c

0800343c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003454:	f7ff f968 	bl	8002728 <HAL_PWREx_GetVoltageRange>
 8003458:	6178      	str	r0, [r7, #20]
 800345a:	e014      	b.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003474:	f7ff f958 	bl	8002728 <HAL_PWREx_GetVoltageRange>
 8003478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d10b      	bne.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d919      	bls.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2ba0      	cmp	r3, #160	; 0xa0
 8003498:	d902      	bls.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800349a:	2302      	movs	r3, #2
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e013      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a0:	2301      	movs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e010      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d902      	bls.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034ac:	2303      	movs	r3, #3
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	e00a      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d102      	bne.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b8:	2302      	movs	r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e004      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d101      	bne.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c4:	2301      	movs	r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 0207 	bic.w	r2, r3, #7
 80034d0:	4909      	ldr	r1, [pc, #36]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40022000 	.word	0x40022000

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003504:	2300      	movs	r3, #0
 8003506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003508:	2300      	movs	r3, #0
 800350a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 809e 	beq.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351e:	4b46      	ldr	r3, [pc, #280]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a3f      	ldr	r2, [pc, #252]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003550:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800355c:	f7fe f9a0 	bl	80018a0 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003562:	e009      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe f99c 	bl	80018a0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	74fb      	strb	r3, [r7, #19]
        break;
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d15a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01e      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d019      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b2:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d016      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f95c 	bl	80018a0 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	e00b      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe f958 	bl	80018a0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d902      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	74fb      	strb	r3, [r7, #19]
            break;
 8003602:	e006      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ec      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003644:	7c7b      	ldrb	r3, [r7, #17]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b6e      	ldr	r3, [pc, #440]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a6d      	ldr	r2, [pc, #436]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003662:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4964      	ldr	r1, [pc, #400]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003684:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f023 020c 	bic.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	495c      	ldr	r1, [pc, #368]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4953      	ldr	r1, [pc, #332]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	494b      	ldr	r1, [pc, #300]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4942      	ldr	r1, [pc, #264]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800370c:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	493a      	ldr	r1, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372e:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4931      	ldr	r1, [pc, #196]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003750:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	4929      	ldr	r1, [pc, #164]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003772:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4920      	ldr	r1, [pc, #128]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	4918      	ldr	r1, [pc, #96]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	490a      	ldr	r1, [pc, #40]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e040      	b.n	800389c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fe3e 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8c0 	bl	80039cc <UART_SetConfig>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fb0e 	bl	8003e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb95 	bl	8003fc4 <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 8082 	bne.w	80039c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_Transmit+0x26>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07a      	b.n	80039c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x38>
 80038d8:	2302      	movs	r3, #2
 80038da:	e073      	b.n	80039c4 <HAL_UART_Transmit+0x120>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2221      	movs	r2, #33	; 0x21
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f2:	f7fd ffd5 	bl	80018a0 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003910:	d108      	bne.n	8003924 <HAL_UART_Transmit+0x80>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e003      	b.n	800392c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003934:	e02d      	b.n	8003992 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fb88 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e039      	b.n	80039c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003962:	b292      	uxth	r2, r2
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	3302      	adds	r3, #2
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	e008      	b.n	8003980 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b292      	uxth	r2, r2
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1cb      	bne.n	8003936 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	; 0x40
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fb54 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e005      	b.n	80039c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b08a      	sub	sp, #40	; 0x28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b9e      	ldr	r3, [pc, #632]	; (8003c74 <UART_SetConfig+0x2a8>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a93      	ldr	r2, [pc, #588]	; (8003c78 <UART_SetConfig+0x2ac>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	4313      	orrs	r3, r2
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a8a      	ldr	r2, [pc, #552]	; (8003c7c <UART_SetConfig+0x2b0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d126      	bne.n	8003aa4 <UART_SetConfig+0xd8>
 8003a56:	4b8a      	ldr	r3, [pc, #552]	; (8003c80 <UART_SetConfig+0x2b4>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d81b      	bhi.n	8003a9c <UART_SetConfig+0xd0>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0xa0>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8d 	.word	0x08003a8d
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a95 	.word	0x08003a95
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e0ab      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e0a7      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e0a3      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e09f      	b.n	8003bdc <UART_SetConfig+0x210>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e09b      	b.n	8003bdc <UART_SetConfig+0x210>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a76      	ldr	r2, [pc, #472]	; (8003c84 <UART_SetConfig+0x2b8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d138      	bne.n	8003b20 <UART_SetConfig+0x154>
 8003aae:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <UART_SetConfig+0x2b4>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d82d      	bhi.n	8003b18 <UART_SetConfig+0x14c>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0xf8>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003b19 	.word	0x08003b19
 8003ad0:	08003b19 	.word	0x08003b19
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003b19 	.word	0x08003b19
 8003adc:	08003b19 	.word	0x08003b19
 8003ae0:	08003b19 	.word	0x08003b19
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	08003b19 	.word	0x08003b19
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b11 	.word	0x08003b11
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e06d      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b00:	2302      	movs	r3, #2
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e069      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e065      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b10:	2308      	movs	r3, #8
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e061      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e05d      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <UART_SetConfig+0x2bc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d125      	bne.n	8003b76 <UART_SetConfig+0x1aa>
 8003b2a:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <UART_SetConfig+0x2b4>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d016      	beq.n	8003b66 <UART_SetConfig+0x19a>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d818      	bhi.n	8003b6e <UART_SetConfig+0x1a2>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d00a      	beq.n	8003b56 <UART_SetConfig+0x18a>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d814      	bhi.n	8003b6e <UART_SetConfig+0x1a2>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <UART_SetConfig+0x182>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d008      	beq.n	8003b5e <UART_SetConfig+0x192>
 8003b4c:	e00f      	b.n	8003b6e <UART_SetConfig+0x1a2>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b54:	e042      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b56:	2302      	movs	r3, #2
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5c:	e03e      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b64:	e03a      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b66:	2308      	movs	r3, #8
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6c:	e036      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b74:	e032      	b.n	8003bdc <UART_SetConfig+0x210>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3f      	ldr	r2, [pc, #252]	; (8003c78 <UART_SetConfig+0x2ac>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d12a      	bne.n	8003bd6 <UART_SetConfig+0x20a>
 8003b80:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <UART_SetConfig+0x2b4>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b8e:	d01a      	beq.n	8003bc6 <UART_SetConfig+0x1fa>
 8003b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b94:	d81b      	bhi.n	8003bce <UART_SetConfig+0x202>
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d00c      	beq.n	8003bb6 <UART_SetConfig+0x1ea>
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba0:	d815      	bhi.n	8003bce <UART_SetConfig+0x202>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <UART_SetConfig+0x1e2>
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d008      	beq.n	8003bbe <UART_SetConfig+0x1f2>
 8003bac:	e00f      	b.n	8003bce <UART_SetConfig+0x202>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb4:	e012      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbc:	e00e      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc4:	e00a      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bcc:	e006      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e002      	b.n	8003bdc <UART_SetConfig+0x210>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <UART_SetConfig+0x2ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f040 808a 	bne.w	8003cfc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d824      	bhi.n	8003c3a <UART_SetConfig+0x26e>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x22c>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c3b 	.word	0x08003c3b
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c2b 	.word	0x08003c2b
 8003c0c:	08003c3b 	.word	0x08003c3b
 8003c10:	08003c3b 	.word	0x08003c3b
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7ff fbe2 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003c20:	61f8      	str	r0, [r7, #28]
        break;
 8003c22:	e010      	b.n	8003c46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <UART_SetConfig+0x2c0>)
 8003c26:	61fb      	str	r3, [r7, #28]
        break;
 8003c28:	e00d      	b.n	8003c46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7ff fb43 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003c2e:	61f8      	str	r0, [r7, #28]
        break;
 8003c30:	e009      	b.n	8003c46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	61fb      	str	r3, [r7, #28]
        break;
 8003c38:	e005      	b.n	8003c46 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8109 	beq.w	8003e60 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d305      	bcc.n	8003c6a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d912      	bls.n	8003c90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c70:	e0f6      	b.n	8003e60 <UART_SetConfig+0x494>
 8003c72:	bf00      	nop
 8003c74:	efff69f3 	.word	0xefff69f3
 8003c78:	40008000 	.word	0x40008000
 8003c7c:	40013800 	.word	0x40013800
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40004400 	.word	0x40004400
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2200      	movs	r2, #0
 8003c94:	461c      	mov	r4, r3
 8003c96:	4615      	mov	r5, r2
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	022b      	lsls	r3, r5, #8
 8003ca2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ca6:	0222      	lsls	r2, r4, #8
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	6849      	ldr	r1, [r1, #4]
 8003cac:	0849      	lsrs	r1, r1, #1
 8003cae:	2000      	movs	r0, #0
 8003cb0:	4688      	mov	r8, r1
 8003cb2:	4681      	mov	r9, r0
 8003cb4:	eb12 0a08 	adds.w	sl, r2, r8
 8003cb8:	eb43 0b09 	adc.w	fp, r3, r9
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cca:	4650      	mov	r0, sl
 8003ccc:	4659      	mov	r1, fp
 8003cce:	f7fc ffbb 	bl	8000c48 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce0:	d308      	bcc.n	8003cf4 <UART_SetConfig+0x328>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce8:	d204      	bcs.n	8003cf4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e0b5      	b.n	8003e60 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cfa:	e0b1      	b.n	8003e60 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d15d      	bne.n	8003dc2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d827      	bhi.n	8003d5e <UART_SetConfig+0x392>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <UART_SetConfig+0x348>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d5f 	.word	0x08003d5f
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d5f 	.word	0x08003d5f
 8003d34:	08003d57 	.word	0x08003d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d38:	f7ff fb54 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	61f8      	str	r0, [r7, #28]
        break;
 8003d3e:	e014      	b.n	8003d6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff fb66 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8003d44:	61f8      	str	r0, [r7, #28]
        break;
 8003d46:	e010      	b.n	8003d6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <UART_SetConfig+0x4b0>)
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e00d      	b.n	8003d6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7ff fab1 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003d52:	61f8      	str	r0, [r7, #28]
        break;
 8003d54:	e009      	b.n	8003d6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5a:	61fb      	str	r3, [r7, #28]
        break;
 8003d5c:	e005      	b.n	8003d6a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d077      	beq.n	8003e60 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005a      	lsls	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d916      	bls.n	8003dba <UART_SetConfig+0x3ee>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d212      	bcs.n	8003dba <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f023 030f 	bic.w	r3, r3, #15
 8003d9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	8afa      	ldrh	r2, [r7, #22]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	e052      	b.n	8003e60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dc0:	e04e      	b.n	8003e60 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d827      	bhi.n	8003e1a <UART_SetConfig+0x44e>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <UART_SetConfig+0x404>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003e1b 	.word	0x08003e1b
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e1b 	.word	0x08003e1b
 8003dec:	08003e1b 	.word	0x08003e1b
 8003df0:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df4:	f7ff faf6 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003df8:	61f8      	str	r0, [r7, #28]
        break;
 8003dfa:	e014      	b.n	8003e26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7ff fb08 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8003e00:	61f8      	str	r0, [r7, #28]
        break;
 8003e02:	e010      	b.n	8003e26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <UART_SetConfig+0x4b0>)
 8003e06:	61fb      	str	r3, [r7, #28]
        break;
 8003e08:	e00d      	b.n	8003e26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7ff fa53 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003e0e:	61f8      	str	r0, [r7, #28]
        break;
 8003e10:	e009      	b.n	8003e26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e16:	61fb      	str	r3, [r7, #28]
        break;
 8003e18:	e005      	b.n	8003e26 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e24:	bf00      	nop
    }

    if (pclk != 0U)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d019      	beq.n	8003e60 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	085a      	lsrs	r2, r3, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d909      	bls.n	8003e5a <UART_SetConfig+0x48e>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d205      	bcs.n	8003e5a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	e002      	b.n	8003e60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7a:	bf00      	nop
 8003e7c:	00f42400 	.word	0x00f42400

08003e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d10a      	bne.n	8003f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd4:	f7fd fc64 	bl	80018a0 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10e      	bne.n	8004006 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f82d 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e023      	b.n	800404e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d10e      	bne.n	8004032 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f817 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00d      	b.n	800404e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b09c      	sub	sp, #112	; 0x70
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004066:	e0a5      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406e:	f000 80a1 	beq.w	80041b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fd fc15 	bl	80018a0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <UART_WaitOnFlagUntilTimeout+0x32>
 8004082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004084:	2b00      	cmp	r3, #0
 8004086:	d13e      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409c:	667b      	str	r3, [r7, #100]	; 0x64
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040da:	64ba      	str	r2, [r7, #72]	; 0x48
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e067      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d04f      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d147      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800412c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	613b      	str	r3, [r7, #16]
   return(result);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	66bb      	str	r3, [r7, #104]	; 0x68
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004180:	623a      	str	r2, [r7, #32]
 8004182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	69f9      	ldr	r1, [r7, #28]
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	61bb      	str	r3, [r7, #24]
   return(result);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e010      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f43f af4a 	beq.w	8004068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3770      	adds	r7, #112	; 0x70
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <__errno>:
 80041e0:	4b01      	ldr	r3, [pc, #4]	; (80041e8 <__errno+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4d0d      	ldr	r5, [pc, #52]	; (8004224 <__libc_init_array+0x38>)
 80041f0:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f2:	1b64      	subs	r4, r4, r5
 80041f4:	10a4      	asrs	r4, r4, #2
 80041f6:	2600      	movs	r6, #0
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	4d0b      	ldr	r5, [pc, #44]	; (800422c <__libc_init_array+0x40>)
 80041fe:	4c0c      	ldr	r4, [pc, #48]	; (8004230 <__libc_init_array+0x44>)
 8004200:	f003 f8f4 	bl	80073ec <_init>
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	2600      	movs	r6, #0
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	08007eec 	.word	0x08007eec
 8004228:	08007eec 	.word	0x08007eec
 800422c:	08007eec 	.word	0x08007eec
 8004230:	08007ef0 	.word	0x08007ef0

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <__cvt>:
 8004244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	ec55 4b10 	vmov	r4, r5, d0
 800424c:	2d00      	cmp	r5, #0
 800424e:	460e      	mov	r6, r1
 8004250:	4619      	mov	r1, r3
 8004252:	462b      	mov	r3, r5
 8004254:	bfbb      	ittet	lt
 8004256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800425a:	461d      	movlt	r5, r3
 800425c:	2300      	movge	r3, #0
 800425e:	232d      	movlt	r3, #45	; 0x2d
 8004260:	700b      	strb	r3, [r1, #0]
 8004262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004268:	4691      	mov	r9, r2
 800426a:	f023 0820 	bic.w	r8, r3, #32
 800426e:	bfbc      	itt	lt
 8004270:	4622      	movlt	r2, r4
 8004272:	4614      	movlt	r4, r2
 8004274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004278:	d005      	beq.n	8004286 <__cvt+0x42>
 800427a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800427e:	d100      	bne.n	8004282 <__cvt+0x3e>
 8004280:	3601      	adds	r6, #1
 8004282:	2102      	movs	r1, #2
 8004284:	e000      	b.n	8004288 <__cvt+0x44>
 8004286:	2103      	movs	r1, #3
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	ab02      	add	r3, sp, #8
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	ec45 4b10 	vmov	d0, r4, r5
 8004294:	4653      	mov	r3, sl
 8004296:	4632      	mov	r2, r6
 8004298:	f000 ff7e 	bl	8005198 <_dtoa_r>
 800429c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042a0:	4607      	mov	r7, r0
 80042a2:	d102      	bne.n	80042aa <__cvt+0x66>
 80042a4:	f019 0f01 	tst.w	r9, #1
 80042a8:	d022      	beq.n	80042f0 <__cvt+0xac>
 80042aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042ae:	eb07 0906 	add.w	r9, r7, r6
 80042b2:	d110      	bne.n	80042d6 <__cvt+0x92>
 80042b4:	783b      	ldrb	r3, [r7, #0]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d10a      	bne.n	80042d0 <__cvt+0x8c>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fc fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c6:	b918      	cbnz	r0, 80042d0 <__cvt+0x8c>
 80042c8:	f1c6 0601 	rsb	r6, r6, #1
 80042cc:	f8ca 6000 	str.w	r6, [sl]
 80042d0:	f8da 3000 	ldr.w	r3, [sl]
 80042d4:	4499      	add	r9, r3
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80042e2:	b108      	cbz	r0, 80042e8 <__cvt+0xa4>
 80042e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042e8:	2230      	movs	r2, #48	; 0x30
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	454b      	cmp	r3, r9
 80042ee:	d307      	bcc.n	8004300 <__cvt+0xbc>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f4:	1bdb      	subs	r3, r3, r7
 80042f6:	4638      	mov	r0, r7
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	b004      	add	sp, #16
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	1c59      	adds	r1, r3, #1
 8004302:	9103      	str	r1, [sp, #12]
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e7f0      	b.n	80042ea <__cvt+0xa6>

08004308 <__exponent>:
 8004308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430a:	4603      	mov	r3, r0
 800430c:	2900      	cmp	r1, #0
 800430e:	bfb8      	it	lt
 8004310:	4249      	neglt	r1, r1
 8004312:	f803 2b02 	strb.w	r2, [r3], #2
 8004316:	bfb4      	ite	lt
 8004318:	222d      	movlt	r2, #45	; 0x2d
 800431a:	222b      	movge	r2, #43	; 0x2b
 800431c:	2909      	cmp	r1, #9
 800431e:	7042      	strb	r2, [r0, #1]
 8004320:	dd2a      	ble.n	8004378 <__exponent+0x70>
 8004322:	f10d 0407 	add.w	r4, sp, #7
 8004326:	46a4      	mov	ip, r4
 8004328:	270a      	movs	r7, #10
 800432a:	46a6      	mov	lr, r4
 800432c:	460a      	mov	r2, r1
 800432e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004332:	fb07 1516 	mls	r5, r7, r6, r1
 8004336:	3530      	adds	r5, #48	; 0x30
 8004338:	2a63      	cmp	r2, #99	; 0x63
 800433a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800433e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004342:	4631      	mov	r1, r6
 8004344:	dcf1      	bgt.n	800432a <__exponent+0x22>
 8004346:	3130      	adds	r1, #48	; 0x30
 8004348:	f1ae 0502 	sub.w	r5, lr, #2
 800434c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004350:	1c44      	adds	r4, r0, #1
 8004352:	4629      	mov	r1, r5
 8004354:	4561      	cmp	r1, ip
 8004356:	d30a      	bcc.n	800436e <__exponent+0x66>
 8004358:	f10d 0209 	add.w	r2, sp, #9
 800435c:	eba2 020e 	sub.w	r2, r2, lr
 8004360:	4565      	cmp	r5, ip
 8004362:	bf88      	it	hi
 8004364:	2200      	movhi	r2, #0
 8004366:	4413      	add	r3, r2
 8004368:	1a18      	subs	r0, r3, r0
 800436a:	b003      	add	sp, #12
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004372:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004376:	e7ed      	b.n	8004354 <__exponent+0x4c>
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	3130      	adds	r1, #48	; 0x30
 800437c:	7083      	strb	r3, [r0, #2]
 800437e:	70c1      	strb	r1, [r0, #3]
 8004380:	1d03      	adds	r3, r0, #4
 8004382:	e7f1      	b.n	8004368 <__exponent+0x60>

08004384 <_printf_float>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	ed2d 8b02 	vpush	{d8}
 800438c:	b08d      	sub	sp, #52	; 0x34
 800438e:	460c      	mov	r4, r1
 8004390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004394:	4616      	mov	r6, r2
 8004396:	461f      	mov	r7, r3
 8004398:	4605      	mov	r5, r0
 800439a:	f001 fee1 	bl	8006160 <_localeconv_r>
 800439e:	f8d0 a000 	ldr.w	sl, [r0]
 80043a2:	4650      	mov	r0, sl
 80043a4:	f7fb ff14 	bl	80001d0 <strlen>
 80043a8:	2300      	movs	r3, #0
 80043aa:	930a      	str	r3, [sp, #40]	; 0x28
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	9305      	str	r3, [sp, #20]
 80043b0:	f8d8 3000 	ldr.w	r3, [r8]
 80043b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043b8:	3307      	adds	r3, #7
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	f8c8 2000 	str.w	r2, [r8]
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043d6:	9307      	str	r3, [sp, #28]
 80043d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043dc:	ee08 0a10 	vmov	s16, r0
 80043e0:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <_printf_float+0x2dc>)
 80043e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ea:	f7fc fb9f 	bl	8000b2c <__aeabi_dcmpun>
 80043ee:	bb88      	cbnz	r0, 8004454 <_printf_float+0xd0>
 80043f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f4:	4b9a      	ldr	r3, [pc, #616]	; (8004660 <_printf_float+0x2dc>)
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fa:	f7fc fb79 	bl	8000af0 <__aeabi_dcmple>
 80043fe:	bb48      	cbnz	r0, 8004454 <_printf_float+0xd0>
 8004400:	2200      	movs	r2, #0
 8004402:	2300      	movs	r3, #0
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fc fb68 	bl	8000adc <__aeabi_dcmplt>
 800440c:	b110      	cbz	r0, 8004414 <_printf_float+0x90>
 800440e:	232d      	movs	r3, #45	; 0x2d
 8004410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004414:	4b93      	ldr	r3, [pc, #588]	; (8004664 <_printf_float+0x2e0>)
 8004416:	4894      	ldr	r0, [pc, #592]	; (8004668 <_printf_float+0x2e4>)
 8004418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800441c:	bf94      	ite	ls
 800441e:	4698      	movls	r8, r3
 8004420:	4680      	movhi	r8, r0
 8004422:	2303      	movs	r3, #3
 8004424:	6123      	str	r3, [r4, #16]
 8004426:	9b05      	ldr	r3, [sp, #20]
 8004428:	f023 0204 	bic.w	r2, r3, #4
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	9700      	str	r7, [sp, #0]
 8004434:	4633      	mov	r3, r6
 8004436:	aa0b      	add	r2, sp, #44	; 0x2c
 8004438:	4621      	mov	r1, r4
 800443a:	4628      	mov	r0, r5
 800443c:	f000 f9d8 	bl	80047f0 <_printf_common>
 8004440:	3001      	adds	r0, #1
 8004442:	f040 8090 	bne.w	8004566 <_printf_float+0x1e2>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444a:	b00d      	add	sp, #52	; 0x34
 800444c:	ecbd 8b02 	vpop	{d8}
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc fb66 	bl	8000b2c <__aeabi_dcmpun>
 8004460:	b140      	cbz	r0, 8004474 <_printf_float+0xf0>
 8004462:	464b      	mov	r3, r9
 8004464:	2b00      	cmp	r3, #0
 8004466:	bfbc      	itt	lt
 8004468:	232d      	movlt	r3, #45	; 0x2d
 800446a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800446e:	487f      	ldr	r0, [pc, #508]	; (800466c <_printf_float+0x2e8>)
 8004470:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <_printf_float+0x2ec>)
 8004472:	e7d1      	b.n	8004418 <_printf_float+0x94>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800447a:	9206      	str	r2, [sp, #24]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	d13f      	bne.n	8004500 <_printf_float+0x17c>
 8004480:	2306      	movs	r3, #6
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	6861      	ldr	r1, [r4, #4]
 8004488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	ab0a      	add	r3, sp, #40	; 0x28
 8004492:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004496:	ab09      	add	r3, sp, #36	; 0x24
 8004498:	ec49 8b10 	vmov	d0, r8, r9
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7ff fecd 	bl	8004244 <__cvt>
 80044aa:	9b06      	ldr	r3, [sp, #24]
 80044ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ae:	2b47      	cmp	r3, #71	; 0x47
 80044b0:	4680      	mov	r8, r0
 80044b2:	d108      	bne.n	80044c6 <_printf_float+0x142>
 80044b4:	1cc8      	adds	r0, r1, #3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x13a>
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	4299      	cmp	r1, r3
 80044bc:	dd41      	ble.n	8004542 <_printf_float+0x1be>
 80044be:	f1ab 0b02 	sub.w	fp, fp, #2
 80044c2:	fa5f fb8b 	uxtb.w	fp, fp
 80044c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044ca:	d820      	bhi.n	800450e <_printf_float+0x18a>
 80044cc:	3901      	subs	r1, #1
 80044ce:	465a      	mov	r2, fp
 80044d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d4:	9109      	str	r1, [sp, #36]	; 0x24
 80044d6:	f7ff ff17 	bl	8004308 <__exponent>
 80044da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044dc:	1813      	adds	r3, r2, r0
 80044de:	2a01      	cmp	r2, #1
 80044e0:	4681      	mov	r9, r0
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	dc02      	bgt.n	80044ec <_printf_float+0x168>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	07d2      	lsls	r2, r2, #31
 80044ea:	d501      	bpl.n	80044f0 <_printf_float+0x16c>
 80044ec:	3301      	adds	r3, #1
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d09c      	beq.n	8004432 <_printf_float+0xae>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fe:	e798      	b.n	8004432 <_printf_float+0xae>
 8004500:	9a06      	ldr	r2, [sp, #24]
 8004502:	2a47      	cmp	r2, #71	; 0x47
 8004504:	d1be      	bne.n	8004484 <_printf_float+0x100>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1bc      	bne.n	8004484 <_printf_float+0x100>
 800450a:	2301      	movs	r3, #1
 800450c:	e7b9      	b.n	8004482 <_printf_float+0xfe>
 800450e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004512:	d118      	bne.n	8004546 <_printf_float+0x1c2>
 8004514:	2900      	cmp	r1, #0
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	dd0b      	ble.n	8004532 <_printf_float+0x1ae>
 800451a:	6121      	str	r1, [r4, #16]
 800451c:	b913      	cbnz	r3, 8004524 <_printf_float+0x1a0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d502      	bpl.n	800452a <_printf_float+0x1a6>
 8004524:	3301      	adds	r3, #1
 8004526:	440b      	add	r3, r1
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	65a1      	str	r1, [r4, #88]	; 0x58
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	e7de      	b.n	80044f0 <_printf_float+0x16c>
 8004532:	b913      	cbnz	r3, 800453a <_printf_float+0x1b6>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	07d2      	lsls	r2, r2, #31
 8004538:	d501      	bpl.n	800453e <_printf_float+0x1ba>
 800453a:	3302      	adds	r3, #2
 800453c:	e7f4      	b.n	8004528 <_printf_float+0x1a4>
 800453e:	2301      	movs	r3, #1
 8004540:	e7f2      	b.n	8004528 <_printf_float+0x1a4>
 8004542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004548:	4299      	cmp	r1, r3
 800454a:	db05      	blt.n	8004558 <_printf_float+0x1d4>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	6121      	str	r1, [r4, #16]
 8004550:	07d8      	lsls	r0, r3, #31
 8004552:	d5ea      	bpl.n	800452a <_printf_float+0x1a6>
 8004554:	1c4b      	adds	r3, r1, #1
 8004556:	e7e7      	b.n	8004528 <_printf_float+0x1a4>
 8004558:	2900      	cmp	r1, #0
 800455a:	bfd4      	ite	le
 800455c:	f1c1 0202 	rsble	r2, r1, #2
 8004560:	2201      	movgt	r2, #1
 8004562:	4413      	add	r3, r2
 8004564:	e7e0      	b.n	8004528 <_printf_float+0x1a4>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	055a      	lsls	r2, r3, #21
 800456a:	d407      	bmi.n	800457c <_printf_float+0x1f8>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	4642      	mov	r2, r8
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d12c      	bne.n	80045d4 <_printf_float+0x250>
 800457a:	e764      	b.n	8004446 <_printf_float+0xc2>
 800457c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004580:	f240 80e0 	bls.w	8004744 <_printf_float+0x3c0>
 8004584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004590:	2800      	cmp	r0, #0
 8004592:	d034      	beq.n	80045fe <_printf_float+0x27a>
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <_printf_float+0x2f0>)
 8004596:	2301      	movs	r3, #1
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f af51 	beq.w	8004446 <_printf_float+0xc2>
 80045a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a8:	429a      	cmp	r2, r3
 80045aa:	db02      	blt.n	80045b2 <_printf_float+0x22e>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07d8      	lsls	r0, r3, #31
 80045b0:	d510      	bpl.n	80045d4 <_printf_float+0x250>
 80045b2:	ee18 3a10 	vmov	r3, s16
 80045b6:	4652      	mov	r2, sl
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af41 	beq.w	8004446 <_printf_float+0xc2>
 80045c4:	f04f 0800 	mov.w	r8, #0
 80045c8:	f104 091a 	add.w	r9, r4, #26
 80045cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4543      	cmp	r3, r8
 80045d2:	dc09      	bgt.n	80045e8 <_printf_float+0x264>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	079b      	lsls	r3, r3, #30
 80045d8:	f100 8105 	bmi.w	80047e6 <_printf_float+0x462>
 80045dc:	68e0      	ldr	r0, [r4, #12]
 80045de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e0:	4298      	cmp	r0, r3
 80045e2:	bfb8      	it	lt
 80045e4:	4618      	movlt	r0, r3
 80045e6:	e730      	b.n	800444a <_printf_float+0xc6>
 80045e8:	2301      	movs	r3, #1
 80045ea:	464a      	mov	r2, r9
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b8      	blx	r7
 80045f2:	3001      	adds	r0, #1
 80045f4:	f43f af27 	beq.w	8004446 <_printf_float+0xc2>
 80045f8:	f108 0801 	add.w	r8, r8, #1
 80045fc:	e7e6      	b.n	80045cc <_printf_float+0x248>
 80045fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc39      	bgt.n	8004678 <_printf_float+0x2f4>
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <_printf_float+0x2f0>)
 8004606:	2301      	movs	r3, #1
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f af19 	beq.w	8004446 <_printf_float+0xc2>
 8004614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	d102      	bne.n	8004622 <_printf_float+0x29e>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d5d8      	bpl.n	80045d4 <_printf_float+0x250>
 8004622:	ee18 3a10 	vmov	r3, s16
 8004626:	4652      	mov	r2, sl
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af09 	beq.w	8004446 <_printf_float+0xc2>
 8004634:	f04f 0900 	mov.w	r9, #0
 8004638:	f104 0a1a 	add.w	sl, r4, #26
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	425b      	negs	r3, r3
 8004640:	454b      	cmp	r3, r9
 8004642:	dc01      	bgt.n	8004648 <_printf_float+0x2c4>
 8004644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004646:	e792      	b.n	800456e <_printf_float+0x1ea>
 8004648:	2301      	movs	r3, #1
 800464a:	4652      	mov	r2, sl
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f aef7 	beq.w	8004446 <_printf_float+0xc2>
 8004658:	f109 0901 	add.w	r9, r9, #1
 800465c:	e7ee      	b.n	800463c <_printf_float+0x2b8>
 800465e:	bf00      	nop
 8004660:	7fefffff 	.word	0x7fefffff
 8004664:	08007478 	.word	0x08007478
 8004668:	0800747c 	.word	0x0800747c
 800466c:	08007484 	.word	0x08007484
 8004670:	08007480 	.word	0x08007480
 8004674:	08007488 	.word	0x08007488
 8004678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800467a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800467c:	429a      	cmp	r2, r3
 800467e:	bfa8      	it	ge
 8004680:	461a      	movge	r2, r3
 8004682:	2a00      	cmp	r2, #0
 8004684:	4691      	mov	r9, r2
 8004686:	dc37      	bgt.n	80046f8 <_printf_float+0x374>
 8004688:	f04f 0b00 	mov.w	fp, #0
 800468c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004690:	f104 021a 	add.w	r2, r4, #26
 8004694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	eba3 0309 	sub.w	r3, r3, r9
 800469c:	455b      	cmp	r3, fp
 800469e:	dc33      	bgt.n	8004708 <_printf_float+0x384>
 80046a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	db3b      	blt.n	8004720 <_printf_float+0x39c>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07da      	lsls	r2, r3, #31
 80046ac:	d438      	bmi.n	8004720 <_printf_float+0x39c>
 80046ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b0:	9a05      	ldr	r2, [sp, #20]
 80046b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046b4:	1a9a      	subs	r2, r3, r2
 80046b6:	eba3 0901 	sub.w	r9, r3, r1
 80046ba:	4591      	cmp	r9, r2
 80046bc:	bfa8      	it	ge
 80046be:	4691      	movge	r9, r2
 80046c0:	f1b9 0f00 	cmp.w	r9, #0
 80046c4:	dc35      	bgt.n	8004732 <_printf_float+0x3ae>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ce:	f104 0a1a 	add.w	sl, r4, #26
 80046d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	eba3 0309 	sub.w	r3, r3, r9
 80046dc:	4543      	cmp	r3, r8
 80046de:	f77f af79 	ble.w	80045d4 <_printf_float+0x250>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4652      	mov	r2, sl
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f aeaa 	beq.w	8004446 <_printf_float+0xc2>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	e7ec      	b.n	80046d2 <_printf_float+0x34e>
 80046f8:	4613      	mov	r3, r2
 80046fa:	4631      	mov	r1, r6
 80046fc:	4642      	mov	r2, r8
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	d1c0      	bne.n	8004688 <_printf_float+0x304>
 8004706:	e69e      	b.n	8004446 <_printf_float+0xc2>
 8004708:	2301      	movs	r3, #1
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	9205      	str	r2, [sp, #20]
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f ae97 	beq.w	8004446 <_printf_float+0xc2>
 8004718:	9a05      	ldr	r2, [sp, #20]
 800471a:	f10b 0b01 	add.w	fp, fp, #1
 800471e:	e7b9      	b.n	8004694 <_printf_float+0x310>
 8004720:	ee18 3a10 	vmov	r3, s16
 8004724:	4652      	mov	r2, sl
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	d1be      	bne.n	80046ae <_printf_float+0x32a>
 8004730:	e689      	b.n	8004446 <_printf_float+0xc2>
 8004732:	9a05      	ldr	r2, [sp, #20]
 8004734:	464b      	mov	r3, r9
 8004736:	4442      	add	r2, r8
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	d1c1      	bne.n	80046c6 <_printf_float+0x342>
 8004742:	e680      	b.n	8004446 <_printf_float+0xc2>
 8004744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004746:	2a01      	cmp	r2, #1
 8004748:	dc01      	bgt.n	800474e <_printf_float+0x3ca>
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d538      	bpl.n	80047c0 <_printf_float+0x43c>
 800474e:	2301      	movs	r3, #1
 8004750:	4642      	mov	r2, r8
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f ae74 	beq.w	8004446 <_printf_float+0xc2>
 800475e:	ee18 3a10 	vmov	r3, s16
 8004762:	4652      	mov	r2, sl
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f ae6b 	beq.w	8004446 <_printf_float+0xc2>
 8004770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800477c:	b9d8      	cbnz	r0, 80047b6 <_printf_float+0x432>
 800477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004780:	f108 0201 	add.w	r2, r8, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	d10e      	bne.n	80047ae <_printf_float+0x42a>
 8004790:	e659      	b.n	8004446 <_printf_float+0xc2>
 8004792:	2301      	movs	r3, #1
 8004794:	4652      	mov	r2, sl
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f ae52 	beq.w	8004446 <_printf_float+0xc2>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4543      	cmp	r3, r8
 80047ac:	dcf1      	bgt.n	8004792 <_printf_float+0x40e>
 80047ae:	464b      	mov	r3, r9
 80047b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047b4:	e6dc      	b.n	8004570 <_printf_float+0x1ec>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0a1a 	add.w	sl, r4, #26
 80047be:	e7f2      	b.n	80047a6 <_printf_float+0x422>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4642      	mov	r2, r8
 80047c4:	e7df      	b.n	8004786 <_printf_float+0x402>
 80047c6:	2301      	movs	r3, #1
 80047c8:	464a      	mov	r2, r9
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f ae38 	beq.w	8004446 <_printf_float+0xc2>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	4543      	cmp	r3, r8
 80047e2:	dcf0      	bgt.n	80047c6 <_printf_float+0x442>
 80047e4:	e6fa      	b.n	80045dc <_printf_float+0x258>
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	f104 0919 	add.w	r9, r4, #25
 80047ee:	e7f4      	b.n	80047da <_printf_float+0x456>

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4616      	mov	r6, r2
 80047f6:	4699      	mov	r9, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	bfb8      	it	lt
 8004804:	4613      	movlt	r3, r2
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800480c:	4607      	mov	r7, r0
 800480e:	460c      	mov	r4, r1
 8004810:	b10a      	cbz	r2, 8004816 <_printf_common+0x26>
 8004812:	3301      	adds	r3, #1
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	0699      	lsls	r1, r3, #26
 800481a:	bf42      	ittt	mi
 800481c:	6833      	ldrmi	r3, [r6, #0]
 800481e:	3302      	addmi	r3, #2
 8004820:	6033      	strmi	r3, [r6, #0]
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	f015 0506 	ands.w	r5, r5, #6
 8004828:	d106      	bne.n	8004838 <_printf_common+0x48>
 800482a:	f104 0a19 	add.w	sl, r4, #25
 800482e:	68e3      	ldr	r3, [r4, #12]
 8004830:	6832      	ldr	r2, [r6, #0]
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc26      	bgt.n	8004886 <_printf_common+0x96>
 8004838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800483c:	1e13      	subs	r3, r2, #0
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	bf18      	it	ne
 8004842:	2301      	movne	r3, #1
 8004844:	0692      	lsls	r2, r2, #26
 8004846:	d42b      	bmi.n	80048a0 <_printf_common+0xb0>
 8004848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d01e      	beq.n	8004894 <_printf_common+0xa4>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	68e5      	ldr	r5, [r4, #12]
 800485a:	6832      	ldr	r2, [r6, #0]
 800485c:	f003 0306 	and.w	r3, r3, #6
 8004860:	2b04      	cmp	r3, #4
 8004862:	bf08      	it	eq
 8004864:	1aad      	subeq	r5, r5, r2
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	bf0c      	ite	eq
 800486c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004870:	2500      	movne	r5, #0
 8004872:	4293      	cmp	r3, r2
 8004874:	bfc4      	itt	gt
 8004876:	1a9b      	subgt	r3, r3, r2
 8004878:	18ed      	addgt	r5, r5, r3
 800487a:	2600      	movs	r6, #0
 800487c:	341a      	adds	r4, #26
 800487e:	42b5      	cmp	r5, r6
 8004880:	d11a      	bne.n	80048b8 <_printf_common+0xc8>
 8004882:	2000      	movs	r0, #0
 8004884:	e008      	b.n	8004898 <_printf_common+0xa8>
 8004886:	2301      	movs	r3, #1
 8004888:	4652      	mov	r2, sl
 800488a:	4649      	mov	r1, r9
 800488c:	4638      	mov	r0, r7
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d103      	bne.n	800489c <_printf_common+0xac>
 8004894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	3501      	adds	r5, #1
 800489e:	e7c6      	b.n	800482e <_printf_common+0x3e>
 80048a0:	18e1      	adds	r1, r4, r3
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	2030      	movs	r0, #48	; 0x30
 80048a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048aa:	4422      	add	r2, r4
 80048ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b4:	3302      	adds	r3, #2
 80048b6:	e7c7      	b.n	8004848 <_printf_common+0x58>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0e6      	beq.n	8004894 <_printf_common+0xa4>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7d9      	b.n	800487e <_printf_common+0x8e>
	...

080048cc <_printf_i>:
 80048cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	7e0f      	ldrb	r7, [r1, #24]
 80048d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048d4:	2f78      	cmp	r7, #120	; 0x78
 80048d6:	4691      	mov	r9, r2
 80048d8:	4680      	mov	r8, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	469a      	mov	sl, r3
 80048de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048e2:	d807      	bhi.n	80048f4 <_printf_i+0x28>
 80048e4:	2f62      	cmp	r7, #98	; 0x62
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x32>
 80048e8:	2f00      	cmp	r7, #0
 80048ea:	f000 80d8 	beq.w	8004a9e <_printf_i+0x1d2>
 80048ee:	2f58      	cmp	r7, #88	; 0x58
 80048f0:	f000 80a3 	beq.w	8004a3a <_printf_i+0x16e>
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048fc:	e03a      	b.n	8004974 <_printf_i+0xa8>
 80048fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004902:	2b15      	cmp	r3, #21
 8004904:	d8f6      	bhi.n	80048f4 <_printf_i+0x28>
 8004906:	a101      	add	r1, pc, #4	; (adr r1, 800490c <_printf_i+0x40>)
 8004908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800490c:	08004965 	.word	0x08004965
 8004910:	08004979 	.word	0x08004979
 8004914:	080048f5 	.word	0x080048f5
 8004918:	080048f5 	.word	0x080048f5
 800491c:	080048f5 	.word	0x080048f5
 8004920:	080048f5 	.word	0x080048f5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048f5 	.word	0x080048f5
 800492c:	080048f5 	.word	0x080048f5
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	08004a85 	.word	0x08004a85
 800493c:	080049a9 	.word	0x080049a9
 8004940:	08004a67 	.word	0x08004a67
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004aa7 	.word	0x08004aa7
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a6f 	.word	0x08004a6f
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	602a      	str	r2, [r5, #0]
 800496c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004974:	2301      	movs	r3, #1
 8004976:	e0a3      	b.n	8004ac0 <_printf_i+0x1f4>
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	0606      	lsls	r6, r0, #24
 800497e:	f101 0304 	add.w	r3, r1, #4
 8004982:	d50a      	bpl.n	800499a <_printf_i+0xce>
 8004984:	680e      	ldr	r6, [r1, #0]
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	2e00      	cmp	r6, #0
 800498a:	da03      	bge.n	8004994 <_printf_i+0xc8>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	4276      	negs	r6, r6
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	485e      	ldr	r0, [pc, #376]	; (8004b10 <_printf_i+0x244>)
 8004996:	230a      	movs	r3, #10
 8004998:	e019      	b.n	80049ce <_printf_i+0x102>
 800499a:	680e      	ldr	r6, [r1, #0]
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049a2:	bf18      	it	ne
 80049a4:	b236      	sxthne	r6, r6
 80049a6:	e7ef      	b.n	8004988 <_printf_i+0xbc>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	1d19      	adds	r1, r3, #4
 80049ae:	6029      	str	r1, [r5, #0]
 80049b0:	0601      	lsls	r1, r0, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0xec>
 80049b4:	681e      	ldr	r6, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0xf2>
 80049b8:	0646      	lsls	r6, r0, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0xe8>
 80049bc:	881e      	ldrh	r6, [r3, #0]
 80049be:	4854      	ldr	r0, [pc, #336]	; (8004b10 <_printf_i+0x244>)
 80049c0:	2f6f      	cmp	r7, #111	; 0x6f
 80049c2:	bf0c      	ite	eq
 80049c4:	2308      	moveq	r3, #8
 80049c6:	230a      	movne	r3, #10
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ce:	6865      	ldr	r5, [r4, #4]
 80049d0:	60a5      	str	r5, [r4, #8]
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	bfa2      	ittt	ge
 80049d6:	6821      	ldrge	r1, [r4, #0]
 80049d8:	f021 0104 	bicge.w	r1, r1, #4
 80049dc:	6021      	strge	r1, [r4, #0]
 80049de:	b90e      	cbnz	r6, 80049e4 <_printf_i+0x118>
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	d04d      	beq.n	8004a80 <_printf_i+0x1b4>
 80049e4:	4615      	mov	r5, r2
 80049e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ea:	fb03 6711 	mls	r7, r3, r1, r6
 80049ee:	5dc7      	ldrb	r7, [r0, r7]
 80049f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049f4:	4637      	mov	r7, r6
 80049f6:	42bb      	cmp	r3, r7
 80049f8:	460e      	mov	r6, r1
 80049fa:	d9f4      	bls.n	80049e6 <_printf_i+0x11a>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10b      	bne.n	8004a18 <_printf_i+0x14c>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	07de      	lsls	r6, r3, #31
 8004a04:	d508      	bpl.n	8004a18 <_printf_i+0x14c>
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	bfde      	ittt	le
 8004a0e:	2330      	movle	r3, #48	; 0x30
 8004a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a18:	1b52      	subs	r2, r2, r5
 8004a1a:	6122      	str	r2, [r4, #16]
 8004a1c:	f8cd a000 	str.w	sl, [sp]
 8004a20:	464b      	mov	r3, r9
 8004a22:	aa03      	add	r2, sp, #12
 8004a24:	4621      	mov	r1, r4
 8004a26:	4640      	mov	r0, r8
 8004a28:	f7ff fee2 	bl	80047f0 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d14c      	bne.n	8004aca <_printf_i+0x1fe>
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a34:	b004      	add	sp, #16
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	4835      	ldr	r0, [pc, #212]	; (8004b10 <_printf_i+0x244>)
 8004a3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a40:	6829      	ldr	r1, [r5, #0]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a48:	6029      	str	r1, [r5, #0]
 8004a4a:	061d      	lsls	r5, r3, #24
 8004a4c:	d514      	bpl.n	8004a78 <_printf_i+0x1ac>
 8004a4e:	07df      	lsls	r7, r3, #31
 8004a50:	bf44      	itt	mi
 8004a52:	f043 0320 	orrmi.w	r3, r3, #32
 8004a56:	6023      	strmi	r3, [r4, #0]
 8004a58:	b91e      	cbnz	r6, 8004a62 <_printf_i+0x196>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f023 0320 	bic.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2310      	movs	r3, #16
 8004a64:	e7b0      	b.n	80049c8 <_printf_i+0xfc>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	2378      	movs	r3, #120	; 0x78
 8004a70:	4828      	ldr	r0, [pc, #160]	; (8004b14 <_printf_i+0x248>)
 8004a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a76:	e7e3      	b.n	8004a40 <_printf_i+0x174>
 8004a78:	0659      	lsls	r1, r3, #25
 8004a7a:	bf48      	it	mi
 8004a7c:	b2b6      	uxthmi	r6, r6
 8004a7e:	e7e6      	b.n	8004a4e <_printf_i+0x182>
 8004a80:	4615      	mov	r5, r2
 8004a82:	e7bb      	b.n	80049fc <_printf_i+0x130>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6826      	ldr	r6, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6028      	str	r0, [r5, #0]
 8004a8e:	0635      	lsls	r5, r6, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1cc>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1d2>
 8004a98:	0670      	lsls	r0, r6, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1c8>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4615      	mov	r5, r2
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x150>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f7fb fb94 	bl	80001e0 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1f2>
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac8:	e7a8      	b.n	8004a1c <_printf_i+0x150>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	462a      	mov	r2, r5
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ab      	beq.n	8004a30 <_printf_i+0x164>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x23a>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a4      	b.n	8004a34 <_printf_i+0x168>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09b      	beq.n	8004a30 <_printf_i+0x164>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x21e>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x212>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x22e>
 8004b0e:	bf00      	nop
 8004b10:	0800748a 	.word	0x0800748a
 8004b14:	0800749b 	.word	0x0800749b

08004b18 <_perror_r>:
 8004b18:	6983      	ldr	r3, [r0, #24]
 8004b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b1c:	68c4      	ldr	r4, [r0, #12]
 8004b1e:	4605      	mov	r5, r0
 8004b20:	460e      	mov	r6, r1
 8004b22:	b90b      	cbnz	r3, 8004b28 <_perror_r+0x10>
 8004b24:	f001 fa7e 	bl	8006024 <__sinit>
 8004b28:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <_perror_r+0x120>)
 8004b2a:	429c      	cmp	r4, r3
 8004b2c:	d132      	bne.n	8004b94 <_perror_r+0x7c>
 8004b2e:	686c      	ldr	r4, [r5, #4]
 8004b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b32:	07d8      	lsls	r0, r3, #31
 8004b34:	d405      	bmi.n	8004b42 <_perror_r+0x2a>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	0599      	lsls	r1, r3, #22
 8004b3a:	d402      	bmi.n	8004b42 <_perror_r+0x2a>
 8004b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3e:	f001 fb14 	bl	800616a <__retarget_lock_acquire_recursive>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f001 f99b 	bl	8005e80 <_fflush_r>
 8004b4a:	bb6e      	cbnz	r6, 8004ba8 <_perror_r+0x90>
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	ab01      	add	r3, sp, #4
 8004b50:	2201      	movs	r2, #1
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 f89a 	bl	8004c8c <_strerror_r>
 8004b58:	4607      	mov	r7, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d14f      	bne.n	8004bfe <_perror_r+0xe6>
 8004b5e:	4837      	ldr	r0, [pc, #220]	; (8004c3c <_perror_r+0x124>)
 8004b60:	4f36      	ldr	r7, [pc, #216]	; (8004c3c <_perror_r+0x124>)
 8004b62:	f7fb fb35 	bl	80001d0 <strlen>
 8004b66:	4606      	mov	r6, r0
 8004b68:	b156      	cbz	r6, 8004b80 <_perror_r+0x68>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f001 f9c4 	bl	8005ef8 <fileno>
 8004b70:	4633      	mov	r3, r6
 8004b72:	4601      	mov	r1, r0
 8004b74:	463a      	mov	r2, r7
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 fa70 	bl	800505c <_write_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	da51      	bge.n	8004c24 <_perror_r+0x10c>
 8004b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8a:	07d2      	lsls	r2, r2, #31
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	d54c      	bpl.n	8004c2a <_perror_r+0x112>
 8004b90:	b003      	add	sp, #12
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b94:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <_perror_r+0x128>)
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d101      	bne.n	8004b9e <_perror_r+0x86>
 8004b9a:	68ac      	ldr	r4, [r5, #8]
 8004b9c:	e7c8      	b.n	8004b30 <_perror_r+0x18>
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <_perror_r+0x12c>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	bf08      	it	eq
 8004ba4:	68ec      	ldreq	r4, [r5, #12]
 8004ba6:	e7c3      	b.n	8004b30 <_perror_r+0x18>
 8004ba8:	7833      	ldrb	r3, [r6, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ce      	beq.n	8004b4c <_perror_r+0x34>
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7fb fb0e 	bl	80001d0 <strlen>
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	b157      	cbz	r7, 8004bce <_perror_r+0xb6>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f001 f99d 	bl	8005ef8 <fileno>
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 fa49 	bl	800505c <_write_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	da14      	bge.n	8004bf8 <_perror_r+0xe0>
 8004bce:	481e      	ldr	r0, [pc, #120]	; (8004c48 <_perror_r+0x130>)
 8004bd0:	4f1d      	ldr	r7, [pc, #116]	; (8004c48 <_perror_r+0x130>)
 8004bd2:	f7fb fafd 	bl	80001d0 <strlen>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	d0b7      	beq.n	8004b4c <_perror_r+0x34>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 f98b 	bl	8005ef8 <fileno>
 8004be2:	4633      	mov	r3, r6
 8004be4:	4601      	mov	r1, r0
 8004be6:	463a      	mov	r2, r7
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fa37 	bl	800505c <_write_r>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	dbac      	blt.n	8004b4c <_perror_r+0x34>
 8004bf2:	1a36      	subs	r6, r6, r0
 8004bf4:	4407      	add	r7, r0
 8004bf6:	e7ef      	b.n	8004bd8 <_perror_r+0xc0>
 8004bf8:	1a3f      	subs	r7, r7, r0
 8004bfa:	4406      	add	r6, r0
 8004bfc:	e7db      	b.n	8004bb6 <_perror_r+0x9e>
 8004bfe:	f7fb fae7 	bl	80001d0 <strlen>
 8004c02:	4606      	mov	r6, r0
 8004c04:	2e00      	cmp	r6, #0
 8004c06:	d0aa      	beq.n	8004b5e <_perror_r+0x46>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f001 f975 	bl	8005ef8 <fileno>
 8004c0e:	4633      	mov	r3, r6
 8004c10:	4601      	mov	r1, r0
 8004c12:	463a      	mov	r2, r7
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 fa21 	bl	800505c <_write_r>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	db9f      	blt.n	8004b5e <_perror_r+0x46>
 8004c1e:	1a36      	subs	r6, r6, r0
 8004c20:	4407      	add	r7, r0
 8004c22:	e7ef      	b.n	8004c04 <_perror_r+0xec>
 8004c24:	1a36      	subs	r6, r6, r0
 8004c26:	4407      	add	r7, r0
 8004c28:	e79e      	b.n	8004b68 <_perror_r+0x50>
 8004c2a:	059b      	lsls	r3, r3, #22
 8004c2c:	d4b0      	bmi.n	8004b90 <_perror_r+0x78>
 8004c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c30:	f001 fa9c 	bl	800616c <__retarget_lock_release_recursive>
 8004c34:	e7ac      	b.n	8004b90 <_perror_r+0x78>
 8004c36:	bf00      	nop
 8004c38:	08007bf4 	.word	0x08007bf4
 8004c3c:	08007dd7 	.word	0x08007dd7
 8004c40:	08007c14 	.word	0x08007c14
 8004c44:	08007bd4 	.word	0x08007bd4
 8004c48:	08007da7 	.word	0x08007da7

08004c4c <perror>:
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <perror+0xc>)
 8004c4e:	4601      	mov	r1, r0
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f7ff bf61 	b.w	8004b18 <_perror_r>
 8004c56:	bf00      	nop
 8004c58:	2000000c 	.word	0x2000000c

08004c5c <iprintf>:
 8004c5c:	b40f      	push	{r0, r1, r2, r3}
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <iprintf+0x2c>)
 8004c60:	b513      	push	{r0, r1, r4, lr}
 8004c62:	681c      	ldr	r4, [r3, #0]
 8004c64:	b124      	cbz	r4, 8004c70 <iprintf+0x14>
 8004c66:	69a3      	ldr	r3, [r4, #24]
 8004c68:	b913      	cbnz	r3, 8004c70 <iprintf+0x14>
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f001 f9da 	bl	8006024 <__sinit>
 8004c70:	ab05      	add	r3, sp, #20
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	68a1      	ldr	r1, [r4, #8]
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f001 ff33 	bl	8006ae4 <_vfiprintf_r>
 8004c7e:	b002      	add	sp, #8
 8004c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c84:	b004      	add	sp, #16
 8004c86:	4770      	bx	lr
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <_strerror_r>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	288e      	cmp	r0, #142	; 0x8e
 8004c96:	f200 8130 	bhi.w	8004efa <_strerror_r+0x26e>
 8004c9a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004c9e:	0139      	.short	0x0139
 8004ca0:	0092008f 	.word	0x0092008f
 8004ca4:	00960094 	.word	0x00960094
 8004ca8:	009a0098 	.word	0x009a0098
 8004cac:	009e009c 	.word	0x009e009c
 8004cb0:	00a400a2 	.word	0x00a400a2
 8004cb4:	00aa00a8 	.word	0x00aa00a8
 8004cb8:	00ae00ac 	.word	0x00ae00ac
 8004cbc:	00b0012e 	.word	0x00b0012e
 8004cc0:	00b400b2 	.word	0x00b400b2
 8004cc4:	00b800b6 	.word	0x00b800b6
 8004cc8:	00c000be 	.word	0x00c000be
 8004ccc:	00c800c6 	.word	0x00c800c6
 8004cd0:	00cc00ca 	.word	0x00cc00ca
 8004cd4:	00d200ce 	.word	0x00d200ce
 8004cd8:	00d800d6 	.word	0x00d800d6
 8004cdc:	00dc00da 	.word	0x00dc00da
 8004ce0:	00e000de 	.word	0x00e000de
 8004ce4:	00e400e2 	.word	0x00e400e2
 8004ce8:	012e012e 	.word	0x012e012e
 8004cec:	012e012e 	.word	0x012e012e
 8004cf0:	012e012e 	.word	0x012e012e
 8004cf4:	012e012e 	.word	0x012e012e
 8004cf8:	00ec00e8 	.word	0x00ec00e8
 8004cfc:	012e012e 	.word	0x012e012e
 8004d00:	012e012e 	.word	0x012e012e
 8004d04:	012e012e 	.word	0x012e012e
 8004d08:	012e012e 	.word	0x012e012e
 8004d0c:	012e012e 	.word	0x012e012e
 8004d10:	012e012e 	.word	0x012e012e
 8004d14:	00ee012e 	.word	0x00ee012e
 8004d18:	00f00108 	.word	0x00f00108
 8004d1c:	012e00f2 	.word	0x012e00f2
 8004d20:	012e012e 	.word	0x012e012e
 8004d24:	012e00f4 	.word	0x012e00f4
 8004d28:	012e012e 	.word	0x012e012e
 8004d2c:	012e00f6 	.word	0x012e00f6
 8004d30:	00fa012e 	.word	0x00fa012e
 8004d34:	012e012e 	.word	0x012e012e
 8004d38:	012e00fc 	.word	0x012e00fc
 8004d3c:	012e012e 	.word	0x012e012e
 8004d40:	012e012e 	.word	0x012e012e
 8004d44:	012e012e 	.word	0x012e012e
 8004d48:	012e012e 	.word	0x012e012e
 8004d4c:	00fe012e 	.word	0x00fe012e
 8004d50:	0100012e 	.word	0x0100012e
 8004d54:	01040102 	.word	0x01040102
 8004d58:	012e012e 	.word	0x012e012e
 8004d5c:	012e0126 	.word	0x012e0126
 8004d60:	012e012e 	.word	0x012e012e
 8004d64:	012e012e 	.word	0x012e012e
 8004d68:	012e012e 	.word	0x012e012e
 8004d6c:	0114012e 	.word	0x0114012e
 8004d70:	010a0106 	.word	0x010a0106
 8004d74:	010e010c 	.word	0x010e010c
 8004d78:	012e0110 	.word	0x012e0110
 8004d7c:	01160112 	.word	0x01160112
 8004d80:	00ea011a 	.word	0x00ea011a
 8004d84:	012c00c2 	.word	0x012c00c2
 8004d88:	00d000ba 	.word	0x00d000ba
 8004d8c:	00a000bc 	.word	0x00a000bc
 8004d90:	012a00a6 	.word	0x012a00a6
 8004d94:	012e00f8 	.word	0x012e00f8
 8004d98:	00c40118 	.word	0x00c40118
 8004d9c:	011c011e 	.word	0x011c011e
 8004da0:	012e012e 	.word	0x012e012e
 8004da4:	012e012e 	.word	0x012e012e
 8004da8:	00d4012e 	.word	0x00d4012e
 8004dac:	012e012e 	.word	0x012e012e
 8004db0:	00e6012e 	.word	0x00e6012e
 8004db4:	01200128 	.word	0x01200128
 8004db8:	01240122 	.word	0x01240122
 8004dbc:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <_strerror_r+0x288>)
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	4b55      	ldr	r3, [pc, #340]	; (8004f18 <_strerror_r+0x28c>)
 8004dc4:	e7fb      	b.n	8004dbe <_strerror_r+0x132>
 8004dc6:	4b55      	ldr	r3, [pc, #340]	; (8004f1c <_strerror_r+0x290>)
 8004dc8:	e7f9      	b.n	8004dbe <_strerror_r+0x132>
 8004dca:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <_strerror_r+0x294>)
 8004dcc:	e7f7      	b.n	8004dbe <_strerror_r+0x132>
 8004dce:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <_strerror_r+0x298>)
 8004dd0:	e7f5      	b.n	8004dbe <_strerror_r+0x132>
 8004dd2:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <_strerror_r+0x29c>)
 8004dd4:	e7f3      	b.n	8004dbe <_strerror_r+0x132>
 8004dd6:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <_strerror_r+0x2a0>)
 8004dd8:	e7f1      	b.n	8004dbe <_strerror_r+0x132>
 8004dda:	4b55      	ldr	r3, [pc, #340]	; (8004f30 <_strerror_r+0x2a4>)
 8004ddc:	e7ef      	b.n	8004dbe <_strerror_r+0x132>
 8004dde:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <_strerror_r+0x2a8>)
 8004de0:	e7ed      	b.n	8004dbe <_strerror_r+0x132>
 8004de2:	4b55      	ldr	r3, [pc, #340]	; (8004f38 <_strerror_r+0x2ac>)
 8004de4:	e7eb      	b.n	8004dbe <_strerror_r+0x132>
 8004de6:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <_strerror_r+0x2b0>)
 8004de8:	e7e9      	b.n	8004dbe <_strerror_r+0x132>
 8004dea:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <_strerror_r+0x2b4>)
 8004dec:	e7e7      	b.n	8004dbe <_strerror_r+0x132>
 8004dee:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <_strerror_r+0x2b8>)
 8004df0:	e7e5      	b.n	8004dbe <_strerror_r+0x132>
 8004df2:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <_strerror_r+0x2bc>)
 8004df4:	e7e3      	b.n	8004dbe <_strerror_r+0x132>
 8004df6:	4b55      	ldr	r3, [pc, #340]	; (8004f4c <_strerror_r+0x2c0>)
 8004df8:	e7e1      	b.n	8004dbe <_strerror_r+0x132>
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <_strerror_r+0x2c4>)
 8004dfc:	e7df      	b.n	8004dbe <_strerror_r+0x132>
 8004dfe:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <_strerror_r+0x2c8>)
 8004e00:	e7dd      	b.n	8004dbe <_strerror_r+0x132>
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <_strerror_r+0x2cc>)
 8004e04:	e7db      	b.n	8004dbe <_strerror_r+0x132>
 8004e06:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <_strerror_r+0x2d0>)
 8004e08:	e7d9      	b.n	8004dbe <_strerror_r+0x132>
 8004e0a:	4b55      	ldr	r3, [pc, #340]	; (8004f60 <_strerror_r+0x2d4>)
 8004e0c:	e7d7      	b.n	8004dbe <_strerror_r+0x132>
 8004e0e:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <_strerror_r+0x2d8>)
 8004e10:	e7d5      	b.n	8004dbe <_strerror_r+0x132>
 8004e12:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <_strerror_r+0x2dc>)
 8004e14:	e7d3      	b.n	8004dbe <_strerror_r+0x132>
 8004e16:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <_strerror_r+0x2e0>)
 8004e18:	e7d1      	b.n	8004dbe <_strerror_r+0x132>
 8004e1a:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <_strerror_r+0x2e4>)
 8004e1c:	e7cf      	b.n	8004dbe <_strerror_r+0x132>
 8004e1e:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <_strerror_r+0x2e8>)
 8004e20:	e7cd      	b.n	8004dbe <_strerror_r+0x132>
 8004e22:	4b55      	ldr	r3, [pc, #340]	; (8004f78 <_strerror_r+0x2ec>)
 8004e24:	e7cb      	b.n	8004dbe <_strerror_r+0x132>
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <_strerror_r+0x2f0>)
 8004e28:	e7c9      	b.n	8004dbe <_strerror_r+0x132>
 8004e2a:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <_strerror_r+0x2f4>)
 8004e2c:	e7c7      	b.n	8004dbe <_strerror_r+0x132>
 8004e2e:	4b55      	ldr	r3, [pc, #340]	; (8004f84 <_strerror_r+0x2f8>)
 8004e30:	e7c5      	b.n	8004dbe <_strerror_r+0x132>
 8004e32:	4b55      	ldr	r3, [pc, #340]	; (8004f88 <_strerror_r+0x2fc>)
 8004e34:	e7c3      	b.n	8004dbe <_strerror_r+0x132>
 8004e36:	4b55      	ldr	r3, [pc, #340]	; (8004f8c <_strerror_r+0x300>)
 8004e38:	e7c1      	b.n	8004dbe <_strerror_r+0x132>
 8004e3a:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <_strerror_r+0x304>)
 8004e3c:	e7bf      	b.n	8004dbe <_strerror_r+0x132>
 8004e3e:	4b55      	ldr	r3, [pc, #340]	; (8004f94 <_strerror_r+0x308>)
 8004e40:	e7bd      	b.n	8004dbe <_strerror_r+0x132>
 8004e42:	4b55      	ldr	r3, [pc, #340]	; (8004f98 <_strerror_r+0x30c>)
 8004e44:	e7bb      	b.n	8004dbe <_strerror_r+0x132>
 8004e46:	4b55      	ldr	r3, [pc, #340]	; (8004f9c <_strerror_r+0x310>)
 8004e48:	e7b9      	b.n	8004dbe <_strerror_r+0x132>
 8004e4a:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <_strerror_r+0x314>)
 8004e4c:	e7b7      	b.n	8004dbe <_strerror_r+0x132>
 8004e4e:	4b55      	ldr	r3, [pc, #340]	; (8004fa4 <_strerror_r+0x318>)
 8004e50:	e7b5      	b.n	8004dbe <_strerror_r+0x132>
 8004e52:	4b55      	ldr	r3, [pc, #340]	; (8004fa8 <_strerror_r+0x31c>)
 8004e54:	e7b3      	b.n	8004dbe <_strerror_r+0x132>
 8004e56:	4b55      	ldr	r3, [pc, #340]	; (8004fac <_strerror_r+0x320>)
 8004e58:	e7b1      	b.n	8004dbe <_strerror_r+0x132>
 8004e5a:	4b55      	ldr	r3, [pc, #340]	; (8004fb0 <_strerror_r+0x324>)
 8004e5c:	e7af      	b.n	8004dbe <_strerror_r+0x132>
 8004e5e:	4b55      	ldr	r3, [pc, #340]	; (8004fb4 <_strerror_r+0x328>)
 8004e60:	e7ad      	b.n	8004dbe <_strerror_r+0x132>
 8004e62:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <_strerror_r+0x32c>)
 8004e64:	e7ab      	b.n	8004dbe <_strerror_r+0x132>
 8004e66:	4b55      	ldr	r3, [pc, #340]	; (8004fbc <_strerror_r+0x330>)
 8004e68:	e7a9      	b.n	8004dbe <_strerror_r+0x132>
 8004e6a:	4b55      	ldr	r3, [pc, #340]	; (8004fc0 <_strerror_r+0x334>)
 8004e6c:	e7a7      	b.n	8004dbe <_strerror_r+0x132>
 8004e6e:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <_strerror_r+0x338>)
 8004e70:	e7a5      	b.n	8004dbe <_strerror_r+0x132>
 8004e72:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <_strerror_r+0x33c>)
 8004e74:	e7a3      	b.n	8004dbe <_strerror_r+0x132>
 8004e76:	4b55      	ldr	r3, [pc, #340]	; (8004fcc <_strerror_r+0x340>)
 8004e78:	e7a1      	b.n	8004dbe <_strerror_r+0x132>
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <_strerror_r+0x344>)
 8004e7c:	e79f      	b.n	8004dbe <_strerror_r+0x132>
 8004e7e:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <_strerror_r+0x348>)
 8004e80:	e79d      	b.n	8004dbe <_strerror_r+0x132>
 8004e82:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <_strerror_r+0x34c>)
 8004e84:	e79b      	b.n	8004dbe <_strerror_r+0x132>
 8004e86:	4b55      	ldr	r3, [pc, #340]	; (8004fdc <_strerror_r+0x350>)
 8004e88:	e799      	b.n	8004dbe <_strerror_r+0x132>
 8004e8a:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <_strerror_r+0x354>)
 8004e8c:	e797      	b.n	8004dbe <_strerror_r+0x132>
 8004e8e:	4b55      	ldr	r3, [pc, #340]	; (8004fe4 <_strerror_r+0x358>)
 8004e90:	e795      	b.n	8004dbe <_strerror_r+0x132>
 8004e92:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <_strerror_r+0x35c>)
 8004e94:	e793      	b.n	8004dbe <_strerror_r+0x132>
 8004e96:	4b55      	ldr	r3, [pc, #340]	; (8004fec <_strerror_r+0x360>)
 8004e98:	e791      	b.n	8004dbe <_strerror_r+0x132>
 8004e9a:	4b55      	ldr	r3, [pc, #340]	; (8004ff0 <_strerror_r+0x364>)
 8004e9c:	e78f      	b.n	8004dbe <_strerror_r+0x132>
 8004e9e:	4b55      	ldr	r3, [pc, #340]	; (8004ff4 <_strerror_r+0x368>)
 8004ea0:	e78d      	b.n	8004dbe <_strerror_r+0x132>
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <_strerror_r+0x36c>)
 8004ea4:	e78b      	b.n	8004dbe <_strerror_r+0x132>
 8004ea6:	4b55      	ldr	r3, [pc, #340]	; (8004ffc <_strerror_r+0x370>)
 8004ea8:	e789      	b.n	8004dbe <_strerror_r+0x132>
 8004eaa:	4b55      	ldr	r3, [pc, #340]	; (8005000 <_strerror_r+0x374>)
 8004eac:	e787      	b.n	8004dbe <_strerror_r+0x132>
 8004eae:	4b55      	ldr	r3, [pc, #340]	; (8005004 <_strerror_r+0x378>)
 8004eb0:	e785      	b.n	8004dbe <_strerror_r+0x132>
 8004eb2:	4b55      	ldr	r3, [pc, #340]	; (8005008 <_strerror_r+0x37c>)
 8004eb4:	e783      	b.n	8004dbe <_strerror_r+0x132>
 8004eb6:	4b55      	ldr	r3, [pc, #340]	; (800500c <_strerror_r+0x380>)
 8004eb8:	e781      	b.n	8004dbe <_strerror_r+0x132>
 8004eba:	4b55      	ldr	r3, [pc, #340]	; (8005010 <_strerror_r+0x384>)
 8004ebc:	e77f      	b.n	8004dbe <_strerror_r+0x132>
 8004ebe:	4b55      	ldr	r3, [pc, #340]	; (8005014 <_strerror_r+0x388>)
 8004ec0:	e77d      	b.n	8004dbe <_strerror_r+0x132>
 8004ec2:	4b55      	ldr	r3, [pc, #340]	; (8005018 <_strerror_r+0x38c>)
 8004ec4:	e77b      	b.n	8004dbe <_strerror_r+0x132>
 8004ec6:	4b55      	ldr	r3, [pc, #340]	; (800501c <_strerror_r+0x390>)
 8004ec8:	e779      	b.n	8004dbe <_strerror_r+0x132>
 8004eca:	4b55      	ldr	r3, [pc, #340]	; (8005020 <_strerror_r+0x394>)
 8004ecc:	e777      	b.n	8004dbe <_strerror_r+0x132>
 8004ece:	4b55      	ldr	r3, [pc, #340]	; (8005024 <_strerror_r+0x398>)
 8004ed0:	e775      	b.n	8004dbe <_strerror_r+0x132>
 8004ed2:	4b55      	ldr	r3, [pc, #340]	; (8005028 <_strerror_r+0x39c>)
 8004ed4:	e773      	b.n	8004dbe <_strerror_r+0x132>
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <_strerror_r+0x3a0>)
 8004ed8:	e771      	b.n	8004dbe <_strerror_r+0x132>
 8004eda:	4b55      	ldr	r3, [pc, #340]	; (8005030 <_strerror_r+0x3a4>)
 8004edc:	e76f      	b.n	8004dbe <_strerror_r+0x132>
 8004ede:	4b55      	ldr	r3, [pc, #340]	; (8005034 <_strerror_r+0x3a8>)
 8004ee0:	e76d      	b.n	8004dbe <_strerror_r+0x132>
 8004ee2:	4b55      	ldr	r3, [pc, #340]	; (8005038 <_strerror_r+0x3ac>)
 8004ee4:	e76b      	b.n	8004dbe <_strerror_r+0x132>
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <_strerror_r+0x3b0>)
 8004ee8:	e769      	b.n	8004dbe <_strerror_r+0x132>
 8004eea:	4b55      	ldr	r3, [pc, #340]	; (8005040 <_strerror_r+0x3b4>)
 8004eec:	e767      	b.n	8004dbe <_strerror_r+0x132>
 8004eee:	4b55      	ldr	r3, [pc, #340]	; (8005044 <_strerror_r+0x3b8>)
 8004ef0:	e765      	b.n	8004dbe <_strerror_r+0x132>
 8004ef2:	4b55      	ldr	r3, [pc, #340]	; (8005048 <_strerror_r+0x3bc>)
 8004ef4:	e763      	b.n	8004dbe <_strerror_r+0x132>
 8004ef6:	4b55      	ldr	r3, [pc, #340]	; (800504c <_strerror_r+0x3c0>)
 8004ef8:	e761      	b.n	8004dbe <_strerror_r+0x132>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf14      	ite	ne
 8004efe:	461a      	movne	r2, r3
 8004f00:	4622      	moveq	r2, r4
 8004f02:	f000 f8a9 	bl	8005058 <_user_strerror>
 8004f06:	4b52      	ldr	r3, [pc, #328]	; (8005050 <_strerror_r+0x3c4>)
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	bf18      	it	ne
 8004f0c:	4603      	movne	r3, r0
 8004f0e:	e756      	b.n	8004dbe <_strerror_r+0x132>
 8004f10:	4b50      	ldr	r3, [pc, #320]	; (8005054 <_strerror_r+0x3c8>)
 8004f12:	e754      	b.n	8004dbe <_strerror_r+0x132>
 8004f14:	080074ac 	.word	0x080074ac
 8004f18:	080074b6 	.word	0x080074b6
 8004f1c:	080074d0 	.word	0x080074d0
 8004f20:	080074e0 	.word	0x080074e0
 8004f24:	080074f8 	.word	0x080074f8
 8004f28:	08007502 	.word	0x08007502
 8004f2c:	0800751c 	.word	0x0800751c
 8004f30:	0800752e 	.word	0x0800752e
 8004f34:	08007540 	.word	0x08007540
 8004f38:	08007559 	.word	0x08007559
 8004f3c:	08007569 	.word	0x08007569
 8004f40:	08007575 	.word	0x08007575
 8004f44:	08007592 	.word	0x08007592
 8004f48:	080075a4 	.word	0x080075a4
 8004f4c:	080075b5 	.word	0x080075b5
 8004f50:	080075c7 	.word	0x080075c7
 8004f54:	080075d3 	.word	0x080075d3
 8004f58:	080075eb 	.word	0x080075eb
 8004f5c:	080075f7 	.word	0x080075f7
 8004f60:	08007609 	.word	0x08007609
 8004f64:	08007618 	.word	0x08007618
 8004f68:	08007628 	.word	0x08007628
 8004f6c:	08007635 	.word	0x08007635
 8004f70:	08007654 	.word	0x08007654
 8004f74:	08007663 	.word	0x08007663
 8004f78:	08007674 	.word	0x08007674
 8004f7c:	08007698 	.word	0x08007698
 8004f80:	080076b6 	.word	0x080076b6
 8004f84:	080076d4 	.word	0x080076d4
 8004f88:	080076f4 	.word	0x080076f4
 8004f8c:	0800770b 	.word	0x0800770b
 8004f90:	0800771a 	.word	0x0800771a
 8004f94:	08007729 	.word	0x08007729
 8004f98:	0800773d 	.word	0x0800773d
 8004f9c:	08007755 	.word	0x08007755
 8004fa0:	08007763 	.word	0x08007763
 8004fa4:	08007770 	.word	0x08007770
 8004fa8:	08007786 	.word	0x08007786
 8004fac:	08007795 	.word	0x08007795
 8004fb0:	080077a1 	.word	0x080077a1
 8004fb4:	080077d0 	.word	0x080077d0
 8004fb8:	080077e1 	.word	0x080077e1
 8004fbc:	080077fc 	.word	0x080077fc
 8004fc0:	0800780f 	.word	0x0800780f
 8004fc4:	08007825 	.word	0x08007825
 8004fc8:	0800782e 	.word	0x0800782e
 8004fcc:	08007845 	.word	0x08007845
 8004fd0:	0800784d 	.word	0x0800784d
 8004fd4:	0800785a 	.word	0x0800785a
 8004fd8:	0800786f 	.word	0x0800786f
 8004fdc:	08007883 	.word	0x08007883
 8004fe0:	0800789b 	.word	0x0800789b
 8004fe4:	080078aa 	.word	0x080078aa
 8004fe8:	080078bb 	.word	0x080078bb
 8004fec:	080078ce 	.word	0x080078ce
 8004ff0:	080078da 	.word	0x080078da
 8004ff4:	080078f3 	.word	0x080078f3
 8004ff8:	08007907 	.word	0x08007907
 8004ffc:	08007922 	.word	0x08007922
 8005000:	0800793a 	.word	0x0800793a
 8005004:	08007954 	.word	0x08007954
 8005008:	0800795c 	.word	0x0800795c
 800500c:	0800798c 	.word	0x0800798c
 8005010:	080079ab 	.word	0x080079ab
 8005014:	080079ca 	.word	0x080079ca
 8005018:	080079e1 	.word	0x080079e1
 800501c:	080079f4 	.word	0x080079f4
 8005020:	08007a0d 	.word	0x08007a0d
 8005024:	08007a24 	.word	0x08007a24
 8005028:	08007a3a 	.word	0x08007a3a
 800502c:	08007a5b 	.word	0x08007a5b
 8005030:	08007a73 	.word	0x08007a73
 8005034:	08007a8f 	.word	0x08007a8f
 8005038:	08007aa2 	.word	0x08007aa2
 800503c:	08007ab8 	.word	0x08007ab8
 8005040:	08007acc 	.word	0x08007acc
 8005044:	08007aee 	.word	0x08007aee
 8005048:	08007b14 	.word	0x08007b14
 800504c:	08007b25 	.word	0x08007b25
 8005050:	08007dd8 	.word	0x08007dd8
 8005054:	08007b3a 	.word	0x08007b3a

08005058 <_user_strerror>:
 8005058:	2000      	movs	r0, #0
 800505a:	4770      	bx	lr

0800505c <_write_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d07      	ldr	r5, [pc, #28]	; (800507c <_write_r+0x20>)
 8005060:	4604      	mov	r4, r0
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	2200      	movs	r2, #0
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	f7fc fae6 	bl	800163c <_write>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_write_r+0x1e>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_write_r+0x1e>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200002e4 	.word	0x200002e4

08005080 <quorem>:
 8005080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	6903      	ldr	r3, [r0, #16]
 8005086:	690c      	ldr	r4, [r1, #16]
 8005088:	42a3      	cmp	r3, r4
 800508a:	4607      	mov	r7, r0
 800508c:	f2c0 8081 	blt.w	8005192 <quorem+0x112>
 8005090:	3c01      	subs	r4, #1
 8005092:	f101 0814 	add.w	r8, r1, #20
 8005096:	f100 0514 	add.w	r5, r0, #20
 800509a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050a8:	3301      	adds	r3, #1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80050b8:	d331      	bcc.n	800511e <quorem+0x9e>
 80050ba:	f04f 0e00 	mov.w	lr, #0
 80050be:	4640      	mov	r0, r8
 80050c0:	46ac      	mov	ip, r5
 80050c2:	46f2      	mov	sl, lr
 80050c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80050c8:	b293      	uxth	r3, r2
 80050ca:	fb06 e303 	mla	r3, r6, r3, lr
 80050ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ebaa 0303 	sub.w	r3, sl, r3
 80050d8:	f8dc a000 	ldr.w	sl, [ip]
 80050dc:	0c12      	lsrs	r2, r2, #16
 80050de:	fa13 f38a 	uxtah	r3, r3, sl
 80050e2:	fb06 e202 	mla	r2, r6, r2, lr
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	9b00      	ldr	r3, [sp, #0]
 80050ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ee:	b292      	uxth	r2, r2
 80050f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80050fc:	4581      	cmp	r9, r0
 80050fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005102:	f84c 3b04 	str.w	r3, [ip], #4
 8005106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800510a:	d2db      	bcs.n	80050c4 <quorem+0x44>
 800510c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005110:	b92b      	cbnz	r3, 800511e <quorem+0x9e>
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	3b04      	subs	r3, #4
 8005116:	429d      	cmp	r5, r3
 8005118:	461a      	mov	r2, r3
 800511a:	d32e      	bcc.n	800517a <quorem+0xfa>
 800511c:	613c      	str	r4, [r7, #16]
 800511e:	4638      	mov	r0, r7
 8005120:	f001 fabe 	bl	80066a0 <__mcmp>
 8005124:	2800      	cmp	r0, #0
 8005126:	db24      	blt.n	8005172 <quorem+0xf2>
 8005128:	3601      	adds	r6, #1
 800512a:	4628      	mov	r0, r5
 800512c:	f04f 0c00 	mov.w	ip, #0
 8005130:	f858 2b04 	ldr.w	r2, [r8], #4
 8005134:	f8d0 e000 	ldr.w	lr, [r0]
 8005138:	b293      	uxth	r3, r2
 800513a:	ebac 0303 	sub.w	r3, ip, r3
 800513e:	0c12      	lsrs	r2, r2, #16
 8005140:	fa13 f38e 	uxtah	r3, r3, lr
 8005144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005152:	45c1      	cmp	r9, r8
 8005154:	f840 3b04 	str.w	r3, [r0], #4
 8005158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800515c:	d2e8      	bcs.n	8005130 <quorem+0xb0>
 800515e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005166:	b922      	cbnz	r2, 8005172 <quorem+0xf2>
 8005168:	3b04      	subs	r3, #4
 800516a:	429d      	cmp	r5, r3
 800516c:	461a      	mov	r2, r3
 800516e:	d30a      	bcc.n	8005186 <quorem+0x106>
 8005170:	613c      	str	r4, [r7, #16]
 8005172:	4630      	mov	r0, r6
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	3b04      	subs	r3, #4
 800517e:	2a00      	cmp	r2, #0
 8005180:	d1cc      	bne.n	800511c <quorem+0x9c>
 8005182:	3c01      	subs	r4, #1
 8005184:	e7c7      	b.n	8005116 <quorem+0x96>
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	3b04      	subs	r3, #4
 800518a:	2a00      	cmp	r2, #0
 800518c:	d1f0      	bne.n	8005170 <quorem+0xf0>
 800518e:	3c01      	subs	r4, #1
 8005190:	e7eb      	b.n	800516a <quorem+0xea>
 8005192:	2000      	movs	r0, #0
 8005194:	e7ee      	b.n	8005174 <quorem+0xf4>
	...

08005198 <_dtoa_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	ed2d 8b04 	vpush	{d8-d9}
 80051a0:	ec57 6b10 	vmov	r6, r7, d0
 80051a4:	b093      	sub	sp, #76	; 0x4c
 80051a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051ac:	9106      	str	r1, [sp, #24]
 80051ae:	ee10 aa10 	vmov	sl, s0
 80051b2:	4604      	mov	r4, r0
 80051b4:	9209      	str	r2, [sp, #36]	; 0x24
 80051b6:	930c      	str	r3, [sp, #48]	; 0x30
 80051b8:	46bb      	mov	fp, r7
 80051ba:	b975      	cbnz	r5, 80051da <_dtoa_r+0x42>
 80051bc:	2010      	movs	r0, #16
 80051be:	f000 ffd7 	bl	8006170 <malloc>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6260      	str	r0, [r4, #36]	; 0x24
 80051c6:	b920      	cbnz	r0, 80051d2 <_dtoa_r+0x3a>
 80051c8:	4ba7      	ldr	r3, [pc, #668]	; (8005468 <_dtoa_r+0x2d0>)
 80051ca:	21ea      	movs	r1, #234	; 0xea
 80051cc:	48a7      	ldr	r0, [pc, #668]	; (800546c <_dtoa_r+0x2d4>)
 80051ce:	f001 fecd 	bl	8006f6c <__assert_func>
 80051d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051d6:	6005      	str	r5, [r0, #0]
 80051d8:	60c5      	str	r5, [r0, #12]
 80051da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	b151      	cbz	r1, 80051f6 <_dtoa_r+0x5e>
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	604a      	str	r2, [r1, #4]
 80051e4:	2301      	movs	r3, #1
 80051e6:	4093      	lsls	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
 80051ea:	4620      	mov	r0, r4
 80051ec:	f001 f816 	bl	800621c <_Bfree>
 80051f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	1e3b      	subs	r3, r7, #0
 80051f8:	bfaa      	itet	ge
 80051fa:	2300      	movge	r3, #0
 80051fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005200:	f8c8 3000 	strge.w	r3, [r8]
 8005204:	4b9a      	ldr	r3, [pc, #616]	; (8005470 <_dtoa_r+0x2d8>)
 8005206:	bfbc      	itt	lt
 8005208:	2201      	movlt	r2, #1
 800520a:	f8c8 2000 	strlt.w	r2, [r8]
 800520e:	ea33 030b 	bics.w	r3, r3, fp
 8005212:	d11b      	bne.n	800524c <_dtoa_r+0xb4>
 8005214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005216:	f242 730f 	movw	r3, #9999	; 0x270f
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005220:	4333      	orrs	r3, r6
 8005222:	f000 8592 	beq.w	8005d4a <_dtoa_r+0xbb2>
 8005226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005228:	b963      	cbnz	r3, 8005244 <_dtoa_r+0xac>
 800522a:	4b92      	ldr	r3, [pc, #584]	; (8005474 <_dtoa_r+0x2dc>)
 800522c:	e022      	b.n	8005274 <_dtoa_r+0xdc>
 800522e:	4b92      	ldr	r3, [pc, #584]	; (8005478 <_dtoa_r+0x2e0>)
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	3308      	adds	r3, #8
 8005234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	9801      	ldr	r0, [sp, #4]
 800523a:	b013      	add	sp, #76	; 0x4c
 800523c:	ecbd 8b04 	vpop	{d8-d9}
 8005240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005244:	4b8b      	ldr	r3, [pc, #556]	; (8005474 <_dtoa_r+0x2dc>)
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	3303      	adds	r3, #3
 800524a:	e7f3      	b.n	8005234 <_dtoa_r+0x9c>
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fb fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005258:	ec4b ab19 	vmov	d9, sl, fp
 800525c:	4680      	mov	r8, r0
 800525e:	b158      	cbz	r0, 8005278 <_dtoa_r+0xe0>
 8005260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005262:	2301      	movs	r3, #1
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 856b 	beq.w	8005d44 <_dtoa_r+0xbac>
 800526e:	4883      	ldr	r0, [pc, #524]	; (800547c <_dtoa_r+0x2e4>)
 8005270:	6018      	str	r0, [r3, #0]
 8005272:	1e43      	subs	r3, r0, #1
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	e7df      	b.n	8005238 <_dtoa_r+0xa0>
 8005278:	ec4b ab10 	vmov	d0, sl, fp
 800527c:	aa10      	add	r2, sp, #64	; 0x40
 800527e:	a911      	add	r1, sp, #68	; 0x44
 8005280:	4620      	mov	r0, r4
 8005282:	f001 fab3 	bl	80067ec <__d2b>
 8005286:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800528a:	ee08 0a10 	vmov	s16, r0
 800528e:	2d00      	cmp	r5, #0
 8005290:	f000 8084 	beq.w	800539c <_dtoa_r+0x204>
 8005294:	ee19 3a90 	vmov	r3, s19
 8005298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800529c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80052a0:	4656      	mov	r6, sl
 80052a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80052a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80052ae:	4b74      	ldr	r3, [pc, #464]	; (8005480 <_dtoa_r+0x2e8>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4630      	mov	r0, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	f7fa ffe7 	bl	8000288 <__aeabi_dsub>
 80052ba:	a365      	add	r3, pc, #404	; (adr r3, 8005450 <_dtoa_r+0x2b8>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fb f99a 	bl	80005f8 <__aeabi_dmul>
 80052c4:	a364      	add	r3, pc, #400	; (adr r3, 8005458 <_dtoa_r+0x2c0>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f7fa ffdf 	bl	800028c <__adddf3>
 80052ce:	4606      	mov	r6, r0
 80052d0:	4628      	mov	r0, r5
 80052d2:	460f      	mov	r7, r1
 80052d4:	f7fb f926 	bl	8000524 <__aeabi_i2d>
 80052d8:	a361      	add	r3, pc, #388	; (adr r3, 8005460 <_dtoa_r+0x2c8>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb f98b 	bl	80005f8 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fa ffcf 	bl	800028c <__adddf3>
 80052ee:	4606      	mov	r6, r0
 80052f0:	460f      	mov	r7, r1
 80052f2:	f7fb fc31 	bl	8000b58 <__aeabi_d2iz>
 80052f6:	2200      	movs	r2, #0
 80052f8:	9000      	str	r0, [sp, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	4630      	mov	r0, r6
 80052fe:	4639      	mov	r1, r7
 8005300:	f7fb fbec 	bl	8000adc <__aeabi_dcmplt>
 8005304:	b150      	cbz	r0, 800531c <_dtoa_r+0x184>
 8005306:	9800      	ldr	r0, [sp, #0]
 8005308:	f7fb f90c 	bl	8000524 <__aeabi_i2d>
 800530c:	4632      	mov	r2, r6
 800530e:	463b      	mov	r3, r7
 8005310:	f7fb fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005314:	b910      	cbnz	r0, 800531c <_dtoa_r+0x184>
 8005316:	9b00      	ldr	r3, [sp, #0]
 8005318:	3b01      	subs	r3, #1
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	2b16      	cmp	r3, #22
 8005320:	d85a      	bhi.n	80053d8 <_dtoa_r+0x240>
 8005322:	9a00      	ldr	r2, [sp, #0]
 8005324:	4b57      	ldr	r3, [pc, #348]	; (8005484 <_dtoa_r+0x2ec>)
 8005326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	ec51 0b19 	vmov	r0, r1, d9
 8005332:	f7fb fbd3 	bl	8000adc <__aeabi_dcmplt>
 8005336:	2800      	cmp	r0, #0
 8005338:	d050      	beq.n	80053dc <_dtoa_r+0x244>
 800533a:	9b00      	ldr	r3, [sp, #0]
 800533c:	3b01      	subs	r3, #1
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2300      	movs	r3, #0
 8005342:	930b      	str	r3, [sp, #44]	; 0x2c
 8005344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005346:	1b5d      	subs	r5, r3, r5
 8005348:	1e6b      	subs	r3, r5, #1
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	bf45      	ittet	mi
 800534e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005352:	9304      	strmi	r3, [sp, #16]
 8005354:	2300      	movpl	r3, #0
 8005356:	2300      	movmi	r3, #0
 8005358:	bf4c      	ite	mi
 800535a:	9305      	strmi	r3, [sp, #20]
 800535c:	9304      	strpl	r3, [sp, #16]
 800535e:	9b00      	ldr	r3, [sp, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	db3d      	blt.n	80053e0 <_dtoa_r+0x248>
 8005364:	9b05      	ldr	r3, [sp, #20]
 8005366:	9a00      	ldr	r2, [sp, #0]
 8005368:	920a      	str	r2, [sp, #40]	; 0x28
 800536a:	4413      	add	r3, r2
 800536c:	9305      	str	r3, [sp, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	9b06      	ldr	r3, [sp, #24]
 8005374:	2b09      	cmp	r3, #9
 8005376:	f200 8089 	bhi.w	800548c <_dtoa_r+0x2f4>
 800537a:	2b05      	cmp	r3, #5
 800537c:	bfc4      	itt	gt
 800537e:	3b04      	subgt	r3, #4
 8005380:	9306      	strgt	r3, [sp, #24]
 8005382:	9b06      	ldr	r3, [sp, #24]
 8005384:	f1a3 0302 	sub.w	r3, r3, #2
 8005388:	bfcc      	ite	gt
 800538a:	2500      	movgt	r5, #0
 800538c:	2501      	movle	r5, #1
 800538e:	2b03      	cmp	r3, #3
 8005390:	f200 8087 	bhi.w	80054a2 <_dtoa_r+0x30a>
 8005394:	e8df f003 	tbb	[pc, r3]
 8005398:	59383a2d 	.word	0x59383a2d
 800539c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80053a0:	441d      	add	r5, r3
 80053a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	bfc1      	itttt	gt
 80053aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80053b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80053b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80053ba:	bfda      	itte	le
 80053bc:	f1c3 0320 	rsble	r3, r3, #32
 80053c0:	fa06 f003 	lslle.w	r0, r6, r3
 80053c4:	4318      	orrgt	r0, r3
 80053c6:	f7fb f89d 	bl	8000504 <__aeabi_ui2d>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4606      	mov	r6, r0
 80053ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053d2:	3d01      	subs	r5, #1
 80053d4:	930e      	str	r3, [sp, #56]	; 0x38
 80053d6:	e76a      	b.n	80052ae <_dtoa_r+0x116>
 80053d8:	2301      	movs	r3, #1
 80053da:	e7b2      	b.n	8005342 <_dtoa_r+0x1aa>
 80053dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80053de:	e7b1      	b.n	8005344 <_dtoa_r+0x1ac>
 80053e0:	9b04      	ldr	r3, [sp, #16]
 80053e2:	9a00      	ldr	r2, [sp, #0]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	4253      	negs	r3, r2
 80053ea:	9307      	str	r3, [sp, #28]
 80053ec:	2300      	movs	r3, #0
 80053ee:	930a      	str	r3, [sp, #40]	; 0x28
 80053f0:	e7bf      	b.n	8005372 <_dtoa_r+0x1da>
 80053f2:	2300      	movs	r3, #0
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	dc55      	bgt.n	80054a8 <_dtoa_r+0x310>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005402:	461a      	mov	r2, r3
 8005404:	9209      	str	r2, [sp, #36]	; 0x24
 8005406:	e00c      	b.n	8005422 <_dtoa_r+0x28a>
 8005408:	2301      	movs	r3, #1
 800540a:	e7f3      	b.n	80053f4 <_dtoa_r+0x25c>
 800540c:	2300      	movs	r3, #0
 800540e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005410:	9308      	str	r3, [sp, #32]
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	4413      	add	r3, r2
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	3301      	adds	r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	bfb8      	it	lt
 8005420:	2301      	movlt	r3, #1
 8005422:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005424:	2200      	movs	r2, #0
 8005426:	6042      	str	r2, [r0, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	f102 0614 	add.w	r6, r2, #20
 800542e:	429e      	cmp	r6, r3
 8005430:	6841      	ldr	r1, [r0, #4]
 8005432:	d93d      	bls.n	80054b0 <_dtoa_r+0x318>
 8005434:	4620      	mov	r0, r4
 8005436:	f000 feb1 	bl	800619c <_Balloc>
 800543a:	9001      	str	r0, [sp, #4]
 800543c:	2800      	cmp	r0, #0
 800543e:	d13b      	bne.n	80054b8 <_dtoa_r+0x320>
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <_dtoa_r+0x2f0>)
 8005442:	4602      	mov	r2, r0
 8005444:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005448:	e6c0      	b.n	80051cc <_dtoa_r+0x34>
 800544a:	2301      	movs	r3, #1
 800544c:	e7df      	b.n	800540e <_dtoa_r+0x276>
 800544e:	bf00      	nop
 8005450:	636f4361 	.word	0x636f4361
 8005454:	3fd287a7 	.word	0x3fd287a7
 8005458:	8b60c8b3 	.word	0x8b60c8b3
 800545c:	3fc68a28 	.word	0x3fc68a28
 8005460:	509f79fb 	.word	0x509f79fb
 8005464:	3fd34413 	.word	0x3fd34413
 8005468:	08007b4f 	.word	0x08007b4f
 800546c:	08007b66 	.word	0x08007b66
 8005470:	7ff00000 	.word	0x7ff00000
 8005474:	08007b4b 	.word	0x08007b4b
 8005478:	08007b42 	.word	0x08007b42
 800547c:	08007489 	.word	0x08007489
 8005480:	3ff80000 	.word	0x3ff80000
 8005484:	08007cb8 	.word	0x08007cb8
 8005488:	08007bc1 	.word	0x08007bc1
 800548c:	2501      	movs	r5, #1
 800548e:	2300      	movs	r3, #0
 8005490:	9306      	str	r3, [sp, #24]
 8005492:	9508      	str	r5, [sp, #32]
 8005494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005498:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	2312      	movs	r3, #18
 80054a0:	e7b0      	b.n	8005404 <_dtoa_r+0x26c>
 80054a2:	2301      	movs	r3, #1
 80054a4:	9308      	str	r3, [sp, #32]
 80054a6:	e7f5      	b.n	8005494 <_dtoa_r+0x2fc>
 80054a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054ae:	e7b8      	b.n	8005422 <_dtoa_r+0x28a>
 80054b0:	3101      	adds	r1, #1
 80054b2:	6041      	str	r1, [r0, #4]
 80054b4:	0052      	lsls	r2, r2, #1
 80054b6:	e7b8      	b.n	800542a <_dtoa_r+0x292>
 80054b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ba:	9a01      	ldr	r2, [sp, #4]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	2b0e      	cmp	r3, #14
 80054c2:	f200 809d 	bhi.w	8005600 <_dtoa_r+0x468>
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	f000 809a 	beq.w	8005600 <_dtoa_r+0x468>
 80054cc:	9b00      	ldr	r3, [sp, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dd32      	ble.n	8005538 <_dtoa_r+0x3a0>
 80054d2:	4ab7      	ldr	r2, [pc, #732]	; (80057b0 <_dtoa_r+0x618>)
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054e0:	9b00      	ldr	r3, [sp, #0]
 80054e2:	05d8      	lsls	r0, r3, #23
 80054e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80054e8:	d516      	bpl.n	8005518 <_dtoa_r+0x380>
 80054ea:	4bb2      	ldr	r3, [pc, #712]	; (80057b4 <_dtoa_r+0x61c>)
 80054ec:	ec51 0b19 	vmov	r0, r1, d9
 80054f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054f4:	f7fb f9aa 	bl	800084c <__aeabi_ddiv>
 80054f8:	f007 070f 	and.w	r7, r7, #15
 80054fc:	4682      	mov	sl, r0
 80054fe:	468b      	mov	fp, r1
 8005500:	2503      	movs	r5, #3
 8005502:	4eac      	ldr	r6, [pc, #688]	; (80057b4 <_dtoa_r+0x61c>)
 8005504:	b957      	cbnz	r7, 800551c <_dtoa_r+0x384>
 8005506:	4642      	mov	r2, r8
 8005508:	464b      	mov	r3, r9
 800550a:	4650      	mov	r0, sl
 800550c:	4659      	mov	r1, fp
 800550e:	f7fb f99d 	bl	800084c <__aeabi_ddiv>
 8005512:	4682      	mov	sl, r0
 8005514:	468b      	mov	fp, r1
 8005516:	e028      	b.n	800556a <_dtoa_r+0x3d2>
 8005518:	2502      	movs	r5, #2
 800551a:	e7f2      	b.n	8005502 <_dtoa_r+0x36a>
 800551c:	07f9      	lsls	r1, r7, #31
 800551e:	d508      	bpl.n	8005532 <_dtoa_r+0x39a>
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005528:	f7fb f866 	bl	80005f8 <__aeabi_dmul>
 800552c:	3501      	adds	r5, #1
 800552e:	4680      	mov	r8, r0
 8005530:	4689      	mov	r9, r1
 8005532:	107f      	asrs	r7, r7, #1
 8005534:	3608      	adds	r6, #8
 8005536:	e7e5      	b.n	8005504 <_dtoa_r+0x36c>
 8005538:	f000 809b 	beq.w	8005672 <_dtoa_r+0x4da>
 800553c:	9b00      	ldr	r3, [sp, #0]
 800553e:	4f9d      	ldr	r7, [pc, #628]	; (80057b4 <_dtoa_r+0x61c>)
 8005540:	425e      	negs	r6, r3
 8005542:	4b9b      	ldr	r3, [pc, #620]	; (80057b0 <_dtoa_r+0x618>)
 8005544:	f006 020f 	and.w	r2, r6, #15
 8005548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	ec51 0b19 	vmov	r0, r1, d9
 8005554:	f7fb f850 	bl	80005f8 <__aeabi_dmul>
 8005558:	1136      	asrs	r6, r6, #4
 800555a:	4682      	mov	sl, r0
 800555c:	468b      	mov	fp, r1
 800555e:	2300      	movs	r3, #0
 8005560:	2502      	movs	r5, #2
 8005562:	2e00      	cmp	r6, #0
 8005564:	d17a      	bne.n	800565c <_dtoa_r+0x4c4>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1d3      	bne.n	8005512 <_dtoa_r+0x37a>
 800556a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8082 	beq.w	8005676 <_dtoa_r+0x4de>
 8005572:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <_dtoa_r+0x620>)
 8005574:	2200      	movs	r2, #0
 8005576:	4650      	mov	r0, sl
 8005578:	4659      	mov	r1, fp
 800557a:	f7fb faaf 	bl	8000adc <__aeabi_dcmplt>
 800557e:	2800      	cmp	r0, #0
 8005580:	d079      	beq.n	8005676 <_dtoa_r+0x4de>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d076      	beq.n	8005676 <_dtoa_r+0x4de>
 8005588:	9b02      	ldr	r3, [sp, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd36      	ble.n	80055fc <_dtoa_r+0x464>
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	4650      	mov	r0, sl
 8005592:	4659      	mov	r1, fp
 8005594:	1e5f      	subs	r7, r3, #1
 8005596:	2200      	movs	r2, #0
 8005598:	4b88      	ldr	r3, [pc, #544]	; (80057bc <_dtoa_r+0x624>)
 800559a:	f7fb f82d 	bl	80005f8 <__aeabi_dmul>
 800559e:	9e02      	ldr	r6, [sp, #8]
 80055a0:	4682      	mov	sl, r0
 80055a2:	468b      	mov	fp, r1
 80055a4:	3501      	adds	r5, #1
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7fa ffbc 	bl	8000524 <__aeabi_i2d>
 80055ac:	4652      	mov	r2, sl
 80055ae:	465b      	mov	r3, fp
 80055b0:	f7fb f822 	bl	80005f8 <__aeabi_dmul>
 80055b4:	4b82      	ldr	r3, [pc, #520]	; (80057c0 <_dtoa_r+0x628>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	f7fa fe68 	bl	800028c <__adddf3>
 80055bc:	46d0      	mov	r8, sl
 80055be:	46d9      	mov	r9, fp
 80055c0:	4682      	mov	sl, r0
 80055c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	d158      	bne.n	800567c <_dtoa_r+0x4e4>
 80055ca:	4b7e      	ldr	r3, [pc, #504]	; (80057c4 <_dtoa_r+0x62c>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	4640      	mov	r0, r8
 80055d0:	4649      	mov	r1, r9
 80055d2:	f7fa fe59 	bl	8000288 <__aeabi_dsub>
 80055d6:	4652      	mov	r2, sl
 80055d8:	465b      	mov	r3, fp
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	f7fb fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f040 8295 	bne.w	8005b12 <_dtoa_r+0x97a>
 80055e8:	4652      	mov	r2, sl
 80055ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fb fa73 	bl	8000adc <__aeabi_dcmplt>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	f040 8289 	bne.w	8005b0e <_dtoa_r+0x976>
 80055fc:	ec5b ab19 	vmov	sl, fp, d9
 8005600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005602:	2b00      	cmp	r3, #0
 8005604:	f2c0 8148 	blt.w	8005898 <_dtoa_r+0x700>
 8005608:	9a00      	ldr	r2, [sp, #0]
 800560a:	2a0e      	cmp	r2, #14
 800560c:	f300 8144 	bgt.w	8005898 <_dtoa_r+0x700>
 8005610:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <_dtoa_r+0x618>)
 8005612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005616:	e9d3 8900 	ldrd	r8, r9, [r3]
 800561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	f280 80d5 	bge.w	80057cc <_dtoa_r+0x634>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f300 80d1 	bgt.w	80057cc <_dtoa_r+0x634>
 800562a:	f040 826f 	bne.w	8005b0c <_dtoa_r+0x974>
 800562e:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <_dtoa_r+0x62c>)
 8005630:	2200      	movs	r2, #0
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa ffdf 	bl	80005f8 <__aeabi_dmul>
 800563a:	4652      	mov	r2, sl
 800563c:	465b      	mov	r3, fp
 800563e:	f7fb fa61 	bl	8000b04 <__aeabi_dcmpge>
 8005642:	9e03      	ldr	r6, [sp, #12]
 8005644:	4637      	mov	r7, r6
 8005646:	2800      	cmp	r0, #0
 8005648:	f040 8245 	bne.w	8005ad6 <_dtoa_r+0x93e>
 800564c:	9d01      	ldr	r5, [sp, #4]
 800564e:	2331      	movs	r3, #49	; 0x31
 8005650:	f805 3b01 	strb.w	r3, [r5], #1
 8005654:	9b00      	ldr	r3, [sp, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	e240      	b.n	8005ade <_dtoa_r+0x946>
 800565c:	07f2      	lsls	r2, r6, #31
 800565e:	d505      	bpl.n	800566c <_dtoa_r+0x4d4>
 8005660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005664:	f7fa ffc8 	bl	80005f8 <__aeabi_dmul>
 8005668:	3501      	adds	r5, #1
 800566a:	2301      	movs	r3, #1
 800566c:	1076      	asrs	r6, r6, #1
 800566e:	3708      	adds	r7, #8
 8005670:	e777      	b.n	8005562 <_dtoa_r+0x3ca>
 8005672:	2502      	movs	r5, #2
 8005674:	e779      	b.n	800556a <_dtoa_r+0x3d2>
 8005676:	9f00      	ldr	r7, [sp, #0]
 8005678:	9e03      	ldr	r6, [sp, #12]
 800567a:	e794      	b.n	80055a6 <_dtoa_r+0x40e>
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	4b4c      	ldr	r3, [pc, #304]	; (80057b0 <_dtoa_r+0x618>)
 8005680:	4431      	add	r1, r6
 8005682:	910d      	str	r1, [sp, #52]	; 0x34
 8005684:	9908      	ldr	r1, [sp, #32]
 8005686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800568a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800568e:	2900      	cmp	r1, #0
 8005690:	d043      	beq.n	800571a <_dtoa_r+0x582>
 8005692:	494d      	ldr	r1, [pc, #308]	; (80057c8 <_dtoa_r+0x630>)
 8005694:	2000      	movs	r0, #0
 8005696:	f7fb f8d9 	bl	800084c <__aeabi_ddiv>
 800569a:	4652      	mov	r2, sl
 800569c:	465b      	mov	r3, fp
 800569e:	f7fa fdf3 	bl	8000288 <__aeabi_dsub>
 80056a2:	9d01      	ldr	r5, [sp, #4]
 80056a4:	4682      	mov	sl, r0
 80056a6:	468b      	mov	fp, r1
 80056a8:	4649      	mov	r1, r9
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7fb fa54 	bl	8000b58 <__aeabi_d2iz>
 80056b0:	4606      	mov	r6, r0
 80056b2:	f7fa ff37 	bl	8000524 <__aeabi_i2d>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fa fde3 	bl	8000288 <__aeabi_dsub>
 80056c2:	3630      	adds	r6, #48	; 0x30
 80056c4:	f805 6b01 	strb.w	r6, [r5], #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	465b      	mov	r3, fp
 80056cc:	4680      	mov	r8, r0
 80056ce:	4689      	mov	r9, r1
 80056d0:	f7fb fa04 	bl	8000adc <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d163      	bne.n	80057a0 <_dtoa_r+0x608>
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	4936      	ldr	r1, [pc, #216]	; (80057b8 <_dtoa_r+0x620>)
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fa fdd2 	bl	8000288 <__aeabi_dsub>
 80056e4:	4652      	mov	r2, sl
 80056e6:	465b      	mov	r3, fp
 80056e8:	f7fb f9f8 	bl	8000adc <__aeabi_dcmplt>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	f040 80b5 	bne.w	800585c <_dtoa_r+0x6c4>
 80056f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f4:	429d      	cmp	r5, r3
 80056f6:	d081      	beq.n	80055fc <_dtoa_r+0x464>
 80056f8:	4b30      	ldr	r3, [pc, #192]	; (80057bc <_dtoa_r+0x624>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	4650      	mov	r0, sl
 80056fe:	4659      	mov	r1, fp
 8005700:	f7fa ff7a 	bl	80005f8 <__aeabi_dmul>
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <_dtoa_r+0x624>)
 8005706:	4682      	mov	sl, r0
 8005708:	468b      	mov	fp, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	2200      	movs	r2, #0
 8005710:	f7fa ff72 	bl	80005f8 <__aeabi_dmul>
 8005714:	4680      	mov	r8, r0
 8005716:	4689      	mov	r9, r1
 8005718:	e7c6      	b.n	80056a8 <_dtoa_r+0x510>
 800571a:	4650      	mov	r0, sl
 800571c:	4659      	mov	r1, fp
 800571e:	f7fa ff6b 	bl	80005f8 <__aeabi_dmul>
 8005722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005724:	9d01      	ldr	r5, [sp, #4]
 8005726:	930f      	str	r3, [sp, #60]	; 0x3c
 8005728:	4682      	mov	sl, r0
 800572a:	468b      	mov	fp, r1
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	f7fb fa12 	bl	8000b58 <__aeabi_d2iz>
 8005734:	4606      	mov	r6, r0
 8005736:	f7fa fef5 	bl	8000524 <__aeabi_i2d>
 800573a:	3630      	adds	r6, #48	; 0x30
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fa fda0 	bl	8000288 <__aeabi_dsub>
 8005748:	f805 6b01 	strb.w	r6, [r5], #1
 800574c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574e:	429d      	cmp	r5, r3
 8005750:	4680      	mov	r8, r0
 8005752:	4689      	mov	r9, r1
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	d124      	bne.n	80057a4 <_dtoa_r+0x60c>
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <_dtoa_r+0x630>)
 800575c:	4650      	mov	r0, sl
 800575e:	4659      	mov	r1, fp
 8005760:	f7fa fd94 	bl	800028c <__adddf3>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fb f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 8005770:	2800      	cmp	r0, #0
 8005772:	d173      	bne.n	800585c <_dtoa_r+0x6c4>
 8005774:	4652      	mov	r2, sl
 8005776:	465b      	mov	r3, fp
 8005778:	4913      	ldr	r1, [pc, #76]	; (80057c8 <_dtoa_r+0x630>)
 800577a:	2000      	movs	r0, #0
 800577c:	f7fa fd84 	bl	8000288 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4640      	mov	r0, r8
 8005786:	4649      	mov	r1, r9
 8005788:	f7fb f9a8 	bl	8000adc <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	f43f af35 	beq.w	80055fc <_dtoa_r+0x464>
 8005792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005794:	1e6b      	subs	r3, r5, #1
 8005796:	930f      	str	r3, [sp, #60]	; 0x3c
 8005798:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d0f8      	beq.n	8005792 <_dtoa_r+0x5fa>
 80057a0:	9700      	str	r7, [sp, #0]
 80057a2:	e049      	b.n	8005838 <_dtoa_r+0x6a0>
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <_dtoa_r+0x624>)
 80057a6:	f7fa ff27 	bl	80005f8 <__aeabi_dmul>
 80057aa:	4680      	mov	r8, r0
 80057ac:	4689      	mov	r9, r1
 80057ae:	e7bd      	b.n	800572c <_dtoa_r+0x594>
 80057b0:	08007cb8 	.word	0x08007cb8
 80057b4:	08007c90 	.word	0x08007c90
 80057b8:	3ff00000 	.word	0x3ff00000
 80057bc:	40240000 	.word	0x40240000
 80057c0:	401c0000 	.word	0x401c0000
 80057c4:	40140000 	.word	0x40140000
 80057c8:	3fe00000 	.word	0x3fe00000
 80057cc:	9d01      	ldr	r5, [sp, #4]
 80057ce:	4656      	mov	r6, sl
 80057d0:	465f      	mov	r7, fp
 80057d2:	4642      	mov	r2, r8
 80057d4:	464b      	mov	r3, r9
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fb f837 	bl	800084c <__aeabi_ddiv>
 80057de:	f7fb f9bb 	bl	8000b58 <__aeabi_d2iz>
 80057e2:	4682      	mov	sl, r0
 80057e4:	f7fa fe9e 	bl	8000524 <__aeabi_i2d>
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	f7fa ff04 	bl	80005f8 <__aeabi_dmul>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057fc:	f7fa fd44 	bl	8000288 <__aeabi_dsub>
 8005800:	f805 6b01 	strb.w	r6, [r5], #1
 8005804:	9e01      	ldr	r6, [sp, #4]
 8005806:	9f03      	ldr	r7, [sp, #12]
 8005808:	1bae      	subs	r6, r5, r6
 800580a:	42b7      	cmp	r7, r6
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	d135      	bne.n	800587e <_dtoa_r+0x6e6>
 8005812:	f7fa fd3b 	bl	800028c <__adddf3>
 8005816:	4642      	mov	r2, r8
 8005818:	464b      	mov	r3, r9
 800581a:	4606      	mov	r6, r0
 800581c:	460f      	mov	r7, r1
 800581e:	f7fb f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8005822:	b9d0      	cbnz	r0, 800585a <_dtoa_r+0x6c2>
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f7fb f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005830:	b110      	cbz	r0, 8005838 <_dtoa_r+0x6a0>
 8005832:	f01a 0f01 	tst.w	sl, #1
 8005836:	d110      	bne.n	800585a <_dtoa_r+0x6c2>
 8005838:	4620      	mov	r0, r4
 800583a:	ee18 1a10 	vmov	r1, s16
 800583e:	f000 fced 	bl	800621c <_Bfree>
 8005842:	2300      	movs	r3, #0
 8005844:	9800      	ldr	r0, [sp, #0]
 8005846:	702b      	strb	r3, [r5, #0]
 8005848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800584a:	3001      	adds	r0, #1
 800584c:	6018      	str	r0, [r3, #0]
 800584e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005850:	2b00      	cmp	r3, #0
 8005852:	f43f acf1 	beq.w	8005238 <_dtoa_r+0xa0>
 8005856:	601d      	str	r5, [r3, #0]
 8005858:	e4ee      	b.n	8005238 <_dtoa_r+0xa0>
 800585a:	9f00      	ldr	r7, [sp, #0]
 800585c:	462b      	mov	r3, r5
 800585e:	461d      	mov	r5, r3
 8005860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005864:	2a39      	cmp	r2, #57	; 0x39
 8005866:	d106      	bne.n	8005876 <_dtoa_r+0x6de>
 8005868:	9a01      	ldr	r2, [sp, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d1f7      	bne.n	800585e <_dtoa_r+0x6c6>
 800586e:	9901      	ldr	r1, [sp, #4]
 8005870:	2230      	movs	r2, #48	; 0x30
 8005872:	3701      	adds	r7, #1
 8005874:	700a      	strb	r2, [r1, #0]
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	3201      	adds	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e790      	b.n	80057a0 <_dtoa_r+0x608>
 800587e:	4ba6      	ldr	r3, [pc, #664]	; (8005b18 <_dtoa_r+0x980>)
 8005880:	2200      	movs	r2, #0
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	f7fb f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005892:	2800      	cmp	r0, #0
 8005894:	d09d      	beq.n	80057d2 <_dtoa_r+0x63a>
 8005896:	e7cf      	b.n	8005838 <_dtoa_r+0x6a0>
 8005898:	9a08      	ldr	r2, [sp, #32]
 800589a:	2a00      	cmp	r2, #0
 800589c:	f000 80d7 	beq.w	8005a4e <_dtoa_r+0x8b6>
 80058a0:	9a06      	ldr	r2, [sp, #24]
 80058a2:	2a01      	cmp	r2, #1
 80058a4:	f300 80ba 	bgt.w	8005a1c <_dtoa_r+0x884>
 80058a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	f000 80b2 	beq.w	8005a14 <_dtoa_r+0x87c>
 80058b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058b4:	9e07      	ldr	r6, [sp, #28]
 80058b6:	9d04      	ldr	r5, [sp, #16]
 80058b8:	9a04      	ldr	r2, [sp, #16]
 80058ba:	441a      	add	r2, r3
 80058bc:	9204      	str	r2, [sp, #16]
 80058be:	9a05      	ldr	r2, [sp, #20]
 80058c0:	2101      	movs	r1, #1
 80058c2:	441a      	add	r2, r3
 80058c4:	4620      	mov	r0, r4
 80058c6:	9205      	str	r2, [sp, #20]
 80058c8:	f000 fd60 	bl	800638c <__i2b>
 80058cc:	4607      	mov	r7, r0
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	dd0c      	ble.n	80058ec <_dtoa_r+0x754>
 80058d2:	9b05      	ldr	r3, [sp, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dd09      	ble.n	80058ec <_dtoa_r+0x754>
 80058d8:	42ab      	cmp	r3, r5
 80058da:	9a04      	ldr	r2, [sp, #16]
 80058dc:	bfa8      	it	ge
 80058de:	462b      	movge	r3, r5
 80058e0:	1ad2      	subs	r2, r2, r3
 80058e2:	9204      	str	r2, [sp, #16]
 80058e4:	9a05      	ldr	r2, [sp, #20]
 80058e6:	1aed      	subs	r5, r5, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	b31b      	cbz	r3, 8005938 <_dtoa_r+0x7a0>
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80af 	beq.w	8005a56 <_dtoa_r+0x8be>
 80058f8:	2e00      	cmp	r6, #0
 80058fa:	dd13      	ble.n	8005924 <_dtoa_r+0x78c>
 80058fc:	4639      	mov	r1, r7
 80058fe:	4632      	mov	r2, r6
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fe03 	bl	800650c <__pow5mult>
 8005906:	ee18 2a10 	vmov	r2, s16
 800590a:	4601      	mov	r1, r0
 800590c:	4607      	mov	r7, r0
 800590e:	4620      	mov	r0, r4
 8005910:	f000 fd52 	bl	80063b8 <__multiply>
 8005914:	ee18 1a10 	vmov	r1, s16
 8005918:	4680      	mov	r8, r0
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fc7e 	bl	800621c <_Bfree>
 8005920:	ee08 8a10 	vmov	s16, r8
 8005924:	9b07      	ldr	r3, [sp, #28]
 8005926:	1b9a      	subs	r2, r3, r6
 8005928:	d006      	beq.n	8005938 <_dtoa_r+0x7a0>
 800592a:	ee18 1a10 	vmov	r1, s16
 800592e:	4620      	mov	r0, r4
 8005930:	f000 fdec 	bl	800650c <__pow5mult>
 8005934:	ee08 0a10 	vmov	s16, r0
 8005938:	2101      	movs	r1, #1
 800593a:	4620      	mov	r0, r4
 800593c:	f000 fd26 	bl	800638c <__i2b>
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	4606      	mov	r6, r0
 8005946:	f340 8088 	ble.w	8005a5a <_dtoa_r+0x8c2>
 800594a:	461a      	mov	r2, r3
 800594c:	4601      	mov	r1, r0
 800594e:	4620      	mov	r0, r4
 8005950:	f000 fddc 	bl	800650c <__pow5mult>
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	4606      	mov	r6, r0
 800595a:	f340 8081 	ble.w	8005a60 <_dtoa_r+0x8c8>
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	6933      	ldr	r3, [r6, #16]
 8005964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005968:	6918      	ldr	r0, [r3, #16]
 800596a:	f000 fcbf 	bl	80062ec <__hi0bits>
 800596e:	f1c0 0020 	rsb	r0, r0, #32
 8005972:	9b05      	ldr	r3, [sp, #20]
 8005974:	4418      	add	r0, r3
 8005976:	f010 001f 	ands.w	r0, r0, #31
 800597a:	f000 8092 	beq.w	8005aa2 <_dtoa_r+0x90a>
 800597e:	f1c0 0320 	rsb	r3, r0, #32
 8005982:	2b04      	cmp	r3, #4
 8005984:	f340 808a 	ble.w	8005a9c <_dtoa_r+0x904>
 8005988:	f1c0 001c 	rsb	r0, r0, #28
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	4403      	add	r3, r0
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	4403      	add	r3, r0
 8005996:	4405      	add	r5, r0
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	dd07      	ble.n	80059b0 <_dtoa_r+0x818>
 80059a0:	ee18 1a10 	vmov	r1, s16
 80059a4:	461a      	mov	r2, r3
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 fe0a 	bl	80065c0 <__lshift>
 80059ac:	ee08 0a10 	vmov	s16, r0
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dd05      	ble.n	80059c2 <_dtoa_r+0x82a>
 80059b6:	4631      	mov	r1, r6
 80059b8:	461a      	mov	r2, r3
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fe00 	bl	80065c0 <__lshift>
 80059c0:	4606      	mov	r6, r0
 80059c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d06e      	beq.n	8005aa6 <_dtoa_r+0x90e>
 80059c8:	ee18 0a10 	vmov	r0, s16
 80059cc:	4631      	mov	r1, r6
 80059ce:	f000 fe67 	bl	80066a0 <__mcmp>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	da67      	bge.n	8005aa6 <_dtoa_r+0x90e>
 80059d6:	9b00      	ldr	r3, [sp, #0]
 80059d8:	3b01      	subs	r3, #1
 80059da:	ee18 1a10 	vmov	r1, s16
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	220a      	movs	r2, #10
 80059e2:	2300      	movs	r3, #0
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fc3b 	bl	8006260 <__multadd>
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	ee08 0a10 	vmov	s16, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 81b1 	beq.w	8005d58 <_dtoa_r+0xbc0>
 80059f6:	2300      	movs	r3, #0
 80059f8:	4639      	mov	r1, r7
 80059fa:	220a      	movs	r2, #10
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fc2f 	bl	8006260 <__multadd>
 8005a02:	9b02      	ldr	r3, [sp, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	4607      	mov	r7, r0
 8005a08:	f300 808e 	bgt.w	8005b28 <_dtoa_r+0x990>
 8005a0c:	9b06      	ldr	r3, [sp, #24]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	dc51      	bgt.n	8005ab6 <_dtoa_r+0x91e>
 8005a12:	e089      	b.n	8005b28 <_dtoa_r+0x990>
 8005a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a1a:	e74b      	b.n	80058b4 <_dtoa_r+0x71c>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	1e5e      	subs	r6, r3, #1
 8005a20:	9b07      	ldr	r3, [sp, #28]
 8005a22:	42b3      	cmp	r3, r6
 8005a24:	bfbf      	itttt	lt
 8005a26:	9b07      	ldrlt	r3, [sp, #28]
 8005a28:	9607      	strlt	r6, [sp, #28]
 8005a2a:	1af2      	sublt	r2, r6, r3
 8005a2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a2e:	bfb6      	itet	lt
 8005a30:	189b      	addlt	r3, r3, r2
 8005a32:	1b9e      	subge	r6, r3, r6
 8005a34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	bfb8      	it	lt
 8005a3a:	2600      	movlt	r6, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfb7      	itett	lt
 8005a40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a48:	1a9d      	sublt	r5, r3, r2
 8005a4a:	2300      	movlt	r3, #0
 8005a4c:	e734      	b.n	80058b8 <_dtoa_r+0x720>
 8005a4e:	9e07      	ldr	r6, [sp, #28]
 8005a50:	9d04      	ldr	r5, [sp, #16]
 8005a52:	9f08      	ldr	r7, [sp, #32]
 8005a54:	e73b      	b.n	80058ce <_dtoa_r+0x736>
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	e767      	b.n	800592a <_dtoa_r+0x792>
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	dc18      	bgt.n	8005a92 <_dtoa_r+0x8fa>
 8005a60:	f1ba 0f00 	cmp.w	sl, #0
 8005a64:	d115      	bne.n	8005a92 <_dtoa_r+0x8fa>
 8005a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a6a:	b993      	cbnz	r3, 8005a92 <_dtoa_r+0x8fa>
 8005a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a70:	0d1b      	lsrs	r3, r3, #20
 8005a72:	051b      	lsls	r3, r3, #20
 8005a74:	b183      	cbz	r3, 8005a98 <_dtoa_r+0x900>
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	9b05      	ldr	r3, [sp, #20]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	f04f 0801 	mov.w	r8, #1
 8005a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f47f af6a 	bne.w	8005962 <_dtoa_r+0x7ca>
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e76f      	b.n	8005972 <_dtoa_r+0x7da>
 8005a92:	f04f 0800 	mov.w	r8, #0
 8005a96:	e7f6      	b.n	8005a86 <_dtoa_r+0x8ee>
 8005a98:	4698      	mov	r8, r3
 8005a9a:	e7f4      	b.n	8005a86 <_dtoa_r+0x8ee>
 8005a9c:	f43f af7d 	beq.w	800599a <_dtoa_r+0x802>
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	301c      	adds	r0, #28
 8005aa4:	e772      	b.n	800598c <_dtoa_r+0x7f4>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc37      	bgt.n	8005b1c <_dtoa_r+0x984>
 8005aac:	9b06      	ldr	r3, [sp, #24]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	dd34      	ble.n	8005b1c <_dtoa_r+0x984>
 8005ab2:	9b03      	ldr	r3, [sp, #12]
 8005ab4:	9302      	str	r3, [sp, #8]
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	b96b      	cbnz	r3, 8005ad6 <_dtoa_r+0x93e>
 8005aba:	4631      	mov	r1, r6
 8005abc:	2205      	movs	r2, #5
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fbce 	bl	8006260 <__multadd>
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	ee18 0a10 	vmov	r0, s16
 8005acc:	f000 fde8 	bl	80066a0 <__mcmp>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	f73f adbb 	bgt.w	800564c <_dtoa_r+0x4b4>
 8005ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad8:	9d01      	ldr	r5, [sp, #4]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fb99 	bl	800621c <_Bfree>
 8005aea:	2f00      	cmp	r7, #0
 8005aec:	f43f aea4 	beq.w	8005838 <_dtoa_r+0x6a0>
 8005af0:	f1b8 0f00 	cmp.w	r8, #0
 8005af4:	d005      	beq.n	8005b02 <_dtoa_r+0x96a>
 8005af6:	45b8      	cmp	r8, r7
 8005af8:	d003      	beq.n	8005b02 <_dtoa_r+0x96a>
 8005afa:	4641      	mov	r1, r8
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb8d 	bl	800621c <_Bfree>
 8005b02:	4639      	mov	r1, r7
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 fb89 	bl	800621c <_Bfree>
 8005b0a:	e695      	b.n	8005838 <_dtoa_r+0x6a0>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	4637      	mov	r7, r6
 8005b10:	e7e1      	b.n	8005ad6 <_dtoa_r+0x93e>
 8005b12:	9700      	str	r7, [sp, #0]
 8005b14:	4637      	mov	r7, r6
 8005b16:	e599      	b.n	800564c <_dtoa_r+0x4b4>
 8005b18:	40240000 	.word	0x40240000
 8005b1c:	9b08      	ldr	r3, [sp, #32]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80ca 	beq.w	8005cb8 <_dtoa_r+0xb20>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	dd05      	ble.n	8005b38 <_dtoa_r+0x9a0>
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fd45 	bl	80065c0 <__lshift>
 8005b36:	4607      	mov	r7, r0
 8005b38:	f1b8 0f00 	cmp.w	r8, #0
 8005b3c:	d05b      	beq.n	8005bf6 <_dtoa_r+0xa5e>
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fb2b 	bl	800619c <_Balloc>
 8005b46:	4605      	mov	r5, r0
 8005b48:	b928      	cbnz	r0, 8005b56 <_dtoa_r+0x9be>
 8005b4a:	4b87      	ldr	r3, [pc, #540]	; (8005d68 <_dtoa_r+0xbd0>)
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b52:	f7ff bb3b 	b.w	80051cc <_dtoa_r+0x34>
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	3202      	adds	r2, #2
 8005b5a:	0092      	lsls	r2, r2, #2
 8005b5c:	f107 010c 	add.w	r1, r7, #12
 8005b60:	300c      	adds	r0, #12
 8005b62:	f000 fb0d 	bl	8006180 <memcpy>
 8005b66:	2201      	movs	r2, #1
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 fd28 	bl	80065c0 <__lshift>
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	f103 0901 	add.w	r9, r3, #1
 8005b76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	f00a 0301 	and.w	r3, sl, #1
 8005b82:	46b8      	mov	r8, r7
 8005b84:	9304      	str	r3, [sp, #16]
 8005b86:	4607      	mov	r7, r0
 8005b88:	4631      	mov	r1, r6
 8005b8a:	ee18 0a10 	vmov	r0, s16
 8005b8e:	f7ff fa77 	bl	8005080 <quorem>
 8005b92:	4641      	mov	r1, r8
 8005b94:	9002      	str	r0, [sp, #8]
 8005b96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b9a:	ee18 0a10 	vmov	r0, s16
 8005b9e:	f000 fd7f 	bl	80066a0 <__mcmp>
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	9003      	str	r0, [sp, #12]
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 fd95 	bl	80066d8 <__mdiff>
 8005bae:	68c2      	ldr	r2, [r0, #12]
 8005bb0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	bb02      	cbnz	r2, 8005bfa <_dtoa_r+0xa62>
 8005bb8:	4601      	mov	r1, r0
 8005bba:	ee18 0a10 	vmov	r0, s16
 8005bbe:	f000 fd6f 	bl	80066a0 <__mcmp>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	9207      	str	r2, [sp, #28]
 8005bca:	f000 fb27 	bl	800621c <_Bfree>
 8005bce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005bd2:	ea43 0102 	orr.w	r1, r3, r2
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	464d      	mov	r5, r9
 8005bdc:	d10f      	bne.n	8005bfe <_dtoa_r+0xa66>
 8005bde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005be2:	d02a      	beq.n	8005c3a <_dtoa_r+0xaa2>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dd02      	ble.n	8005bf0 <_dtoa_r+0xa58>
 8005bea:	9b02      	ldr	r3, [sp, #8]
 8005bec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005bf0:	f88b a000 	strb.w	sl, [fp]
 8005bf4:	e775      	b.n	8005ae2 <_dtoa_r+0x94a>
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	e7ba      	b.n	8005b70 <_dtoa_r+0x9d8>
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	e7e2      	b.n	8005bc4 <_dtoa_r+0xa2c>
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db04      	blt.n	8005c0e <_dtoa_r+0xa76>
 8005c04:	9906      	ldr	r1, [sp, #24]
 8005c06:	430b      	orrs	r3, r1
 8005c08:	9904      	ldr	r1, [sp, #16]
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	d122      	bne.n	8005c54 <_dtoa_r+0xabc>
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	ddee      	ble.n	8005bf0 <_dtoa_r+0xa58>
 8005c12:	ee18 1a10 	vmov	r1, s16
 8005c16:	2201      	movs	r2, #1
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fcd1 	bl	80065c0 <__lshift>
 8005c1e:	4631      	mov	r1, r6
 8005c20:	ee08 0a10 	vmov	s16, r0
 8005c24:	f000 fd3c 	bl	80066a0 <__mcmp>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	dc03      	bgt.n	8005c34 <_dtoa_r+0xa9c>
 8005c2c:	d1e0      	bne.n	8005bf0 <_dtoa_r+0xa58>
 8005c2e:	f01a 0f01 	tst.w	sl, #1
 8005c32:	d0dd      	beq.n	8005bf0 <_dtoa_r+0xa58>
 8005c34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c38:	d1d7      	bne.n	8005bea <_dtoa_r+0xa52>
 8005c3a:	2339      	movs	r3, #57	; 0x39
 8005c3c:	f88b 3000 	strb.w	r3, [fp]
 8005c40:	462b      	mov	r3, r5
 8005c42:	461d      	mov	r5, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c4a:	2a39      	cmp	r2, #57	; 0x39
 8005c4c:	d071      	beq.n	8005d32 <_dtoa_r+0xb9a>
 8005c4e:	3201      	adds	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e746      	b.n	8005ae2 <_dtoa_r+0x94a>
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	dd07      	ble.n	8005c68 <_dtoa_r+0xad0>
 8005c58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c5c:	d0ed      	beq.n	8005c3a <_dtoa_r+0xaa2>
 8005c5e:	f10a 0301 	add.w	r3, sl, #1
 8005c62:	f88b 3000 	strb.w	r3, [fp]
 8005c66:	e73c      	b.n	8005ae2 <_dtoa_r+0x94a>
 8005c68:	9b05      	ldr	r3, [sp, #20]
 8005c6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c6e:	4599      	cmp	r9, r3
 8005c70:	d047      	beq.n	8005d02 <_dtoa_r+0xb6a>
 8005c72:	ee18 1a10 	vmov	r1, s16
 8005c76:	2300      	movs	r3, #0
 8005c78:	220a      	movs	r2, #10
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 faf0 	bl	8006260 <__multadd>
 8005c80:	45b8      	cmp	r8, r7
 8005c82:	ee08 0a10 	vmov	s16, r0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	f04f 020a 	mov.w	r2, #10
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4620      	mov	r0, r4
 8005c92:	d106      	bne.n	8005ca2 <_dtoa_r+0xb0a>
 8005c94:	f000 fae4 	bl	8006260 <__multadd>
 8005c98:	4680      	mov	r8, r0
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	f109 0901 	add.w	r9, r9, #1
 8005ca0:	e772      	b.n	8005b88 <_dtoa_r+0x9f0>
 8005ca2:	f000 fadd 	bl	8006260 <__multadd>
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4680      	mov	r8, r0
 8005caa:	2300      	movs	r3, #0
 8005cac:	220a      	movs	r2, #10
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fad6 	bl	8006260 <__multadd>
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	e7f1      	b.n	8005c9c <_dtoa_r+0xb04>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	9302      	str	r3, [sp, #8]
 8005cbc:	9d01      	ldr	r5, [sp, #4]
 8005cbe:	ee18 0a10 	vmov	r0, s16
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	f7ff f9dc 	bl	8005080 <quorem>
 8005cc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	f805 ab01 	strb.w	sl, [r5], #1
 8005cd2:	1aea      	subs	r2, r5, r3
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	dd09      	ble.n	8005cee <_dtoa_r+0xb56>
 8005cda:	ee18 1a10 	vmov	r1, s16
 8005cde:	2300      	movs	r3, #0
 8005ce0:	220a      	movs	r2, #10
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fabc 	bl	8006260 <__multadd>
 8005ce8:	ee08 0a10 	vmov	s16, r0
 8005cec:	e7e7      	b.n	8005cbe <_dtoa_r+0xb26>
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bfc8      	it	gt
 8005cf4:	461d      	movgt	r5, r3
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	bfd8      	it	le
 8005cfa:	2501      	movle	r5, #1
 8005cfc:	441d      	add	r5, r3
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	ee18 1a10 	vmov	r1, s16
 8005d06:	2201      	movs	r2, #1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fc59 	bl	80065c0 <__lshift>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	ee08 0a10 	vmov	s16, r0
 8005d14:	f000 fcc4 	bl	80066a0 <__mcmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	dc91      	bgt.n	8005c40 <_dtoa_r+0xaa8>
 8005d1c:	d102      	bne.n	8005d24 <_dtoa_r+0xb8c>
 8005d1e:	f01a 0f01 	tst.w	sl, #1
 8005d22:	d18d      	bne.n	8005c40 <_dtoa_r+0xaa8>
 8005d24:	462b      	mov	r3, r5
 8005d26:	461d      	mov	r5, r3
 8005d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d2c:	2a30      	cmp	r2, #48	; 0x30
 8005d2e:	d0fa      	beq.n	8005d26 <_dtoa_r+0xb8e>
 8005d30:	e6d7      	b.n	8005ae2 <_dtoa_r+0x94a>
 8005d32:	9a01      	ldr	r2, [sp, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d184      	bne.n	8005c42 <_dtoa_r+0xaaa>
 8005d38:	9b00      	ldr	r3, [sp, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	2331      	movs	r3, #49	; 0x31
 8005d40:	7013      	strb	r3, [r2, #0]
 8005d42:	e6ce      	b.n	8005ae2 <_dtoa_r+0x94a>
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <_dtoa_r+0xbd4>)
 8005d46:	f7ff ba95 	b.w	8005274 <_dtoa_r+0xdc>
 8005d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f aa6e 	bne.w	800522e <_dtoa_r+0x96>
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <_dtoa_r+0xbd8>)
 8005d54:	f7ff ba8e 	b.w	8005274 <_dtoa_r+0xdc>
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	dcae      	bgt.n	8005cbc <_dtoa_r+0xb24>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f73f aea8 	bgt.w	8005ab6 <_dtoa_r+0x91e>
 8005d66:	e7a9      	b.n	8005cbc <_dtoa_r+0xb24>
 8005d68:	08007bc1 	.word	0x08007bc1
 8005d6c:	08007488 	.word	0x08007488
 8005d70:	08007b42 	.word	0x08007b42

08005d74 <__sflush_r>:
 8005d74:	898a      	ldrh	r2, [r1, #12]
 8005d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	0710      	lsls	r0, r2, #28
 8005d7e:	460c      	mov	r4, r1
 8005d80:	d458      	bmi.n	8005e34 <__sflush_r+0xc0>
 8005d82:	684b      	ldr	r3, [r1, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dc05      	bgt.n	8005d94 <__sflush_r+0x20>
 8005d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dc02      	bgt.n	8005d94 <__sflush_r+0x20>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	d0f9      	beq.n	8005d8e <__sflush_r+0x1a>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005da0:	682f      	ldr	r7, [r5, #0]
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	d032      	beq.n	8005e0c <__sflush_r+0x98>
 8005da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	075a      	lsls	r2, r3, #29
 8005dac:	d505      	bpl.n	8005dba <__sflush_r+0x46>
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	1ac0      	subs	r0, r0, r3
 8005db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005db4:	b10b      	cbz	r3, 8005dba <__sflush_r+0x46>
 8005db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db8:	1ac0      	subs	r0, r0, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b0      	blx	r6
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	d106      	bne.n	8005dda <__sflush_r+0x66>
 8005dcc:	6829      	ldr	r1, [r5, #0]
 8005dce:	291d      	cmp	r1, #29
 8005dd0:	d82c      	bhi.n	8005e2c <__sflush_r+0xb8>
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <__sflush_r+0x108>)
 8005dd4:	40ca      	lsrs	r2, r1
 8005dd6:	07d6      	lsls	r6, r2, #31
 8005dd8:	d528      	bpl.n	8005e2c <__sflush_r+0xb8>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	6062      	str	r2, [r4, #4]
 8005dde:	04d9      	lsls	r1, r3, #19
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	6022      	str	r2, [r4, #0]
 8005de4:	d504      	bpl.n	8005df0 <__sflush_r+0x7c>
 8005de6:	1c42      	adds	r2, r0, #1
 8005de8:	d101      	bne.n	8005dee <__sflush_r+0x7a>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	b903      	cbnz	r3, 8005df0 <__sflush_r+0x7c>
 8005dee:	6560      	str	r0, [r4, #84]	; 0x54
 8005df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005df2:	602f      	str	r7, [r5, #0]
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d0ca      	beq.n	8005d8e <__sflush_r+0x1a>
 8005df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	d002      	beq.n	8005e06 <__sflush_r+0x92>
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 fd65 	bl	80068d0 <_free_r>
 8005e06:	2000      	movs	r0, #0
 8005e08:	6360      	str	r0, [r4, #52]	; 0x34
 8005e0a:	e7c1      	b.n	8005d90 <__sflush_r+0x1c>
 8005e0c:	6a21      	ldr	r1, [r4, #32]
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b0      	blx	r6
 8005e14:	1c41      	adds	r1, r0, #1
 8005e16:	d1c7      	bne.n	8005da8 <__sflush_r+0x34>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c4      	beq.n	8005da8 <__sflush_r+0x34>
 8005e1e:	2b1d      	cmp	r3, #29
 8005e20:	d001      	beq.n	8005e26 <__sflush_r+0xb2>
 8005e22:	2b16      	cmp	r3, #22
 8005e24:	d101      	bne.n	8005e2a <__sflush_r+0xb6>
 8005e26:	602f      	str	r7, [r5, #0]
 8005e28:	e7b1      	b.n	8005d8e <__sflush_r+0x1a>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7ad      	b.n	8005d90 <__sflush_r+0x1c>
 8005e34:	690f      	ldr	r7, [r1, #16]
 8005e36:	2f00      	cmp	r7, #0
 8005e38:	d0a9      	beq.n	8005d8e <__sflush_r+0x1a>
 8005e3a:	0793      	lsls	r3, r2, #30
 8005e3c:	680e      	ldr	r6, [r1, #0]
 8005e3e:	bf08      	it	eq
 8005e40:	694b      	ldreq	r3, [r1, #20]
 8005e42:	600f      	str	r7, [r1, #0]
 8005e44:	bf18      	it	ne
 8005e46:	2300      	movne	r3, #0
 8005e48:	eba6 0807 	sub.w	r8, r6, r7
 8005e4c:	608b      	str	r3, [r1, #8]
 8005e4e:	f1b8 0f00 	cmp.w	r8, #0
 8005e52:	dd9c      	ble.n	8005d8e <__sflush_r+0x1a>
 8005e54:	6a21      	ldr	r1, [r4, #32]
 8005e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e58:	4643      	mov	r3, r8
 8005e5a:	463a      	mov	r2, r7
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b0      	blx	r6
 8005e60:	2800      	cmp	r0, #0
 8005e62:	dc06      	bgt.n	8005e72 <__sflush_r+0xfe>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e70:	e78e      	b.n	8005d90 <__sflush_r+0x1c>
 8005e72:	4407      	add	r7, r0
 8005e74:	eba8 0800 	sub.w	r8, r8, r0
 8005e78:	e7e9      	b.n	8005e4e <__sflush_r+0xda>
 8005e7a:	bf00      	nop
 8005e7c:	20400001 	.word	0x20400001

08005e80 <_fflush_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	4605      	mov	r5, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	b913      	cbnz	r3, 8005e90 <_fflush_r+0x10>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	b118      	cbz	r0, 8005e9a <_fflush_r+0x1a>
 8005e92:	6983      	ldr	r3, [r0, #24]
 8005e94:	b90b      	cbnz	r3, 8005e9a <_fflush_r+0x1a>
 8005e96:	f000 f8c5 	bl	8006024 <__sinit>
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <_fflush_r+0x6c>)
 8005e9c:	429c      	cmp	r4, r3
 8005e9e:	d11b      	bne.n	8005ed8 <_fflush_r+0x58>
 8005ea0:	686c      	ldr	r4, [r5, #4]
 8005ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ef      	beq.n	8005e8a <_fflush_r+0xa>
 8005eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eac:	07d0      	lsls	r0, r2, #31
 8005eae:	d404      	bmi.n	8005eba <_fflush_r+0x3a>
 8005eb0:	0599      	lsls	r1, r3, #22
 8005eb2:	d402      	bmi.n	8005eba <_fflush_r+0x3a>
 8005eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb6:	f000 f958 	bl	800616a <__retarget_lock_acquire_recursive>
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	f7ff ff59 	bl	8005d74 <__sflush_r>
 8005ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec4:	07da      	lsls	r2, r3, #31
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	d4e0      	bmi.n	8005e8c <_fflush_r+0xc>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	059b      	lsls	r3, r3, #22
 8005ece:	d4dd      	bmi.n	8005e8c <_fflush_r+0xc>
 8005ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed2:	f000 f94b 	bl	800616c <__retarget_lock_release_recursive>
 8005ed6:	e7d9      	b.n	8005e8c <_fflush_r+0xc>
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <_fflush_r+0x70>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d101      	bne.n	8005ee2 <_fflush_r+0x62>
 8005ede:	68ac      	ldr	r4, [r5, #8]
 8005ee0:	e7df      	b.n	8005ea2 <_fflush_r+0x22>
 8005ee2:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <_fflush_r+0x74>)
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	bf08      	it	eq
 8005ee8:	68ec      	ldreq	r4, [r5, #12]
 8005eea:	e7da      	b.n	8005ea2 <_fflush_r+0x22>
 8005eec:	08007bf4 	.word	0x08007bf4
 8005ef0:	08007c14 	.word	0x08007c14
 8005ef4:	08007bd4 	.word	0x08007bd4

08005ef8 <fileno>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	4e1a      	ldr	r6, [pc, #104]	; (8005f64 <fileno+0x6c>)
 8005efc:	6835      	ldr	r5, [r6, #0]
 8005efe:	4604      	mov	r4, r0
 8005f00:	b125      	cbz	r5, 8005f0c <fileno+0x14>
 8005f02:	69ab      	ldr	r3, [r5, #24]
 8005f04:	b913      	cbnz	r3, 8005f0c <fileno+0x14>
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f88c 	bl	8006024 <__sinit>
 8005f0c:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <fileno+0x70>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d118      	bne.n	8005f44 <fileno+0x4c>
 8005f12:	686c      	ldr	r4, [r5, #4]
 8005f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f16:	07d8      	lsls	r0, r3, #31
 8005f18:	d405      	bmi.n	8005f26 <fileno+0x2e>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	0599      	lsls	r1, r3, #22
 8005f1e:	d402      	bmi.n	8005f26 <fileno+0x2e>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f000 f922 	bl	800616a <__retarget_lock_acquire_recursive>
 8005f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2a:	b1ab      	cbz	r3, 8005f58 <fileno+0x60>
 8005f2c:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8005f30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f32:	07d2      	lsls	r2, r2, #31
 8005f34:	d404      	bmi.n	8005f40 <fileno+0x48>
 8005f36:	059b      	lsls	r3, r3, #22
 8005f38:	d402      	bmi.n	8005f40 <fileno+0x48>
 8005f3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3c:	f000 f916 	bl	800616c <__retarget_lock_release_recursive>
 8005f40:	4628      	mov	r0, r5
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <fileno+0x74>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <fileno+0x56>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7e2      	b.n	8005f14 <fileno+0x1c>
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <fileno+0x78>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	bf08      	it	eq
 8005f54:	68ec      	ldreq	r4, [r5, #12]
 8005f56:	e7dd      	b.n	8005f14 <fileno+0x1c>
 8005f58:	6832      	ldr	r2, [r6, #0]
 8005f5a:	2109      	movs	r1, #9
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f62:	e7e5      	b.n	8005f30 <fileno+0x38>
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	08007bf4 	.word	0x08007bf4
 8005f6c:	08007c14 	.word	0x08007c14
 8005f70:	08007bd4 	.word	0x08007bd4

08005f74 <std>:
 8005f74:	2300      	movs	r3, #0
 8005f76:	b510      	push	{r4, lr}
 8005f78:	4604      	mov	r4, r0
 8005f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f82:	6083      	str	r3, [r0, #8]
 8005f84:	8181      	strh	r1, [r0, #12]
 8005f86:	6643      	str	r3, [r0, #100]	; 0x64
 8005f88:	81c2      	strh	r2, [r0, #14]
 8005f8a:	6183      	str	r3, [r0, #24]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	2208      	movs	r2, #8
 8005f90:	305c      	adds	r0, #92	; 0x5c
 8005f92:	f7fe f94f 	bl	8004234 <memset>
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x38>)
 8005f98:	6263      	str	r3, [r4, #36]	; 0x24
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <std+0x3c>)
 8005f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <std+0x40>)
 8005fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <std+0x44>)
 8005fa4:	6224      	str	r4, [r4, #32]
 8005fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	08006d65 	.word	0x08006d65
 8005fb0:	08006d87 	.word	0x08006d87
 8005fb4:	08006dbf 	.word	0x08006dbf
 8005fb8:	08006de3 	.word	0x08006de3

08005fbc <_cleanup_r>:
 8005fbc:	4901      	ldr	r1, [pc, #4]	; (8005fc4 <_cleanup_r+0x8>)
 8005fbe:	f000 b8af 	b.w	8006120 <_fwalk_reent>
 8005fc2:	bf00      	nop
 8005fc4:	08005e81 	.word	0x08005e81

08005fc8 <__sfmoreglue>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	2268      	movs	r2, #104	; 0x68
 8005fcc:	1e4d      	subs	r5, r1, #1
 8005fce:	4355      	muls	r5, r2
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fd6:	f000 fce7 	bl	80069a8 <_malloc_r>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	b140      	cbz	r0, 8005ff0 <__sfmoreglue+0x28>
 8005fde:	2100      	movs	r1, #0
 8005fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8005fe4:	300c      	adds	r0, #12
 8005fe6:	60a0      	str	r0, [r4, #8]
 8005fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fec:	f7fe f922 	bl	8004234 <memset>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}

08005ff4 <__sfp_lock_acquire>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sfp_lock_acquire+0x8>)
 8005ff6:	f000 b8b8 	b.w	800616a <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	200002d9 	.word	0x200002d9

08006000 <__sfp_lock_release>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sfp_lock_release+0x8>)
 8006002:	f000 b8b3 	b.w	800616c <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	200002d9 	.word	0x200002d9

0800600c <__sinit_lock_acquire>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__sinit_lock_acquire+0x8>)
 800600e:	f000 b8ac 	b.w	800616a <__retarget_lock_acquire_recursive>
 8006012:	bf00      	nop
 8006014:	200002da 	.word	0x200002da

08006018 <__sinit_lock_release>:
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <__sinit_lock_release+0x8>)
 800601a:	f000 b8a7 	b.w	800616c <__retarget_lock_release_recursive>
 800601e:	bf00      	nop
 8006020:	200002da 	.word	0x200002da

08006024 <__sinit>:
 8006024:	b510      	push	{r4, lr}
 8006026:	4604      	mov	r4, r0
 8006028:	f7ff fff0 	bl	800600c <__sinit_lock_acquire>
 800602c:	69a3      	ldr	r3, [r4, #24]
 800602e:	b11b      	cbz	r3, 8006038 <__sinit+0x14>
 8006030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006034:	f7ff bff0 	b.w	8006018 <__sinit_lock_release>
 8006038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800603c:	6523      	str	r3, [r4, #80]	; 0x50
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <__sinit+0x68>)
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <__sinit+0x6c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	62a2      	str	r2, [r4, #40]	; 0x28
 8006046:	42a3      	cmp	r3, r4
 8006048:	bf04      	itt	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	61a3      	streq	r3, [r4, #24]
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f820 	bl	8006094 <__sfp>
 8006054:	6060      	str	r0, [r4, #4]
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f81c 	bl	8006094 <__sfp>
 800605c:	60a0      	str	r0, [r4, #8]
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f818 	bl	8006094 <__sfp>
 8006064:	2200      	movs	r2, #0
 8006066:	60e0      	str	r0, [r4, #12]
 8006068:	2104      	movs	r1, #4
 800606a:	6860      	ldr	r0, [r4, #4]
 800606c:	f7ff ff82 	bl	8005f74 <std>
 8006070:	68a0      	ldr	r0, [r4, #8]
 8006072:	2201      	movs	r2, #1
 8006074:	2109      	movs	r1, #9
 8006076:	f7ff ff7d 	bl	8005f74 <std>
 800607a:	68e0      	ldr	r0, [r4, #12]
 800607c:	2202      	movs	r2, #2
 800607e:	2112      	movs	r1, #18
 8006080:	f7ff ff78 	bl	8005f74 <std>
 8006084:	2301      	movs	r3, #1
 8006086:	61a3      	str	r3, [r4, #24]
 8006088:	e7d2      	b.n	8006030 <__sinit+0xc>
 800608a:	bf00      	nop
 800608c:	08007474 	.word	0x08007474
 8006090:	08005fbd 	.word	0x08005fbd

08006094 <__sfp>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	4607      	mov	r7, r0
 8006098:	f7ff ffac 	bl	8005ff4 <__sfp_lock_acquire>
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <__sfp+0x84>)
 800609e:	681e      	ldr	r6, [r3, #0]
 80060a0:	69b3      	ldr	r3, [r6, #24]
 80060a2:	b913      	cbnz	r3, 80060aa <__sfp+0x16>
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ffbd 	bl	8006024 <__sinit>
 80060aa:	3648      	adds	r6, #72	; 0x48
 80060ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	d503      	bpl.n	80060bc <__sfp+0x28>
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	b30b      	cbz	r3, 80060fc <__sfp+0x68>
 80060b8:	6836      	ldr	r6, [r6, #0]
 80060ba:	e7f7      	b.n	80060ac <__sfp+0x18>
 80060bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060c0:	b9d5      	cbnz	r5, 80060f8 <__sfp+0x64>
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <__sfp+0x88>)
 80060c4:	60e3      	str	r3, [r4, #12]
 80060c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060ca:	6665      	str	r5, [r4, #100]	; 0x64
 80060cc:	f000 f84c 	bl	8006168 <__retarget_lock_init_recursive>
 80060d0:	f7ff ff96 	bl	8006000 <__sfp_lock_release>
 80060d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060dc:	6025      	str	r5, [r4, #0]
 80060de:	61a5      	str	r5, [r4, #24]
 80060e0:	2208      	movs	r2, #8
 80060e2:	4629      	mov	r1, r5
 80060e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060e8:	f7fe f8a4 	bl	8004234 <memset>
 80060ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060f4:	4620      	mov	r0, r4
 80060f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f8:	3468      	adds	r4, #104	; 0x68
 80060fa:	e7d9      	b.n	80060b0 <__sfp+0x1c>
 80060fc:	2104      	movs	r1, #4
 80060fe:	4638      	mov	r0, r7
 8006100:	f7ff ff62 	bl	8005fc8 <__sfmoreglue>
 8006104:	4604      	mov	r4, r0
 8006106:	6030      	str	r0, [r6, #0]
 8006108:	2800      	cmp	r0, #0
 800610a:	d1d5      	bne.n	80060b8 <__sfp+0x24>
 800610c:	f7ff ff78 	bl	8006000 <__sfp_lock_release>
 8006110:	230c      	movs	r3, #12
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	e7ee      	b.n	80060f4 <__sfp+0x60>
 8006116:	bf00      	nop
 8006118:	08007474 	.word	0x08007474
 800611c:	ffff0001 	.word	0xffff0001

08006120 <_fwalk_reent>:
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	4606      	mov	r6, r0
 8006126:	4688      	mov	r8, r1
 8006128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800612c:	2700      	movs	r7, #0
 800612e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006132:	f1b9 0901 	subs.w	r9, r9, #1
 8006136:	d505      	bpl.n	8006144 <_fwalk_reent+0x24>
 8006138:	6824      	ldr	r4, [r4, #0]
 800613a:	2c00      	cmp	r4, #0
 800613c:	d1f7      	bne.n	800612e <_fwalk_reent+0xe>
 800613e:	4638      	mov	r0, r7
 8006140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006144:	89ab      	ldrh	r3, [r5, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d907      	bls.n	800615a <_fwalk_reent+0x3a>
 800614a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800614e:	3301      	adds	r3, #1
 8006150:	d003      	beq.n	800615a <_fwalk_reent+0x3a>
 8006152:	4629      	mov	r1, r5
 8006154:	4630      	mov	r0, r6
 8006156:	47c0      	blx	r8
 8006158:	4307      	orrs	r7, r0
 800615a:	3568      	adds	r5, #104	; 0x68
 800615c:	e7e9      	b.n	8006132 <_fwalk_reent+0x12>
	...

08006160 <_localeconv_r>:
 8006160:	4800      	ldr	r0, [pc, #0]	; (8006164 <_localeconv_r+0x4>)
 8006162:	4770      	bx	lr
 8006164:	20000160 	.word	0x20000160

08006168 <__retarget_lock_init_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_acquire_recursive>:
 800616a:	4770      	bx	lr

0800616c <__retarget_lock_release_recursive>:
 800616c:	4770      	bx	lr
	...

08006170 <malloc>:
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <malloc+0xc>)
 8006172:	4601      	mov	r1, r0
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	f000 bc17 	b.w	80069a8 <_malloc_r>
 800617a:	bf00      	nop
 800617c:	2000000c 	.word	0x2000000c

08006180 <memcpy>:
 8006180:	440a      	add	r2, r1
 8006182:	4291      	cmp	r1, r2
 8006184:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006188:	d100      	bne.n	800618c <memcpy+0xc>
 800618a:	4770      	bx	lr
 800618c:	b510      	push	{r4, lr}
 800618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006196:	4291      	cmp	r1, r2
 8006198:	d1f9      	bne.n	800618e <memcpy+0xe>
 800619a:	bd10      	pop	{r4, pc}

0800619c <_Balloc>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	b976      	cbnz	r6, 80061c4 <_Balloc+0x28>
 80061a6:	2010      	movs	r0, #16
 80061a8:	f7ff ffe2 	bl	8006170 <malloc>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6260      	str	r0, [r4, #36]	; 0x24
 80061b0:	b920      	cbnz	r0, 80061bc <_Balloc+0x20>
 80061b2:	4b18      	ldr	r3, [pc, #96]	; (8006214 <_Balloc+0x78>)
 80061b4:	4818      	ldr	r0, [pc, #96]	; (8006218 <_Balloc+0x7c>)
 80061b6:	2166      	movs	r1, #102	; 0x66
 80061b8:	f000 fed8 	bl	8006f6c <__assert_func>
 80061bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c0:	6006      	str	r6, [r0, #0]
 80061c2:	60c6      	str	r6, [r0, #12]
 80061c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061c6:	68f3      	ldr	r3, [r6, #12]
 80061c8:	b183      	cbz	r3, 80061ec <_Balloc+0x50>
 80061ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061d2:	b9b8      	cbnz	r0, 8006204 <_Balloc+0x68>
 80061d4:	2101      	movs	r1, #1
 80061d6:	fa01 f605 	lsl.w	r6, r1, r5
 80061da:	1d72      	adds	r2, r6, #5
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fb60 	bl	80068a4 <_calloc_r>
 80061e4:	b160      	cbz	r0, 8006200 <_Balloc+0x64>
 80061e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061ea:	e00e      	b.n	800620a <_Balloc+0x6e>
 80061ec:	2221      	movs	r2, #33	; 0x21
 80061ee:	2104      	movs	r1, #4
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fb57 	bl	80068a4 <_calloc_r>
 80061f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f8:	60f0      	str	r0, [r6, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e4      	bne.n	80061ca <_Balloc+0x2e>
 8006200:	2000      	movs	r0, #0
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	6802      	ldr	r2, [r0, #0]
 8006206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800620a:	2300      	movs	r3, #0
 800620c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006210:	e7f7      	b.n	8006202 <_Balloc+0x66>
 8006212:	bf00      	nop
 8006214:	08007b4f 	.word	0x08007b4f
 8006218:	08007c34 	.word	0x08007c34

0800621c <_Bfree>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006220:	4605      	mov	r5, r0
 8006222:	460c      	mov	r4, r1
 8006224:	b976      	cbnz	r6, 8006244 <_Bfree+0x28>
 8006226:	2010      	movs	r0, #16
 8006228:	f7ff ffa2 	bl	8006170 <malloc>
 800622c:	4602      	mov	r2, r0
 800622e:	6268      	str	r0, [r5, #36]	; 0x24
 8006230:	b920      	cbnz	r0, 800623c <_Bfree+0x20>
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <_Bfree+0x3c>)
 8006234:	4809      	ldr	r0, [pc, #36]	; (800625c <_Bfree+0x40>)
 8006236:	218a      	movs	r1, #138	; 0x8a
 8006238:	f000 fe98 	bl	8006f6c <__assert_func>
 800623c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006240:	6006      	str	r6, [r0, #0]
 8006242:	60c6      	str	r6, [r0, #12]
 8006244:	b13c      	cbz	r4, 8006256 <_Bfree+0x3a>
 8006246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006248:	6862      	ldr	r2, [r4, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006250:	6021      	str	r1, [r4, #0]
 8006252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	08007b4f 	.word	0x08007b4f
 800625c:	08007c34 	.word	0x08007c34

08006260 <__multadd>:
 8006260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	690d      	ldr	r5, [r1, #16]
 8006266:	4607      	mov	r7, r0
 8006268:	460c      	mov	r4, r1
 800626a:	461e      	mov	r6, r3
 800626c:	f101 0c14 	add.w	ip, r1, #20
 8006270:	2000      	movs	r0, #0
 8006272:	f8dc 3000 	ldr.w	r3, [ip]
 8006276:	b299      	uxth	r1, r3
 8006278:	fb02 6101 	mla	r1, r2, r1, r6
 800627c:	0c1e      	lsrs	r6, r3, #16
 800627e:	0c0b      	lsrs	r3, r1, #16
 8006280:	fb02 3306 	mla	r3, r2, r6, r3
 8006284:	b289      	uxth	r1, r1
 8006286:	3001      	adds	r0, #1
 8006288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800628c:	4285      	cmp	r5, r0
 800628e:	f84c 1b04 	str.w	r1, [ip], #4
 8006292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006296:	dcec      	bgt.n	8006272 <__multadd+0x12>
 8006298:	b30e      	cbz	r6, 80062de <__multadd+0x7e>
 800629a:	68a3      	ldr	r3, [r4, #8]
 800629c:	42ab      	cmp	r3, r5
 800629e:	dc19      	bgt.n	80062d4 <__multadd+0x74>
 80062a0:	6861      	ldr	r1, [r4, #4]
 80062a2:	4638      	mov	r0, r7
 80062a4:	3101      	adds	r1, #1
 80062a6:	f7ff ff79 	bl	800619c <_Balloc>
 80062aa:	4680      	mov	r8, r0
 80062ac:	b928      	cbnz	r0, 80062ba <__multadd+0x5a>
 80062ae:	4602      	mov	r2, r0
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <__multadd+0x84>)
 80062b2:	480d      	ldr	r0, [pc, #52]	; (80062e8 <__multadd+0x88>)
 80062b4:	21b5      	movs	r1, #181	; 0xb5
 80062b6:	f000 fe59 	bl	8006f6c <__assert_func>
 80062ba:	6922      	ldr	r2, [r4, #16]
 80062bc:	3202      	adds	r2, #2
 80062be:	f104 010c 	add.w	r1, r4, #12
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	300c      	adds	r0, #12
 80062c6:	f7ff ff5b 	bl	8006180 <memcpy>
 80062ca:	4621      	mov	r1, r4
 80062cc:	4638      	mov	r0, r7
 80062ce:	f7ff ffa5 	bl	800621c <_Bfree>
 80062d2:	4644      	mov	r4, r8
 80062d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062d8:	3501      	adds	r5, #1
 80062da:	615e      	str	r6, [r3, #20]
 80062dc:	6125      	str	r5, [r4, #16]
 80062de:	4620      	mov	r0, r4
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	08007bc1 	.word	0x08007bc1
 80062e8:	08007c34 	.word	0x08007c34

080062ec <__hi0bits>:
 80062ec:	0c03      	lsrs	r3, r0, #16
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	b9d3      	cbnz	r3, 8006328 <__hi0bits+0x3c>
 80062f2:	0400      	lsls	r0, r0, #16
 80062f4:	2310      	movs	r3, #16
 80062f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062fa:	bf04      	itt	eq
 80062fc:	0200      	lsleq	r0, r0, #8
 80062fe:	3308      	addeq	r3, #8
 8006300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006304:	bf04      	itt	eq
 8006306:	0100      	lsleq	r0, r0, #4
 8006308:	3304      	addeq	r3, #4
 800630a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800630e:	bf04      	itt	eq
 8006310:	0080      	lsleq	r0, r0, #2
 8006312:	3302      	addeq	r3, #2
 8006314:	2800      	cmp	r0, #0
 8006316:	db05      	blt.n	8006324 <__hi0bits+0x38>
 8006318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800631c:	f103 0301 	add.w	r3, r3, #1
 8006320:	bf08      	it	eq
 8006322:	2320      	moveq	r3, #32
 8006324:	4618      	mov	r0, r3
 8006326:	4770      	bx	lr
 8006328:	2300      	movs	r3, #0
 800632a:	e7e4      	b.n	80062f6 <__hi0bits+0xa>

0800632c <__lo0bits>:
 800632c:	6803      	ldr	r3, [r0, #0]
 800632e:	f013 0207 	ands.w	r2, r3, #7
 8006332:	4601      	mov	r1, r0
 8006334:	d00b      	beq.n	800634e <__lo0bits+0x22>
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d423      	bmi.n	8006382 <__lo0bits+0x56>
 800633a:	0798      	lsls	r0, r3, #30
 800633c:	bf49      	itett	mi
 800633e:	085b      	lsrmi	r3, r3, #1
 8006340:	089b      	lsrpl	r3, r3, #2
 8006342:	2001      	movmi	r0, #1
 8006344:	600b      	strmi	r3, [r1, #0]
 8006346:	bf5c      	itt	pl
 8006348:	600b      	strpl	r3, [r1, #0]
 800634a:	2002      	movpl	r0, #2
 800634c:	4770      	bx	lr
 800634e:	b298      	uxth	r0, r3
 8006350:	b9a8      	cbnz	r0, 800637e <__lo0bits+0x52>
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	2010      	movs	r0, #16
 8006356:	b2da      	uxtb	r2, r3
 8006358:	b90a      	cbnz	r2, 800635e <__lo0bits+0x32>
 800635a:	3008      	adds	r0, #8
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	071a      	lsls	r2, r3, #28
 8006360:	bf04      	itt	eq
 8006362:	091b      	lsreq	r3, r3, #4
 8006364:	3004      	addeq	r0, #4
 8006366:	079a      	lsls	r2, r3, #30
 8006368:	bf04      	itt	eq
 800636a:	089b      	lsreq	r3, r3, #2
 800636c:	3002      	addeq	r0, #2
 800636e:	07da      	lsls	r2, r3, #31
 8006370:	d403      	bmi.n	800637a <__lo0bits+0x4e>
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f100 0001 	add.w	r0, r0, #1
 8006378:	d005      	beq.n	8006386 <__lo0bits+0x5a>
 800637a:	600b      	str	r3, [r1, #0]
 800637c:	4770      	bx	lr
 800637e:	4610      	mov	r0, r2
 8006380:	e7e9      	b.n	8006356 <__lo0bits+0x2a>
 8006382:	2000      	movs	r0, #0
 8006384:	4770      	bx	lr
 8006386:	2020      	movs	r0, #32
 8006388:	4770      	bx	lr
	...

0800638c <__i2b>:
 800638c:	b510      	push	{r4, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	2101      	movs	r1, #1
 8006392:	f7ff ff03 	bl	800619c <_Balloc>
 8006396:	4602      	mov	r2, r0
 8006398:	b928      	cbnz	r0, 80063a6 <__i2b+0x1a>
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <__i2b+0x24>)
 800639c:	4805      	ldr	r0, [pc, #20]	; (80063b4 <__i2b+0x28>)
 800639e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063a2:	f000 fde3 	bl	8006f6c <__assert_func>
 80063a6:	2301      	movs	r3, #1
 80063a8:	6144      	str	r4, [r0, #20]
 80063aa:	6103      	str	r3, [r0, #16]
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	bf00      	nop
 80063b0:	08007bc1 	.word	0x08007bc1
 80063b4:	08007c34 	.word	0x08007c34

080063b8 <__multiply>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4691      	mov	r9, r2
 80063be:	690a      	ldr	r2, [r1, #16]
 80063c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bfb8      	it	lt
 80063c8:	460b      	movlt	r3, r1
 80063ca:	460c      	mov	r4, r1
 80063cc:	bfbc      	itt	lt
 80063ce:	464c      	movlt	r4, r9
 80063d0:	4699      	movlt	r9, r3
 80063d2:	6927      	ldr	r7, [r4, #16]
 80063d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063d8:	68a3      	ldr	r3, [r4, #8]
 80063da:	6861      	ldr	r1, [r4, #4]
 80063dc:	eb07 060a 	add.w	r6, r7, sl
 80063e0:	42b3      	cmp	r3, r6
 80063e2:	b085      	sub	sp, #20
 80063e4:	bfb8      	it	lt
 80063e6:	3101      	addlt	r1, #1
 80063e8:	f7ff fed8 	bl	800619c <_Balloc>
 80063ec:	b930      	cbnz	r0, 80063fc <__multiply+0x44>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b44      	ldr	r3, [pc, #272]	; (8006504 <__multiply+0x14c>)
 80063f2:	4845      	ldr	r0, [pc, #276]	; (8006508 <__multiply+0x150>)
 80063f4:	f240 115d 	movw	r1, #349	; 0x15d
 80063f8:	f000 fdb8 	bl	8006f6c <__assert_func>
 80063fc:	f100 0514 	add.w	r5, r0, #20
 8006400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006404:	462b      	mov	r3, r5
 8006406:	2200      	movs	r2, #0
 8006408:	4543      	cmp	r3, r8
 800640a:	d321      	bcc.n	8006450 <__multiply+0x98>
 800640c:	f104 0314 	add.w	r3, r4, #20
 8006410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006414:	f109 0314 	add.w	r3, r9, #20
 8006418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800641c:	9202      	str	r2, [sp, #8]
 800641e:	1b3a      	subs	r2, r7, r4
 8006420:	3a15      	subs	r2, #21
 8006422:	f022 0203 	bic.w	r2, r2, #3
 8006426:	3204      	adds	r2, #4
 8006428:	f104 0115 	add.w	r1, r4, #21
 800642c:	428f      	cmp	r7, r1
 800642e:	bf38      	it	cc
 8006430:	2204      	movcc	r2, #4
 8006432:	9201      	str	r2, [sp, #4]
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d80c      	bhi.n	8006456 <__multiply+0x9e>
 800643c:	2e00      	cmp	r6, #0
 800643e:	dd03      	ble.n	8006448 <__multiply+0x90>
 8006440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05a      	beq.n	80064fe <__multiply+0x146>
 8006448:	6106      	str	r6, [r0, #16]
 800644a:	b005      	add	sp, #20
 800644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006450:	f843 2b04 	str.w	r2, [r3], #4
 8006454:	e7d8      	b.n	8006408 <__multiply+0x50>
 8006456:	f8b3 a000 	ldrh.w	sl, [r3]
 800645a:	f1ba 0f00 	cmp.w	sl, #0
 800645e:	d024      	beq.n	80064aa <__multiply+0xf2>
 8006460:	f104 0e14 	add.w	lr, r4, #20
 8006464:	46a9      	mov	r9, r5
 8006466:	f04f 0c00 	mov.w	ip, #0
 800646a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800646e:	f8d9 1000 	ldr.w	r1, [r9]
 8006472:	fa1f fb82 	uxth.w	fp, r2
 8006476:	b289      	uxth	r1, r1
 8006478:	fb0a 110b 	mla	r1, sl, fp, r1
 800647c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006480:	f8d9 2000 	ldr.w	r2, [r9]
 8006484:	4461      	add	r1, ip
 8006486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800648a:	fb0a c20b 	mla	r2, sl, fp, ip
 800648e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006492:	b289      	uxth	r1, r1
 8006494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006498:	4577      	cmp	r7, lr
 800649a:	f849 1b04 	str.w	r1, [r9], #4
 800649e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064a2:	d8e2      	bhi.n	800646a <__multiply+0xb2>
 80064a4:	9a01      	ldr	r2, [sp, #4]
 80064a6:	f845 c002 	str.w	ip, [r5, r2]
 80064aa:	9a03      	ldr	r2, [sp, #12]
 80064ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064b0:	3304      	adds	r3, #4
 80064b2:	f1b9 0f00 	cmp.w	r9, #0
 80064b6:	d020      	beq.n	80064fa <__multiply+0x142>
 80064b8:	6829      	ldr	r1, [r5, #0]
 80064ba:	f104 0c14 	add.w	ip, r4, #20
 80064be:	46ae      	mov	lr, r5
 80064c0:	f04f 0a00 	mov.w	sl, #0
 80064c4:	f8bc b000 	ldrh.w	fp, [ip]
 80064c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064cc:	fb09 220b 	mla	r2, r9, fp, r2
 80064d0:	4492      	add	sl, r2
 80064d2:	b289      	uxth	r1, r1
 80064d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80064d8:	f84e 1b04 	str.w	r1, [lr], #4
 80064dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064e0:	f8be 1000 	ldrh.w	r1, [lr]
 80064e4:	0c12      	lsrs	r2, r2, #16
 80064e6:	fb09 1102 	mla	r1, r9, r2, r1
 80064ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80064ee:	4567      	cmp	r7, ip
 80064f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064f4:	d8e6      	bhi.n	80064c4 <__multiply+0x10c>
 80064f6:	9a01      	ldr	r2, [sp, #4]
 80064f8:	50a9      	str	r1, [r5, r2]
 80064fa:	3504      	adds	r5, #4
 80064fc:	e79a      	b.n	8006434 <__multiply+0x7c>
 80064fe:	3e01      	subs	r6, #1
 8006500:	e79c      	b.n	800643c <__multiply+0x84>
 8006502:	bf00      	nop
 8006504:	08007bc1 	.word	0x08007bc1
 8006508:	08007c34 	.word	0x08007c34

0800650c <__pow5mult>:
 800650c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006510:	4615      	mov	r5, r2
 8006512:	f012 0203 	ands.w	r2, r2, #3
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	d007      	beq.n	800652c <__pow5mult+0x20>
 800651c:	4c25      	ldr	r4, [pc, #148]	; (80065b4 <__pow5mult+0xa8>)
 800651e:	3a01      	subs	r2, #1
 8006520:	2300      	movs	r3, #0
 8006522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006526:	f7ff fe9b 	bl	8006260 <__multadd>
 800652a:	4607      	mov	r7, r0
 800652c:	10ad      	asrs	r5, r5, #2
 800652e:	d03d      	beq.n	80065ac <__pow5mult+0xa0>
 8006530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006532:	b97c      	cbnz	r4, 8006554 <__pow5mult+0x48>
 8006534:	2010      	movs	r0, #16
 8006536:	f7ff fe1b 	bl	8006170 <malloc>
 800653a:	4602      	mov	r2, r0
 800653c:	6270      	str	r0, [r6, #36]	; 0x24
 800653e:	b928      	cbnz	r0, 800654c <__pow5mult+0x40>
 8006540:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <__pow5mult+0xac>)
 8006542:	481e      	ldr	r0, [pc, #120]	; (80065bc <__pow5mult+0xb0>)
 8006544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006548:	f000 fd10 	bl	8006f6c <__assert_func>
 800654c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006550:	6004      	str	r4, [r0, #0]
 8006552:	60c4      	str	r4, [r0, #12]
 8006554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800655c:	b94c      	cbnz	r4, 8006572 <__pow5mult+0x66>
 800655e:	f240 2171 	movw	r1, #625	; 0x271
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff ff12 	bl	800638c <__i2b>
 8006568:	2300      	movs	r3, #0
 800656a:	f8c8 0008 	str.w	r0, [r8, #8]
 800656e:	4604      	mov	r4, r0
 8006570:	6003      	str	r3, [r0, #0]
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	07eb      	lsls	r3, r5, #31
 8006578:	d50a      	bpl.n	8006590 <__pow5mult+0x84>
 800657a:	4639      	mov	r1, r7
 800657c:	4622      	mov	r2, r4
 800657e:	4630      	mov	r0, r6
 8006580:	f7ff ff1a 	bl	80063b8 <__multiply>
 8006584:	4639      	mov	r1, r7
 8006586:	4680      	mov	r8, r0
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff fe47 	bl	800621c <_Bfree>
 800658e:	4647      	mov	r7, r8
 8006590:	106d      	asrs	r5, r5, #1
 8006592:	d00b      	beq.n	80065ac <__pow5mult+0xa0>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	b938      	cbnz	r0, 80065a8 <__pow5mult+0x9c>
 8006598:	4622      	mov	r2, r4
 800659a:	4621      	mov	r1, r4
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ff0b 	bl	80063b8 <__multiply>
 80065a2:	6020      	str	r0, [r4, #0]
 80065a4:	f8c0 9000 	str.w	r9, [r0]
 80065a8:	4604      	mov	r4, r0
 80065aa:	e7e4      	b.n	8006576 <__pow5mult+0x6a>
 80065ac:	4638      	mov	r0, r7
 80065ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b2:	bf00      	nop
 80065b4:	08007d80 	.word	0x08007d80
 80065b8:	08007b4f 	.word	0x08007b4f
 80065bc:	08007c34 	.word	0x08007c34

080065c0 <__lshift>:
 80065c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	460c      	mov	r4, r1
 80065c6:	6849      	ldr	r1, [r1, #4]
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	4607      	mov	r7, r0
 80065d2:	4691      	mov	r9, r2
 80065d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065d8:	f108 0601 	add.w	r6, r8, #1
 80065dc:	42b3      	cmp	r3, r6
 80065de:	db0b      	blt.n	80065f8 <__lshift+0x38>
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7ff fddb 	bl	800619c <_Balloc>
 80065e6:	4605      	mov	r5, r0
 80065e8:	b948      	cbnz	r0, 80065fe <__lshift+0x3e>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <__lshift+0xd8>)
 80065ee:	482b      	ldr	r0, [pc, #172]	; (800669c <__lshift+0xdc>)
 80065f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065f4:	f000 fcba 	bl	8006f6c <__assert_func>
 80065f8:	3101      	adds	r1, #1
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	e7ee      	b.n	80065dc <__lshift+0x1c>
 80065fe:	2300      	movs	r3, #0
 8006600:	f100 0114 	add.w	r1, r0, #20
 8006604:	f100 0210 	add.w	r2, r0, #16
 8006608:	4618      	mov	r0, r3
 800660a:	4553      	cmp	r3, sl
 800660c:	db37      	blt.n	800667e <__lshift+0xbe>
 800660e:	6920      	ldr	r0, [r4, #16]
 8006610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006614:	f104 0314 	add.w	r3, r4, #20
 8006618:	f019 091f 	ands.w	r9, r9, #31
 800661c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006624:	d02f      	beq.n	8006686 <__lshift+0xc6>
 8006626:	f1c9 0e20 	rsb	lr, r9, #32
 800662a:	468a      	mov	sl, r1
 800662c:	f04f 0c00 	mov.w	ip, #0
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	fa02 f209 	lsl.w	r2, r2, r9
 8006636:	ea42 020c 	orr.w	r2, r2, ip
 800663a:	f84a 2b04 	str.w	r2, [sl], #4
 800663e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006642:	4298      	cmp	r0, r3
 8006644:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006648:	d8f2      	bhi.n	8006630 <__lshift+0x70>
 800664a:	1b03      	subs	r3, r0, r4
 800664c:	3b15      	subs	r3, #21
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	3304      	adds	r3, #4
 8006654:	f104 0215 	add.w	r2, r4, #21
 8006658:	4290      	cmp	r0, r2
 800665a:	bf38      	it	cc
 800665c:	2304      	movcc	r3, #4
 800665e:	f841 c003 	str.w	ip, [r1, r3]
 8006662:	f1bc 0f00 	cmp.w	ip, #0
 8006666:	d001      	beq.n	800666c <__lshift+0xac>
 8006668:	f108 0602 	add.w	r6, r8, #2
 800666c:	3e01      	subs	r6, #1
 800666e:	4638      	mov	r0, r7
 8006670:	612e      	str	r6, [r5, #16]
 8006672:	4621      	mov	r1, r4
 8006674:	f7ff fdd2 	bl	800621c <_Bfree>
 8006678:	4628      	mov	r0, r5
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006682:	3301      	adds	r3, #1
 8006684:	e7c1      	b.n	800660a <__lshift+0x4a>
 8006686:	3904      	subs	r1, #4
 8006688:	f853 2b04 	ldr.w	r2, [r3], #4
 800668c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006690:	4298      	cmp	r0, r3
 8006692:	d8f9      	bhi.n	8006688 <__lshift+0xc8>
 8006694:	e7ea      	b.n	800666c <__lshift+0xac>
 8006696:	bf00      	nop
 8006698:	08007bc1 	.word	0x08007bc1
 800669c:	08007c34 	.word	0x08007c34

080066a0 <__mcmp>:
 80066a0:	b530      	push	{r4, r5, lr}
 80066a2:	6902      	ldr	r2, [r0, #16]
 80066a4:	690c      	ldr	r4, [r1, #16]
 80066a6:	1b12      	subs	r2, r2, r4
 80066a8:	d10e      	bne.n	80066c8 <__mcmp+0x28>
 80066aa:	f100 0314 	add.w	r3, r0, #20
 80066ae:	3114      	adds	r1, #20
 80066b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066c0:	42a5      	cmp	r5, r4
 80066c2:	d003      	beq.n	80066cc <__mcmp+0x2c>
 80066c4:	d305      	bcc.n	80066d2 <__mcmp+0x32>
 80066c6:	2201      	movs	r2, #1
 80066c8:	4610      	mov	r0, r2
 80066ca:	bd30      	pop	{r4, r5, pc}
 80066cc:	4283      	cmp	r3, r0
 80066ce:	d3f3      	bcc.n	80066b8 <__mcmp+0x18>
 80066d0:	e7fa      	b.n	80066c8 <__mcmp+0x28>
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d6:	e7f7      	b.n	80066c8 <__mcmp+0x28>

080066d8 <__mdiff>:
 80066d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	460c      	mov	r4, r1
 80066de:	4606      	mov	r6, r0
 80066e0:	4611      	mov	r1, r2
 80066e2:	4620      	mov	r0, r4
 80066e4:	4690      	mov	r8, r2
 80066e6:	f7ff ffdb 	bl	80066a0 <__mcmp>
 80066ea:	1e05      	subs	r5, r0, #0
 80066ec:	d110      	bne.n	8006710 <__mdiff+0x38>
 80066ee:	4629      	mov	r1, r5
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff fd53 	bl	800619c <_Balloc>
 80066f6:	b930      	cbnz	r0, 8006706 <__mdiff+0x2e>
 80066f8:	4b3a      	ldr	r3, [pc, #232]	; (80067e4 <__mdiff+0x10c>)
 80066fa:	4602      	mov	r2, r0
 80066fc:	f240 2132 	movw	r1, #562	; 0x232
 8006700:	4839      	ldr	r0, [pc, #228]	; (80067e8 <__mdiff+0x110>)
 8006702:	f000 fc33 	bl	8006f6c <__assert_func>
 8006706:	2301      	movs	r3, #1
 8006708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800670c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	bfa4      	itt	ge
 8006712:	4643      	movge	r3, r8
 8006714:	46a0      	movge	r8, r4
 8006716:	4630      	mov	r0, r6
 8006718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800671c:	bfa6      	itte	ge
 800671e:	461c      	movge	r4, r3
 8006720:	2500      	movge	r5, #0
 8006722:	2501      	movlt	r5, #1
 8006724:	f7ff fd3a 	bl	800619c <_Balloc>
 8006728:	b920      	cbnz	r0, 8006734 <__mdiff+0x5c>
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <__mdiff+0x10c>)
 800672c:	4602      	mov	r2, r0
 800672e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006732:	e7e5      	b.n	8006700 <__mdiff+0x28>
 8006734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006738:	6926      	ldr	r6, [r4, #16]
 800673a:	60c5      	str	r5, [r0, #12]
 800673c:	f104 0914 	add.w	r9, r4, #20
 8006740:	f108 0514 	add.w	r5, r8, #20
 8006744:	f100 0e14 	add.w	lr, r0, #20
 8006748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800674c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006750:	f108 0210 	add.w	r2, r8, #16
 8006754:	46f2      	mov	sl, lr
 8006756:	2100      	movs	r1, #0
 8006758:	f859 3b04 	ldr.w	r3, [r9], #4
 800675c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006760:	fa1f f883 	uxth.w	r8, r3
 8006764:	fa11 f18b 	uxtah	r1, r1, fp
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	eba1 0808 	sub.w	r8, r1, r8
 800676e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006776:	fa1f f888 	uxth.w	r8, r8
 800677a:	1419      	asrs	r1, r3, #16
 800677c:	454e      	cmp	r6, r9
 800677e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006782:	f84a 3b04 	str.w	r3, [sl], #4
 8006786:	d8e7      	bhi.n	8006758 <__mdiff+0x80>
 8006788:	1b33      	subs	r3, r6, r4
 800678a:	3b15      	subs	r3, #21
 800678c:	f023 0303 	bic.w	r3, r3, #3
 8006790:	3304      	adds	r3, #4
 8006792:	3415      	adds	r4, #21
 8006794:	42a6      	cmp	r6, r4
 8006796:	bf38      	it	cc
 8006798:	2304      	movcc	r3, #4
 800679a:	441d      	add	r5, r3
 800679c:	4473      	add	r3, lr
 800679e:	469e      	mov	lr, r3
 80067a0:	462e      	mov	r6, r5
 80067a2:	4566      	cmp	r6, ip
 80067a4:	d30e      	bcc.n	80067c4 <__mdiff+0xec>
 80067a6:	f10c 0203 	add.w	r2, ip, #3
 80067aa:	1b52      	subs	r2, r2, r5
 80067ac:	f022 0203 	bic.w	r2, r2, #3
 80067b0:	3d03      	subs	r5, #3
 80067b2:	45ac      	cmp	ip, r5
 80067b4:	bf38      	it	cc
 80067b6:	2200      	movcc	r2, #0
 80067b8:	441a      	add	r2, r3
 80067ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80067be:	b17b      	cbz	r3, 80067e0 <__mdiff+0x108>
 80067c0:	6107      	str	r7, [r0, #16]
 80067c2:	e7a3      	b.n	800670c <__mdiff+0x34>
 80067c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80067c8:	fa11 f288 	uxtah	r2, r1, r8
 80067cc:	1414      	asrs	r4, r2, #16
 80067ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067d2:	b292      	uxth	r2, r2
 80067d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067d8:	f84e 2b04 	str.w	r2, [lr], #4
 80067dc:	1421      	asrs	r1, r4, #16
 80067de:	e7e0      	b.n	80067a2 <__mdiff+0xca>
 80067e0:	3f01      	subs	r7, #1
 80067e2:	e7ea      	b.n	80067ba <__mdiff+0xe2>
 80067e4:	08007bc1 	.word	0x08007bc1
 80067e8:	08007c34 	.word	0x08007c34

080067ec <__d2b>:
 80067ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067f0:	4689      	mov	r9, r1
 80067f2:	2101      	movs	r1, #1
 80067f4:	ec57 6b10 	vmov	r6, r7, d0
 80067f8:	4690      	mov	r8, r2
 80067fa:	f7ff fccf 	bl	800619c <_Balloc>
 80067fe:	4604      	mov	r4, r0
 8006800:	b930      	cbnz	r0, 8006810 <__d2b+0x24>
 8006802:	4602      	mov	r2, r0
 8006804:	4b25      	ldr	r3, [pc, #148]	; (800689c <__d2b+0xb0>)
 8006806:	4826      	ldr	r0, [pc, #152]	; (80068a0 <__d2b+0xb4>)
 8006808:	f240 310a 	movw	r1, #778	; 0x30a
 800680c:	f000 fbae 	bl	8006f6c <__assert_func>
 8006810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006818:	bb35      	cbnz	r5, 8006868 <__d2b+0x7c>
 800681a:	2e00      	cmp	r6, #0
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	d028      	beq.n	8006872 <__d2b+0x86>
 8006820:	4668      	mov	r0, sp
 8006822:	9600      	str	r6, [sp, #0]
 8006824:	f7ff fd82 	bl	800632c <__lo0bits>
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	b300      	cbz	r0, 800686e <__d2b+0x82>
 800682c:	9a01      	ldr	r2, [sp, #4]
 800682e:	f1c0 0320 	rsb	r3, r0, #32
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	430b      	orrs	r3, r1
 8006838:	40c2      	lsrs	r2, r0
 800683a:	6163      	str	r3, [r4, #20]
 800683c:	9201      	str	r2, [sp, #4]
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	61a3      	str	r3, [r4, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2202      	movne	r2, #2
 8006848:	2201      	moveq	r2, #1
 800684a:	6122      	str	r2, [r4, #16]
 800684c:	b1d5      	cbz	r5, 8006884 <__d2b+0x98>
 800684e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006852:	4405      	add	r5, r0
 8006854:	f8c9 5000 	str.w	r5, [r9]
 8006858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800685c:	f8c8 0000 	str.w	r0, [r8]
 8006860:	4620      	mov	r0, r4
 8006862:	b003      	add	sp, #12
 8006864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800686c:	e7d5      	b.n	800681a <__d2b+0x2e>
 800686e:	6161      	str	r1, [r4, #20]
 8006870:	e7e5      	b.n	800683e <__d2b+0x52>
 8006872:	a801      	add	r0, sp, #4
 8006874:	f7ff fd5a 	bl	800632c <__lo0bits>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	6163      	str	r3, [r4, #20]
 800687c:	2201      	movs	r2, #1
 800687e:	6122      	str	r2, [r4, #16]
 8006880:	3020      	adds	r0, #32
 8006882:	e7e3      	b.n	800684c <__d2b+0x60>
 8006884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800688c:	f8c9 0000 	str.w	r0, [r9]
 8006890:	6918      	ldr	r0, [r3, #16]
 8006892:	f7ff fd2b 	bl	80062ec <__hi0bits>
 8006896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800689a:	e7df      	b.n	800685c <__d2b+0x70>
 800689c:	08007bc1 	.word	0x08007bc1
 80068a0:	08007c34 	.word	0x08007c34

080068a4 <_calloc_r>:
 80068a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a6:	fba1 2402 	umull	r2, r4, r1, r2
 80068aa:	b94c      	cbnz	r4, 80068c0 <_calloc_r+0x1c>
 80068ac:	4611      	mov	r1, r2
 80068ae:	9201      	str	r2, [sp, #4]
 80068b0:	f000 f87a 	bl	80069a8 <_malloc_r>
 80068b4:	9a01      	ldr	r2, [sp, #4]
 80068b6:	4605      	mov	r5, r0
 80068b8:	b930      	cbnz	r0, 80068c8 <_calloc_r+0x24>
 80068ba:	4628      	mov	r0, r5
 80068bc:	b003      	add	sp, #12
 80068be:	bd30      	pop	{r4, r5, pc}
 80068c0:	220c      	movs	r2, #12
 80068c2:	6002      	str	r2, [r0, #0]
 80068c4:	2500      	movs	r5, #0
 80068c6:	e7f8      	b.n	80068ba <_calloc_r+0x16>
 80068c8:	4621      	mov	r1, r4
 80068ca:	f7fd fcb3 	bl	8004234 <memset>
 80068ce:	e7f4      	b.n	80068ba <_calloc_r+0x16>

080068d0 <_free_r>:
 80068d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068d2:	2900      	cmp	r1, #0
 80068d4:	d044      	beq.n	8006960 <_free_r+0x90>
 80068d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068da:	9001      	str	r0, [sp, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f1a1 0404 	sub.w	r4, r1, #4
 80068e2:	bfb8      	it	lt
 80068e4:	18e4      	addlt	r4, r4, r3
 80068e6:	f000 fc0b 	bl	8007100 <__malloc_lock>
 80068ea:	4a1e      	ldr	r2, [pc, #120]	; (8006964 <_free_r+0x94>)
 80068ec:	9801      	ldr	r0, [sp, #4]
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	b933      	cbnz	r3, 8006900 <_free_r+0x30>
 80068f2:	6063      	str	r3, [r4, #4]
 80068f4:	6014      	str	r4, [r2, #0]
 80068f6:	b003      	add	sp, #12
 80068f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068fc:	f000 bc06 	b.w	800710c <__malloc_unlock>
 8006900:	42a3      	cmp	r3, r4
 8006902:	d908      	bls.n	8006916 <_free_r+0x46>
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	1961      	adds	r1, r4, r5
 8006908:	428b      	cmp	r3, r1
 800690a:	bf01      	itttt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	1949      	addeq	r1, r1, r5
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	e7ed      	b.n	80068f2 <_free_r+0x22>
 8006916:	461a      	mov	r2, r3
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	b10b      	cbz	r3, 8006920 <_free_r+0x50>
 800691c:	42a3      	cmp	r3, r4
 800691e:	d9fa      	bls.n	8006916 <_free_r+0x46>
 8006920:	6811      	ldr	r1, [r2, #0]
 8006922:	1855      	adds	r5, r2, r1
 8006924:	42a5      	cmp	r5, r4
 8006926:	d10b      	bne.n	8006940 <_free_r+0x70>
 8006928:	6824      	ldr	r4, [r4, #0]
 800692a:	4421      	add	r1, r4
 800692c:	1854      	adds	r4, r2, r1
 800692e:	42a3      	cmp	r3, r4
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	d1e0      	bne.n	80068f6 <_free_r+0x26>
 8006934:	681c      	ldr	r4, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	6053      	str	r3, [r2, #4]
 800693a:	4421      	add	r1, r4
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	e7da      	b.n	80068f6 <_free_r+0x26>
 8006940:	d902      	bls.n	8006948 <_free_r+0x78>
 8006942:	230c      	movs	r3, #12
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	e7d6      	b.n	80068f6 <_free_r+0x26>
 8006948:	6825      	ldr	r5, [r4, #0]
 800694a:	1961      	adds	r1, r4, r5
 800694c:	428b      	cmp	r3, r1
 800694e:	bf04      	itt	eq
 8006950:	6819      	ldreq	r1, [r3, #0]
 8006952:	685b      	ldreq	r3, [r3, #4]
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	bf04      	itt	eq
 8006958:	1949      	addeq	r1, r1, r5
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	6054      	str	r4, [r2, #4]
 800695e:	e7ca      	b.n	80068f6 <_free_r+0x26>
 8006960:	b003      	add	sp, #12
 8006962:	bd30      	pop	{r4, r5, pc}
 8006964:	200002dc 	.word	0x200002dc

08006968 <sbrk_aligned>:
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	4e0e      	ldr	r6, [pc, #56]	; (80069a4 <sbrk_aligned+0x3c>)
 800696c:	460c      	mov	r4, r1
 800696e:	6831      	ldr	r1, [r6, #0]
 8006970:	4605      	mov	r5, r0
 8006972:	b911      	cbnz	r1, 800697a <sbrk_aligned+0x12>
 8006974:	f000 f9e6 	bl	8006d44 <_sbrk_r>
 8006978:	6030      	str	r0, [r6, #0]
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f000 f9e1 	bl	8006d44 <_sbrk_r>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	d00a      	beq.n	800699c <sbrk_aligned+0x34>
 8006986:	1cc4      	adds	r4, r0, #3
 8006988:	f024 0403 	bic.w	r4, r4, #3
 800698c:	42a0      	cmp	r0, r4
 800698e:	d007      	beq.n	80069a0 <sbrk_aligned+0x38>
 8006990:	1a21      	subs	r1, r4, r0
 8006992:	4628      	mov	r0, r5
 8006994:	f000 f9d6 	bl	8006d44 <_sbrk_r>
 8006998:	3001      	adds	r0, #1
 800699a:	d101      	bne.n	80069a0 <sbrk_aligned+0x38>
 800699c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069a0:	4620      	mov	r0, r4
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	200002e0 	.word	0x200002e0

080069a8 <_malloc_r>:
 80069a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ac:	1ccd      	adds	r5, r1, #3
 80069ae:	f025 0503 	bic.w	r5, r5, #3
 80069b2:	3508      	adds	r5, #8
 80069b4:	2d0c      	cmp	r5, #12
 80069b6:	bf38      	it	cc
 80069b8:	250c      	movcc	r5, #12
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	4607      	mov	r7, r0
 80069be:	db01      	blt.n	80069c4 <_malloc_r+0x1c>
 80069c0:	42a9      	cmp	r1, r5
 80069c2:	d905      	bls.n	80069d0 <_malloc_r+0x28>
 80069c4:	230c      	movs	r3, #12
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	2600      	movs	r6, #0
 80069ca:	4630      	mov	r0, r6
 80069cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d0:	4e2e      	ldr	r6, [pc, #184]	; (8006a8c <_malloc_r+0xe4>)
 80069d2:	f000 fb95 	bl	8007100 <__malloc_lock>
 80069d6:	6833      	ldr	r3, [r6, #0]
 80069d8:	461c      	mov	r4, r3
 80069da:	bb34      	cbnz	r4, 8006a2a <_malloc_r+0x82>
 80069dc:	4629      	mov	r1, r5
 80069de:	4638      	mov	r0, r7
 80069e0:	f7ff ffc2 	bl	8006968 <sbrk_aligned>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	4604      	mov	r4, r0
 80069e8:	d14d      	bne.n	8006a86 <_malloc_r+0xde>
 80069ea:	6834      	ldr	r4, [r6, #0]
 80069ec:	4626      	mov	r6, r4
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d140      	bne.n	8006a74 <_malloc_r+0xcc>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	4631      	mov	r1, r6
 80069f6:	4638      	mov	r0, r7
 80069f8:	eb04 0803 	add.w	r8, r4, r3
 80069fc:	f000 f9a2 	bl	8006d44 <_sbrk_r>
 8006a00:	4580      	cmp	r8, r0
 8006a02:	d13a      	bne.n	8006a7a <_malloc_r+0xd2>
 8006a04:	6821      	ldr	r1, [r4, #0]
 8006a06:	3503      	adds	r5, #3
 8006a08:	1a6d      	subs	r5, r5, r1
 8006a0a:	f025 0503 	bic.w	r5, r5, #3
 8006a0e:	3508      	adds	r5, #8
 8006a10:	2d0c      	cmp	r5, #12
 8006a12:	bf38      	it	cc
 8006a14:	250c      	movcc	r5, #12
 8006a16:	4629      	mov	r1, r5
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff ffa5 	bl	8006968 <sbrk_aligned>
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d02b      	beq.n	8006a7a <_malloc_r+0xd2>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	442b      	add	r3, r5
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e00e      	b.n	8006a48 <_malloc_r+0xa0>
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	1b52      	subs	r2, r2, r5
 8006a2e:	d41e      	bmi.n	8006a6e <_malloc_r+0xc6>
 8006a30:	2a0b      	cmp	r2, #11
 8006a32:	d916      	bls.n	8006a62 <_malloc_r+0xba>
 8006a34:	1961      	adds	r1, r4, r5
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	6025      	str	r5, [r4, #0]
 8006a3a:	bf18      	it	ne
 8006a3c:	6059      	strne	r1, [r3, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	bf08      	it	eq
 8006a42:	6031      	streq	r1, [r6, #0]
 8006a44:	5162      	str	r2, [r4, r5]
 8006a46:	604b      	str	r3, [r1, #4]
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f104 060b 	add.w	r6, r4, #11
 8006a4e:	f000 fb5d 	bl	800710c <__malloc_unlock>
 8006a52:	f026 0607 	bic.w	r6, r6, #7
 8006a56:	1d23      	adds	r3, r4, #4
 8006a58:	1af2      	subs	r2, r6, r3
 8006a5a:	d0b6      	beq.n	80069ca <_malloc_r+0x22>
 8006a5c:	1b9b      	subs	r3, r3, r6
 8006a5e:	50a3      	str	r3, [r4, r2]
 8006a60:	e7b3      	b.n	80069ca <_malloc_r+0x22>
 8006a62:	6862      	ldr	r2, [r4, #4]
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	bf0c      	ite	eq
 8006a68:	6032      	streq	r2, [r6, #0]
 8006a6a:	605a      	strne	r2, [r3, #4]
 8006a6c:	e7ec      	b.n	8006a48 <_malloc_r+0xa0>
 8006a6e:	4623      	mov	r3, r4
 8006a70:	6864      	ldr	r4, [r4, #4]
 8006a72:	e7b2      	b.n	80069da <_malloc_r+0x32>
 8006a74:	4634      	mov	r4, r6
 8006a76:	6876      	ldr	r6, [r6, #4]
 8006a78:	e7b9      	b.n	80069ee <_malloc_r+0x46>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f000 fb44 	bl	800710c <__malloc_unlock>
 8006a84:	e7a1      	b.n	80069ca <_malloc_r+0x22>
 8006a86:	6025      	str	r5, [r4, #0]
 8006a88:	e7de      	b.n	8006a48 <_malloc_r+0xa0>
 8006a8a:	bf00      	nop
 8006a8c:	200002dc 	.word	0x200002dc

08006a90 <__sfputc_r>:
 8006a90:	6893      	ldr	r3, [r2, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	b410      	push	{r4}
 8006a98:	6093      	str	r3, [r2, #8]
 8006a9a:	da08      	bge.n	8006aae <__sfputc_r+0x1e>
 8006a9c:	6994      	ldr	r4, [r2, #24]
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	db01      	blt.n	8006aa6 <__sfputc_r+0x16>
 8006aa2:	290a      	cmp	r1, #10
 8006aa4:	d103      	bne.n	8006aae <__sfputc_r+0x1e>
 8006aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aaa:	f000 b99f 	b.w	8006dec <__swbuf_r>
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	1c58      	adds	r0, r3, #1
 8006ab2:	6010      	str	r0, [r2, #0]
 8006ab4:	7019      	strb	r1, [r3, #0]
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <__sfputs_r>:
 8006abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	18d5      	adds	r5, r2, r3
 8006ac8:	42ac      	cmp	r4, r5
 8006aca:	d101      	bne.n	8006ad0 <__sfputs_r+0x12>
 8006acc:	2000      	movs	r0, #0
 8006ace:	e007      	b.n	8006ae0 <__sfputs_r+0x22>
 8006ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff ffda 	bl	8006a90 <__sfputc_r>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d1f3      	bne.n	8006ac8 <__sfputs_r+0xa>
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae4 <_vfiprintf_r>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	460d      	mov	r5, r1
 8006aea:	b09d      	sub	sp, #116	; 0x74
 8006aec:	4614      	mov	r4, r2
 8006aee:	4698      	mov	r8, r3
 8006af0:	4606      	mov	r6, r0
 8006af2:	b118      	cbz	r0, 8006afc <_vfiprintf_r+0x18>
 8006af4:	6983      	ldr	r3, [r0, #24]
 8006af6:	b90b      	cbnz	r3, 8006afc <_vfiprintf_r+0x18>
 8006af8:	f7ff fa94 	bl	8006024 <__sinit>
 8006afc:	4b89      	ldr	r3, [pc, #548]	; (8006d24 <_vfiprintf_r+0x240>)
 8006afe:	429d      	cmp	r5, r3
 8006b00:	d11b      	bne.n	8006b3a <_vfiprintf_r+0x56>
 8006b02:	6875      	ldr	r5, [r6, #4]
 8006b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	d405      	bmi.n	8006b16 <_vfiprintf_r+0x32>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	059a      	lsls	r2, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_vfiprintf_r+0x32>
 8006b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b12:	f7ff fb2a 	bl	800616a <__retarget_lock_acquire_recursive>
 8006b16:	89ab      	ldrh	r3, [r5, #12]
 8006b18:	071b      	lsls	r3, r3, #28
 8006b1a:	d501      	bpl.n	8006b20 <_vfiprintf_r+0x3c>
 8006b1c:	692b      	ldr	r3, [r5, #16]
 8006b1e:	b9eb      	cbnz	r3, 8006b5c <_vfiprintf_r+0x78>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 f9b4 	bl	8006e90 <__swsetup_r>
 8006b28:	b1c0      	cbz	r0, 8006b5c <_vfiprintf_r+0x78>
 8006b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2c:	07dc      	lsls	r4, r3, #31
 8006b2e:	d50e      	bpl.n	8006b4e <_vfiprintf_r+0x6a>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b34:	b01d      	add	sp, #116	; 0x74
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	4b7b      	ldr	r3, [pc, #492]	; (8006d28 <_vfiprintf_r+0x244>)
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	d101      	bne.n	8006b44 <_vfiprintf_r+0x60>
 8006b40:	68b5      	ldr	r5, [r6, #8]
 8006b42:	e7df      	b.n	8006b04 <_vfiprintf_r+0x20>
 8006b44:	4b79      	ldr	r3, [pc, #484]	; (8006d2c <_vfiprintf_r+0x248>)
 8006b46:	429d      	cmp	r5, r3
 8006b48:	bf08      	it	eq
 8006b4a:	68f5      	ldreq	r5, [r6, #12]
 8006b4c:	e7da      	b.n	8006b04 <_vfiprintf_r+0x20>
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	0598      	lsls	r0, r3, #22
 8006b52:	d4ed      	bmi.n	8006b30 <_vfiprintf_r+0x4c>
 8006b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b56:	f7ff fb09 	bl	800616c <__retarget_lock_release_recursive>
 8006b5a:	e7e9      	b.n	8006b30 <_vfiprintf_r+0x4c>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b60:	2320      	movs	r3, #32
 8006b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b6a:	2330      	movs	r3, #48	; 0x30
 8006b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d30 <_vfiprintf_r+0x24c>
 8006b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b74:	f04f 0901 	mov.w	r9, #1
 8006b78:	4623      	mov	r3, r4
 8006b7a:	469a      	mov	sl, r3
 8006b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b80:	b10a      	cbz	r2, 8006b86 <_vfiprintf_r+0xa2>
 8006b82:	2a25      	cmp	r2, #37	; 0x25
 8006b84:	d1f9      	bne.n	8006b7a <_vfiprintf_r+0x96>
 8006b86:	ebba 0b04 	subs.w	fp, sl, r4
 8006b8a:	d00b      	beq.n	8006ba4 <_vfiprintf_r+0xc0>
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	4622      	mov	r2, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ff93 	bl	8006abe <__sfputs_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f000 80aa 	beq.w	8006cf2 <_vfiprintf_r+0x20e>
 8006b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba0:	445a      	add	r2, fp
 8006ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a2 	beq.w	8006cf2 <_vfiprintf_r+0x20e>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	9307      	str	r3, [sp, #28]
 8006bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006bc6:	4654      	mov	r4, sl
 8006bc8:	2205      	movs	r2, #5
 8006bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bce:	4858      	ldr	r0, [pc, #352]	; (8006d30 <_vfiprintf_r+0x24c>)
 8006bd0:	f7f9 fb06 	bl	80001e0 <memchr>
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	b9d8      	cbnz	r0, 8006c10 <_vfiprintf_r+0x12c>
 8006bd8:	06d1      	lsls	r1, r2, #27
 8006bda:	bf44      	itt	mi
 8006bdc:	2320      	movmi	r3, #32
 8006bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be2:	0713      	lsls	r3, r2, #28
 8006be4:	bf44      	itt	mi
 8006be6:	232b      	movmi	r3, #43	; 0x2b
 8006be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bec:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf2:	d015      	beq.n	8006c20 <_vfiprintf_r+0x13c>
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	4654      	mov	r4, sl
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f04f 0c0a 	mov.w	ip, #10
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c04:	3b30      	subs	r3, #48	; 0x30
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d94e      	bls.n	8006ca8 <_vfiprintf_r+0x1c4>
 8006c0a:	b1b0      	cbz	r0, 8006c3a <_vfiprintf_r+0x156>
 8006c0c:	9207      	str	r2, [sp, #28]
 8006c0e:	e014      	b.n	8006c3a <_vfiprintf_r+0x156>
 8006c10:	eba0 0308 	sub.w	r3, r0, r8
 8006c14:	fa09 f303 	lsl.w	r3, r9, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	46a2      	mov	sl, r4
 8006c1e:	e7d2      	b.n	8006bc6 <_vfiprintf_r+0xe2>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	9103      	str	r1, [sp, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfbb      	ittet	lt
 8006c2c:	425b      	neglt	r3, r3
 8006c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c32:	9307      	strge	r3, [sp, #28]
 8006c34:	9307      	strlt	r3, [sp, #28]
 8006c36:	bfb8      	it	lt
 8006c38:	9204      	strlt	r2, [sp, #16]
 8006c3a:	7823      	ldrb	r3, [r4, #0]
 8006c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c3e:	d10c      	bne.n	8006c5a <_vfiprintf_r+0x176>
 8006c40:	7863      	ldrb	r3, [r4, #1]
 8006c42:	2b2a      	cmp	r3, #42	; 0x2a
 8006c44:	d135      	bne.n	8006cb2 <_vfiprintf_r+0x1ce>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	9203      	str	r2, [sp, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bfb8      	it	lt
 8006c52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c56:	3402      	adds	r4, #2
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d40 <_vfiprintf_r+0x25c>
 8006c5e:	7821      	ldrb	r1, [r4, #0]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4650      	mov	r0, sl
 8006c64:	f7f9 fabc 	bl	80001e0 <memchr>
 8006c68:	b140      	cbz	r0, 8006c7c <_vfiprintf_r+0x198>
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	eba0 000a 	sub.w	r0, r0, sl
 8006c70:	fa03 f000 	lsl.w	r0, r3, r0
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	4303      	orrs	r3, r0
 8006c78:	3401      	adds	r4, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	482c      	ldr	r0, [pc, #176]	; (8006d34 <_vfiprintf_r+0x250>)
 8006c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c86:	2206      	movs	r2, #6
 8006c88:	f7f9 faaa 	bl	80001e0 <memchr>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d03f      	beq.n	8006d10 <_vfiprintf_r+0x22c>
 8006c90:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <_vfiprintf_r+0x254>)
 8006c92:	bb1b      	cbnz	r3, 8006cdc <_vfiprintf_r+0x1f8>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	3307      	adds	r3, #7
 8006c98:	f023 0307 	bic.w	r3, r3, #7
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca2:	443b      	add	r3, r7
 8006ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca6:	e767      	b.n	8006b78 <_vfiprintf_r+0x94>
 8006ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cac:	460c      	mov	r4, r1
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e7a5      	b.n	8006bfe <_vfiprintf_r+0x11a>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc4:	3a30      	subs	r2, #48	; 0x30
 8006cc6:	2a09      	cmp	r2, #9
 8006cc8:	d903      	bls.n	8006cd2 <_vfiprintf_r+0x1ee>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0c5      	beq.n	8006c5a <_vfiprintf_r+0x176>
 8006cce:	9105      	str	r1, [sp, #20]
 8006cd0:	e7c3      	b.n	8006c5a <_vfiprintf_r+0x176>
 8006cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e7f0      	b.n	8006cbe <_vfiprintf_r+0x1da>
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <_vfiprintf_r+0x258>)
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7fd fb4c 	bl	8004384 <_printf_float>
 8006cec:	4607      	mov	r7, r0
 8006cee:	1c78      	adds	r0, r7, #1
 8006cf0:	d1d6      	bne.n	8006ca0 <_vfiprintf_r+0x1bc>
 8006cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cf4:	07d9      	lsls	r1, r3, #31
 8006cf6:	d405      	bmi.n	8006d04 <_vfiprintf_r+0x220>
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	059a      	lsls	r2, r3, #22
 8006cfc:	d402      	bmi.n	8006d04 <_vfiprintf_r+0x220>
 8006cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d00:	f7ff fa34 	bl	800616c <__retarget_lock_release_recursive>
 8006d04:	89ab      	ldrh	r3, [r5, #12]
 8006d06:	065b      	lsls	r3, r3, #25
 8006d08:	f53f af12 	bmi.w	8006b30 <_vfiprintf_r+0x4c>
 8006d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d0e:	e711      	b.n	8006b34 <_vfiprintf_r+0x50>
 8006d10:	ab03      	add	r3, sp, #12
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	462a      	mov	r2, r5
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <_vfiprintf_r+0x258>)
 8006d18:	a904      	add	r1, sp, #16
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7fd fdd6 	bl	80048cc <_printf_i>
 8006d20:	e7e4      	b.n	8006cec <_vfiprintf_r+0x208>
 8006d22:	bf00      	nop
 8006d24:	08007bf4 	.word	0x08007bf4
 8006d28:	08007c14 	.word	0x08007c14
 8006d2c:	08007bd4 	.word	0x08007bd4
 8006d30:	08007d8c 	.word	0x08007d8c
 8006d34:	08007d96 	.word	0x08007d96
 8006d38:	08004385 	.word	0x08004385
 8006d3c:	08006abf 	.word	0x08006abf
 8006d40:	08007d92 	.word	0x08007d92

08006d44 <_sbrk_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d06      	ldr	r5, [pc, #24]	; (8006d60 <_sbrk_r+0x1c>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	f7fa fcc4 	bl	80016dc <_sbrk>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_sbrk_r+0x1a>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_sbrk_r+0x1a>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	200002e4 	.word	0x200002e4

08006d64 <__sread>:
 8006d64:	b510      	push	{r4, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	f000 f9d4 	bl	8007118 <_read_r>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	bfab      	itete	ge
 8006d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d76:	89a3      	ldrhlt	r3, [r4, #12]
 8006d78:	181b      	addge	r3, r3, r0
 8006d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d7e:	bfac      	ite	ge
 8006d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d82:	81a3      	strhlt	r3, [r4, #12]
 8006d84:	bd10      	pop	{r4, pc}

08006d86 <__swrite>:
 8006d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	898b      	ldrh	r3, [r1, #12]
 8006d8e:	05db      	lsls	r3, r3, #23
 8006d90:	4605      	mov	r5, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	4616      	mov	r6, r2
 8006d96:	d505      	bpl.n	8006da4 <__swrite+0x1e>
 8006d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f000 f924 	bl	8006fec <_lseek_r>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	4628      	mov	r0, r5
 8006db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dba:	f7fe b94f 	b.w	800505c <_write_r>

08006dbe <__sseek>:
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc6:	f000 f911 	bl	8006fec <_lseek_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	bf15      	itete	ne
 8006dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dda:	81a3      	strheq	r3, [r4, #12]
 8006ddc:	bf18      	it	ne
 8006dde:	81a3      	strhne	r3, [r4, #12]
 8006de0:	bd10      	pop	{r4, pc}

08006de2 <__sclose>:
 8006de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de6:	f000 b8df 	b.w	8006fa8 <_close_r>
	...

08006dec <__swbuf_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	460e      	mov	r6, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	4605      	mov	r5, r0
 8006df4:	b118      	cbz	r0, 8006dfe <__swbuf_r+0x12>
 8006df6:	6983      	ldr	r3, [r0, #24]
 8006df8:	b90b      	cbnz	r3, 8006dfe <__swbuf_r+0x12>
 8006dfa:	f7ff f913 	bl	8006024 <__sinit>
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <__swbuf_r+0x98>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d12b      	bne.n	8006e5c <__swbuf_r+0x70>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	69a3      	ldr	r3, [r4, #24]
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	071a      	lsls	r2, r3, #28
 8006e0e:	d52f      	bpl.n	8006e70 <__swbuf_r+0x84>
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	b36b      	cbz	r3, 8006e70 <__swbuf_r+0x84>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	1ac0      	subs	r0, r0, r3
 8006e1a:	6963      	ldr	r3, [r4, #20]
 8006e1c:	b2f6      	uxtb	r6, r6
 8006e1e:	4283      	cmp	r3, r0
 8006e20:	4637      	mov	r7, r6
 8006e22:	dc04      	bgt.n	8006e2e <__swbuf_r+0x42>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7ff f82a 	bl	8005e80 <_fflush_r>
 8006e2c:	bb30      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	60a3      	str	r3, [r4, #8]
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	701e      	strb	r6, [r3, #0]
 8006e3c:	6963      	ldr	r3, [r4, #20]
 8006e3e:	3001      	adds	r0, #1
 8006e40:	4283      	cmp	r3, r0
 8006e42:	d004      	beq.n	8006e4e <__swbuf_r+0x62>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	07db      	lsls	r3, r3, #31
 8006e48:	d506      	bpl.n	8006e58 <__swbuf_r+0x6c>
 8006e4a:	2e0a      	cmp	r6, #10
 8006e4c:	d104      	bne.n	8006e58 <__swbuf_r+0x6c>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f7ff f815 	bl	8005e80 <_fflush_r>
 8006e56:	b988      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <__swbuf_r+0x9c>)
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d101      	bne.n	8006e66 <__swbuf_r+0x7a>
 8006e62:	68ac      	ldr	r4, [r5, #8]
 8006e64:	e7cf      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <__swbuf_r+0xa0>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	bf08      	it	eq
 8006e6c:	68ec      	ldreq	r4, [r5, #12]
 8006e6e:	e7ca      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f80c 	bl	8006e90 <__swsetup_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d0cb      	beq.n	8006e14 <__swbuf_r+0x28>
 8006e7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e80:	e7ea      	b.n	8006e58 <__swbuf_r+0x6c>
 8006e82:	bf00      	nop
 8006e84:	08007bf4 	.word	0x08007bf4
 8006e88:	08007c14 	.word	0x08007c14
 8006e8c:	08007bd4 	.word	0x08007bd4

08006e90 <__swsetup_r>:
 8006e90:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <__swsetup_r+0xcc>)
 8006e92:	b570      	push	{r4, r5, r6, lr}
 8006e94:	681d      	ldr	r5, [r3, #0]
 8006e96:	4606      	mov	r6, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	b125      	cbz	r5, 8006ea6 <__swsetup_r+0x16>
 8006e9c:	69ab      	ldr	r3, [r5, #24]
 8006e9e:	b913      	cbnz	r3, 8006ea6 <__swsetup_r+0x16>
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f7ff f8bf 	bl	8006024 <__sinit>
 8006ea6:	4b2e      	ldr	r3, [pc, #184]	; (8006f60 <__swsetup_r+0xd0>)
 8006ea8:	429c      	cmp	r4, r3
 8006eaa:	d10f      	bne.n	8006ecc <__swsetup_r+0x3c>
 8006eac:	686c      	ldr	r4, [r5, #4]
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb4:	0719      	lsls	r1, r3, #28
 8006eb6:	d42c      	bmi.n	8006f12 <__swsetup_r+0x82>
 8006eb8:	06dd      	lsls	r5, r3, #27
 8006eba:	d411      	bmi.n	8006ee0 <__swsetup_r+0x50>
 8006ebc:	2309      	movs	r3, #9
 8006ebe:	6033      	str	r3, [r6, #0]
 8006ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eca:	e03e      	b.n	8006f4a <__swsetup_r+0xba>
 8006ecc:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <__swsetup_r+0xd4>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d101      	bne.n	8006ed6 <__swsetup_r+0x46>
 8006ed2:	68ac      	ldr	r4, [r5, #8]
 8006ed4:	e7eb      	b.n	8006eae <__swsetup_r+0x1e>
 8006ed6:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <__swsetup_r+0xd8>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	bf08      	it	eq
 8006edc:	68ec      	ldreq	r4, [r5, #12]
 8006ede:	e7e6      	b.n	8006eae <__swsetup_r+0x1e>
 8006ee0:	0758      	lsls	r0, r3, #29
 8006ee2:	d512      	bpl.n	8006f0a <__swsetup_r+0x7a>
 8006ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee6:	b141      	cbz	r1, 8006efa <__swsetup_r+0x6a>
 8006ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <__swsetup_r+0x66>
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7ff fced 	bl	80068d0 <_free_r>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	2300      	movs	r3, #0
 8006f04:	6063      	str	r3, [r4, #4]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f043 0308 	orr.w	r3, r3, #8
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	b94b      	cbnz	r3, 8006f2a <__swsetup_r+0x9a>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f20:	d003      	beq.n	8006f2a <__swsetup_r+0x9a>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f899 	bl	800705c <__smakebuf_r>
 8006f2a:	89a0      	ldrh	r0, [r4, #12]
 8006f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f30:	f010 0301 	ands.w	r3, r0, #1
 8006f34:	d00a      	beq.n	8006f4c <__swsetup_r+0xbc>
 8006f36:	2300      	movs	r3, #0
 8006f38:	60a3      	str	r3, [r4, #8]
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	61a3      	str	r3, [r4, #24]
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	b943      	cbnz	r3, 8006f56 <__swsetup_r+0xc6>
 8006f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f48:	d1ba      	bne.n	8006ec0 <__swsetup_r+0x30>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	0781      	lsls	r1, r0, #30
 8006f4e:	bf58      	it	pl
 8006f50:	6963      	ldrpl	r3, [r4, #20]
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	e7f4      	b.n	8006f40 <__swsetup_r+0xb0>
 8006f56:	2000      	movs	r0, #0
 8006f58:	e7f7      	b.n	8006f4a <__swsetup_r+0xba>
 8006f5a:	bf00      	nop
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	08007bf4 	.word	0x08007bf4
 8006f64:	08007c14 	.word	0x08007c14
 8006f68:	08007bd4 	.word	0x08007bd4

08006f6c <__assert_func>:
 8006f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f6e:	4614      	mov	r4, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <__assert_func+0x2c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4605      	mov	r5, r0
 8006f78:	68d8      	ldr	r0, [r3, #12]
 8006f7a:	b14c      	cbz	r4, 8006f90 <__assert_func+0x24>
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <__assert_func+0x30>)
 8006f7e:	9100      	str	r1, [sp, #0]
 8006f80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f84:	4906      	ldr	r1, [pc, #24]	; (8006fa0 <__assert_func+0x34>)
 8006f86:	462b      	mov	r3, r5
 8006f88:	f000 f81e 	bl	8006fc8 <fiprintf>
 8006f8c:	f000 f8e3 	bl	8007156 <abort>
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <__assert_func+0x38>)
 8006f92:	461c      	mov	r4, r3
 8006f94:	e7f3      	b.n	8006f7e <__assert_func+0x12>
 8006f96:	bf00      	nop
 8006f98:	2000000c 	.word	0x2000000c
 8006f9c:	08007d9d 	.word	0x08007d9d
 8006fa0:	08007daa 	.word	0x08007daa
 8006fa4:	08007dd8 	.word	0x08007dd8

08006fa8 <_close_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_close_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fa fb5e 	bl	8001674 <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_close_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_close_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	200002e4 	.word	0x200002e4

08006fc8 <fiprintf>:
 8006fc8:	b40e      	push	{r1, r2, r3}
 8006fca:	b503      	push	{r0, r1, lr}
 8006fcc:	4601      	mov	r1, r0
 8006fce:	ab03      	add	r3, sp, #12
 8006fd0:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <fiprintf+0x20>)
 8006fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd6:	6800      	ldr	r0, [r0, #0]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	f7ff fd83 	bl	8006ae4 <_vfiprintf_r>
 8006fde:	b002      	add	sp, #8
 8006fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe4:	b003      	add	sp, #12
 8006fe6:	4770      	bx	lr
 8006fe8:	2000000c 	.word	0x2000000c

08006fec <_lseek_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	; (800700c <_lseek_r+0x20>)
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fa fb61 	bl	80016c2 <_lseek>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_lseek_r+0x1e>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_lseek_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	200002e4 	.word	0x200002e4

08007010 <__swhatbuf_r>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	460e      	mov	r6, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	2900      	cmp	r1, #0
 800701a:	b096      	sub	sp, #88	; 0x58
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	da08      	bge.n	8007034 <__swhatbuf_r+0x24>
 8007022:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	061a      	lsls	r2, r3, #24
 800702c:	d410      	bmi.n	8007050 <__swhatbuf_r+0x40>
 800702e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007032:	e00e      	b.n	8007052 <__swhatbuf_r+0x42>
 8007034:	466a      	mov	r2, sp
 8007036:	f000 f895 	bl	8007164 <_fstat_r>
 800703a:	2800      	cmp	r0, #0
 800703c:	dbf1      	blt.n	8007022 <__swhatbuf_r+0x12>
 800703e:	9a01      	ldr	r2, [sp, #4]
 8007040:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007044:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007048:	425a      	negs	r2, r3
 800704a:	415a      	adcs	r2, r3
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	e7ee      	b.n	800702e <__swhatbuf_r+0x1e>
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	2000      	movs	r0, #0
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	b016      	add	sp, #88	; 0x58
 8007058:	bd70      	pop	{r4, r5, r6, pc}
	...

0800705c <__smakebuf_r>:
 800705c:	898b      	ldrh	r3, [r1, #12]
 800705e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007060:	079d      	lsls	r5, r3, #30
 8007062:	4606      	mov	r6, r0
 8007064:	460c      	mov	r4, r1
 8007066:	d507      	bpl.n	8007078 <__smakebuf_r+0x1c>
 8007068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	2301      	movs	r3, #1
 8007072:	6163      	str	r3, [r4, #20]
 8007074:	b002      	add	sp, #8
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	ab01      	add	r3, sp, #4
 800707a:	466a      	mov	r2, sp
 800707c:	f7ff ffc8 	bl	8007010 <__swhatbuf_r>
 8007080:	9900      	ldr	r1, [sp, #0]
 8007082:	4605      	mov	r5, r0
 8007084:	4630      	mov	r0, r6
 8007086:	f7ff fc8f 	bl	80069a8 <_malloc_r>
 800708a:	b948      	cbnz	r0, 80070a0 <__smakebuf_r+0x44>
 800708c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007090:	059a      	lsls	r2, r3, #22
 8007092:	d4ef      	bmi.n	8007074 <__smakebuf_r+0x18>
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	f043 0302 	orr.w	r3, r3, #2
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	e7e3      	b.n	8007068 <__smakebuf_r+0xc>
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <__smakebuf_r+0x7c>)
 80070a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	6020      	str	r0, [r4, #0]
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	6163      	str	r3, [r4, #20]
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	6120      	str	r0, [r4, #16]
 80070b6:	b15b      	cbz	r3, 80070d0 <__smakebuf_r+0x74>
 80070b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 f863 	bl	8007188 <_isatty_r>
 80070c2:	b128      	cbz	r0, 80070d0 <__smakebuf_r+0x74>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	89a0      	ldrh	r0, [r4, #12]
 80070d2:	4305      	orrs	r5, r0
 80070d4:	81a5      	strh	r5, [r4, #12]
 80070d6:	e7cd      	b.n	8007074 <__smakebuf_r+0x18>
 80070d8:	08005fbd 	.word	0x08005fbd

080070dc <__ascii_mbtowc>:
 80070dc:	b082      	sub	sp, #8
 80070de:	b901      	cbnz	r1, 80070e2 <__ascii_mbtowc+0x6>
 80070e0:	a901      	add	r1, sp, #4
 80070e2:	b142      	cbz	r2, 80070f6 <__ascii_mbtowc+0x1a>
 80070e4:	b14b      	cbz	r3, 80070fa <__ascii_mbtowc+0x1e>
 80070e6:	7813      	ldrb	r3, [r2, #0]
 80070e8:	600b      	str	r3, [r1, #0]
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	1e10      	subs	r0, r2, #0
 80070ee:	bf18      	it	ne
 80070f0:	2001      	movne	r0, #1
 80070f2:	b002      	add	sp, #8
 80070f4:	4770      	bx	lr
 80070f6:	4610      	mov	r0, r2
 80070f8:	e7fb      	b.n	80070f2 <__ascii_mbtowc+0x16>
 80070fa:	f06f 0001 	mvn.w	r0, #1
 80070fe:	e7f8      	b.n	80070f2 <__ascii_mbtowc+0x16>

08007100 <__malloc_lock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_lock+0x8>)
 8007102:	f7ff b832 	b.w	800616a <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	200002d8 	.word	0x200002d8

0800710c <__malloc_unlock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_unlock+0x8>)
 800710e:	f7ff b82d 	b.w	800616c <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	200002d8 	.word	0x200002d8

08007118 <_read_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	; (8007138 <_read_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f7fa fa6b 	bl	8001602 <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_read_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_read_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	200002e4 	.word	0x200002e4

0800713c <__ascii_wctomb>:
 800713c:	b149      	cbz	r1, 8007152 <__ascii_wctomb+0x16>
 800713e:	2aff      	cmp	r2, #255	; 0xff
 8007140:	bf85      	ittet	hi
 8007142:	238a      	movhi	r3, #138	; 0x8a
 8007144:	6003      	strhi	r3, [r0, #0]
 8007146:	700a      	strbls	r2, [r1, #0]
 8007148:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800714c:	bf98      	it	ls
 800714e:	2001      	movls	r0, #1
 8007150:	4770      	bx	lr
 8007152:	4608      	mov	r0, r1
 8007154:	4770      	bx	lr

08007156 <abort>:
 8007156:	b508      	push	{r3, lr}
 8007158:	2006      	movs	r0, #6
 800715a:	f000 f84d 	bl	80071f8 <raise>
 800715e:	2001      	movs	r0, #1
 8007160:	f7fa fa45 	bl	80015ee <_exit>

08007164 <_fstat_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	; (8007184 <_fstat_r+0x20>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f7fa fa8b 	bl	800168c <_fstat>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_fstat_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_fstat_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	200002e4 	.word	0x200002e4

08007188 <_isatty_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d06      	ldr	r5, [pc, #24]	; (80071a4 <_isatty_r+0x1c>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	f7fa fa8a 	bl	80016ac <_isatty>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_isatty_r+0x1a>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_isatty_r+0x1a>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	200002e4 	.word	0x200002e4

080071a8 <_raise_r>:
 80071a8:	291f      	cmp	r1, #31
 80071aa:	b538      	push	{r3, r4, r5, lr}
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	d904      	bls.n	80071bc <_raise_r+0x14>
 80071b2:	2316      	movs	r3, #22
 80071b4:	6003      	str	r3, [r0, #0]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071be:	b112      	cbz	r2, 80071c6 <_raise_r+0x1e>
 80071c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071c4:	b94b      	cbnz	r3, 80071da <_raise_r+0x32>
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f830 	bl	800722c <_getpid_r>
 80071cc:	462a      	mov	r2, r5
 80071ce:	4601      	mov	r1, r0
 80071d0:	4620      	mov	r0, r4
 80071d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d6:	f000 b817 	b.w	8007208 <_kill_r>
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d00a      	beq.n	80071f4 <_raise_r+0x4c>
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	d103      	bne.n	80071ea <_raise_r+0x42>
 80071e2:	2316      	movs	r3, #22
 80071e4:	6003      	str	r3, [r0, #0]
 80071e6:	2001      	movs	r0, #1
 80071e8:	e7e7      	b.n	80071ba <_raise_r+0x12>
 80071ea:	2400      	movs	r4, #0
 80071ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071f0:	4628      	mov	r0, r5
 80071f2:	4798      	blx	r3
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7e0      	b.n	80071ba <_raise_r+0x12>

080071f8 <raise>:
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <raise+0xc>)
 80071fa:	4601      	mov	r1, r0
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f7ff bfd3 	b.w	80071a8 <_raise_r>
 8007202:	bf00      	nop
 8007204:	2000000c 	.word	0x2000000c

08007208 <_kill_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	; (8007228 <_kill_r+0x20>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f7fa f9da 	bl	80015ce <_kill>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d102      	bne.n	8007224 <_kill_r+0x1c>
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	b103      	cbz	r3, 8007224 <_kill_r+0x1c>
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	200002e4 	.word	0x200002e4

0800722c <_getpid_r>:
 800722c:	f7fa b9c7 	b.w	80015be <_getpid>

08007230 <sqrt>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	ed2d 8b02 	vpush	{d8}
 8007236:	ec55 4b10 	vmov	r4, r5, d0
 800723a:	f000 f825 	bl	8007288 <__ieee754_sqrt>
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	eeb0 8a40 	vmov.f32	s16, s0
 800724a:	eef0 8a60 	vmov.f32	s17, s1
 800724e:	f7f9 fc6d 	bl	8000b2c <__aeabi_dcmpun>
 8007252:	b990      	cbnz	r0, 800727a <sqrt+0x4a>
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8007260:	b158      	cbz	r0, 800727a <sqrt+0x4a>
 8007262:	f7fc ffbd 	bl	80041e0 <__errno>
 8007266:	2321      	movs	r3, #33	; 0x21
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f7f9 faeb 	bl	800084c <__aeabi_ddiv>
 8007276:	ec41 0b18 	vmov	d8, r0, r1
 800727a:	eeb0 0a48 	vmov.f32	s0, s16
 800727e:	eef0 0a68 	vmov.f32	s1, s17
 8007282:	ecbd 8b02 	vpop	{d8}
 8007286:	bd38      	pop	{r3, r4, r5, pc}

08007288 <__ieee754_sqrt>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	ec55 4b10 	vmov	r4, r5, d0
 8007290:	4e55      	ldr	r6, [pc, #340]	; (80073e8 <__ieee754_sqrt+0x160>)
 8007292:	43ae      	bics	r6, r5
 8007294:	ee10 0a10 	vmov	r0, s0
 8007298:	ee10 3a10 	vmov	r3, s0
 800729c:	462a      	mov	r2, r5
 800729e:	4629      	mov	r1, r5
 80072a0:	d110      	bne.n	80072c4 <__ieee754_sqrt+0x3c>
 80072a2:	ee10 2a10 	vmov	r2, s0
 80072a6:	462b      	mov	r3, r5
 80072a8:	f7f9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4620      	mov	r0, r4
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7f8 ffea 	bl	800028c <__adddf3>
 80072b8:	4604      	mov	r4, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	ec45 4b10 	vmov	d0, r4, r5
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	dc10      	bgt.n	80072ea <__ieee754_sqrt+0x62>
 80072c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072cc:	4330      	orrs	r0, r6
 80072ce:	d0f5      	beq.n	80072bc <__ieee754_sqrt+0x34>
 80072d0:	b15d      	cbz	r5, 80072ea <__ieee754_sqrt+0x62>
 80072d2:	ee10 2a10 	vmov	r2, s0
 80072d6:	462b      	mov	r3, r5
 80072d8:	ee10 0a10 	vmov	r0, s0
 80072dc:	f7f8 ffd4 	bl	8000288 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	f7f9 fab2 	bl	800084c <__aeabi_ddiv>
 80072e8:	e7e6      	b.n	80072b8 <__ieee754_sqrt+0x30>
 80072ea:	1512      	asrs	r2, r2, #20
 80072ec:	d074      	beq.n	80073d8 <__ieee754_sqrt+0x150>
 80072ee:	07d4      	lsls	r4, r2, #31
 80072f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80072f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80072f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072fc:	bf5e      	ittt	pl
 80072fe:	0fda      	lsrpl	r2, r3, #31
 8007300:	005b      	lslpl	r3, r3, #1
 8007302:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007306:	2400      	movs	r4, #0
 8007308:	0fda      	lsrs	r2, r3, #31
 800730a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800730e:	107f      	asrs	r7, r7, #1
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	2516      	movs	r5, #22
 8007314:	4620      	mov	r0, r4
 8007316:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800731a:	1886      	adds	r6, r0, r2
 800731c:	428e      	cmp	r6, r1
 800731e:	bfde      	ittt	le
 8007320:	1b89      	suble	r1, r1, r6
 8007322:	18b0      	addle	r0, r6, r2
 8007324:	18a4      	addle	r4, r4, r2
 8007326:	0049      	lsls	r1, r1, #1
 8007328:	3d01      	subs	r5, #1
 800732a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800732e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007336:	d1f0      	bne.n	800731a <__ieee754_sqrt+0x92>
 8007338:	462a      	mov	r2, r5
 800733a:	f04f 0e20 	mov.w	lr, #32
 800733e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007342:	4281      	cmp	r1, r0
 8007344:	eb06 0c05 	add.w	ip, r6, r5
 8007348:	dc02      	bgt.n	8007350 <__ieee754_sqrt+0xc8>
 800734a:	d113      	bne.n	8007374 <__ieee754_sqrt+0xec>
 800734c:	459c      	cmp	ip, r3
 800734e:	d811      	bhi.n	8007374 <__ieee754_sqrt+0xec>
 8007350:	f1bc 0f00 	cmp.w	ip, #0
 8007354:	eb0c 0506 	add.w	r5, ip, r6
 8007358:	da43      	bge.n	80073e2 <__ieee754_sqrt+0x15a>
 800735a:	2d00      	cmp	r5, #0
 800735c:	db41      	blt.n	80073e2 <__ieee754_sqrt+0x15a>
 800735e:	f100 0801 	add.w	r8, r0, #1
 8007362:	1a09      	subs	r1, r1, r0
 8007364:	459c      	cmp	ip, r3
 8007366:	bf88      	it	hi
 8007368:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800736c:	eba3 030c 	sub.w	r3, r3, ip
 8007370:	4432      	add	r2, r6
 8007372:	4640      	mov	r0, r8
 8007374:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007378:	f1be 0e01 	subs.w	lr, lr, #1
 800737c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007380:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007384:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007388:	d1db      	bne.n	8007342 <__ieee754_sqrt+0xba>
 800738a:	430b      	orrs	r3, r1
 800738c:	d006      	beq.n	800739c <__ieee754_sqrt+0x114>
 800738e:	1c50      	adds	r0, r2, #1
 8007390:	bf13      	iteet	ne
 8007392:	3201      	addne	r2, #1
 8007394:	3401      	addeq	r4, #1
 8007396:	4672      	moveq	r2, lr
 8007398:	f022 0201 	bicne.w	r2, r2, #1
 800739c:	1063      	asrs	r3, r4, #1
 800739e:	0852      	lsrs	r2, r2, #1
 80073a0:	07e1      	lsls	r1, r4, #31
 80073a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80073a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80073aa:	bf48      	it	mi
 80073ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80073b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80073b4:	4614      	mov	r4, r2
 80073b6:	e781      	b.n	80072bc <__ieee754_sqrt+0x34>
 80073b8:	0ad9      	lsrs	r1, r3, #11
 80073ba:	3815      	subs	r0, #21
 80073bc:	055b      	lsls	r3, r3, #21
 80073be:	2900      	cmp	r1, #0
 80073c0:	d0fa      	beq.n	80073b8 <__ieee754_sqrt+0x130>
 80073c2:	02cd      	lsls	r5, r1, #11
 80073c4:	d50a      	bpl.n	80073dc <__ieee754_sqrt+0x154>
 80073c6:	f1c2 0420 	rsb	r4, r2, #32
 80073ca:	fa23 f404 	lsr.w	r4, r3, r4
 80073ce:	1e55      	subs	r5, r2, #1
 80073d0:	4093      	lsls	r3, r2
 80073d2:	4321      	orrs	r1, r4
 80073d4:	1b42      	subs	r2, r0, r5
 80073d6:	e78a      	b.n	80072ee <__ieee754_sqrt+0x66>
 80073d8:	4610      	mov	r0, r2
 80073da:	e7f0      	b.n	80073be <__ieee754_sqrt+0x136>
 80073dc:	0049      	lsls	r1, r1, #1
 80073de:	3201      	adds	r2, #1
 80073e0:	e7ef      	b.n	80073c2 <__ieee754_sqrt+0x13a>
 80073e2:	4680      	mov	r8, r0
 80073e4:	e7bd      	b.n	8007362 <__ieee754_sqrt+0xda>
 80073e6:	bf00      	nop
 80073e8:	7ff00000 	.word	0x7ff00000

080073ec <_init>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr

080073f8 <_fini>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr
